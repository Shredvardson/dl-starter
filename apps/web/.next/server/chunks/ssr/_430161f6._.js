module.exports = [
  25350,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.DEBUG_BUILD = 'undefined' == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__));
  },
  6325,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.GLOBAL_OBJ = globalThis));
  },
  74898,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.SDK_VERSION = '10.10.0'));
  },
  5356,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(74898),
      e = a.r(6325);
    function f(a) {
      let b = (a.__SENTRY__ = a.__SENTRY__ || {});
      return (
        (b.version = b.version || d.SDK_VERSION),
        (b[d.SDK_VERSION] = b[d.SDK_VERSION] || {})
      );
    }
    ((c.getGlobalSingleton = function (a, b, c = e.GLOBAL_OBJ) {
      let f = (c.__SENTRY__ = c.__SENTRY__ || {}),
        g = (f[d.SDK_VERSION] = f[d.SDK_VERSION] || {});
      return g[a] || (g[a] = b());
    }),
      (c.getMainCarrier = function () {
        return (f(e.GLOBAL_OBJ), e.GLOBAL_OBJ);
      }),
      (c.getSentryCarrier = f));
  },
  43679,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(5356),
      e = a.r(25350),
      f = a.r(6325),
      g = {};
    function h(a) {
      if (!('console' in f.GLOBAL_OBJ)) return a();
      let b = f.GLOBAL_OBJ.console,
        c = {},
        d = Object.keys(g);
      d.forEach((a) => {
        let d = g[a];
        ((c[a] = b[a]), (b[a] = d));
      });
      try {
        return a();
      } finally {
        d.forEach((a) => {
          b[a] = c[a];
        });
      }
    }
    function i() {
      return k().enabled;
    }
    function j(a, ...b) {
      e.DEBUG_BUILD &&
        i() &&
        h(() => {
          f.GLOBAL_OBJ.console[a](`Sentry Logger [${a}]:`, ...b);
        });
    }
    function k() {
      return e.DEBUG_BUILD
        ? d.getGlobalSingleton('loggerSettings', () => ({ enabled: !1 }))
        : { enabled: !1 };
    }
    ((c.CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace']),
      (c.consoleSandbox = h),
      (c.debug = {
        enable: function () {
          k().enabled = !0;
        },
        disable: function () {
          k().enabled = !1;
        },
        isEnabled: i,
        log: function (...a) {
          j('log', ...a);
        },
        warn: function (...a) {
          j('warn', ...a);
        },
        error: function (...a) {
          j('error', ...a);
        },
      }),
      (c.originalConsoleMethods = g));
  },
  1805,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = /\(error: (.*)\)/,
      e = /captureMessage|captureException/;
    function f(...a) {
      let b = a.sort((a, b) => a[0] - b[0]).map((a) => a[1]);
      return (a, c = 0, e = 0) => {
        let f = [],
          h = a.split('\n');
        for (let a = c; a < h.length; a++) {
          let c = h[a];
          c.length > 1024 && (c = c.slice(0, 1024));
          let g = d.test(c) ? c.replace(d, '$1') : c;
          if (!g.match(/\S*Error: /)) {
            for (let a of b) {
              let b = a(g);
              if (b) {
                f.push(b);
                break;
              }
            }
            if (f.length >= 50 + e) break;
          }
        }
        return g(f.slice(e));
      };
    }
    function g(a) {
      if (!a.length) return [];
      let b = Array.from(a);
      return (
        /sentryWrapped/.test(h(b).function || '') && b.pop(),
        b.reverse(),
        e.test(h(b).function || '') && (b.pop(), e.test(h(b).function || '') && b.pop()),
        b
          .slice(0, 50)
          .map((a) => ({
            ...a,
            filename: a.filename || h(b).filename,
            function: a.function || '?',
          }))
      );
    }
    function h(a) {
      return a[a.length - 1] || {};
    }
    let i = '<anonymous>';
    ((c.UNKNOWN_FUNCTION = '?'),
      (c.createStackParser = f),
      (c.getFramesFromEvent = function (a) {
        let b = a.exception;
        if (b) {
          let a = [];
          try {
            return (
              b.values.forEach((b) => {
                b.stacktrace.frames && a.push(...b.stacktrace.frames);
              }),
              a
            );
          } catch {}
        }
      }),
      (c.getFunctionName = function (a) {
        try {
          if (!a || 'function' != typeof a) return i;
          return a.name || i;
        } catch {
          return i;
        }
      }),
      (c.stackParserFromStackParserOptions = function (a) {
        return Array.isArray(a) ? f(...a) : a;
      }),
      (c.stripSentryFramesAndReverse = g));
  },
  44409,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = a.r(1805),
      g = {},
      h = {};
    ((c.addHandler = function (a, b) {
      ((g[a] = g[a] || []), g[a].push(b));
    }),
      (c.maybeInstrument = function (a, b) {
        if (!h[a]) {
          h[a] = !0;
          try {
            b();
          } catch (b) {
            d.DEBUG_BUILD && e.debug.error(`Error while instrumenting ${a}`, b);
          }
        }
      }),
      (c.resetInstrumentationHandlers = function () {
        Object.keys(g).forEach((a) => {
          g[a] = void 0;
        });
      }),
      (c.triggerHandlers = function (a, b) {
        let c = a && g[a];
        if (c)
          for (let g of c)
            try {
              g(b);
            } catch (b) {
              d.DEBUG_BUILD &&
                e.debug.error(
                  `Error while triggering instrumentation handler.
Type: ${a}
Name: ${f.getFunctionName(g)}
Error:`,
                  b
                );
            }
      }));
  },
  64341,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(6325),
      e = a.r(44409),
      f = null;
    function g() {
      ((f = d.GLOBAL_OBJ.onerror),
        (d.GLOBAL_OBJ.onerror = function (a, b, c, d, g) {
          return (
            e.triggerHandlers('error', { column: d, error: g, line: c, msg: a, url: b }),
            !!f && f.apply(this, arguments)
          );
        }),
        (d.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = !0));
    }
    c.addGlobalErrorInstrumentationHandler = function (a) {
      let b = 'error';
      (e.addHandler(b, a), e.maybeInstrument(b, g));
    };
  },
  11677,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(6325),
      e = a.r(44409),
      f = null;
    function g() {
      ((f = d.GLOBAL_OBJ.onunhandledrejection),
        (d.GLOBAL_OBJ.onunhandledrejection = function (a) {
          return (e.triggerHandlers('unhandledrejection', a), !f || f.apply(this, arguments));
        }),
        (d.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = !0));
    }
    c.addGlobalUnhandledRejectionInstrumentationHandler = function (a) {
      let b = 'unhandledrejection';
      (e.addHandler(b, a), e.maybeInstrument(b, g));
    };
  },
  59242,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = Object.prototype.toString;
    function e(a, b) {
      return d.call(a) === `[object ${b}]`;
    }
    function f(a) {
      return (
        'object' == typeof a &&
        null !== a &&
        '__sentry_template_string__' in a &&
        '__sentry_template_values__' in a
      );
    }
    function g(a) {
      return e(a, 'Object');
    }
    function h(a, b) {
      try {
        return a instanceof b;
      } catch {
        return !1;
      }
    }
    ((c.isDOMError = function (a) {
      return e(a, 'DOMError');
    }),
      (c.isDOMException = function (a) {
        return e(a, 'DOMException');
      }),
      (c.isElement = function (a) {
        return 'undefined' != typeof Element && h(a, Element);
      }),
      (c.isError = function (a) {
        switch (d.call(a)) {
          case '[object Error]':
          case '[object Exception]':
          case '[object DOMException]':
          case '[object WebAssembly.Exception]':
            return !0;
          default:
            return h(a, Error);
        }
      }),
      (c.isErrorEvent = function (a) {
        return e(a, 'ErrorEvent');
      }),
      (c.isEvent = function (a) {
        return 'undefined' != typeof Event && h(a, Event);
      }),
      (c.isInstanceOf = h),
      (c.isParameterizedString = f),
      (c.isPlainObject = g),
      (c.isPrimitive = function (a) {
        return null === a || f(a) || ('object' != typeof a && 'function' != typeof a);
      }),
      (c.isRegExp = function (a) {
        return e(a, 'RegExp');
      }),
      (c.isRequest = function (a) {
        return 'undefined' != typeof Request && h(a, Request);
      }),
      (c.isString = function (a) {
        return e(a, 'String');
      }),
      (c.isSyntheticEvent = function (a) {
        return g(a) && 'nativeEvent' in a && 'preventDefault' in a && 'stopPropagation' in a;
      }),
      (c.isThenable = function (a) {
        return !!(a?.then && 'function' == typeof a.then);
      }),
      (c.isVueViewModel = function (a) {
        return !!('object' == typeof a && null !== a && (a.__isVue || a._isVue));
      }));
  },
  78713,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(59242),
      e = a.r(6325).GLOBAL_OBJ;
    ((c.getComponentName = function (a) {
      if (!e.HTMLElement) return null;
      let b = a;
      for (let a = 0; a < 5 && b; a++) {
        if (b instanceof HTMLElement) {
          if (b.dataset.sentryComponent) return b.dataset.sentryComponent;
          if (b.dataset.sentryElement) return b.dataset.sentryElement;
        }
        b = b.parentNode;
      }
      return null;
    }),
      (c.getLocationHref = function () {
        try {
          return e.document.location.href;
        } catch {
          return '';
        }
      }),
      (c.htmlTreeAsString = function (a, b = {}) {
        if (!a) return '<unknown>';
        try {
          let c,
            f = a,
            g = [],
            h = 0,
            i = 0,
            j = Array.isArray(b) ? b : b.keyAttrs,
            k = (!Array.isArray(b) && b.maxStringLength) || 80;
          for (
            ;
            f &&
            h++ < 5 &&
            ((c = (function (a, b) {
              let c = [];
              if (!a?.tagName) return '';
              if (e.HTMLElement && a instanceof HTMLElement && a.dataset) {
                if (a.dataset.sentryComponent) return a.dataset.sentryComponent;
                if (a.dataset.sentryElement) return a.dataset.sentryElement;
              }
              c.push(a.tagName.toLowerCase());
              let f = b?.length
                ? b.filter((b) => a.getAttribute(b)).map((b) => [b, a.getAttribute(b)])
                : null;
              if (f?.length)
                f.forEach((a) => {
                  c.push(`[${a[0]}="${a[1]}"]`);
                });
              else {
                a.id && c.push(`#${a.id}`);
                let b = a.className;
                if (b && d.isString(b)) for (let a of b.split(/\s+/)) c.push(`.${a}`);
              }
              for (let b of ['aria-label', 'type', 'name', 'title', 'alt']) {
                let d = a.getAttribute(b);
                d && c.push(`[${b}="${d}"]`);
              }
              return c.join('');
            })(f, j)),
            'html' !== c && (!(h > 1) || !(i + 3 * g.length + c.length >= k)));

          )
            (g.push(c), (i += c.length), (f = f.parentNode));
          return g.reverse().join(' > ');
        } catch {
          return '<unknown>';
        }
      }));
  },
  27966,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(59242);
    function e(a, b, c = !1) {
      return (
        !!d.isString(a) &&
        (d.isRegExp(b) ? b.test(a) : !!d.isString(b) && (c ? a === b : a.includes(b)))
      );
    }
    ((c.isMatchingPattern = e),
      (c.safeJoin = function (a, b) {
        if (!Array.isArray(a)) return '';
        let c = [];
        for (let b = 0; b < a.length; b++) {
          let e = a[b];
          try {
            d.isVueViewModel(e) ? c.push('[VueViewModel]') : c.push(String(e));
          } catch {
            c.push('[value cannot be serialized]');
          }
        }
        return c.join(b);
      }),
      (c.snipLine = function (a, b) {
        let c = a,
          d = c.length;
        if (d <= 150) return c;
        b > d && (b = d);
        let e = Math.max(b - 60, 0);
        e < 5 && (e = 0);
        let f = Math.min(e + 140, d);
        return (
          f > d - 5 && (f = d),
          f === d && (e = Math.max(f - 140, 0)),
          (c = c.slice(e, f)),
          e > 0 && (c = `'{snip} ${c}`),
          f < d && (c += ' {snip}'),
          c
        );
      }),
      (c.stringMatchesSomePattern = function (a, b = [], c = !1) {
        return b.some((b) => e(a, b, c));
      }),
      (c.truncate = function (a, b = 0) {
        return 'string' != typeof a || 0 === b || a.length <= b ? a : `${a.slice(0, b)}...`;
      }));
  },
  78707,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(78713),
      f = a.r(43679),
      g = a.r(59242),
      h = a.r(27966);
    function i(a, b, c) {
      try {
        Object.defineProperty(a, b, { value: c, writable: !0, configurable: !0 });
      } catch {
        d.DEBUG_BUILD && f.debug.log(`Failed to add non-enumerable property "${b}" to object`, a);
      }
    }
    function j(a, b) {
      try {
        let c = b.prototype || {};
        ((a.prototype = b.prototype = c), i(a, '__sentry_original__', b));
      } catch {}
    }
    function k(a) {
      if (g.isError(a)) return { message: a.message, name: a.name, stack: a.stack, ...m(a) };
      if (!g.isEvent(a)) return a;
      {
        let b = { type: a.type, target: l(a.target), currentTarget: l(a.currentTarget), ...m(a) };
        return (
          'undefined' != typeof CustomEvent &&
            g.isInstanceOf(a, CustomEvent) &&
            (b.detail = a.detail),
          b
        );
      }
    }
    function l(a) {
      try {
        return g.isElement(a) ? e.htmlTreeAsString(a) : Object.prototype.toString.call(a);
      } catch {
        return '<unknown>';
      }
    }
    function m(a) {
      if ('object' != typeof a || null === a) return {};
      {
        let b = {};
        for (let c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
        return b;
      }
    }
    ((c.addNonEnumerableProperty = i),
      (c.convertToPlainObject = k),
      (c.dropUndefinedKeys = function (a) {
        return (function a(b, c) {
          if (null === b || 'object' != typeof b) return b;
          let d = c.get(b);
          if (void 0 !== d) return d;
          if (Array.isArray(b)) {
            let d = [];
            return (
              c.set(b, d),
              b.forEach((b) => {
                d.push(a(b, c));
              }),
              d
            );
          }
          if (
            (function (a) {
              let b = a.constructor;
              return b === Object || void 0 === b;
            })(b)
          ) {
            let d = {};
            return (
              c.set(b, d),
              Object.keys(b).forEach((e) => {
                let f = b[e];
                void 0 !== f && (d[e] = a(f, c));
              }),
              d
            );
          }
          return b;
        })(a, new Map());
      }),
      (c.extractExceptionKeysForMessage = function (a, b = 40) {
        let c = Object.keys(k(a));
        c.sort();
        let d = c[0];
        if (!d) return '[object has no keys]';
        if (d.length >= b) return h.truncate(d, b);
        for (let a = c.length; a > 0; a--) {
          let d = c.slice(0, a).join(', ');
          if (!(d.length > b)) {
            if (a === c.length) return d;
            return h.truncate(d, b);
          }
        }
        return '';
      }),
      (c.fill = function (a, b, c) {
        if (!(b in a)) return;
        let e = a[b];
        if ('function' != typeof e) return;
        let g = c(e);
        'function' == typeof g && j(g, e);
        try {
          a[b] = g;
        } catch {
          d.DEBUG_BUILD && f.debug.log(`Failed to replace method "${b}" in object`, a);
        }
      }),
      (c.getOriginalFunction = function (a) {
        return a.__sentry_original__;
      }),
      (c.markFunctionWrapped = j),
      (c.objectify = function (a) {
        let b;
        switch (!0) {
          case void 0 == a:
            b = new String(a);
            break;
          case 'symbol' == typeof a || 'bigint' == typeof a:
            b = Object(a);
            break;
          case g.isPrimitive(a):
            b = new a.constructor(a);
            break;
          default:
            b = a;
        }
        return b;
      }));
  },
  61843,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78707),
      e = a.r(27966),
      f = a.r(6325);
    function g(a) {
      return a.exception?.values?.[0];
    }
    let h =
      /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
    function i(a) {
      return parseInt(a || '', 10);
    }
    ((c.addContextToFrame = function (a, b, c = 5) {
      if (void 0 === b.lineno) return;
      let d = a.length,
        f = Math.max(Math.min(d - 1, b.lineno - 1), 0);
      b.pre_context = a.slice(Math.max(0, f - c), f).map((a) => e.snipLine(a, 0));
      let g = Math.min(d - 1, f);
      ((b.context_line = e.snipLine(a[g], b.colno || 0)),
        (b.post_context = a.slice(Math.min(f + 1, d), f + 1 + c).map((a) => e.snipLine(a, 0))));
    }),
      (c.addExceptionMechanism = function (a, b) {
        let c = g(a);
        if (!c) return;
        let d = c.mechanism;
        if (((c.mechanism = { type: 'generic', handled: !0, ...d, ...b }), b && 'data' in b)) {
          let a = { ...d?.data, ...b.data };
          c.mechanism.data = a;
        }
      }),
      (c.addExceptionTypeValue = function (a, b, c) {
        let d = (a.exception = a.exception || {}),
          e = (d.values = d.values || []),
          f = (e[0] = e[0] || {});
        (f.value || (f.value = b || ''), f.type || (f.type = c || 'Error'));
      }),
      (c.checkOrSetAlreadyCaught = function (a) {
        if (
          (function (a) {
            try {
              return a.__sentry_captured__;
            } catch {}
          })(a)
        )
          return !0;
        try {
          d.addNonEnumerableProperty(a, '__sentry_captured__', !0);
        } catch {}
        return !1;
      }),
      (c.getEventDescription = function (a) {
        let { message: b, event_id: c } = a;
        if (b) return b;
        let d = g(a);
        return d
          ? d.type && d.value
            ? `${d.type}: ${d.value}`
            : d.type || d.value || c || '<unknown>'
          : c || '<unknown>';
      }),
      (c.parseSemver = function (a) {
        let b = a.match(h) || [],
          c = i(b[1]),
          d = i(b[2]),
          e = i(b[3]);
        return {
          buildmetadata: b[5],
          major: isNaN(c) ? void 0 : c,
          minor: isNaN(d) ? void 0 : d,
          patch: isNaN(e) ? void 0 : e,
          prerelease: b[4],
        };
      }),
      (c.uuid4 = function (
        a = (function () {
          let a = f.GLOBAL_OBJ;
          return a.crypto || a.msCrypto;
        })()
      ) {
        let b = () => 16 * Math.random();
        try {
          if (a?.randomUUID) return a.randomUUID().replace(/-/g, '');
          a?.getRandomValues &&
            (b = () => {
              let b = new Uint8Array(1);
              return (a.getRandomValues(b), b[0]);
            });
        } catch {}
        return '10000000100040008000100000000000'.replace(/[018]/g, (a) =>
          (a ^ ((15 & b()) >> (a / 4))).toString(16)
        );
      }));
  },
  59671,
  (a, b, c) => {
    let d, e;
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let f = a.r(6325);
    function g() {
      return Date.now() / 1e3;
    }
    ((c.browserPerformanceTimeOrigin = function () {
      return (
        e ||
          (e = (function () {
            let { performance: a } = f.GLOBAL_OBJ;
            if (!a?.now) return [void 0, 'none'];
            let b = a.now(),
              c = Date.now(),
              d = a.timeOrigin ? Math.abs(a.timeOrigin + b - c) : 36e5,
              e = a.timing?.navigationStart,
              g = 'number' == typeof e ? Math.abs(e + b - c) : 36e5;
            if (d < 36e5 || g < 36e5)
              if (d <= g) return [a.timeOrigin, 'timeOrigin'];
              else return [e, 'navigationStart'];
            return [c, 'dateNow'];
          })()),
        e[0]
      );
    }),
      (c.dateTimestampInSeconds = g),
      (c.timestampInSeconds = function () {
        return (
          d ??
          (d = (function () {
            let { performance: a } = f.GLOBAL_OBJ;
            if (!a?.now || !a.timeOrigin) return g;
            let b = a.timeOrigin;
            return () => (b + a.now()) / 1e3;
          })())
        )();
      }));
  },
  99309,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(61843),
      e = a.r(59671);
    function f(a, b = {}) {
      if (
        (b.user &&
          (!a.ipAddress && b.user.ip_address && (a.ipAddress = b.user.ip_address),
          a.did || b.did || (a.did = b.user.id || b.user.email || b.user.username)),
        (a.timestamp = b.timestamp || e.timestampInSeconds()),
        b.abnormal_mechanism && (a.abnormal_mechanism = b.abnormal_mechanism),
        b.ignoreDuration && (a.ignoreDuration = b.ignoreDuration),
        b.sid && (a.sid = 32 === b.sid.length ? b.sid : d.uuid4()),
        void 0 !== b.init && (a.init = b.init),
        !a.did && b.did && (a.did = `${b.did}`),
        'number' == typeof b.started && (a.started = b.started),
        a.ignoreDuration)
      )
        a.duration = void 0;
      else if ('number' == typeof b.duration) a.duration = b.duration;
      else {
        let b = a.timestamp - a.started;
        a.duration = b >= 0 ? b : 0;
      }
      (b.release && (a.release = b.release),
        b.environment && (a.environment = b.environment),
        !a.ipAddress && b.ipAddress && (a.ipAddress = b.ipAddress),
        !a.userAgent && b.userAgent && (a.userAgent = b.userAgent),
        'number' == typeof b.errors && (a.errors = b.errors),
        b.status && (a.status = b.status));
    }
    ((c.closeSession = function (a, b) {
      let c = {};
      (b ? (c = { status: b }) : 'ok' === a.status && (c = { status: 'exited' }), f(a, c));
    }),
      (c.makeSession = function (a) {
        let b = e.timestampInSeconds(),
          c = {
            sid: d.uuid4(),
            init: !0,
            timestamp: b,
            started: b,
            duration: 0,
            status: 'ok',
            errors: 0,
            ignoreDuration: !1,
            toJSON: () => {
              var a;
              return (
                (a = c),
                {
                  sid: `${a.sid}`,
                  init: a.init,
                  started: new Date(1e3 * a.started).toISOString(),
                  timestamp: new Date(1e3 * a.timestamp).toISOString(),
                  status: a.status,
                  errors: a.errors,
                  did: 'number' == typeof a.did || 'string' == typeof a.did ? `${a.did}` : void 0,
                  duration: a.duration,
                  abnormal_mechanism: a.abnormal_mechanism,
                  attrs: {
                    release: a.release,
                    environment: a.environment,
                    ip_address: a.ipAddress,
                    user_agent: a.userAgent,
                  },
                }
              );
            },
          };
        return (a && f(c, a), c);
      }),
      (c.updateSession = f));
  },
  4956,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.merge = function a(b, c, d = 2) {
        if (!c || 'object' != typeof c || d <= 0) return c;
        if (b && 0 === Object.keys(c).length) return b;
        let e = { ...b };
        for (let b in c)
          Object.prototype.hasOwnProperty.call(c, b) && (e[b] = a(e[b], c[b], d - 1));
        return e;
      }));
  },
  66652,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(61843);
    ((c.generateSpanId = function () {
      return d.uuid4().substring(16);
    }),
      (c.generateTraceId = function () {
        return d.uuid4();
      }));
  },
  96245,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78707),
      e = '_sentrySpan';
    ((c._getSpanForScope = function (a) {
      return a[e];
    }),
      (c._setSpanForScope = function (a, b) {
        b ? d.addNonEnumerableProperty(a, e, b) : delete a[e];
      }));
  },
  77542,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(99309),
      f = a.r(43679),
      g = a.r(59242),
      h = a.r(4956),
      i = a.r(61843),
      j = a.r(66652),
      k = a.r(96245),
      l = a.r(27966),
      m = a.r(59671);
    class n {
      constructor() {
        ((this._notifyingListeners = !1),
          (this._scopeListeners = []),
          (this._eventProcessors = []),
          (this._breadcrumbs = []),
          (this._attachments = []),
          (this._user = {}),
          (this._tags = {}),
          (this._extra = {}),
          (this._contexts = {}),
          (this._sdkProcessingMetadata = {}),
          (this._propagationContext = { traceId: j.generateTraceId(), sampleRand: Math.random() }));
      }
      clone() {
        let a = new n();
        return (
          (a._breadcrumbs = [...this._breadcrumbs]),
          (a._tags = { ...this._tags }),
          (a._extra = { ...this._extra }),
          (a._contexts = { ...this._contexts }),
          this._contexts.flags &&
            (a._contexts.flags = { values: [...this._contexts.flags.values] }),
          (a._user = this._user),
          (a._level = this._level),
          (a._session = this._session),
          (a._transactionName = this._transactionName),
          (a._fingerprint = this._fingerprint),
          (a._eventProcessors = [...this._eventProcessors]),
          (a._attachments = [...this._attachments]),
          (a._sdkProcessingMetadata = { ...this._sdkProcessingMetadata }),
          (a._propagationContext = { ...this._propagationContext }),
          (a._client = this._client),
          (a._lastEventId = this._lastEventId),
          k._setSpanForScope(a, k._getSpanForScope(this)),
          a
        );
      }
      setClient(a) {
        this._client = a;
      }
      setLastEventId(a) {
        this._lastEventId = a;
      }
      getClient() {
        return this._client;
      }
      lastEventId() {
        return this._lastEventId;
      }
      addScopeListener(a) {
        this._scopeListeners.push(a);
      }
      addEventProcessor(a) {
        return (this._eventProcessors.push(a), this);
      }
      setUser(a) {
        return (
          (this._user = a || { email: void 0, id: void 0, ip_address: void 0, username: void 0 }),
          this._session && e.updateSession(this._session, { user: a }),
          this._notifyScopeListeners(),
          this
        );
      }
      getUser() {
        return this._user;
      }
      setTags(a) {
        return ((this._tags = { ...this._tags, ...a }), this._notifyScopeListeners(), this);
      }
      setTag(a, b) {
        return ((this._tags = { ...this._tags, [a]: b }), this._notifyScopeListeners(), this);
      }
      setExtras(a) {
        return ((this._extra = { ...this._extra, ...a }), this._notifyScopeListeners(), this);
      }
      setExtra(a, b) {
        return ((this._extra = { ...this._extra, [a]: b }), this._notifyScopeListeners(), this);
      }
      setFingerprint(a) {
        return ((this._fingerprint = a), this._notifyScopeListeners(), this);
      }
      setLevel(a) {
        return ((this._level = a), this._notifyScopeListeners(), this);
      }
      setTransactionName(a) {
        return ((this._transactionName = a), this._notifyScopeListeners(), this);
      }
      setContext(a, b) {
        return (
          null === b ? delete this._contexts[a] : (this._contexts[a] = b),
          this._notifyScopeListeners(),
          this
        );
      }
      setSession(a) {
        return (a ? (this._session = a) : delete this._session, this._notifyScopeListeners(), this);
      }
      getSession() {
        return this._session;
      }
      update(a) {
        if (!a) return this;
        let b = 'function' == typeof a ? a(this) : a,
          {
            tags: c,
            extra: d,
            user: e,
            contexts: f,
            level: h,
            fingerprint: i = [],
            propagationContext: j,
          } = (b instanceof n ? b.getScopeData() : g.isPlainObject(b) ? a : void 0) || {};
        return (
          (this._tags = { ...this._tags, ...c }),
          (this._extra = { ...this._extra, ...d }),
          (this._contexts = { ...this._contexts, ...f }),
          e && Object.keys(e).length && (this._user = e),
          h && (this._level = h),
          i.length && (this._fingerprint = i),
          j && (this._propagationContext = j),
          this
        );
      }
      clear() {
        return (
          (this._breadcrumbs = []),
          (this._tags = {}),
          (this._extra = {}),
          (this._user = {}),
          (this._contexts = {}),
          (this._level = void 0),
          (this._transactionName = void 0),
          (this._fingerprint = void 0),
          (this._session = void 0),
          k._setSpanForScope(this, void 0),
          (this._attachments = []),
          this.setPropagationContext({ traceId: j.generateTraceId(), sampleRand: Math.random() }),
          this._notifyScopeListeners(),
          this
        );
      }
      addBreadcrumb(a, b) {
        let c = 'number' == typeof b ? b : 100;
        if (c <= 0) return this;
        let d = {
          timestamp: m.dateTimestampInSeconds(),
          ...a,
          message: a.message ? l.truncate(a.message, 2048) : a.message,
        };
        return (
          this._breadcrumbs.push(d),
          this._breadcrumbs.length > c &&
            ((this._breadcrumbs = this._breadcrumbs.slice(-c)),
            this._client?.recordDroppedEvent('buffer_overflow', 'log_item')),
          this._notifyScopeListeners(),
          this
        );
      }
      getLastBreadcrumb() {
        return this._breadcrumbs[this._breadcrumbs.length - 1];
      }
      clearBreadcrumbs() {
        return ((this._breadcrumbs = []), this._notifyScopeListeners(), this);
      }
      addAttachment(a) {
        return (this._attachments.push(a), this);
      }
      clearAttachments() {
        return ((this._attachments = []), this);
      }
      getScopeData() {
        return {
          breadcrumbs: this._breadcrumbs,
          attachments: this._attachments,
          contexts: this._contexts,
          tags: this._tags,
          extra: this._extra,
          user: this._user,
          level: this._level,
          fingerprint: this._fingerprint || [],
          eventProcessors: this._eventProcessors,
          propagationContext: this._propagationContext,
          sdkProcessingMetadata: this._sdkProcessingMetadata,
          transactionName: this._transactionName,
          span: k._getSpanForScope(this),
        };
      }
      setSDKProcessingMetadata(a) {
        return ((this._sdkProcessingMetadata = h.merge(this._sdkProcessingMetadata, a, 2)), this);
      }
      setPropagationContext(a) {
        return ((this._propagationContext = a), this);
      }
      getPropagationContext() {
        return this._propagationContext;
      }
      captureException(a, b) {
        let c = b?.event_id || i.uuid4();
        if (!this._client)
          return (
            d.DEBUG_BUILD &&
              f.debug.warn('No client configured on scope - will not capture exception!'),
            c
          );
        let e = Error('Sentry syntheticException');
        return (
          this._client.captureException(
            a,
            { originalException: a, syntheticException: e, ...b, event_id: c },
            this
          ),
          c
        );
      }
      captureMessage(a, b, c) {
        let e = c?.event_id || i.uuid4();
        if (!this._client)
          return (
            d.DEBUG_BUILD &&
              f.debug.warn('No client configured on scope - will not capture message!'),
            e
          );
        let g = Error(a);
        return (
          this._client.captureMessage(
            a,
            b,
            { originalException: a, syntheticException: g, ...c, event_id: e },
            this
          ),
          e
        );
      }
      captureEvent(a, b) {
        let c = b?.event_id || i.uuid4();
        return (
          this._client
            ? this._client.captureEvent(a, { ...b, event_id: c }, this)
            : d.DEBUG_BUILD &&
              f.debug.warn('No client configured on scope - will not capture event!'),
          c
        );
      }
      _notifyScopeListeners() {
        this._notifyingListeners ||
          ((this._notifyingListeners = !0),
          this._scopeListeners.forEach((a) => {
            a(this);
          }),
          (this._notifyingListeners = !1));
      }
    }
    c.Scope = n;
  },
  55851,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(5356),
      e = a.r(77542);
    ((c.getDefaultCurrentScope = function () {
      return d.getGlobalSingleton('defaultCurrentScope', () => new e.Scope());
    }),
      (c.getDefaultIsolationScope = function () {
        return d.getGlobalSingleton('defaultIsolationScope', () => new e.Scope());
      }));
  },
  52265,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(55851),
      e = a.r(77542),
      f = a.r(59242),
      g = a.r(5356);
    class h {
      constructor(a, b) {
        let c, d;
        ((c = a || new e.Scope()),
          (d = b || new e.Scope()),
          (this._stack = [{ scope: c }]),
          (this._isolationScope = d));
      }
      withScope(a) {
        let b,
          c = this._pushScope();
        try {
          b = a(c);
        } catch (a) {
          throw (this._popScope(), a);
        }
        return f.isThenable(b)
          ? b.then(
              (a) => (this._popScope(), a),
              (a) => {
                throw (this._popScope(), a);
              }
            )
          : (this._popScope(), b);
      }
      getClient() {
        return this.getStackTop().client;
      }
      getScope() {
        return this.getStackTop().scope;
      }
      getIsolationScope() {
        return this._isolationScope;
      }
      getStackTop() {
        return this._stack[this._stack.length - 1];
      }
      _pushScope() {
        let a = this.getScope().clone();
        return (this._stack.push({ client: this.getClient(), scope: a }), a);
      }
      _popScope() {
        return !(this._stack.length <= 1) && !!this._stack.pop();
      }
    }
    function i() {
      let a = g.getMainCarrier(),
        b = g.getSentryCarrier(a);
      return (b.stack = b.stack || new h(d.getDefaultCurrentScope(), d.getDefaultIsolationScope()));
    }
    function j(a) {
      return i().withScope(a);
    }
    function k(a, b) {
      let c = i();
      return c.withScope(() => ((c.getStackTop().scope = a), b(a)));
    }
    function l(a) {
      return i().withScope(() => a(i().getIsolationScope()));
    }
    ((c.AsyncContextStack = h),
      (c.getStackAsyncContextStrategy = function () {
        return {
          withIsolationScope: l,
          withScope: j,
          withSetScope: k,
          withSetIsolationScope: (a, b) => l(b),
          getCurrentScope: () => i().getScope(),
          getIsolationScope: () => i().getIsolationScope(),
        };
      }));
  },
  85194,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(5356),
      e = a.r(52265);
    ((c.getAsyncContextStrategy = function (a) {
      let b = d.getSentryCarrier(a);
      return b.acs ? b.acs : e.getStackAsyncContextStrategy();
    }),
      (c.setAsyncContextStrategy = function (a) {
        let b = d.getMainCarrier();
        d.getSentryCarrier(b).acs = a;
      }));
  },
  57697,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(85194),
      e = a.r(5356),
      f = a.r(77542),
      g = a.r(66652);
    function h() {
      let a = e.getMainCarrier();
      return d.getAsyncContextStrategy(a).getCurrentScope();
    }
    ((c.getClient = function () {
      return h().getClient();
    }),
      (c.getCurrentScope = h),
      (c.getGlobalScope = function () {
        return e.getGlobalSingleton('globalScope', () => new f.Scope());
      }),
      (c.getIsolationScope = function () {
        let a = e.getMainCarrier();
        return d.getAsyncContextStrategy(a).getIsolationScope();
      }),
      (c.getTraceContextFromScope = function (a) {
        let { traceId: b, parentSpanId: c, propagationSpanId: d } = a.getPropagationContext(),
          e = { trace_id: b, span_id: d || g.generateSpanId() };
        return (c && (e.parent_span_id = c), e);
      }),
      (c.withIsolationScope = function (...a) {
        let b = e.getMainCarrier(),
          c = d.getAsyncContextStrategy(b);
        if (2 === a.length) {
          let [b, d] = a;
          return b ? c.withSetIsolationScope(b, d) : c.withIsolationScope(d);
        }
        return c.withIsolationScope(a[0]);
      }),
      (c.withScope = function (...a) {
        let b = e.getMainCarrier(),
          c = d.getAsyncContextStrategy(b);
        if (2 === a.length) {
          let [b, d] = a;
          return b ? c.withSetScope(b, d) : c.withScope(d);
        }
        return c.withScope(a[0]);
      }));
  },
  21016,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit'),
      (c.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size'),
      (c.SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key'),
      (c.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time'),
      (c.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method'),
      (c.SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id'),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name'),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason'),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit'),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value'),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op'),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin'),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE =
        'sentry.previous_trace_sample_rate'),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate'),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source'),
      (c.SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full'),
      (c.SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = 'sentry.link.type'));
  },
  47534,
  (a, b, c) => {
    function d(a) {
      if (a < 400 && a >= 100) return { code: 1 };
      if (a >= 400 && a < 500)
        switch (a) {
          case 401:
            return { code: 2, message: 'unauthenticated' };
          case 403:
            return { code: 2, message: 'permission_denied' };
          case 404:
            return { code: 2, message: 'not_found' };
          case 409:
            return { code: 2, message: 'already_exists' };
          case 413:
            return { code: 2, message: 'failed_precondition' };
          case 429:
            return { code: 2, message: 'resource_exhausted' };
          case 499:
            return { code: 2, message: 'cancelled' };
          default:
            return { code: 2, message: 'invalid_argument' };
        }
      if (a >= 500 && a < 600)
        switch (a) {
          case 501:
            return { code: 2, message: 'unimplemented' };
          case 503:
            return { code: 2, message: 'unavailable' };
          case 504:
            return { code: 2, message: 'deadline_exceeded' };
          default:
            return { code: 2, message: 'internal_error' };
        }
      return { code: 2, message: 'unknown_error' };
    }
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.SPAN_STATUS_ERROR = 2),
      (c.SPAN_STATUS_OK = 1),
      (c.SPAN_STATUS_UNSET = 0),
      (c.getSpanStatusFromHttpCode = d),
      (c.setHttpStatus = function (a, b) {
        a.setAttribute('http.response.status_code', b);
        let c = d(b);
        'unknown_error' !== c.message && a.setStatus(c);
      }));
  },
  13340,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78707),
      e = '_sentryScope',
      f = '_sentryIsolationScope';
    ((c.getCapturedScopesOnSpan = function (a) {
      return { scope: a[e], isolationScope: a[f] };
    }),
      (c.setCapturedScopesOnSpan = function (a, b, c) {
        a && (d.addNonEnumerableProperty(a, f, c), d.addNonEnumerableProperty(a, e, b));
      }));
  },
  16073,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = a.r(59242),
      g = 'sentry-',
      h = /^sentry-/;
    function i(a) {
      if (a && (f.isString(a) || Array.isArray(a)))
        return Array.isArray(a)
          ? a.reduce(
              (a, b) => (
                Object.entries(j(b)).forEach(([b, c]) => {
                  a[b] = c;
                }),
                a
              ),
              {}
            )
          : j(a);
    }
    function j(a) {
      return a
        .split(',')
        .map((a) =>
          a.split('=').map((a) => {
            try {
              return decodeURIComponent(a.trim());
            } catch {
              return;
            }
          })
        )
        .reduce((a, [b, c]) => (b && c && (a[b] = c), a), {});
    }
    function k(a) {
      if (0 !== Object.keys(a).length)
        return Object.entries(a).reduce((a, [b, c], f) => {
          let g = `${encodeURIComponent(b)}=${encodeURIComponent(c)}`,
            h = 0 === f ? g : `${a},${g}`;
          return h.length > 8192
            ? (d.DEBUG_BUILD &&
                e.debug.warn(
                  `Not adding key: ${b} with val: ${c} to baggage header due to exceeding baggage size limits.`
                ),
              a)
            : h;
        }, '');
    }
    ((c.MAX_BAGGAGE_STRING_LENGTH = 8192),
      (c.SENTRY_BAGGAGE_KEY_PREFIX = g),
      (c.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = h),
      (c.baggageHeaderToDynamicSamplingContext = function (a) {
        let b = i(a);
        if (!b) return;
        let c = Object.entries(b).reduce(
          (a, [b, c]) => (b.match(h) && (a[b.slice(g.length)] = c), a),
          {}
        );
        return Object.keys(c).length > 0 ? c : void 0;
      }),
      (c.dynamicSamplingContextToSentryBaggageHeader = function (a) {
        if (a) return k(Object.entries(a).reduce((a, [b, c]) => (c && (a[`${g}${b}`] = c), a), {}));
      }),
      (c.objectToBaggageHeader = k),
      (c.parseBaggageHeader = i));
  },
  77885,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = /^o(\d+)\./,
      g = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
    function h(a) {
      let b = g.exec(a);
      if (!b)
        return void e.consoleSandbox(() => {
          console.error(`Invalid Sentry Dsn: ${a}`);
        });
      let [c, d, f = '', h = '', j = '', k = ''] = b.slice(1),
        l = '',
        m = k,
        n = m.split('/');
      if ((n.length > 1 && ((l = n.slice(0, -1).join('/')), (m = n.pop())), m)) {
        let a = m.match(/^\d+/);
        a && (m = a[0]);
      }
      return i({ host: h, pass: f, path: l, projectId: m, port: j, protocol: c, publicKey: d });
    }
    function i(a) {
      return {
        protocol: a.protocol,
        publicKey: a.publicKey || '',
        pass: a.pass || '',
        host: a.host,
        port: a.port || '',
        path: a.path || '',
        projectId: a.projectId,
      };
    }
    function j(a) {
      let b = a.match(f);
      return b?.[1];
    }
    ((c.dsnFromString = h),
      (c.dsnToString = function (a, b = !1) {
        let { host: c, path: d, pass: e, port: f, projectId: g, protocol: h, publicKey: i } = a;
        return `${h}://${i}${b && e ? `:${e}` : ''}@${c}${f ? `:${f}` : ''}/${d ? `${d}/` : d}${g}`;
      }),
      (c.extractOrgIdFromClient = function (a) {
        let b,
          c = a.getOptions(),
          { host: d } = a.getDsn() || {};
        return (c.orgId ? (b = String(c.orgId)) : d && (b = j(d)), b);
      }),
      (c.extractOrgIdFromDsnHost = j),
      (c.makeDsn = function (a) {
        let b = 'string' == typeof a ? h(a) : i(a);
        if (
          b &&
          (function (a) {
            if (!d.DEBUG_BUILD) return !0;
            let { port: b, projectId: c, protocol: f } = a;
            return (
              !['protocol', 'publicKey', 'host', 'projectId'].find(
                (b) => !a[b] && (e.debug.error(`Invalid Sentry Dsn: ${b} missing`), !0)
              ) &&
              (c.match(/^\d+$/)
                ? 'http' !== f && 'https' !== f
                  ? (e.debug.error(`Invalid Sentry Dsn: Invalid protocol ${f}`), !1)
                  : !(b && isNaN(parseInt(b, 10))) ||
                    (e.debug.error(`Invalid Sentry Dsn: Invalid port ${b}`), !1)
                : (e.debug.error(`Invalid Sentry Dsn: Invalid projectId ${c}`), !1))
            );
          })(b)
        )
          return b;
      }));
  },
  87726,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.parseSampleRate = function (a) {
        if ('boolean' == typeof a) return Number(a);
        let b = 'string' == typeof a ? parseFloat(a) : a;
        if (!('number' != typeof b || isNaN(b)) && !(b < 0) && !(b > 1)) return b;
      }));
  },
  12138,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(43679),
      e = a.r(16073),
      f = a.r(77885),
      g = a.r(87726),
      h = a.r(66652),
      i = RegExp('^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$');
    function j(a) {
      let b;
      if (!a) return;
      let c = a.match(i);
      if (c)
        return (
          '1' === c[3] ? (b = !0) : '0' === c[3] && (b = !1),
          { traceId: c[1], parentSampled: b, parentSpanId: c[2] }
        );
    }
    ((c.TRACEPARENT_REGEXP = i),
      (c.extractTraceparentData = j),
      (c.generateSentryTraceHeader = function (a = h.generateTraceId(), b = h.generateSpanId(), c) {
        let d = '';
        return (void 0 !== c && (d = c ? '-1' : '-0'), `${a}-${b}${d}`);
      }),
      (c.propagationContextFromHeaders = function (a, b) {
        let c = j(a),
          d = e.baggageHeaderToDynamicSamplingContext(b);
        if (!c?.traceId) return { traceId: h.generateTraceId(), sampleRand: Math.random() };
        let f = (function (a, b) {
          let c = g.parseSampleRate(b?.sample_rand);
          if (void 0 !== c) return c;
          let d = g.parseSampleRate(b?.sample_rate);
          return d && a?.parentSampled !== void 0
            ? a.parentSampled
              ? Math.random() * d
              : d + Math.random() * (1 - d)
            : Math.random();
        })(c, d);
        d && (d.sample_rand = f.toString());
        let { traceId: i, parentSpanId: k, parentSampled: l } = c;
        return { traceId: i, parentSpanId: k, sampled: l, dsc: d || {}, sampleRand: f };
      }),
      (c.shouldContinueTrace = function (a, b) {
        let c = f.extractOrgIdFromClient(a);
        return b && c && b !== c
          ? (d.debug.log(
              `Won't continue trace because org IDs don't match (incoming baggage: ${b}, SDK options: ${c})`
            ),
            !1)
          : !a.getOptions().strictTraceContinuation ||
              ((!b || !!c) && (!!b || !c)) ||
              (d.debug.log(
                `Starting a new trace because strict trace continuation is enabled but one org ID is missing (incoming baggage: ${b}, Sentry client: ${c})`
              ),
              !1);
      }));
  },
  45889,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(85194),
      e = a.r(5356),
      f = a.r(57697),
      g = a.r(21016),
      h = a.r(47534),
      i = a.r(13340),
      j = a.r(78707),
      k = a.r(66652),
      l = a.r(59671),
      m = a.r(12138),
      n = a.r(43679),
      o = a.r(96245),
      p = !1;
    function q(a) {
      return a && a.length > 0
        ? a.map(({ context: { spanId: a, traceId: b, traceFlags: c, ...d }, attributes: e }) => ({
            span_id: a,
            trace_id: b,
            sampled: 1 === c,
            attributes: e,
            ...d,
          }))
        : void 0;
    }
    function r(a) {
      return 'number' == typeof a
        ? s(a)
        : Array.isArray(a)
          ? a[0] + a[1] / 1e9
          : a instanceof Date
            ? s(a.getTime())
            : l.timestampInSeconds();
    }
    function s(a) {
      return a > 0x2540be3ff ? a / 1e3 : a;
    }
    function t(a) {
      var b;
      if ('function' == typeof a.getSpanJSON) return a.getSpanJSON();
      let { spanId: c, traceId: d } = a.spanContext();
      if ((b = a).attributes && b.startTime && b.name && b.endTime && b.status) {
        let { attributes: b, startTime: e, name: f, endTime: h, status: i, links: j } = a;
        return {
          span_id: c,
          trace_id: d,
          data: b,
          description: f,
          parent_span_id:
            'parentSpanId' in a
              ? a.parentSpanId
              : 'parentSpanContext' in a
                ? a.parentSpanContext?.spanId
                : void 0,
          start_timestamp: r(e),
          timestamp: r(h) || void 0,
          status: v(i),
          op: b[g.SEMANTIC_ATTRIBUTE_SENTRY_OP],
          origin: b[g.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],
          links: q(j),
        };
      }
      return { span_id: c, trace_id: d, start_timestamp: 0, data: {} };
    }
    function u(a) {
      let { traceFlags: b } = a.spanContext();
      return 1 === b;
    }
    function v(a) {
      if (a && a.code !== h.SPAN_STATUS_UNSET)
        return a.code === h.SPAN_STATUS_OK ? 'ok' : a.message || 'unknown_error';
    }
    let w = '_sentryChildSpans',
      x = '_sentryRootSpan';
    ((c.TRACE_FLAG_NONE = 0),
      (c.TRACE_FLAG_SAMPLED = 1),
      (c.addChildSpanToSpan = function (a, b) {
        let c = a[x] || a;
        (j.addNonEnumerableProperty(b, x, c),
          a[w] ? a[w].add(b) : j.addNonEnumerableProperty(a, w, new Set([b])));
      }),
      (c.convertSpanLinksForEnvelope = q),
      (c.getActiveSpan = function () {
        let a = e.getMainCarrier(),
          b = d.getAsyncContextStrategy(a);
        return b.getActiveSpan ? b.getActiveSpan() : o._getSpanForScope(f.getCurrentScope());
      }),
      (c.getRootSpan = function (a) {
        return a[x] || a;
      }),
      (c.getSpanDescendants = function (a) {
        let b = new Set();
        return (
          !(function a(c) {
            if (!b.has(c) && u(c)) for (let d of (b.add(c), c[w] ? Array.from(c[w]) : [])) a(d);
          })(a),
          Array.from(b)
        );
      }),
      (c.getStatusMessage = v),
      (c.removeChildSpanFromSpan = function (a, b) {
        a[w] && a[w].delete(b);
      }),
      (c.showSpanDropWarning = function () {
        p ||
          (n.consoleSandbox(() => {
            console.warn(
              '[Sentry] Returning null from `beforeSendSpan` is disallowed. To drop certain spans, configure the respective integrations directly.'
            );
          }),
          (p = !0));
      }),
      (c.spanIsSampled = u),
      (c.spanTimeInputToSeconds = r),
      (c.spanToJSON = t),
      (c.spanToTraceContext = function (a) {
        let { spanId: b, traceId: c, isRemote: d } = a.spanContext(),
          e = d ? b : t(a).parent_span_id,
          f = i.getCapturedScopesOnSpan(a).scope;
        return {
          parent_span_id: e,
          span_id: d ? f?.getPropagationContext().propagationSpanId || k.generateSpanId() : b,
          trace_id: c,
        };
      }),
      (c.spanToTraceHeader = function (a) {
        let { traceId: b, spanId: c } = a.spanContext(),
          d = u(a);
        return m.generateSentryTraceHeader(b, c, d);
      }),
      (c.spanToTransactionTraceContext = function (a) {
        let { spanId: b, traceId: c } = a.spanContext(),
          { data: d, op: e, parent_span_id: f, status: g, origin: h, links: i } = t(a);
        return {
          parent_span_id: f,
          span_id: b,
          trace_id: c,
          data: d,
          op: e,
          status: g,
          origin: h,
          links: i,
        };
      }),
      (c.updateSpanName = function (a, b) {
        (a.updateName(b),
          a.setAttributes({
            [g.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',
            [g.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: b,
          }));
      }));
  },
  70826,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(64341),
      f = a.r(11677),
      g = a.r(43679),
      h = a.r(45889),
      i = a.r(47534),
      j = !1;
    c.registerSpanErrorInstrumentation = function () {
      j ||
        ((a.tag = 'sentry_tracingErrorCallback'),
        (j = !0),
        e.addGlobalErrorInstrumentationHandler(a),
        f.addGlobalUnhandledRejectionInstrumentationHandler(a));
      function a() {
        let a = h.getActiveSpan(),
          b = a && h.getRootSpan(a);
        if (b) {
          let a = 'internal_error';
          (d.DEBUG_BUILD && g.debug.log(`[Tracing] Root span: ${a} -> Global error occurred`),
            b.setStatus({ code: i.SPAN_STATUS_ERROR, message: a }));
        }
      }
    };
  },
  79168,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697);
    c.hasSpansEnabled = function (a) {
      if ('boolean' == typeof __SENTRY_TRACING__ && !__SENTRY_TRACING__) return !1;
      let b = a || d.getClient()?.getOptions();
      return !!b && (null != b.tracesSampleRate || !!b.tracesSampler);
    };
  },
  92487,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.DEFAULT_ENVIRONMENT = 'production'));
  },
  7001,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(92487),
      e = a.r(57697),
      f = a.r(21016),
      g = a.r(16073),
      h = a.r(77885),
      i = a.r(79168),
      j = a.r(78707),
      k = a.r(45889),
      l = a.r(13340),
      m = '_frozenDsc';
    function n(a, b) {
      let c = b.getOptions(),
        { publicKey: e } = b.getDsn() || {},
        f = {
          environment: c.environment || d.DEFAULT_ENVIRONMENT,
          release: c.release,
          public_key: e,
          trace_id: a,
          org_id: h.extractOrgIdFromClient(b),
        };
      return (b.emit('createDsc', f), f);
    }
    function o(a) {
      let b = e.getClient();
      if (!b) return {};
      let c = k.getRootSpan(a),
        d = k.spanToJSON(c),
        h = d.data,
        j = c.spanContext().traceState,
        o =
          j?.get('sentry.sample_rate') ??
          h[f.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ??
          h[f.SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE];
      function p(a) {
        return (('number' == typeof o || 'string' == typeof o) && (a.sample_rate = `${o}`), a);
      }
      let q = c[m];
      if (q) return p(q);
      let r = j?.get('sentry.dsc'),
        s = r && g.baggageHeaderToDynamicSamplingContext(r);
      if (s) return p(s);
      let t = n(a.spanContext().traceId, b),
        u = h[f.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE],
        v = d.description;
      return (
        'url' !== u && v && (t.transaction = v),
        i.hasSpansEnabled() &&
          ((t.sampled = String(k.spanIsSampled(c))),
          (t.sample_rand =
            j?.get('sentry.sample_rand') ??
            l.getCapturedScopesOnSpan(c).scope?.getPropagationContext().sampleRand.toString())),
        p(t),
        b.emit('createDsc', t, c),
        t
      );
    }
    ((c.freezeDscOnSpan = function (a, b) {
      j.addNonEnumerableProperty(a, m, b);
    }),
      (c.getDynamicSamplingContextFromClient = n),
      (c.getDynamicSamplingContextFromScope = function (a, b) {
        let c = b.getPropagationContext();
        return c.dsc || n(c.traceId, a);
      }),
      (c.getDynamicSamplingContextFromSpan = o),
      (c.spanToBaggageHeader = function (a) {
        let b = o(a);
        return g.dynamicSamplingContextToSentryBaggageHeader(b);
      }));
  },
  40367,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(66652),
      e = a.r(45889);
    c.SentryNonRecordingSpan = class {
      constructor(a = {}) {
        ((this._traceId = a.traceId || d.generateTraceId()),
          (this._spanId = a.spanId || d.generateSpanId()));
      }
      spanContext() {
        return { spanId: this._spanId, traceId: this._traceId, traceFlags: e.TRACE_FLAG_NONE };
      }
      end(a) {}
      setAttribute(a, b) {
        return this;
      }
      setAttributes(a) {
        return this;
      }
      setStatus(a) {
        return this;
      }
      updateName(a) {
        return this;
      }
      isRecording() {
        return !1;
      }
      addEvent(a, b, c) {
        return this;
      }
      addLink(a) {
        return this;
      }
      addLinks(a) {
        return this;
      }
      recordException(a, b) {}
    };
  },
  21731,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(59242),
      e = a.r(78707),
      f = a.r(1805);
    function g(b, c = 100, h = Infinity) {
      try {
        return (function b(
          c,
          g,
          h = Infinity,
          i = Infinity,
          j = (function () {
            let a = new WeakSet();
            return [
              function (b) {
                return !!a.has(b) || (a.add(b), !1);
              },
              function (b) {
                a.delete(b);
              },
            ];
          })()
        ) {
          let [k, l] = j;
          if (
            null == g ||
            ['boolean', 'string'].includes(typeof g) ||
            ('number' == typeof g && Number.isFinite(g))
          )
            return g;
          let m = (function (b, c) {
            try {
              if ('domain' === b && c && 'object' == typeof c && c._events) return '[Domain]';
              if ('domainEmitter' === b) return '[DomainEmitter]';
              if (c === a.g) return '[Global]';
              if ('undefined' != typeof document && c === document) return '[Document]';
              if (d.isVueViewModel(c)) return '[VueViewModel]';
              if (d.isSyntheticEvent(c)) return '[SyntheticEvent]';
              if ('number' == typeof c && !Number.isFinite(c)) return `[${c}]`;
              if ('function' == typeof c) return `[Function: ${f.getFunctionName(c)}]`;
              if ('symbol' == typeof c) return `[${String(c)}]`;
              if ('bigint' == typeof c) return `[BigInt: ${String(c)}]`;
              let e = (function (a) {
                let b = Object.getPrototypeOf(a);
                return b?.constructor ? b.constructor.name : 'null prototype';
              })(c);
              if (/^HTML(\w*)Element$/.test(e)) return `[HTMLElement: ${e}]`;
              return `[object ${e}]`;
            } catch (a) {
              return `**non-serializable** (${a})`;
            }
          })(c, g);
          if (!m.startsWith('[object ')) return m;
          if (g.__sentry_skip_normalization__) return g;
          let n =
            'number' == typeof g.__sentry_override_normalization_depth__
              ? g.__sentry_override_normalization_depth__
              : h;
          if (0 === n) return m.replace('object ', '');
          if (k(g)) return '[Circular ~]';
          if (g && 'function' == typeof g.toJSON)
            try {
              let a = g.toJSON();
              return b('', a, n - 1, i, j);
            } catch {}
          let o = Array.isArray(g) ? [] : {},
            p = 0,
            q = e.convertToPlainObject(g);
          for (let a in q) {
            if (!Object.prototype.hasOwnProperty.call(q, a)) continue;
            if (p >= i) {
              o[a] = '[MaxProperties ~]';
              break;
            }
            let c = q[a];
            ((o[a] = b(a, c, n - 1, i, j)), p++);
          }
          return (l(g), o);
        })('', b, c, h);
      } catch (a) {
        return { ERROR: `**non-serializable** (${a})` };
      }
    }
    ((c.normalize = g),
      (c.normalizeToSize = function a(b, c = 3, d = 102400) {
        let e = g(b, c);
        return ~-encodeURI(JSON.stringify(e)).split(/%..|./).length > d ? a(b, c - 1, d) : e;
      }),
      (c.normalizeUrlToBase = function (a, b) {
        let c = b.replace(/\\/g, '/').replace(/[|\\{}()[\]^$+*?.]/g, '\\$&'),
          d = a;
        try {
          d = decodeURI(a);
        } catch {}
        return d
          .replace(/\\/g, '/')
          .replace(/webpack:\/?/g, '')
          .replace(RegExp(`(file://)?/*${c}/*`, 'ig'), 'app:///');
      }));
  },
  50616,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(5356),
      e = a.r(77885),
      f = a.r(21731),
      g = a.r(6325);
    function h(a, b) {
      for (let c of a[1]) {
        let a = c[0].type;
        if (b(c, a)) return !0;
      }
      return !1;
    }
    function i(a) {
      let b = d.getSentryCarrier(g.GLOBAL_OBJ);
      return b.encodePolyfill ? b.encodePolyfill(a) : new TextEncoder().encode(a);
    }
    let j = {
      session: 'session',
      sessions: 'session',
      attachment: 'attachment',
      transaction: 'transaction',
      event: 'error',
      client_report: 'internal',
      user_report: 'default',
      profile: 'profile',
      profile_chunk: 'profile',
      replay_event: 'replay',
      replay_recording: 'replay',
      check_in: 'monitor',
      feedback: 'feedback',
      span: 'span',
      raw_security: 'security',
      log: 'log_item',
    };
    ((c.addItemToEnvelope = function (a, b) {
      let [c, d] = a;
      return [c, [...d, b]];
    }),
      (c.createAttachmentEnvelopeItem = function (a) {
        let b = 'string' == typeof a.data ? i(a.data) : a.data;
        return [
          {
            type: 'attachment',
            length: b.length,
            filename: a.filename,
            content_type: a.contentType,
            attachment_type: a.attachmentType,
          },
          b,
        ];
      }),
      (c.createEnvelope = function (a, b = []) {
        return [a, b];
      }),
      (c.createEventEnvelopeHeaders = function (a, b, c, d) {
        let f = a.sdkProcessingMetadata?.dynamicSamplingContext;
        return {
          event_id: a.event_id,
          sent_at: new Date().toISOString(),
          ...(b && { sdk: b }),
          ...(!!c && d && { dsn: e.dsnToString(d) }),
          ...(f && { trace: f }),
        };
      }),
      (c.createSpanEnvelopeItem = function (a) {
        return [{ type: 'span' }, a];
      }),
      (c.envelopeContainsItemType = function (a, b) {
        return h(a, (a, c) => b.includes(c));
      }),
      (c.envelopeItemTypeToDataCategory = function (a) {
        return j[a];
      }),
      (c.forEachEnvelopeItem = h),
      (c.getSdkMetadataForEnvelopeHeader = function (a) {
        if (!a?.sdk) return;
        let { name: b, version: c } = a.sdk;
        return { name: b, version: c };
      }),
      (c.parseEnvelope = function (a) {
        let b = 'string' == typeof a ? i(a) : a;
        function c(a) {
          let c = b.subarray(0, a);
          return ((b = b.subarray(a + 1)), c);
        }
        function e() {
          let a = b.indexOf(10);
          return (
            a < 0 && (a = b.length),
            JSON.parse(
              (function (a) {
                let b = d.getSentryCarrier(g.GLOBAL_OBJ);
                return b.decodePolyfill ? b.decodePolyfill(a) : new TextDecoder().decode(a);
              })(c(a))
            )
          );
        }
        let f = e(),
          h = [];
        for (; b.length; ) {
          let a = e(),
            b = 'number' == typeof a.length ? a.length : void 0;
          h.push([a, b ? c(b) : e()]);
        }
        return [f, h];
      }),
      (c.serializeEnvelope = function (a) {
        let [b, c] = a,
          d = JSON.stringify(b);
        function e(a) {
          'string' == typeof d
            ? (d = 'string' == typeof a ? d + a : [i(d), a])
            : d.push('string' == typeof a ? i(a) : a);
        }
        for (let a of c) {
          let [b, c] = a;
          if (
            (e(`
${JSON.stringify(b)}
`),
            'string' == typeof c || c instanceof Uint8Array)
          )
            e(c);
          else {
            let a;
            try {
              a = JSON.stringify(c);
            } catch {
              a = JSON.stringify(f.normalize(c));
            }
            e(a);
          }
        }
        return 'string' == typeof d
          ? d
          : (function (a) {
              let b = new Uint8Array(a.reduce((a, b) => a + b.length, 0)),
                c = 0;
              for (let d of a) (b.set(d, c), (c += d.length));
              return b;
            })(d);
      }));
  },
  6888,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(27966);
    ((c.reparentChildSpans = function (a, b) {
      let c = b.parent_span_id,
        d = b.span_id;
      if (c) for (let b of a) b.parent_span_id === d && (b.parent_span_id = c);
    }),
      (c.shouldIgnoreSpan = function (a, b) {
        if (!b?.length || !a.description) return !1;
        for (let e of b) {
          var c;
          if ('string' == typeof (c = e) || c instanceof RegExp) {
            if (d.isMatchingPattern(a.description, e)) return !0;
            continue;
          }
          if (!e.name && !e.op) continue;
          let b = !e.name || d.isMatchingPattern(a.description, e.name),
            f = !e.op || (a.op && d.isMatchingPattern(a.op, e.op));
          if (b && f) return !0;
        }
        return !1;
      }));
  },
  78669,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(7001),
      e = a.r(77885),
      f = a.r(50616),
      g = a.r(6888),
      h = a.r(45889);
    function i(a, b) {
      if (!b) return a;
      let c = a.sdk || {};
      return (
        (a.sdk = {
          ...c,
          name: c.name || b.name,
          version: c.version || b.version,
          integrations: [...(a.sdk?.integrations || []), ...(b.integrations || [])],
          packages: [...(a.sdk?.packages || []), ...(b.packages || [])],
          settings: a.sdk?.settings || b.settings ? { ...a.sdk?.settings, ...b.settings } : void 0,
        }),
        a
      );
    }
    ((c._enhanceEventWithSdkInfo = i),
      (c.createEventEnvelope = function (a, b, c, d) {
        let e = f.getSdkMetadataForEnvelopeHeader(c),
          g = a.type && 'replay_event' !== a.type ? a.type : 'event';
        i(a, c?.sdk);
        let h = f.createEventEnvelopeHeaders(a, e, d, b);
        delete a.sdkProcessingMetadata;
        let j = [{ type: g }, a];
        return f.createEnvelope(h, [j]);
      }),
      (c.createSessionEnvelope = function (a, b, c, d) {
        let g = f.getSdkMetadataForEnvelopeHeader(c),
          h = {
            sent_at: new Date().toISOString(),
            ...(g && { sdk: g }),
            ...(!!d && b && { dsn: e.dsnToString(b) }),
          },
          i = 'aggregates' in a ? [{ type: 'sessions' }, a] : [{ type: 'session' }, a.toJSON()];
        return f.createEnvelope(h, [i]);
      }),
      (c.createSpanEnvelope = function (a, b) {
        let c = d.getDynamicSamplingContextFromSpan(a[0]),
          i = b?.getDsn(),
          j = b?.getOptions().tunnel,
          k = {
            sent_at: new Date().toISOString(),
            ...(!!c.trace_id && !!c.public_key && { trace: c }),
            ...(!!j && i && { dsn: e.dsnToString(i) }),
          },
          { beforeSendSpan: l, ignoreSpans: m } = b?.getOptions() || {},
          n = m?.length ? a.filter((a) => !g.shouldIgnoreSpan(h.spanToJSON(a), m)) : a,
          o = a.length - n.length;
        o && b?.recordDroppedEvent('before_send', 'span', o);
        let p = l
            ? (a) => {
                let b = h.spanToJSON(a),
                  c = l(b);
                return c || (h.showSpanDropWarning(), b);
              }
            : h.spanToJSON,
          q = [];
        for (let a of n) {
          let b = p(a);
          b && q.push(f.createSpanEnvelopeItem(b));
        }
        return f.createEnvelope(k, q);
      }));
  },
  59534,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = a.r(45889);
    ((c.logSpanEnd = function (a) {
      if (!d.DEBUG_BUILD) return;
      let { description: b = '< unknown name >', op: c = '< unknown op >' } = f.spanToJSON(a),
        { spanId: g } = a.spanContext(),
        h = f.getRootSpan(a) === a,
        i = `[Tracing] Finishing "${c}" ${h ? 'root ' : ''}span "${b}" with ID ${g}`;
      e.debug.log(i);
    }),
      (c.logSpanStart = function (a) {
        if (!d.DEBUG_BUILD) return;
        let {
            description: b = '< unknown name >',
            op: c = '< unknown op >',
            parent_span_id: g,
          } = f.spanToJSON(a),
          { spanId: h } = a.spanContext(),
          i = f.spanIsSampled(a),
          j = f.getRootSpan(a),
          k = j === a,
          l = `[Tracing] Starting ${i ? 'sampled' : 'unsampled'} ${k ? 'root ' : ''}span`,
          m = [`op: ${c}`, `name: ${b}`, `ID: ${h}`];
        if ((g && m.push(`parent ID: ${g}`), !k)) {
          let { op: a, description: b } = f.spanToJSON(j);
          (m.push(`root ID: ${j.spanContext().spanId}`),
            a && m.push(`root op: ${a}`),
            b && m.push(`root description: ${b}`));
        }
        e.debug.log(`${l}
  ${m.join('\n  ')}`);
      }));
  },
  76537,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(21016),
      f = a.r(43679),
      g = a.r(45889);
    ((c.setMeasurement = function (a, b, c, h = g.getActiveSpan()) {
      let i = h && g.getRootSpan(h);
      i &&
        (d.DEBUG_BUILD &&
          f.debug.log(`[Measurement] Setting measurement on root span: ${a} = ${b} ${c}`),
        i.addEvent(a, {
          [e.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: b,
          [e.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: c,
        }));
    }),
      (c.timedEventsToMeasurements = function (a) {
        if (!a || 0 === a.length) return;
        let b = {};
        return (
          a.forEach((a) => {
            let c = a.attributes || {},
              d = c[e.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT],
              f = c[e.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE];
            'string' == typeof d && 'number' == typeof f && (b[a.name] = { value: f, unit: d });
          }),
          b
        );
      }));
  },
  31685,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(25350),
      f = a.r(78669),
      g = a.r(21016),
      h = a.r(43679),
      i = a.r(66652),
      j = a.r(45889),
      k = a.r(59671),
      l = a.r(7001),
      m = a.r(59534),
      n = a.r(76537),
      o = a.r(13340);
    class p {
      constructor(a = {}) {
        ((this._traceId = a.traceId || i.generateTraceId()),
          (this._spanId = a.spanId || i.generateSpanId()),
          (this._startTime = a.startTimestamp || k.timestampInSeconds()),
          (this._links = a.links),
          (this._attributes = {}),
          this.setAttributes({
            [g.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',
            [g.SEMANTIC_ATTRIBUTE_SENTRY_OP]: a.op,
            ...a.attributes,
          }),
          (this._name = a.name),
          a.parentSpanId && (this._parentSpanId = a.parentSpanId),
          'sampled' in a && (this._sampled = a.sampled),
          a.endTimestamp && (this._endTime = a.endTimestamp),
          (this._events = []),
          (this._isStandaloneSpan = a.isStandalone),
          this._endTime && this._onSpanEnded());
      }
      addLink(a) {
        return (this._links ? this._links.push(a) : (this._links = [a]), this);
      }
      addLinks(a) {
        return (this._links ? this._links.push(...a) : (this._links = a), this);
      }
      recordException(a, b) {}
      spanContext() {
        let { _spanId: a, _traceId: b, _sampled: c } = this;
        return { spanId: a, traceId: b, traceFlags: c ? j.TRACE_FLAG_SAMPLED : j.TRACE_FLAG_NONE };
      }
      setAttribute(a, b) {
        return (void 0 === b ? delete this._attributes[a] : (this._attributes[a] = b), this);
      }
      setAttributes(a) {
        return (Object.keys(a).forEach((b) => this.setAttribute(b, a[b])), this);
      }
      updateStartTime(a) {
        this._startTime = j.spanTimeInputToSeconds(a);
      }
      setStatus(a) {
        return ((this._status = a), this);
      }
      updateName(a) {
        return (
          (this._name = a),
          this.setAttribute(g.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom'),
          this
        );
      }
      end(a) {
        this._endTime ||
          ((this._endTime = j.spanTimeInputToSeconds(a)), m.logSpanEnd(this), this._onSpanEnded());
      }
      getSpanJSON() {
        return {
          data: this._attributes,
          description: this._name,
          op: this._attributes[g.SEMANTIC_ATTRIBUTE_SENTRY_OP],
          parent_span_id: this._parentSpanId,
          span_id: this._spanId,
          start_timestamp: this._startTime,
          status: j.getStatusMessage(this._status),
          timestamp: this._endTime,
          trace_id: this._traceId,
          origin: this._attributes[g.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],
          profile_id: this._attributes[g.SEMANTIC_ATTRIBUTE_PROFILE_ID],
          exclusive_time: this._attributes[g.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME],
          measurements: n.timedEventsToMeasurements(this._events),
          is_segment: (this._isStandaloneSpan && j.getRootSpan(this) === this) || void 0,
          segment_id: this._isStandaloneSpan ? j.getRootSpan(this).spanContext().spanId : void 0,
          links: j.convertSpanLinksForEnvelope(this._links),
        };
      }
      isRecording() {
        return !this._endTime && !!this._sampled;
      }
      addEvent(a, b, c) {
        e.DEBUG_BUILD && h.debug.log('[Tracing] Adding an event to span:', a);
        let d = q(b) ? b : c || k.timestampInSeconds(),
          f = q(b) ? {} : b || {},
          g = { name: a, time: j.spanTimeInputToSeconds(d), attributes: f };
        return (this._events.push(g), this);
      }
      isStandaloneSpan() {
        return !!this._isStandaloneSpan;
      }
      _onSpanEnded() {
        let a = d.getClient();
        if (
          (a && a.emit('spanEnd', this), !(this._isStandaloneSpan || this === j.getRootSpan(this)))
        )
          return;
        if (this._isStandaloneSpan)
          return void (this._sampled
            ? (function (a) {
                let b = d.getClient();
                if (!b) return;
                let c = a[1];
                if (!c || 0 === c.length) return b.recordDroppedEvent('before_send', 'span');
                b.sendEnvelope(a);
              })(f.createSpanEnvelope([this], a))
            : (e.DEBUG_BUILD &&
                h.debug.log(
                  '[Tracing] Discarding standalone span because its trace was not chosen to be sampled.'
                ),
              a && a.recordDroppedEvent('sample_rate', 'span')));
        let b = this._convertSpanToTransaction();
        b && (o.getCapturedScopesOnSpan(this).scope || d.getCurrentScope()).captureEvent(b);
      }
      _convertSpanToTransaction() {
        if (!r(j.spanToJSON(this))) return;
        this._name ||
          (e.DEBUG_BUILD &&
            h.debug.warn('Transaction has no name, falling back to `<unlabeled transaction>`.'),
          (this._name = '<unlabeled transaction>'));
        let { scope: a, isolationScope: b } = o.getCapturedScopesOnSpan(this),
          c = a?.getScopeData().sdkProcessingMetadata?.normalizedRequest;
        if (!0 !== this._sampled) return;
        let d = j
            .getSpanDescendants(this)
            .filter((a) => {
              var b;
              return a !== this && !((b = a) instanceof p && b.isStandaloneSpan());
            })
            .map((a) => j.spanToJSON(a))
            .filter(r),
          f = this._attributes[g.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];
        (delete this._attributes[g.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME],
          d.forEach((a) => {
            delete a.data[g.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];
          }));
        let i = {
            contexts: { trace: j.spanToTransactionTraceContext(this) },
            spans:
              d.length > 1e3
                ? d.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, 1e3)
                : d,
            start_timestamp: this._startTime,
            timestamp: this._endTime,
            transaction: this._name,
            type: 'transaction',
            sdkProcessingMetadata: {
              capturedSpanScope: a,
              capturedSpanIsolationScope: b,
              dynamicSamplingContext: l.getDynamicSamplingContextFromSpan(this),
            },
            request: c,
            ...(f && { transaction_info: { source: f } }),
          },
          k = n.timedEventsToMeasurements(this._events);
        return (
          k &&
            Object.keys(k).length &&
            (e.DEBUG_BUILD &&
              h.debug.log(
                '[Measurements] Adding measurements to transaction event',
                JSON.stringify(k, void 0, 2)
              ),
            (i.measurements = k)),
          i
        );
      }
    }
    function q(a) {
      return (a && 'number' == typeof a) || a instanceof Date || Array.isArray(a);
    }
    function r(a) {
      return !!a.start_timestamp && !!a.timestamp && !!a.span_id && !!a.trace_id;
    }
    c.SentrySpan = p;
  },
  96718,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(59242);
    c.handleCallbackErrors = function (a, b, c = () => {}) {
      var e, f, g;
      let h;
      try {
        h = a();
      } catch (a) {
        throw (b(a), c(), a);
      }
      return (
        (e = h),
        (f = b),
        (g = c),
        d.isThenable(e)
          ? e.then(
              (a) => (g(), a),
              (a) => {
                throw (f(a), g(), a);
              }
            )
          : (g(), e)
      );
    };
  },
  83054,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = a.r(79168),
      g = a.r(87726);
    c.sampleSpan = function (a, b, c) {
      let h, i;
      if (!f.hasSpansEnabled(a)) return [!1];
      'function' == typeof a.tracesSampler
        ? ((h = a.tracesSampler({
            ...b,
            inheritOrSampleWith: (a) =>
              'number' == typeof b.parentSampleRate
                ? b.parentSampleRate
                : 'boolean' == typeof b.parentSampled
                  ? Number(b.parentSampled)
                  : a,
          })),
          (i = !0))
        : void 0 !== b.parentSampled
          ? (h = b.parentSampled)
          : void 0 !== a.tracesSampleRate && ((h = a.tracesSampleRate), (i = !0));
      let j = g.parseSampleRate(h);
      if (void 0 === j)
        return (
          d.DEBUG_BUILD &&
            e.debug.warn(
              `[Tracing] Discarding root span because of invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(h)} of type ${JSON.stringify(typeof h)}.`
            ),
          [!1]
        );
      if (!j)
        return (
          d.DEBUG_BUILD &&
            e.debug.log(
              `[Tracing] Discarding transaction because ${'function' == typeof a.tracesSampler ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'}`
            ),
          [!1, j, i]
        );
      let k = c < j;
      return (
        !k &&
          d.DEBUG_BUILD &&
          e.debug.log(
            `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(h)})`
          ),
        [k, j, i]
      );
    };
  },
  45481,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(85194),
      e = a.r(5356),
      f = a.r(57697),
      g = a.r(25350),
      h = a.r(21016),
      i = a.r(16073),
      j = a.r(43679),
      k = a.r(96718),
      l = a.r(79168),
      m = a.r(87726),
      n = a.r(66652),
      o = a.r(96245),
      p = a.r(45889),
      q = a.r(12138),
      r = a.r(7001),
      s = a.r(59534),
      t = a.r(83054),
      u = a.r(40367),
      v = a.r(31685),
      w = a.r(47534),
      x = a.r(13340),
      y = '__SENTRY_SUPPRESS_TRACING__';
    function z(a, b) {
      let c = D();
      return c.withActiveSpan
        ? c.withActiveSpan(a, b)
        : f.withScope((c) => (o._setSpanForScope(c, a || void 0), b(c)));
    }
    function A(a) {
      return f.withScope(
        (b) => (
          b.setPropagationContext({ traceId: n.generateTraceId(), sampleRand: Math.random() }),
          g.DEBUG_BUILD &&
            j.debug.log(`Starting a new trace with id ${b.getPropagationContext().traceId}`),
          z(null, a)
        )
      );
    }
    function B({ parentSpan: a, spanArguments: b, forceTransaction: c, scope: d }) {
      let e;
      if (!l.hasSpansEnabled()) {
        let d = new u.SentryNonRecordingSpan();
        if (c || !a) {
          let a = {
            sampled: 'false',
            sample_rate: '0',
            transaction: b.name,
            ...r.getDynamicSamplingContextFromSpan(d),
          };
          r.freezeDscOnSpan(d, a);
        }
        return d;
      }
      let g = f.getIsolationScope();
      if (a && !c)
        ((e = (function (a, b, c) {
          let { spanId: d, traceId: e } = a.spanContext(),
            g = !b.getScopeData().sdkProcessingMetadata[y] && p.spanIsSampled(a),
            h = g
              ? new v.SentrySpan({ ...c, parentSpanId: d, traceId: e, sampled: g })
              : new u.SentryNonRecordingSpan({ traceId: e });
          p.addChildSpanToSpan(a, h);
          let i = f.getClient();
          return (i && (i.emit('spanStart', h), c.endTimestamp && i.emit('spanEnd', h)), h);
        })(a, d, b)),
          p.addChildSpanToSpan(a, e));
      else if (a) {
        let c = r.getDynamicSamplingContextFromSpan(a),
          { traceId: f, spanId: g } = a.spanContext(),
          h = p.spanIsSampled(a);
        ((e = E({ traceId: f, parentSpanId: g, ...b }, d, h)), r.freezeDscOnSpan(e, c));
      } else {
        let {
          traceId: a,
          dsc: c,
          parentSpanId: f,
          sampled: h,
        } = { ...g.getPropagationContext(), ...d.getPropagationContext() };
        ((e = E({ traceId: a, parentSpanId: f, ...b }, d, h)), c && r.freezeDscOnSpan(e, c));
      }
      return (s.logSpanStart(e), x.setCapturedScopesOnSpan(e, d, g), e);
    }
    function C(a) {
      let b = { isStandalone: (a.experimental || {}).standalone, ...a };
      if (a.startTime) {
        let c = { ...b };
        return ((c.startTimestamp = p.spanTimeInputToSeconds(a.startTime)), delete c.startTime, c);
      }
      return b;
    }
    function D() {
      let a = e.getMainCarrier();
      return d.getAsyncContextStrategy(a);
    }
    function E(a, b, c) {
      let d = f.getClient(),
        e = d?.getOptions() || {},
        { name: i = '' } = a,
        k = { spanAttributes: { ...a.attributes }, spanName: i, parentSampled: c };
      d?.emit('beforeSampling', k, { decision: !1 });
      let l = k.parentSampled ?? c,
        n = k.spanAttributes,
        o = b.getPropagationContext(),
        [p, q, r] = b.getScopeData().sdkProcessingMetadata[y]
          ? [!1]
          : t.sampleSpan(
              e,
              {
                name: i,
                parentSampled: l,
                attributes: n,
                parentSampleRate: m.parseSampleRate(o.dsc?.sample_rate),
              },
              o.sampleRand
            ),
        s = new v.SentrySpan({
          ...a,
          attributes: {
            [h.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',
            [h.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: void 0 !== q && r ? q : void 0,
            ...n,
          },
          sampled: p,
        });
      return (
        !p &&
          d &&
          (g.DEBUG_BUILD &&
            j.debug.log(
              '[Tracing] Discarding root span because its trace was not chosen to be sampled.'
            ),
          d.recordDroppedEvent('sample_rate', 'transaction')),
        d && d.emit('spanStart', s),
        s
      );
    }
    function F(a, b) {
      if (b) return b;
      if (null === b) return;
      let c = o._getSpanForScope(a);
      if (!c) return;
      let d = f.getClient();
      return (d ? d.getOptions() : {}).parentSpanIsAlwaysRootSpan ? p.getRootSpan(c) : c;
    }
    function G(a) {
      return void 0 !== a ? (b) => z(a, b) : (a) => a();
    }
    ((c.continueTrace = (a, b) => {
      let c = e.getMainCarrier(),
        g = d.getAsyncContextStrategy(c);
      if (g.continueTrace) return g.continueTrace(a, b);
      let { sentryTrace: h, baggage: j } = a,
        k = f.getClient(),
        l = i.baggageHeaderToDynamicSamplingContext(j);
      return k && !q.shouldContinueTrace(k, l?.org_id)
        ? A(b)
        : f.withScope((a) => {
            let c = q.propagationContextFromHeaders(h, j);
            return (a.setPropagationContext(c), b());
          });
    }),
      (c.startInactiveSpan = function (a) {
        let b = D();
        if (b.startInactiveSpan) return b.startInactiveSpan(a);
        let c = C(a),
          { forceTransaction: d, parentSpan: e } = a;
        return (
          a.scope ? (b) => f.withScope(a.scope, b) : void 0 !== e ? (a) => z(e, a) : (a) => a()
        )(() => {
          let b = f.getCurrentScope(),
            g = F(b, e);
          return a.onlyIfParent && !g
            ? new u.SentryNonRecordingSpan()
            : B({ parentSpan: g, spanArguments: c, forceTransaction: d, scope: b });
        });
      }),
      (c.startNewTrace = A),
      (c.startSpan = function (a, b) {
        let c = D();
        if (c.startSpan) return c.startSpan(a, b);
        let d = C(a),
          { forceTransaction: e, parentSpan: g, scope: h } = a,
          i = h?.clone();
        return f.withScope(i, () =>
          G(g)(() => {
            let c = f.getCurrentScope(),
              h = F(c, g),
              i =
                a.onlyIfParent && !h
                  ? new u.SentryNonRecordingSpan()
                  : B({ parentSpan: h, spanArguments: d, forceTransaction: e, scope: c });
            return (
              o._setSpanForScope(c, i),
              k.handleCallbackErrors(
                () => b(i),
                () => {
                  let { status: a } = p.spanToJSON(i);
                  i.isRecording() &&
                    (!a || 'ok' === a) &&
                    i.setStatus({ code: w.SPAN_STATUS_ERROR, message: 'internal_error' });
                },
                () => {
                  i.end();
                }
              )
            );
          })
        );
      }),
      (c.startSpanManual = function (a, b) {
        let c = D();
        if (c.startSpanManual) return c.startSpanManual(a, b);
        let d = C(a),
          { forceTransaction: e, parentSpan: g, scope: h } = a,
          i = h?.clone();
        return f.withScope(i, () =>
          G(g)(() => {
            let c = f.getCurrentScope(),
              h = F(c, g),
              i =
                a.onlyIfParent && !h
                  ? new u.SentryNonRecordingSpan()
                  : B({ parentSpan: h, spanArguments: d, forceTransaction: e, scope: c });
            return (
              o._setSpanForScope(c, i),
              k.handleCallbackErrors(
                () => b(i, () => i.end()),
                () => {
                  let { status: a } = p.spanToJSON(i);
                  i.isRecording() &&
                    (!a || 'ok' === a) &&
                    i.setStatus({ code: w.SPAN_STATUS_ERROR, message: 'internal_error' });
                }
              )
            );
          })
        );
      }),
      (c.suppressTracing = function (a) {
        let b = D();
        return b.suppressTracing
          ? b.suppressTracing(a)
          : f.withScope((b) => {
              b.setSDKProcessingMetadata({ [y]: !0 });
              let c = a();
              return (b.setSDKProcessingMetadata({ [y]: void 0 }), c);
            });
      }),
      (c.withActiveSpan = z));
  },
  59980,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(25350),
      f = a.r(21016),
      g = a.r(43679),
      h = a.r(79168),
      i = a.r(96245),
      j = a.r(45889),
      k = a.r(59671),
      l = a.r(7001),
      m = a.r(40367),
      n = a.r(31685),
      o = a.r(47534),
      p = a.r(45481),
      q = { idleTimeout: 1e3, finalTimeout: 3e4, childSpanTimeout: 15e3 };
    ((c.TRACING_DEFAULTS = q),
      (c.startIdleSpan = function (a, b = {}) {
        let c,
          r = new Map(),
          s = !1,
          t = 'externalFinish',
          u = !b.disableAutoFinish,
          v = [],
          {
            idleTimeout: w = q.idleTimeout,
            finalTimeout: x = q.finalTimeout,
            childSpanTimeout: y = q.childSpanTimeout,
            beforeSpanEnd: z,
          } = b,
          A = d.getClient();
        if (!A || !h.hasSpansEnabled()) {
          let a = new m.SentryNonRecordingSpan(),
            b = { sample_rate: '0', sampled: 'false', ...l.getDynamicSamplingContextFromSpan(a) };
          return (l.freezeDscOnSpan(a, b), a);
        }
        let B = d.getCurrentScope(),
          C = j.getActiveSpan(),
          D = (function (a) {
            let b = p.startInactiveSpan(a);
            return (
              i._setSpanForScope(d.getCurrentScope(), b),
              e.DEBUG_BUILD && g.debug.log('[Tracing] Started span is an idle span'),
              b
            );
          })(a);
        function E() {
          c && (clearTimeout(c), (c = void 0));
        }
        function F(a) {
          (E(),
            (c = setTimeout(() => {
              !s && 0 === r.size && u && ((t = 'idleTimeout'), D.end(a));
            }, w)));
        }
        function G(a) {
          c = setTimeout(() => {
            !s && u && ((t = 'heartbeatFailed'), D.end(a));
          }, y);
        }
        function H(a) {
          ((s = !0), r.clear(), v.forEach((a) => a()), i._setSpanForScope(B, C));
          let b = j.spanToJSON(D),
            { start_timestamp: c } = b;
          if (!c) return;
          (b.data[f.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON] ||
            D.setAttribute(f.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, t),
            g.debug.log(`[Tracing] Idle span "${b.op}" finished`));
          let d = j.getSpanDescendants(D).filter((a) => a !== D),
            h = 0;
          (d.forEach((b) => {
            b.isRecording() &&
              (b.setStatus({ code: o.SPAN_STATUS_ERROR, message: 'cancelled' }),
              b.end(a),
              e.DEBUG_BUILD &&
                g.debug.log(
                  '[Tracing] Cancelling span since span ended early',
                  JSON.stringify(b, void 0, 2)
                ));
            let { timestamp: c = 0, start_timestamp: d = 0 } = j.spanToJSON(b),
              f = d <= a,
              i = c - d <= (x + w) / 1e3;
            if (e.DEBUG_BUILD) {
              let a = JSON.stringify(b, void 0, 2);
              f
                ? i ||
                  g.debug.log(
                    '[Tracing] Discarding span since it finished after idle span final timeout',
                    a
                  )
                : g.debug.log(
                    '[Tracing] Discarding span since it happened after idle span was finished',
                    a
                  );
            }
            (!i || !f) && (j.removeChildSpanFromSpan(D, b), h++);
          }),
            h > 0 && D.setAttribute('sentry.idle_span_discarded_spans', h));
        }
        return (
          (D.end = new Proxy(D.end, {
            apply(a, b, c) {
              if ((z && z(D), b instanceof m.SentryNonRecordingSpan)) return;
              let [d, ...e] = c,
                f = d || k.timestampInSeconds(),
                g = j.spanTimeInputToSeconds(f),
                h = j.getSpanDescendants(D).filter((a) => a !== D);
              if (!h.length) return (H(g), Reflect.apply(a, b, [g, ...e]));
              let i = h.map((a) => j.spanToJSON(a).timestamp).filter((a) => !!a),
                l = i.length ? Math.max(...i) : void 0,
                n = j.spanToJSON(D).start_timestamp,
                o = Math.min(
                  n ? n + x / 1e3 : 1 / 0,
                  Math.max(n || -1 / 0, Math.min(g, l || 1 / 0))
                );
              return (H(o), Reflect.apply(a, b, [o, ...e]));
            },
          })),
          v.push(
            A.on('spanStart', (a) => {
              var b;
              !(
                s ||
                a === D ||
                j.spanToJSON(a).timestamp ||
                (a instanceof n.SentrySpan && a.isStandaloneSpan())
              ) &&
                j.getSpanDescendants(D).includes(a) &&
                ((b = a.spanContext().spanId),
                E(),
                r.set(b, !0),
                G(k.timestampInSeconds() + y / 1e3));
            })
          ),
          v.push(
            A.on('spanEnd', (a) => {
              if (!s) {
                var b;
                ((b = a.spanContext().spanId),
                  r.has(b) && r.delete(b),
                  0 === r.size && F(k.timestampInSeconds() + w / 1e3));
              }
            })
          ),
          v.push(
            A.on('idleSpanEnableAutoFinish', (a) => {
              a === D && ((u = !0), F(), r.size && G());
            })
          ),
          b.disableAutoFinish || F(),
          setTimeout(() => {
            s ||
              (D.setStatus({ code: o.SPAN_STATUS_ERROR, message: 'deadline_exceeded' }),
              (t = 'finalTimeout'),
              D.end());
          }, x),
          D
        );
      }));
  },
  3261,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(59242);
    class e {
      constructor(a) {
        ((this._state = 0), (this._handlers = []), this._runExecutor(a));
      }
      then(a, b) {
        return new e((c, d) => {
          (this._handlers.push([
            !1,
            (b) => {
              if (a)
                try {
                  c(a(b));
                } catch (a) {
                  d(a);
                }
              else c(b);
            },
            (a) => {
              if (b)
                try {
                  c(b(a));
                } catch (a) {
                  d(a);
                }
              else d(a);
            },
          ]),
            this._executeHandlers());
        });
      }
      catch(a) {
        return this.then((a) => a, a);
      }
      finally(a) {
        return new e((b, c) => {
          let d, e;
          return this.then(
            (b) => {
              ((e = !1), (d = b), a && a());
            },
            (b) => {
              ((e = !0), (d = b), a && a());
            }
          ).then(() => {
            if (e) return void c(d);
            b(d);
          });
        });
      }
      _executeHandlers() {
        if (0 === this._state) return;
        let a = this._handlers.slice();
        ((this._handlers = []),
          a.forEach((a) => {
            a[0] ||
              (1 === this._state && a[1](this._value),
              2 === this._state && a[2](this._value),
              (a[0] = !0));
          }));
      }
      _runExecutor(a) {
        let b = (a, b) => {
            if (0 === this._state) {
              if (d.isThenable(b)) return void b.then(c, e);
              ((this._state = a), (this._value = b), this._executeHandlers());
            }
          },
          c = (a) => {
            b(1, a);
          },
          e = (a) => {
            b(2, a);
          };
        try {
          a(c, e);
        } catch (a) {
          e(a);
        }
      }
    }
    ((c.SyncPromise = e),
      (c.rejectedSyncPromise = function (a) {
        return new e((b, c) => {
          c(a);
        });
      }),
      (c.resolvedSyncPromise = function (a) {
        return new e((b) => {
          b(a);
        });
      }));
  },
  63881,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = a.r(59242),
      g = a.r(3261);
    c.notifyEventProcessors = function a(b, c, h, i = 0) {
      return new g.SyncPromise((g, j) => {
        let k = b[i];
        if (null === c || 'function' != typeof k) g(c);
        else {
          let l = k({ ...c }, h);
          (d.DEBUG_BUILD &&
            k.id &&
            null === l &&
            e.debug.log(`Event processor "${k.id}" dropped event`),
            f.isThenable(l)
              ? l.then((c) => a(b, c, h, i + 1).then(g)).then(null, j)
              : a(b, l, h, i + 1)
                  .then(g)
                  .then(null, j));
        }
      });
    };
  },
  70197,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(7001),
      e = a.r(4956),
      f = a.r(45889);
    function g(a, b, c) {
      a[b] = e.merge(a[b], c, 1);
    }
    ((c.applyScopeDataToEvent = function (a, b) {
      var c, e, g, h;
      let { fingerprint: i, span: j, breadcrumbs: k, sdkProcessingMetadata: l } = b;
      ((function (a, b) {
        let { extra: c, tags: d, user: e, contexts: f, level: g, transactionName: h } = b;
        (Object.keys(c).length && (a.extra = { ...c, ...a.extra }),
          Object.keys(d).length && (a.tags = { ...d, ...a.tags }),
          Object.keys(e).length && (a.user = { ...e, ...a.user }),
          Object.keys(f).length && (a.contexts = { ...f, ...a.contexts }),
          g && (a.level = g),
          h && 'transaction' !== a.type && (a.transaction = h));
      })(a, b),
        j &&
          (function (a, b) {
            ((a.contexts = { trace: f.spanToTraceContext(b), ...a.contexts }),
              (a.sdkProcessingMetadata = {
                dynamicSamplingContext: d.getDynamicSamplingContextFromSpan(b),
                ...a.sdkProcessingMetadata,
              }));
            let c = f.getRootSpan(b),
              e = f.spanToJSON(c).description;
            e && !a.transaction && 'transaction' === a.type && (a.transaction = e);
          })(a, j),
        (c = a),
        (e = i),
        (c.fingerprint = c.fingerprint
          ? Array.isArray(c.fingerprint)
            ? c.fingerprint
            : [c.fingerprint]
          : []),
        e && (c.fingerprint = c.fingerprint.concat(e)),
        c.fingerprint.length || delete c.fingerprint,
        (function (a, b) {
          let c = [...(a.breadcrumbs || []), ...b];
          a.breadcrumbs = c.length ? c : void 0;
        })(a, k),
        (g = a),
        (h = l),
        (g.sdkProcessingMetadata = { ...g.sdkProcessingMetadata, ...h }));
    }),
      (c.mergeAndOverwriteScopeData = g),
      (c.mergeScopeData = function (a, b) {
        let {
          extra: c,
          tags: d,
          user: f,
          contexts: h,
          level: i,
          sdkProcessingMetadata: j,
          breadcrumbs: k,
          fingerprint: l,
          eventProcessors: m,
          attachments: n,
          propagationContext: o,
          transactionName: p,
          span: q,
        } = b;
        (g(a, 'extra', c),
          g(a, 'tags', d),
          g(a, 'user', f),
          g(a, 'contexts', h),
          (a.sdkProcessingMetadata = e.merge(a.sdkProcessingMetadata, j, 2)),
          i && (a.level = i),
          p && (a.transactionName = p),
          q && (a.span = q),
          k.length && (a.breadcrumbs = [...a.breadcrumbs, ...k]),
          l.length && (a.fingerprint = [...a.fingerprint, ...l]),
          m.length && (a.eventProcessors = [...a.eventProcessors, ...m]),
          n.length && (a.attachments = [...a.attachments, ...n]),
          (a.propagationContext = { ...a.propagationContext, ...o }));
      }));
  },
  65889,
  (a, b, c) => {
    let d, e, f;
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let g = a.r(6325);
    function h(a) {
      let b = g.GLOBAL_OBJ._sentryDebugIds;
      if (!b) return {};
      let c = Object.keys(b);
      return f && c.length === e
        ? f
        : ((e = c.length),
          (f = c.reduce((c, e) => {
            d || (d = {});
            let f = d[e];
            if (f) c[f[0]] = f[1];
            else {
              let f = a(e);
              for (let a = f.length - 1; a >= 0; a--) {
                let g = f[a],
                  h = g?.filename,
                  i = b[e];
                if (h && i) {
                  ((c[h] = i), (d[e] = [h, i]));
                  break;
                }
              }
            }
            return c;
          }, {})));
    }
    ((c.getDebugImagesForResources = function (a, b) {
      let c = h(a);
      if (!c) return [];
      let d = [];
      for (let a of b) a && c[a] && d.push({ type: 'sourcemap', code_file: a, debug_id: c[a] });
      return d;
    }),
      (c.getFilenameToDebugIdMap = h));
  },
  73519,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(92487),
      e = a.r(57697),
      f = a.r(63881),
      g = a.r(77542),
      h = a.r(70197),
      i = a.r(65889),
      j = a.r(61843),
      k = a.r(21731),
      l = a.r(27966),
      m = a.r(59671);
    function n(a, b) {
      let { environment: c, release: e, dist: f, maxValueLength: g = 250 } = b;
      ((a.environment = a.environment || c || d.DEFAULT_ENVIRONMENT),
        !a.release && e && (a.release = e),
        !a.dist && f && (a.dist = f));
      let h = a.request;
      h?.url && (h.url = l.truncate(h.url, g));
    }
    function o(a, b) {
      let c = i.getFilenameToDebugIdMap(b);
      a.exception?.values?.forEach((a) => {
        a.stacktrace?.frames?.forEach((a) => {
          a.filename && (a.debug_id = c[a.filename]);
        });
      });
    }
    function p(a) {
      let b = {};
      if (
        (a.exception?.values?.forEach((a) => {
          a.stacktrace?.frames?.forEach((a) => {
            a.debug_id &&
              (a.abs_path
                ? (b[a.abs_path] = a.debug_id)
                : a.filename && (b[a.filename] = a.debug_id),
              delete a.debug_id);
          });
        }),
        0 === Object.keys(b).length)
      )
        return;
      ((a.debug_meta = a.debug_meta || {}), (a.debug_meta.images = a.debug_meta.images || []));
      let c = a.debug_meta.images;
      Object.entries(b).forEach(([a, b]) => {
        c.push({ type: 'sourcemap', code_file: a, debug_id: b });
      });
    }
    let q = ['user', 'level', 'extra', 'contexts', 'tags', 'fingerprint', 'propagationContext'];
    ((c.applyClientOptions = n),
      (c.applyDebugIds = o),
      (c.applyDebugMeta = p),
      (c.parseEventHintOrCaptureContext = function (a) {
        if (a) {
          var b;
          return (b = a) instanceof g.Scope ||
            'function' == typeof b ||
            Object.keys(a).some((a) => q.includes(a))
            ? { captureContext: a }
            : a;
        }
      }),
      (c.prepareEvent = function (a, b, c, d, i, l) {
        var q, r;
        let { normalizeDepth: s = 3, normalizeMaxBreadth: t = 1e3 } = a,
          u = {
            ...b,
            event_id: b.event_id || c.event_id || j.uuid4(),
            timestamp: b.timestamp || m.dateTimestampInSeconds(),
          },
          v = c.integrations || a.integrations.map((a) => a.name);
        (n(u, a),
          (q = u),
          (r = v).length > 0 &&
            ((q.sdk = q.sdk || {}), (q.sdk.integrations = [...(q.sdk.integrations || []), ...r])),
          i && i.emit('applyFrameMetadata', b),
          void 0 === b.type && o(u, a.stackParser));
        let w = (function (a, b) {
          if (!b) return a;
          let c = a ? a.clone() : new g.Scope();
          return (c.update(b), c);
        })(d, c.captureContext);
        c.mechanism && j.addExceptionMechanism(u, c.mechanism);
        let x = i ? i.getEventProcessors() : [],
          y = e.getGlobalScope().getScopeData();
        if (l) {
          let a = l.getScopeData();
          h.mergeScopeData(y, a);
        }
        if (w) {
          let a = w.getScopeData();
          h.mergeScopeData(y, a);
        }
        let z = [...(c.attachments || []), ...y.attachments];
        (z.length && (c.attachments = z), h.applyScopeDataToEvent(u, y));
        let A = [...x, ...y.eventProcessors];
        return f.notifyEventProcessors(A, u, c).then((a) =>
          (a && p(a), 'number' == typeof s && s > 0)
            ? (function (a, b, c) {
                if (!a) return null;
                let d = {
                  ...a,
                  ...(a.breadcrumbs && {
                    breadcrumbs: a.breadcrumbs.map((a) => ({
                      ...a,
                      ...(a.data && { data: k.normalize(a.data, b, c) }),
                    })),
                  }),
                  ...(a.user && { user: k.normalize(a.user, b, c) }),
                  ...(a.contexts && { contexts: k.normalize(a.contexts, b, c) }),
                  ...(a.extra && { extra: k.normalize(a.extra, b, c) }),
                };
                return (
                  a.contexts?.trace &&
                    d.contexts &&
                    ((d.contexts.trace = a.contexts.trace),
                    a.contexts.trace.data &&
                      (d.contexts.trace.data = k.normalize(a.contexts.trace.data, b, c))),
                  a.spans &&
                    (d.spans = a.spans.map((a) => ({
                      ...a,
                      ...(a.data && { data: k.normalize(a.data, b, c) }),
                    }))),
                  a.contexts?.flags &&
                    d.contexts &&
                    (d.contexts.flags = k.normalize(a.contexts.flags, 3, c)),
                  d
                );
              })(a, s, t)
            : a
        );
      }));
  },
  73072,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(25350),
      f = a.r(99309),
      g = a.r(43679),
      h = a.r(59242),
      i = a.r(61843),
      j = a.r(73519),
      k = a.r(59671),
      l = a.r(6325);
    function m(a, b) {
      let c = d.getCurrentScope(),
        f = d.getClient();
      if (f)
        if (f.captureCheckIn) return f.captureCheckIn(a, b, c);
        else
          e.DEBUG_BUILD &&
            g.debug.warn('Cannot capture check-in. Client does not support sending check-ins.');
      else e.DEBUG_BUILD && g.debug.warn('Cannot capture check-in. No client defined.');
      return i.uuid4();
    }
    async function n(a) {
      let b = d.getClient();
      return b
        ? b.flush(a)
        : (e.DEBUG_BUILD && g.debug.warn('Cannot flush events. No client defined.'),
          Promise.resolve(!1));
    }
    async function o(a) {
      let b = d.getClient();
      return b
        ? b.close(a)
        : (e.DEBUG_BUILD && g.debug.warn('Cannot flush events and disable SDK. No client defined.'),
          Promise.resolve(!1));
    }
    function p() {
      let a = d.getIsolationScope(),
        b = d.getCurrentScope().getSession() || a.getSession();
      (b && f.closeSession(b), q(), a.setSession());
    }
    function q() {
      let a = d.getIsolationScope(),
        b = d.getClient(),
        c = a.getSession();
      c && b && b.captureSession(c);
    }
    ((c.addEventProcessor = function (a) {
      d.getIsolationScope().addEventProcessor(a);
    }),
      (c.captureCheckIn = m),
      (c.captureEvent = function (a, b) {
        return d.getCurrentScope().captureEvent(a, b);
      }),
      (c.captureException = function (a, b) {
        return d.getCurrentScope().captureException(a, j.parseEventHintOrCaptureContext(b));
      }),
      (c.captureMessage = function (a, b) {
        let c = 'string' == typeof b ? b : void 0,
          e = 'string' != typeof b ? { captureContext: b } : void 0;
        return d.getCurrentScope().captureMessage(a, c, e);
      }),
      (c.captureSession = function (a = !1) {
        if (a) return void p();
        q();
      }),
      (c.close = o),
      (c.endSession = p),
      (c.flush = n),
      (c.isEnabled = function () {
        let a = d.getClient();
        return a?.getOptions().enabled !== !1 && !!a?.getTransport();
      }),
      (c.isInitialized = function () {
        return !!d.getClient();
      }),
      (c.lastEventId = function () {
        return d.getIsolationScope().lastEventId();
      }),
      (c.setContext = function (a, b) {
        d.getIsolationScope().setContext(a, b);
      }),
      (c.setExtra = function (a, b) {
        d.getIsolationScope().setExtra(a, b);
      }),
      (c.setExtras = function (a) {
        d.getIsolationScope().setExtras(a);
      }),
      (c.setTag = function (a, b) {
        d.getIsolationScope().setTag(a, b);
      }),
      (c.setTags = function (a) {
        d.getIsolationScope().setTags(a);
      }),
      (c.setUser = function (a) {
        d.getIsolationScope().setUser(a);
      }),
      (c.startSession = function (a) {
        let b = d.getIsolationScope(),
          c = d.getCurrentScope(),
          { userAgent: e } = l.GLOBAL_OBJ.navigator || {},
          g = f.makeSession({ user: c.getUser() || b.getUser(), ...(e && { userAgent: e }), ...a }),
          h = b.getSession();
        return (
          h?.status === 'ok' && f.updateSession(h, { status: 'exited' }),
          p(),
          b.setSession(g),
          g
        );
      }),
      (c.withMonitor = function (a, b, c) {
        let e = m({ monitorSlug: a, status: 'in_progress' }, c),
          f = k.timestampInSeconds();
        function g(b) {
          m({ monitorSlug: a, status: b, checkInId: e, duration: k.timestampInSeconds() - f });
        }
        return d.withIsolationScope(() => {
          let a;
          try {
            a = b();
          } catch (a) {
            throw (g('error'), a);
          }
          return h.isThenable(a)
            ? a.then(
                (a) => (g('ok'), a),
                (a) => {
                  throw (g('error'), a);
                }
              )
            : (g('ok'), a);
        });
      }));
  },
  1272,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77885);
    function e(a) {
      let b = a.protocol ? `${a.protocol}:` : '',
        c = a.port ? `:${a.port}` : '';
      return `${b}//${a.host}${c}${a.path ? `/${a.path}` : ''}/api/`;
    }
    ((c.getEnvelopeEndpointWithUrlEncodedAuth = function (a, b, c) {
      return (
        b ||
        `${e(a)}${a.projectId}/envelope/?${(function (a, b) {
          let c = { sentry_version: '7' };
          return (
            a.publicKey && (c.sentry_key = a.publicKey),
            b && (c.sentry_client = `${b.name}/${b.version}`),
            new URLSearchParams(c).toString()
          );
        })(a, c)}`
      );
    }),
      (c.getReportDialogEndpoint = function (a, b) {
        let c = d.makeDsn(a);
        if (!c) return '';
        let f = `${e(c)}embed/error-page/`,
          g = `dsn=${d.dsnToString(c)}`;
        for (let a in b)
          if ('dsn' !== a && 'onClose' !== a)
            if ('user' === a) {
              let a = b.user;
              if (!a) continue;
              (a.name && (g += `&name=${encodeURIComponent(a.name)}`),
                a.email && (g += `&email=${encodeURIComponent(a.email)}`));
            } else g += `&${encodeURIComponent(a)}=${encodeURIComponent(b[a])}`;
        return `${f}?${g}`;
      }));
  },
  98699,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(25350),
      f = a.r(43679),
      g = [];
    function h(a, b, c) {
      if (c[b.name]) {
        e.DEBUG_BUILD &&
          f.debug.log(`Integration skipped because it was already installed: ${b.name}`);
        return;
      }
      if (
        ((c[b.name] = b),
        -1 === g.indexOf(b.name) &&
          'function' == typeof b.setupOnce &&
          (b.setupOnce(), g.push(b.name)),
        b.setup && 'function' == typeof b.setup && b.setup(a),
        'function' == typeof b.preprocessEvent)
      ) {
        let c = b.preprocessEvent.bind(b);
        a.on('preprocessEvent', (b, d) => c(b, d, a));
      }
      if ('function' == typeof b.processEvent) {
        let c = b.processEvent.bind(b),
          d = Object.assign((b, d) => c(b, d, a), { id: b.name });
        a.addEventProcessor(d);
      }
      e.DEBUG_BUILD && f.debug.log(`Integration installed: ${b.name}`);
    }
    ((c.addIntegration = function (a) {
      let b = d.getClient();
      if (!b) {
        e.DEBUG_BUILD &&
          f.debug.warn(`Cannot add integration "${a.name}" because no SDK Client is available.`);
        return;
      }
      b.addIntegration(a);
    }),
      (c.afterSetupIntegrations = function (a, b) {
        for (let c of b) c?.afterAllSetup && c.afterAllSetup(a);
      }),
      (c.defineIntegration = function (a) {
        return a;
      }),
      (c.getIntegrationsToSetup = function (a) {
        let b,
          c = a.defaultIntegrations || [],
          d = a.integrations;
        if (
          (c.forEach((a) => {
            a.isDefaultInstance = !0;
          }),
          Array.isArray(d))
        )
          b = [...c, ...d];
        else if ('function' == typeof d) {
          let a = d(c);
          b = Array.isArray(a) ? a : [a];
        } else b = c;
        let e = {};
        return (
          b.forEach((a) => {
            let { name: b } = a,
              c = e[b];
            (c && !c.isDefaultInstance && a.isDefaultInstance) || (e[b] = a);
          }),
          Object.values(e)
        );
      }),
      (c.installedIntegrations = g),
      (c.setupIntegration = h),
      (c.setupIntegrations = function (a, b) {
        let c = {};
        return (
          b.forEach((b) => {
            b && h(a, b, c);
          }),
          c
        );
      }));
  },
  88577,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(50616),
      e = a.r(59671);
    c.createClientReportEnvelope = function (a, b, c) {
      let f = [
        { type: 'client_report' },
        { timestamp: c || e.dateTimestampInSeconds(), discarded_events: a },
      ];
      return d.createEnvelope(b ? { dsn: b } : {}, [f]);
    };
  },
  4859,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.getPossibleEventMessages = function (a) {
        let b = [];
        a.message && b.push(a.message);
        try {
          let c = a.exception.values[a.exception.values.length - 1];
          c?.value && (b.push(c.value), c.type && b.push(`${c.type}: ${c.value}`));
        } catch {}
        return b;
      }));
  },
  98492,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(21016);
    ((c.convertSpanJsonToTransactionEvent = function (a) {
      return {
        type: 'transaction',
        timestamp: a.timestamp,
        start_timestamp: a.start_timestamp,
        transaction: a.description,
        contexts: {
          trace: {
            trace_id: a.trace_id,
            span_id: a.span_id,
            parent_span_id: a.parent_span_id,
            op: a.op,
            status: a.status,
            origin: a.origin,
            data: {
              ...a.data,
              ...(a.profile_id && { [d.SEMANTIC_ATTRIBUTE_PROFILE_ID]: a.profile_id }),
              ...(a.exclusive_time && { [d.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: a.exclusive_time }),
            },
          },
        },
        measurements: a.measurements,
      };
    }),
      (c.convertTransactionEventToSpanJson = function (a) {
        let {
          trace_id: b,
          parent_span_id: c,
          span_id: e,
          status: f,
          origin: g,
          data: h,
          op: i,
        } = a.contexts?.trace ?? {};
        return {
          data: h ?? {},
          description: a.transaction,
          op: i,
          parent_span_id: c,
          span_id: e ?? '',
          start_timestamp: a.start_timestamp ?? 0,
          status: f,
          timestamp: a.timestamp,
          trace_id: b ?? '',
          origin: g,
          profile_id: h?.[d.SEMANTIC_ATTRIBUTE_PROFILE_ID],
          exclusive_time: h?.[d.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME],
          measurements: a.measurements,
          is_segment: !0,
        };
      }));
  },
  58249,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(1272),
      e = a.r(92487),
      f = a.r(57697),
      g = a.r(25350),
      h = a.r(78669),
      i = a.r(98699),
      j = a.r(99309),
      k = a.r(7001),
      l = a.r(88577),
      m = a.r(43679),
      n = a.r(77885),
      o = a.r(50616),
      p = a.r(4859),
      q = a.r(59242),
      r = a.r(4956),
      s = a.r(61843),
      t = a.r(87726),
      u = a.r(73519),
      v = a.r(6888),
      w = a.r(45889),
      x = a.r(3261),
      y = a.r(98492),
      z = "Not capturing exception because it's already been captured.",
      A = 'Discarded session because of missing or non-string release',
      B = Symbol.for('SentryInternalError'),
      C = Symbol.for('SentryDoNotSendEventError');
    function D(a) {
      return { message: a, [B]: !0 };
    }
    function E(a) {
      return { message: a, [C]: !0 };
    }
    function F(a) {
      return !!a && 'object' == typeof a && B in a;
    }
    function G(a) {
      return !!a && 'object' == typeof a && C in a;
    }
    function H(a) {
      return void 0 === a.type;
    }
    function I(a) {
      return 'transaction' === a.type;
    }
    ((c.Client = class {
      constructor(a) {
        if (
          ((this._options = a),
          (this._integrations = {}),
          (this._numProcessing = 0),
          (this._outcomes = {}),
          (this._hooks = {}),
          (this._eventProcessors = []),
          a.dsn
            ? (this._dsn = n.makeDsn(a.dsn))
            : g.DEBUG_BUILD && m.debug.warn('No DSN provided, client will not send events.'),
          this._dsn)
        ) {
          let b = d.getEnvelopeEndpointWithUrlEncodedAuth(
            this._dsn,
            a.tunnel,
            a._metadata ? a._metadata.sdk : void 0
          );
          this._transport = a.transport({
            tunnel: this._options.tunnel,
            recordDroppedEvent: this.recordDroppedEvent.bind(this),
            ...a.transportOptions,
            url: b,
          });
        }
      }
      captureException(a, b, c) {
        let d = s.uuid4();
        if (s.checkOrSetAlreadyCaught(a)) return (g.DEBUG_BUILD && m.debug.log(z), d);
        let e = { event_id: d, ...b };
        return (
          this._process(this.eventFromException(a, e).then((a) => this._captureEvent(a, e, c))),
          e.event_id
        );
      }
      captureMessage(a, b, c, d) {
        let e = { event_id: s.uuid4(), ...c },
          f = q.isParameterizedString(a) ? a : String(a),
          g = q.isPrimitive(a) ? this.eventFromMessage(f, b, e) : this.eventFromException(a, e);
        return (this._process(g.then((a) => this._captureEvent(a, e, d))), e.event_id);
      }
      captureEvent(a, b, c) {
        let d = s.uuid4();
        if (b?.originalException && s.checkOrSetAlreadyCaught(b.originalException))
          return (g.DEBUG_BUILD && m.debug.log(z), d);
        let e = { event_id: d, ...b },
          f = a.sdkProcessingMetadata || {},
          h = f.capturedSpanScope,
          i = f.capturedSpanIsolationScope;
        return (this._process(this._captureEvent(a, e, h || c, i)), e.event_id);
      }
      captureSession(a) {
        (this.sendSession(a), j.updateSession(a, { init: !1 }));
      }
      getDsn() {
        return this._dsn;
      }
      getOptions() {
        return this._options;
      }
      getSdkMetadata() {
        return this._options._metadata;
      }
      getTransport() {
        return this._transport;
      }
      flush(a) {
        let b = this._transport;
        return b
          ? (this.emit('flush'),
            this._isClientDoneProcessing(a).then((c) => b.flush(a).then((a) => c && a)))
          : x.resolvedSyncPromise(!0);
      }
      close(a) {
        return this.flush(a).then((a) => ((this.getOptions().enabled = !1), this.emit('close'), a));
      }
      getEventProcessors() {
        return this._eventProcessors;
      }
      addEventProcessor(a) {
        this._eventProcessors.push(a);
      }
      init() {
        (this._isEnabled() ||
          this._options.integrations.some(({ name: a }) => a.startsWith('Spotlight'))) &&
          this._setupIntegrations();
      }
      getIntegrationByName(a) {
        return this._integrations[a];
      }
      addIntegration(a) {
        let b = this._integrations[a.name];
        (i.setupIntegration(this, a, this._integrations), b || i.afterSetupIntegrations(this, [a]));
      }
      sendEvent(a, b = {}) {
        this.emit('beforeSendEvent', a, b);
        let c = h.createEventEnvelope(a, this._dsn, this._options._metadata, this._options.tunnel);
        for (let a of b.attachments || [])
          c = o.addItemToEnvelope(c, o.createAttachmentEnvelopeItem(a));
        let d = this.sendEnvelope(c);
        d && d.then((b) => this.emit('afterSendEvent', a, b), null);
      }
      sendSession(a) {
        let { release: b, environment: c = e.DEFAULT_ENVIRONMENT } = this._options;
        if ('aggregates' in a) {
          let d = a.attrs || {};
          if (!d.release && !b) {
            g.DEBUG_BUILD && m.debug.warn(A);
            return;
          }
          ((d.release = d.release || b), (d.environment = d.environment || c), (a.attrs = d));
        } else {
          if (!a.release && !b) {
            g.DEBUG_BUILD && m.debug.warn(A);
            return;
          }
          ((a.release = a.release || b), (a.environment = a.environment || c));
        }
        this.emit('beforeSendSession', a);
        let d = h.createSessionEnvelope(
          a,
          this._dsn,
          this._options._metadata,
          this._options.tunnel
        );
        this.sendEnvelope(d);
      }
      recordDroppedEvent(a, b, c = 1) {
        if (this._options.sendClientReports) {
          let d = `${a}:${b}`;
          (g.DEBUG_BUILD && m.debug.log(`Recording outcome: "${d}"${c > 1 ? ` (${c} times)` : ''}`),
            (this._outcomes[d] = (this._outcomes[d] || 0) + c));
        }
      }
      on(a, b) {
        let c = (this._hooks[a] = this._hooks[a] || []);
        return (
          c.push(b),
          () => {
            let a = c.indexOf(b);
            a > -1 && c.splice(a, 1);
          }
        );
      }
      emit(a, ...b) {
        let c = this._hooks[a];
        c && c.forEach((a) => a(...b));
      }
      sendEnvelope(a) {
        return (this.emit('beforeEnvelope', a), this._isEnabled() && this._transport)
          ? this._transport
              .send(a)
              .then(
                null,
                (a) => (g.DEBUG_BUILD && m.debug.error('Error while sending envelope:', a), a)
              )
          : (g.DEBUG_BUILD && m.debug.error('Transport disabled'), x.resolvedSyncPromise({}));
      }
      _setupIntegrations() {
        let { integrations: a } = this._options;
        ((this._integrations = i.setupIntegrations(this, a)), i.afterSetupIntegrations(this, a));
      }
      _updateSessionFromEvent(a, b) {
        let c = 'fatal' === b.level,
          d = !1,
          e = b.exception?.values;
        if (e)
          for (let a of ((d = !0), e)) {
            let b = a.mechanism;
            if (b?.handled === !1) {
              c = !0;
              break;
            }
          }
        let f = 'ok' === a.status;
        ((f && 0 === a.errors) || (f && c)) &&
          (j.updateSession(a, {
            ...(c && { status: 'crashed' }),
            errors: a.errors || Number(d || c),
          }),
          this.captureSession(a));
      }
      _isClientDoneProcessing(a) {
        return new x.SyncPromise((b) => {
          let c = 0,
            d = setInterval(() => {
              0 == this._numProcessing
                ? (clearInterval(d), b(!0))
                : ((c += 1), a && c >= a && (clearInterval(d), b(!1)));
            }, 1);
        });
      }
      _isEnabled() {
        return !1 !== this.getOptions().enabled && void 0 !== this._transport;
      }
      _prepareEvent(a, b, c, d) {
        let e = this.getOptions(),
          g = Object.keys(this._integrations);
        return (
          !b.integrations && g?.length && (b.integrations = g),
          this.emit('preprocessEvent', a, b),
          a.type || d.setLastEventId(a.event_id || b.event_id),
          u
            .prepareEvent(e, a, b, c, this, d)
            .then(
              (a) => (
                null === a ||
                  (this.emit('postprocessEvent', a, b),
                  (a.contexts = { trace: f.getTraceContextFromScope(c), ...a.contexts }),
                  (a.sdkProcessingMetadata = {
                    dynamicSamplingContext: k.getDynamicSamplingContextFromScope(this, c),
                    ...a.sdkProcessingMetadata,
                  })),
                a
              )
            )
        );
      }
      _captureEvent(a, b = {}, c = f.getCurrentScope(), d = f.getIsolationScope()) {
        return (
          g.DEBUG_BUILD &&
            H(a) &&
            m.debug.log(
              `Captured error event \`${p.getPossibleEventMessages(a)[0] || '<unknown>'}\``
            ),
          this._processEvent(a, b, c, d).then(
            (a) => a.event_id,
            (a) => {
              g.DEBUG_BUILD &&
                (G(a) ? m.debug.log(a.message) : F(a) ? m.debug.warn(a.message) : m.debug.warn(a));
            }
          )
        );
      }
      _processEvent(a, b, c, d) {
        let e = this.getOptions(),
          { sampleRate: f } = e,
          g = I(a),
          h = H(a),
          i = a.type || 'error',
          j = `before send for type \`${i}\``,
          k = void 0 === f ? void 0 : t.parseSampleRate(f);
        if (h && 'number' == typeof k && Math.random() > k)
          return (
            this.recordDroppedEvent('sample_rate', 'error'),
            x.rejectedSyncPromise(
              E(
                `Discarding event because it's not included in the random sample (sampling rate = ${f})`
              )
            )
          );
        let l = 'replay_event' === i ? 'replay' : i;
        return this._prepareEvent(a, b, c, d)
          .then((a) => {
            if (null === a)
              throw (
                this.recordDroppedEvent('event_processor', l),
                E('An event processor returned `null`, will not send event.')
              );
            return b.data && !0 === b.data.__sentry__
              ? a
              : (function (a, b) {
                  let c = `${b} must return \`null\` or a valid event.`;
                  if (q.isThenable(a))
                    return a.then(
                      (a) => {
                        if (!q.isPlainObject(a) && null !== a) throw D(c);
                        return a;
                      },
                      (a) => {
                        throw D(`${b} rejected with ${a}`);
                      }
                    );
                  if (!q.isPlainObject(a) && null !== a) throw D(c);
                  return a;
                })(
                  (function (a, b, c, d) {
                    let {
                        beforeSend: e,
                        beforeSendTransaction: f,
                        beforeSendSpan: g,
                        ignoreSpans: h,
                      } = b,
                      i = c;
                    if (H(i) && e) return e(i, d);
                    if (I(i)) {
                      if (g || h) {
                        let b = y.convertTransactionEventToSpanJson(i);
                        if (h?.length && v.shouldIgnoreSpan(b, h)) return null;
                        if (g) {
                          let a = g(b);
                          a
                            ? (i = r.merge(c, y.convertSpanJsonToTransactionEvent(a)))
                            : w.showSpanDropWarning();
                        }
                        if (i.spans) {
                          let b = [],
                            c = i.spans;
                          for (let a of c) {
                            if (h?.length && v.shouldIgnoreSpan(a, h)) {
                              v.reparentChildSpans(c, a);
                              continue;
                            }
                            if (g) {
                              let c = g(a);
                              c ? b.push(c) : (w.showSpanDropWarning(), b.push(a));
                            } else b.push(a);
                          }
                          let d = i.spans.length - b.length;
                          (d && a.recordDroppedEvent('before_send', 'span', d), (i.spans = b));
                        }
                      }
                      if (f) {
                        if (i.spans) {
                          let a = i.spans.length;
                          i.sdkProcessingMetadata = {
                            ...c.sdkProcessingMetadata,
                            spanCountBeforeProcessing: a,
                          };
                        }
                        return f(i, d);
                      }
                    }
                    return i;
                  })(this, e, a, b),
                  j
                );
          })
          .then((e) => {
            if (null === e) {
              if ((this.recordDroppedEvent('before_send', l), g)) {
                let b = 1 + (a.spans || []).length;
                this.recordDroppedEvent('before_send', 'span', b);
              }
              throw E(`${j} returned \`null\`, will not send event.`);
            }
            let f = c.getSession() || d.getSession();
            if ((h && f && this._updateSessionFromEvent(f, e), g)) {
              let a =
                (e.sdkProcessingMetadata?.spanCountBeforeProcessing || 0) -
                (e.spans ? e.spans.length : 0);
              a > 0 && this.recordDroppedEvent('before_send', 'span', a);
            }
            let i = e.transaction_info;
            return (
              g &&
                i &&
                e.transaction !== a.transaction &&
                (e.transaction_info = { ...i, source: 'custom' }),
              this.sendEvent(e, b),
              e
            );
          })
          .then(null, (a) => {
            if (G(a) || F(a)) throw a;
            throw (
              this.captureException(a, {
                mechanism: { handled: !1, type: 'internal' },
                data: { __sentry__: !0 },
                originalException: a,
              }),
              D(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.
Reason: ${a}`)
            );
          });
      }
      _process(a) {
        (this._numProcessing++,
          a.then(
            (a) => (this._numProcessing--, a),
            (a) => (this._numProcessing--, a)
          ));
      }
      _clearOutcomes() {
        let a = this._outcomes;
        return (
          (this._outcomes = {}),
          Object.entries(a).map(([a, b]) => {
            let [c, d] = a.split(':');
            return { reason: c, category: d, quantity: b };
          })
        );
      }
      _flushOutcomes() {
        g.DEBUG_BUILD && m.debug.log('Flushing outcomes...');
        let a = this._clearOutcomes();
        if (0 === a.length) {
          g.DEBUG_BUILD && m.debug.log('No outcomes to send');
          return;
        }
        if (!this._dsn) {
          g.DEBUG_BUILD && m.debug.log('No dsn provided, will not send outcomes');
          return;
        }
        g.DEBUG_BUILD && m.debug.log('Sending outcomes:', a);
        let b = l.createClientReportEnvelope(a, this._options.tunnel && n.dsnToString(this._dsn));
        this.sendEnvelope(b);
      }
    }),
      (c._getTraceInfoFromScope = function (a, b) {
        return b
          ? f.withScope(b, () => {
              let c = w.getActiveSpan(),
                d = c ? w.spanToTraceContext(c) : f.getTraceContextFromScope(b);
              return [
                c
                  ? k.getDynamicSamplingContextFromSpan(c)
                  : k.getDynamicSamplingContextFromScope(a, b),
                d,
              ];
            })
          : [void 0, void 0];
      }));
  },
  26095,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77885),
      e = a.r(50616);
    c.createCheckInEnvelope = function (a, b, c, f, g) {
      let h = { sent_at: new Date().toISOString() };
      (c?.sdk && (h.sdk = { name: c.sdk.name, version: c.sdk.version }),
        f && g && (h.dsn = d.dsnToString(g)),
        b && (h.trace = b));
      let i = [{ type: 'check_in' }, a];
      return e.createEnvelope(h, [i]);
    };
  },
  90059,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.SEVERITY_TEXT_TO_SEVERITY_NUMBER = {
        trace: 1,
        debug: 5,
        info: 9,
        warn: 13,
        error: 17,
        fatal: 21,
      }));
  },
  2629,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77885),
      e = a.r(50616);
    function f(a) {
      return [
        {
          type: 'log',
          item_count: a.length,
          content_type: 'application/vnd.sentry.items.log+json',
        },
        { items: a },
      ];
    }
    ((c.createLogContainerEnvelopeItem = f),
      (c.createLogEnvelope = function (a, b, c, g) {
        let h = {};
        return (
          b?.sdk && (h.sdk = { name: b.sdk.name, version: b.sdk.version }),
          c && g && (h.dsn = d.dsnToString(g)),
          e.createEnvelope(h, [f(a)])
        );
      }));
  },
  88132,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(5356),
      e = a.r(58249),
      f = a.r(57697),
      g = a.r(25350),
      h = a.r(70197),
      i = a.r(43679),
      j = a.r(59242),
      k = a.r(96245),
      l = a.r(59671),
      m = a.r(90059),
      n = a.r(2629);
    function o(a) {
      switch (typeof a) {
        case 'number':
          if (Number.isInteger(a)) return { value: a, type: 'integer' };
          return { value: a, type: 'double' };
        case 'boolean':
          return { value: a, type: 'boolean' };
        case 'string':
          return { value: a, type: 'string' };
        default: {
          let b = '';
          try {
            b = JSON.stringify(a) ?? '';
          } catch {}
          return { value: b, type: 'string' };
        }
      }
    }
    function p(a, b, c, d = !0) {
      c && (!a[b] || d) && (a[b] = c);
    }
    function q(a, b) {
      let c = t(),
        d = s(a);
      void 0 === d ? c.set(a, [b]) : (c.set(a, [...d, b]), d.length >= 100 && r(a, d));
    }
    function r(a, b) {
      let c = b ?? s(a) ?? [];
      if (0 === c.length) return;
      let d = a.getOptions(),
        e = n.createLogEnvelope(c, d._metadata, d.tunnel, a.getDsn());
      (t().set(a, []), a.emit('flushLogs'), a.sendEnvelope(e));
    }
    function s(a) {
      return t().get(a);
    }
    function t() {
      return d.getGlobalSingleton('clientToLogBufferMap', () => new WeakMap());
    }
    ((c._INTERNAL_captureLog = function (a, b = f.getClient(), c = f.getCurrentScope(), d = q) {
      if (!b) {
        g.DEBUG_BUILD && i.debug.warn('No client available to capture log.');
        return;
      }
      let { release: n, environment: r, enableLogs: s = !1, beforeSendLog: t } = b.getOptions();
      if (!s) {
        g.DEBUG_BUILD && i.debug.warn('logging option not enabled, log will not be captured.');
        return;
      }
      let [, u] = e._getTraceInfoFromScope(b, c),
        v = { ...a.attributes },
        {
          user: { id: w, email: x, username: y },
        } = (function (a) {
          let b = f.getGlobalScope().getScopeData();
          return (
            h.mergeScopeData(b, f.getIsolationScope().getScopeData()),
            h.mergeScopeData(b, a.getScopeData()),
            b
          );
        })(c);
      (p(v, 'user.id', w, !1),
        p(v, 'user.email', x, !1),
        p(v, 'user.name', y, !1),
        p(v, 'sentry.release', n),
        p(v, 'sentry.environment', r));
      let { name: z, version: A } = b.getSdkMetadata()?.sdk ?? {};
      (p(v, 'sentry.sdk.name', z), p(v, 'sentry.sdk.version', A));
      let B = a.message;
      if (j.isParameterizedString(B)) {
        let { __sentry_template_string__: a, __sentry_template_values__: b = [] } = B;
        (b?.length && (v['sentry.message.template'] = a),
          b.forEach((a, b) => {
            v[`sentry.message.parameter.${b}`] = a;
          }));
      }
      let C = k._getSpanForScope(c);
      p(v, 'sentry.trace.parent_span_id', C?.spanContext().spanId);
      let D = { ...a, attributes: v };
      b.emit('beforeCaptureLog', D);
      let E = t ? i.consoleSandbox(() => t(D)) : D;
      if (!E) {
        (b.recordDroppedEvent('before_send', 'log_item', 1),
          g.DEBUG_BUILD && i.debug.warn('beforeSendLog returned null, log will not be captured.'));
        return;
      }
      let { level: F, message: G, attributes: H = {}, severityNumber: I } = E;
      (d(b, {
        timestamp: l.timestampInSeconds(),
        level: F,
        body: G,
        trace_id: u?.trace_id,
        severity_number: I ?? m.SEVERITY_TEXT_TO_SEVERITY_NUMBER[F],
        attributes: Object.keys(H).reduce((a, b) => ((a[b] = o(H[b])), a), {}),
      }),
        b.emit('afterCaptureLog', E));
    }),
      (c._INTERNAL_captureSerializedLog = q),
      (c._INTERNAL_flushLogsBuffer = r),
      (c._INTERNAL_getLogBuffer = s),
      (c.logAttributeToSerializedLogAttribute = o));
  },
  44681,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(59242),
      e = a.r(61843),
      f = a.r(21731),
      g = a.r(78707);
    function h(a, b) {
      return a(b.stack || '', 1);
    }
    function i(a, b) {
      let c = { type: b.name || b.constructor.name, value: b.message },
        d = h(a, b);
      return (d.length && (c.stacktrace = { frames: d }), c);
    }
    ((c.eventFromMessage = function (a, b, c = 'info', f, g) {
      let i = { event_id: f?.event_id, level: c };
      if (g && f?.syntheticException) {
        let c = h(a, f.syntheticException);
        c.length &&
          ((i.exception = { values: [{ value: b, stacktrace: { frames: c } }] }),
          e.addExceptionMechanism(i, { synthetic: !0 }));
      }
      if (d.isParameterizedString(b)) {
        let { __sentry_template_string__: a, __sentry_template_values__: c } = b;
        return ((i.logentry = { message: a, params: c }), i);
      }
      return ((i.message = b), i);
    }),
      (c.eventFromUnknownInput = function (a, b, c, h) {
        let j = (h?.data && h.data.mechanism) || { handled: !0, type: 'generic' },
          [k, l] = (function (a, b, c, e) {
            if (d.isError(c)) return [c, void 0];
            if (((b.synthetic = !0), d.isPlainObject(c))) {
              let b = a?.getOptions().normalizeDepth,
                h = { __serialized__: f.normalizeToSize(c, b) },
                i = (function (a) {
                  for (let b in a)
                    if (Object.prototype.hasOwnProperty.call(a, b)) {
                      let c = a[b];
                      if (c instanceof Error) return c;
                    }
                })(c);
              if (i) return [i, h];
              let j = (function (a) {
                  if ('name' in a && 'string' == typeof a.name) {
                    let b = `'${a.name}' captured as exception`;
                    return (
                      'message' in a &&
                        'string' == typeof a.message &&
                        (b += ` with message '${a.message}'`),
                      b
                    );
                  }
                  if ('message' in a && 'string' == typeof a.message) return a.message;
                  let b = g.extractExceptionKeysForMessage(a);
                  if (d.isErrorEvent(a))
                    return `Event \`ErrorEvent\` captured as exception with message \`${a.message}\``;
                  let c = (function (a) {
                    try {
                      let b = Object.getPrototypeOf(a);
                      return b ? b.constructor.name : void 0;
                    } catch {}
                  })(a);
                  return `${c && 'Object' !== c ? `'${c}'` : 'Object'} captured as exception with keys: ${b}`;
                })(c),
                k = e?.syntheticException || Error(j);
              return ((k.message = j), [k, h]);
            }
            let h = e?.syntheticException || Error(c);
            return ((h.message = `${c}`), [h, void 0]);
          })(a, j, c, h),
          m = { exception: { values: [i(b, k)] } };
        return (
          l && (m.extra = l),
          e.addExceptionTypeValue(m, void 0, void 0),
          e.addExceptionMechanism(m, j),
          { ...m, event_id: h?.event_id }
        );
      }),
      (c.exceptionFromError = i),
      (c.parseStackFrames = h));
  },
  30161,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(26095),
      e = a.r(58249),
      f = a.r(57697),
      g = a.r(25350),
      h = a.r(88132),
      i = a.r(70826),
      j = a.r(59242),
      k = a.r(43679),
      l = a.r(61843),
      m = a.r(44681),
      n = a.r(3261);
    class o extends e.Client {
      constructor(a) {
        if (
          (i.registerSpanErrorInstrumentation(),
          super(a),
          (this._logWeight = 0),
          this._options.enableLogs)
        ) {
          let a = this;
          (a.on('flushLogs', () => {
            ((a._logWeight = 0), clearTimeout(a._logFlushIdleTimeout));
          }),
            a.on('afterCaptureLog', (b) => {
              ((a._logWeight += (function (a) {
                let b = 0;
                return (
                  a.message && (b += 2 * a.message.length),
                  a.attributes &&
                    Object.values(a.attributes).forEach((a) => {
                      Array.isArray(a)
                        ? (b += a.length * q(a[0]))
                        : j.isPrimitive(a)
                          ? (b += q(a))
                          : (b += 100);
                    }),
                  b
                );
              })(b)),
                a._logWeight >= 8e5
                  ? h._INTERNAL_flushLogsBuffer(a)
                  : (a._logFlushIdleTimeout = setTimeout(() => {
                      h._INTERNAL_flushLogsBuffer(a);
                    }, 5e3)));
            }),
            a.on('flush', () => {
              h._INTERNAL_flushLogsBuffer(a);
            }));
        }
      }
      eventFromException(a, b) {
        let c = m.eventFromUnknownInput(this, this._options.stackParser, a, b);
        return ((c.level = 'error'), n.resolvedSyncPromise(c));
      }
      eventFromMessage(a, b = 'info', c) {
        return n.resolvedSyncPromise(
          m.eventFromMessage(this._options.stackParser, a, b, c, this._options.attachStacktrace)
        );
      }
      captureException(a, b, c) {
        return (p(b), super.captureException(a, b, c));
      }
      captureEvent(a, b, c) {
        return (
          !a.type && a.exception?.values && a.exception.values.length > 0 && p(b),
          super.captureEvent(a, b, c)
        );
      }
      captureCheckIn(a, b, c) {
        let f = 'checkInId' in a && a.checkInId ? a.checkInId : l.uuid4();
        if (!this._isEnabled())
          return (g.DEBUG_BUILD && k.debug.warn('SDK not enabled, will not capture check-in.'), f);
        let { release: h, environment: i, tunnel: j } = this.getOptions(),
          m = {
            check_in_id: f,
            monitor_slug: a.monitorSlug,
            status: a.status,
            release: h,
            environment: i,
          };
        ('duration' in a && (m.duration = a.duration),
          b &&
            (m.monitor_config = {
              schedule: b.schedule,
              checkin_margin: b.checkinMargin,
              max_runtime: b.maxRuntime,
              timezone: b.timezone,
              failure_issue_threshold: b.failureIssueThreshold,
              recovery_threshold: b.recoveryThreshold,
            }));
        let [n, o] = e._getTraceInfoFromScope(this, c);
        o && (m.contexts = { trace: o });
        let p = d.createCheckInEnvelope(m, n, this.getSdkMetadata(), j, this.getDsn());
        return (
          g.DEBUG_BUILD && k.debug.log('Sending checkin:', a.monitorSlug, a.status),
          this.sendEnvelope(p),
          f
        );
      }
      _prepareEvent(a, b, c, d) {
        return (
          this._options.platform && (a.platform = a.platform || this._options.platform),
          this._options.runtime &&
            (a.contexts = { ...a.contexts, runtime: a.contexts?.runtime || this._options.runtime }),
          this._options.serverName && (a.server_name = a.server_name || this._options.serverName),
          super._prepareEvent(a, b, c, d)
        );
      }
    }
    function p(a) {
      let b = f.getIsolationScope().getScopeData().sdkProcessingMetadata.requestSession;
      if (b) {
        let c = a?.mechanism?.handled ?? !0;
        c && 'crashed' !== b.status ? (b.status = 'errored') : c || (b.status = 'crashed');
      }
    }
    function q(a) {
      return 'string' == typeof a
        ? 2 * a.length
        : 'number' == typeof a
          ? 8
          : 4 * ('boolean' == typeof a);
    }
    c.ServerRuntimeClient = o;
  },
  40322,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(25350),
      f = a.r(43679);
    function g(a) {
      d.getCurrentScope().setClient(a);
    }
    ((c.initAndBind = function (a, b) {
      (!0 === b.debug &&
        (e.DEBUG_BUILD
          ? f.debug.enable()
          : f.consoleSandbox(() => {
              console.warn(
                '[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.'
              );
            })),
        d.getCurrentScope().update(b.initialScope));
      let c = new a(b);
      return (g(c), c.init(), c);
    }),
      (c.setCurrentClient = g));
  },
  64796,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(3261),
      e = Symbol.for('SentryBufferFullError');
    ((c.SENTRY_BUFFER_FULL_ERROR = e),
      (c.makePromiseBuffer = function (a) {
        let b = [];
        function c(a) {
          return b.splice(b.indexOf(a), 1)[0] || Promise.resolve(void 0);
        }
        return {
          $: b,
          add: function (f) {
            if (!(void 0 === a || b.length < a)) return d.rejectedSyncPromise(e);
            let g = f();
            return (
              -1 === b.indexOf(g) && b.push(g),
              g.then(() => c(g)).then(null, () => c(g).then(null, () => {})),
              g
            );
          },
          drain: function (a) {
            return new d.SyncPromise((c, e) => {
              let f = b.length;
              if (!f) return c(!0);
              let g = setTimeout(() => {
                a && a > 0 && c(!1);
              }, a);
              b.forEach((a) => {
                d.resolvedSyncPromise(a).then(() => {
                  --f || (clearTimeout(g), c(!0));
                }, e);
              });
            });
          },
        };
      }));
  },
  48006,
  (a, b, c) => {
    function d(a, b = Date.now()) {
      let c = parseInt(`${a}`, 10);
      if (!isNaN(c)) return 1e3 * c;
      let e = Date.parse(`${a}`);
      return isNaN(e) ? 6e4 : e - b;
    }
    function e(a, b) {
      return a[b] || a.all || 0;
    }
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.DEFAULT_RETRY_AFTER = 6e4),
      (c.disabledUntil = e),
      (c.isRateLimited = function (a, b, c = Date.now()) {
        return e(a, b) > c;
      }),
      (c.parseRetryAfterHeader = d),
      (c.updateRateLimits = function (a, { statusCode: b, headers: c }, e = Date.now()) {
        let f = { ...a },
          g = c?.['x-sentry-rate-limits'],
          h = c?.['retry-after'];
        if (g)
          for (let a of g.trim().split(',')) {
            let [b, c, , , d] = a.split(':', 5),
              g = parseInt(b, 10),
              h = (isNaN(g) ? 60 : g) * 1e3;
            if (c)
              for (let a of c.split(';'))
                'metric_bucket' === a
                  ? (!d || d.split(';').includes('custom')) && (f[a] = e + h)
                  : (f[a] = e + h);
            else f.all = e + h;
          }
        else h ? (f.all = e + d(h, e)) : 429 === b && (f.all = e + 6e4);
        return f;
      }));
  },
  75032,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = a.r(50616),
      g = a.r(64796),
      h = a.r(48006),
      i = a.r(3261);
    ((c.DEFAULT_TRANSPORT_BUFFER_SIZE = 64),
      (c.createTransport = function (a, b, c = g.makePromiseBuffer(a.bufferSize || 64)) {
        let j = {};
        return {
          send: function (k) {
            let l = [];
            if (
              (f.forEachEnvelopeItem(k, (b, c) => {
                let d = f.envelopeItemTypeToDataCategory(c);
                h.isRateLimited(j, d) ? a.recordDroppedEvent('ratelimit_backoff', d) : l.push(b);
              }),
              0 === l.length)
            )
              return i.resolvedSyncPromise({});
            let m = f.createEnvelope(k[0], l),
              n = (b) => {
                f.forEachEnvelopeItem(m, (c, d) => {
                  a.recordDroppedEvent(b, f.envelopeItemTypeToDataCategory(d));
                });
              };
            return c
              .add(() =>
                b({ body: f.serializeEnvelope(m) }).then(
                  (a) => (
                    void 0 !== a.statusCode &&
                      (a.statusCode < 200 || a.statusCode >= 300) &&
                      d.DEBUG_BUILD &&
                      e.debug.warn(
                        `Sentry responded with status code ${a.statusCode} to sent event.`
                      ),
                    (j = h.updateRateLimits(j, a)),
                    a
                  ),
                  (a) => {
                    throw (
                      n('network_error'),
                      d.DEBUG_BUILD &&
                        e.debug.error('Encountered error running transport request:', a),
                      a
                    );
                  }
                )
              )
              .then(
                (a) => a,
                (a) => {
                  if (a === g.SENTRY_BUFFER_FULL_ERROR)
                    return (
                      d.DEBUG_BUILD &&
                        e.debug.error('Skipped sending event because buffer is full.'),
                      n('queue_overflow'),
                      i.resolvedSyncPromise({})
                    );
                  throw a;
                }
              );
          },
          flush: (a) => c.drain(a),
        };
      }));
  },
  1697,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = a.r(50616),
      g = a.r(48006);
    ((c.MIN_DELAY = 100),
      (c.START_DELAY = 5e3),
      (c.makeOfflineTransport = function (a) {
        function b(...a) {
          d.DEBUG_BUILD && e.debug.log('[Offline]:', ...a);
        }
        return (c) => {
          let d,
            e = a(c);
          if (!c.createStore) throw Error('No `createStore` function was provided');
          let h = c.createStore(c),
            i = 5e3;
          function j(a) {
            (d && clearTimeout(d),
              'number' !=
                typeof (d = setTimeout(async () => {
                  d = void 0;
                  let a = await h.shift();
                  a &&
                    (b('Attempting to send previously queued event'),
                    (a[0].sent_at = new Date().toISOString()),
                    l(a, !0).catch((a) => {
                      b('Failed to retry sending', a);
                    }));
                }, a)) &&
                d.unref &&
                d.unref());
          }
          function k() {
            d || (j(i), (i = Math.min(2 * i, 36e5)));
          }
          async function l(a, d = !1) {
            if (!d && f.envelopeContainsItemType(a, ['replay_event', 'replay_recording']))
              return (await h.push(a), j(100), {});
            try {
              if (c.shouldSend && (await c.shouldSend(a)) === !1)
                throw Error('Envelope not sent because `shouldSend` callback returned false');
              let b = await e.send(a),
                d = 100;
              if (b) {
                if (b.headers?.['retry-after'])
                  d = g.parseRetryAfterHeader(b.headers['retry-after']);
                else if (b.headers?.['x-sentry-rate-limits']) d = 6e4;
                else if ((b.statusCode || 0) >= 400) return b;
              }
              return (j(d), (i = 5e3), b);
            } catch (e) {
              var m;
              if (
                await ((m = i),
                !f.envelopeContainsItemType(a, ['client_report']) &&
                  (!c.shouldStore || c.shouldStore(a, e, m)))
              )
                return (
                  d ? await h.unshift(a) : await h.push(a),
                  k(),
                  b('Error sending. Event queued.', e),
                  {}
                );
              throw e;
            }
          }
          return (
            c.flushAtStartup && k(),
            { send: l, flush: (a) => (void 0 === a && ((i = 5e3), j(100)), e.flush(a)) }
          );
        };
      }));
  },
  38616,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(1272),
      e = a.r(77885),
      f = a.r(50616);
    function g(a, b) {
      let c;
      return (
        f.forEachEnvelopeItem(
          a,
          (a, d) => (b.includes(d) && (c = Array.isArray(a) ? a[1] : void 0), !!c)
        ),
        c
      );
    }
    ((c.eventFromEnvelope = g),
      (c.makeMultiplexedTransport = function (a, b) {
        return (c) => {
          let h = a(c),
            i = new Map();
          function j(b, f) {
            let h = f ? `${b}:${f}` : b,
              j = i.get(h);
            if (!j) {
              let k = e.dsnFromString(b);
              if (!k) return;
              let l = d.getEnvelopeEndpointWithUrlEncodedAuth(k, c.tunnel);
              ((j = f
                ? ((b) => {
                    let c = a(b);
                    return {
                      ...c,
                      send: async (a) => {
                        let b = g(a, ['event', 'transaction', 'profile', 'replay_event']);
                        return (b && (b.release = f), c.send(a));
                      },
                    };
                  })({ ...c, url: l })
                : a({ ...c, url: l })),
                i.set(h, j));
            }
            return [b, j];
          }
          return {
            send: async function (a) {
              let c = b({
                  envelope: a,
                  getEvent: function (b) {
                    return g(a, b?.length ? b : ['event']);
                  },
                })
                  .map((a) => ('string' == typeof a ? j(a, void 0) : j(a.dsn, a.release)))
                  .filter((a) => !!a),
                d = c.length ? c : [['', h]];
              return (
                await Promise.all(
                  d.map(([b, c]) => c.send(f.createEnvelope(b ? { ...a[0], dsn: b } : a[0], a[1])))
                )
              )[0];
            },
            flush: async function (a) {
              let b = [...i.values(), h];
              return (await Promise.all(b.map((b) => b.flush(a)))).every((a) => a);
            },
          };
        };
      }));
  },
  86770,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(21016);
    function e(a) {
      return 'isRelative' in a;
    }
    function f(a) {
      if (e(a)) return a.pathname;
      let b = new URL(a);
      return (
        (b.search = ''),
        (b.hash = ''),
        ['80', '443'].includes(b.port) && (b.port = ''),
        b.password && (b.password = '%filtered%'),
        b.username && (b.username = '%filtered%'),
        b.toString()
      );
    }
    ((c.getHttpSpanDetailsFromUrlObject = function (a, b, c, g, h) {
      let i = {
        [d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: c,
        [d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',
      };
      return (
        h &&
          ((i['server' === b ? 'http.route' : 'url.template'] = h),
          (i[d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route')),
        g?.method && (i[d.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD] = g.method.toUpperCase()),
        a &&
          (a.search && (i['url.query'] = a.search),
          a.hash && (i['url.fragment'] = a.hash),
          a.pathname &&
            ((i['url.path'] = a.pathname),
            '/' === a.pathname && (i[d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route')),
          !e(a) &&
            ((i[d.SEMANTIC_ATTRIBUTE_URL_FULL] = a.href),
            a.port && (i['url.port'] = a.port),
            a.protocol && (i['url.scheme'] = a.protocol),
            a.hostname && (i['server' === b ? 'server.address' : 'url.domain'] = a.hostname))),
        [
          (function (a, b, c, d) {
            let e = c?.method?.toUpperCase() ?? 'GET',
              g = d || (a ? ('client' === b ? f(a) : a.pathname) : '/');
            return `${e} ${g}`;
          })(a, b, g, h),
          i,
        ]
      );
    }),
      (c.getSanitizedUrlString = function (a) {
        let { protocol: b, host: c, path: d } = a,
          e =
            c
              ?.replace(/^.*@/, '[filtered]:[filtered]@')
              .replace(/(:80)$/, '')
              .replace(/(:443)$/, '') || '';
        return `${b ? `${b}://` : ''}${e}${d}`;
      }),
      (c.getSanitizedUrlStringFromUrlObject = f),
      (c.isURLObjectRelative = e),
      (c.parseStringToURLObject = function (a, b) {
        let c = 0 >= a.indexOf('://') && 0 !== a.indexOf('//'),
          d = b ?? (c ? 'thismessage:/' : void 0);
        try {
          if ('canParse' in URL && !URL.canParse(a, d)) return;
          let b = new URL(a, d);
          if (c) return { isRelative: c, pathname: b.pathname, search: b.search, hash: b.hash };
          return b;
        } catch {}
      }),
      (c.parseUrl = function (a) {
        if (!a) return {};
        let b = a.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
        if (!b) return {};
        let c = b[6] || '',
          d = b[8] || '';
        return {
          host: b[4],
          path: b[5],
          protocol: b[2],
          search: c,
          hash: d,
          relative: b[5] + c + d,
        };
      }),
      (c.stripUrlQueryAndFragment = function (a) {
        return a.split(/[?#]/, 1)[0];
      }));
  },
  23528,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(86770);
    function e(a) {
      return '/' === a[a.length - 1] ? a.slice(0, -1) : a;
    }
    c.isSentryRequestUrl = function (a, b) {
      var c, f;
      let g = b?.getDsn(),
        h = b?.getOptions().tunnel;
      return (
        (function (a, b) {
          let c = d.parseStringToURLObject(a);
          return (
            !(!c || d.isURLObjectRelative(c)) &&
            !!b &&
            c.host.includes(b.host) &&
            /(^|&|\?)sentry_key=/.test(c.search)
          );
        })(a, g) || ((c = a), !!(f = h) && e(c) === e(f))
      );
    };
  },
  3740,
  (a, b, c) => {
    function d(a, ...b) {
      let c = new String(String.raw(a, ...b));
      return (
        (c.__sentry_template_string__ = a.join('\0').replace(/%/g, '%%').replace(/\0/g, '%s')),
        (c.__sentry_template_values__ = b),
        c
      );
    }
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.fmt = d),
      (c.parameterize = d));
  },
  64620,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.addAutoIpAddressToSession = function (a) {
        'aggregates' in a
          ? a.attrs?.ip_address === void 0 && (a.attrs = { ...a.attrs, ip_address: '{{auto}}' })
          : void 0 === a.ipAddress && (a.ipAddress = '{{auto}}');
      }),
      (c.addAutoIpAddressToUser = function (a) {
        a.user?.ip_address === void 0 && (a.user = { ...a.user, ip_address: '{{auto}}' });
      }));
  },
  86e3,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(74898);
    c.applySdkMetadata = function (a, b, c = [b], e = 'npm') {
      let f = a._metadata || {};
      (f.sdk ||
        (f.sdk = {
          name: `sentry.javascript.${b}`,
          packages: c.map((a) => ({ name: `${e}:@sentry/${a}`, version: d.SDK_VERSION })),
          version: d.SDK_VERSION,
        }),
        (a._metadata = f));
    };
  },
  85453,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(85194),
      e = a.r(5356),
      f = a.r(57697),
      g = a.r(73072),
      h = a.r(43679),
      i = a.r(45889),
      j = a.r(7001),
      k = a.r(16073),
      l = a.r(12138);
    function m(a) {
      let { traceId: b, parentSpanId: c, parentSampled: d } = l.extractTraceparentData(a) || {};
      if (b && c) return `00-${b}-${c}-${d ? '01' : '00'}`;
    }
    ((c._sentryTraceToTraceParentHeader = m),
      (c.getTraceData = function (a = {}) {
        let b = a.client || f.getClient();
        if (!g.isEnabled() || !b) return {};
        let c = e.getMainCarrier(),
          n = d.getAsyncContextStrategy(c);
        if (n.getTraceData) return n.getTraceData(a);
        let o = a.scope || f.getCurrentScope(),
          p = a.span || i.getActiveSpan(),
          q = p
            ? i.spanToTraceHeader(p)
            : (function (a) {
                let { traceId: b, sampled: c, propagationSpanId: d } = a.getPropagationContext();
                return l.generateSentryTraceHeader(b, d, c);
              })(o),
          r = p
            ? j.getDynamicSamplingContextFromSpan(p)
            : j.getDynamicSamplingContextFromScope(b, o),
          s = k.dynamicSamplingContextToSentryBaggageHeader(r);
        if (!l.TRACEPARENT_REGEXP.test(q))
          return (h.debug.warn('Invalid sentry-trace data. Cannot generate trace data'), {});
        let t = { 'sentry-trace': q, baggage: s };
        if (a.propagateTraceparent) {
          let a = m(q);
          a && (t.traceparent = a);
        }
        return t;
      }));
  },
  62694,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(85453);
    c.getTraceMetaTags = function (a) {
      return Object.entries(a || d.getTraceData())
        .map(([a, b]) => `<meta name="${a}" content="${b}"/>`)
        .join('\n');
    };
  },
  90934,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.debounce = function (a, b, c) {
        let d,
          e,
          f,
          g = c?.maxWait ? Math.max(c.maxWait, b) : 0,
          h = c?.setTimeoutImpl || setTimeout;
        function i() {
          return (j(), (d = a()));
        }
        function j() {
          (void 0 !== e && clearTimeout(e), void 0 !== f && clearTimeout(f), (e = f = void 0));
        }
        function k() {
          return (e && clearTimeout(e), (e = h(i, b)), g && void 0 === f && (f = h(i, g)), d);
        }
        return (
          (k.cancel = j),
          (k.flush = function () {
            return void 0 !== e || void 0 !== f ? i() : d;
          }),
          k
        );
      }));
  },
  30191,
  (a, b, c) => {
    function d(a) {
      let b = {};
      try {
        a.forEach((a, c) => {
          'string' == typeof a && (b[c] = a);
        });
      } catch {}
      return b;
    }
    function e(a) {
      let b = Object.create(null);
      try {
        Object.entries(a).forEach(([a, c]) => {
          'string' == typeof c && (b[a] = c);
        });
      } catch {}
      return b;
    }
    function f(a) {
      if (a)
        try {
          let b = new URL(a, 'http://s.io').search.slice(1);
          return b.length ? b : void 0;
        } catch {
          return;
        }
    }
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.extractQueryParamsFromUrl = f),
      (c.headersToDict = e),
      (c.httpRequestToRequestData = function (a) {
        let b = a.headers || {},
          c =
            ('string' == typeof b['x-forwarded-host'] ? b['x-forwarded-host'] : void 0) ||
            ('string' == typeof b.host ? b.host : void 0),
          d =
            ('string' == typeof b['x-forwarded-proto'] ? b['x-forwarded-proto'] : void 0) ||
            a.protocol ||
            (a.socket?.encrypted ? 'https' : 'http'),
          g = a.url || '',
          h = (function ({ url: a, protocol: b, host: c }) {
            return a?.startsWith('http') ? a : a && c ? `${b}://${c}${a}` : void 0;
          })({ url: g, host: c, protocol: d }),
          i = a.body || void 0,
          j = a.cookies;
        return { url: h, method: a.method, query_string: f(g), headers: e(b), cookies: j, data: i };
      }),
      (c.winterCGHeadersToDict = d),
      (c.winterCGRequestToRequestData = function (a) {
        let b = d(a.headers);
        return { method: a.method, url: a.url, query_string: f(a.url), headers: b };
      }));
  },
  95670,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(43679),
      f = a.r(59671);
    c.addBreadcrumb = function (a, b) {
      let c = d.getClient(),
        g = d.getIsolationScope();
      if (!c) return;
      let { beforeBreadcrumb: h = null, maxBreadcrumbs: i = 100 } = c.getOptions();
      if (i <= 0) return;
      let j = { timestamp: f.dateTimestampInSeconds(), ...a },
        k = h ? e.consoleSandbox(() => h(j, b)) : j;
      null !== k && (c.emit && c.emit('beforeAddBreadcrumb', k, b), g.addBreadcrumb(k, i));
    };
  },
  29933,
  (a, b, c) => {
    let d;
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let e = a.r(57697),
      f = a.r(98699),
      g = a.r(78707),
      h = new WeakMap();
    c.functionToStringIntegration = f.defineIntegration(() => ({
      name: 'FunctionToString',
      setupOnce() {
        d = Function.prototype.toString;
        try {
          Function.prototype.toString = function (...a) {
            let b = g.getOriginalFunction(this),
              c = h.has(e.getClient()) && void 0 !== b ? b : this;
            return d.apply(c, a);
          };
        } catch {}
      },
      setup(a) {
        h.set(a, !0);
      },
    }));
  },
  18715,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(98699),
      f = a.r(43679),
      g = a.r(4859),
      h = a.r(61843),
      i = a.r(27966),
      j = [
        /^Script error\.?$/,
        /^Javascript error: Script error\.? on line 0$/,
        /^ResizeObserver loop completed with undelivered notifications.$/,
        /^Cannot redefine property: googletag$/,
        /^Can't find variable: gmo$/,
        /^undefined is not an object \(evaluating 'a\.[A-Z]'\)$/,
        'can\'t redefine non-configurable property "solana"',
        "vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)",
        "Can't find variable: _AutofillCallbackHandler",
        /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\d+, MethodName:simulateEvent, ParamCount:\d+$/,
        /^Java exception was raised during method invocation$/,
      ],
      k = e.defineIntegration((a = {}) => {
        let b;
        return {
          name: 'EventFilters',
          setup(c) {
            b = m(a, c.getOptions());
          },
          processEvent: (c, e, j) => (
            b || (b = m(a, j.getOptions())),
            !(function (a, b) {
              if (a.type) {
                if (
                  'transaction' === a.type &&
                  (function (a, b) {
                    if (!b?.length) return !1;
                    let c = a.transaction;
                    return !!c && i.stringMatchesSomePattern(c, b);
                  })(a, b.ignoreTransactions)
                )
                  return (
                    d.DEBUG_BUILD &&
                      f.debug
                        .warn(`Event dropped due to being matched by \`ignoreTransactions\` option.
Event: ${h.getEventDescription(a)}`),
                    !0
                  );
              } else {
                var c, e, j;
                if (
                  ((c = a),
                  (e = b.ignoreErrors),
                  e?.length &&
                    g.getPossibleEventMessages(c).some((a) => i.stringMatchesSomePattern(a, e)))
                )
                  return (
                    d.DEBUG_BUILD &&
                      f.debug.warn(`Event dropped due to being matched by \`ignoreErrors\` option.
Event: ${h.getEventDescription(a)}`),
                    !0
                  );
                if (
                  ((j = a),
                  j.exception?.values?.length &&
                    !j.message &&
                    !j.exception.values.some(
                      (a) => a.stacktrace || (a.type && 'Error' !== a.type) || a.value
                    ))
                )
                  return (
                    d.DEBUG_BUILD &&
                      f.debug
                        .warn(`Event dropped due to not having an error message, error type or stacktrace.
Event: ${h.getEventDescription(a)}`),
                    !0
                  );
                if (
                  (function (a, b) {
                    if (!b?.length) return !1;
                    let c = n(a);
                    return !!c && i.stringMatchesSomePattern(c, b);
                  })(a, b.denyUrls)
                )
                  return (
                    d.DEBUG_BUILD &&
                      f.debug.warn(`Event dropped due to being matched by \`denyUrls\` option.
Event: ${h.getEventDescription(a)}.
Url: ${n(a)}`),
                    !0
                  );
                if (
                  !(function (a, b) {
                    if (!b?.length) return !0;
                    let c = n(a);
                    return !c || i.stringMatchesSomePattern(c, b);
                  })(a, b.allowUrls)
                )
                  return (
                    d.DEBUG_BUILD &&
                      f.debug.warn(`Event dropped due to not being matched by \`allowUrls\` option.
Event: ${h.getEventDescription(a)}.
Url: ${n(a)}`),
                    !0
                  );
              }
              return !1;
            })(c, b)
              ? c
              : null
          ),
        };
      }),
      l = e.defineIntegration((a = {}) => ({ ...k(a), name: 'InboundFilters' }));
    function m(a = {}, b = {}) {
      return {
        allowUrls: [...(a.allowUrls || []), ...(b.allowUrls || [])],
        denyUrls: [...(a.denyUrls || []), ...(b.denyUrls || [])],
        ignoreErrors: [
          ...(a.ignoreErrors || []),
          ...(b.ignoreErrors || []),
          ...(a.disableErrorDefaults ? [] : j),
        ],
        ignoreTransactions: [...(a.ignoreTransactions || []), ...(b.ignoreTransactions || [])],
      };
    }
    function n(a) {
      try {
        let b = [...(a.exception?.values ?? [])]
            .reverse()
            .find((a) => a.mechanism?.parent_id === void 0 && a.stacktrace?.frames?.length),
          c = b?.stacktrace?.frames;
        return c
          ? (function (a = []) {
              for (let b = a.length - 1; b >= 0; b--) {
                let c = a[b];
                if (c && '<anonymous>' !== c.filename && '[native code]' !== c.filename)
                  return c.filename || null;
              }
              return null;
            })(c)
          : null;
      } catch {
        return (
          d.DEBUG_BUILD &&
            f.debug.error(`Cannot extract url for event ${h.getEventDescription(a)}`),
          null
        );
      }
    }
    ((c.eventFiltersIntegration = k), (c.inboundFiltersIntegration = l));
  },
  54292,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(59242);
    function e(a, b) {
      ((a.mechanism = a.mechanism || { type: 'generic', handled: !0 }),
        (a.mechanism = {
          ...a.mechanism,
          ...('AggregateError' === a.type && { is_exception_group: !0 }),
          exception_id: b,
        }));
    }
    function f(a, b, c, d) {
      ((a.mechanism = a.mechanism || { type: 'generic', handled: !0 }),
        (a.mechanism = {
          ...a.mechanism,
          type: 'chained',
          source: b,
          exception_id: c,
          parent_id: d,
        }));
    }
    c.applyAggregateErrorsToEvent = function (a, b, c, g, h, i) {
      if (!h.exception?.values || !i || !d.isInstanceOf(i.originalException, Error)) return;
      let j =
        h.exception.values.length > 0 ? h.exception.values[h.exception.values.length - 1] : void 0;
      j &&
        (h.exception.values = (function a(b, c, g, h, i, j, k, l) {
          if (j.length >= g + 1) return j;
          let m = [...j];
          if (d.isInstanceOf(h[i], Error)) {
            e(k, l);
            let d = b(c, h[i]),
              j = m.length;
            (f(d, i, j, l), (m = a(b, c, g, h[i], i, [d, ...m], d, j)));
          }
          return (
            Array.isArray(h.errors) &&
              h.errors.forEach((h, j) => {
                if (d.isInstanceOf(h, Error)) {
                  e(k, l);
                  let d = b(c, h),
                    n = m.length;
                  (f(d, `errors[${j}]`, n, l), (m = a(b, c, g, h, i, [d, ...m], d, n)));
                }
              }),
            m
          );
        })(a, b, g, i.originalException, c, h.exception.values, j, 0));
    };
  },
  51380,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(98699),
      e = a.r(54292),
      f = a.r(44681);
    c.linkedErrorsIntegration = d.defineIntegration((a = {}) => {
      let b = a.limit || 5,
        c = a.key || 'cause';
      return {
        name: 'LinkedErrors',
        preprocessEvent(a, d, g) {
          let h = g.getOptions();
          e.applyAggregateErrorsToEvent(f.exceptionFromError, h.stackParser, c, b, a, d);
        },
      };
    });
  },
  45685,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(6325),
      e = new Map(),
      f = new Set();
    function g(a, b) {
      if (d.GLOBAL_OBJ._sentryModuleMetadata)
        for (let b of Object.keys(d.GLOBAL_OBJ._sentryModuleMetadata)) {
          let c = d.GLOBAL_OBJ._sentryModuleMetadata[b];
          if (!f.has(b)) {
            for (let d of (f.add(b), a(b).reverse()))
              if (d.filename) {
                e.set(d.filename, c);
                break;
              }
          }
        }
      return e.get(b);
    }
    ((c.addMetadataToStackFrames = function (a, b) {
      try {
        b.exception.values.forEach((b) => {
          if (b.stacktrace)
            for (let c of b.stacktrace.frames || []) {
              if (!c.filename || c.module_metadata) continue;
              let b = g(a, c.filename);
              b && (c.module_metadata = b);
            }
        });
      } catch {}
    }),
      (c.getMetadataForUrl = g),
      (c.stripMetadataFromStackFrames = function (a) {
        try {
          a.exception.values.forEach((a) => {
            if (a.stacktrace) for (let b of a.stacktrace.frames || []) delete b.module_metadata;
          });
        } catch {}
      }));
  },
  2175,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(98699),
      e = a.r(45685),
      f = a.r(50616);
    c.moduleMetadataIntegration = d.defineIntegration(() => ({
      name: 'ModuleMetadata',
      setup(a) {
        (a.on('beforeEnvelope', (a) => {
          f.forEachEnvelopeItem(a, (a, b) => {
            if ('event' === b) {
              let b = Array.isArray(a) ? a[1] : void 0;
              b && (e.stripMetadataFromStackFrames(b), (a[1] = b));
            }
          });
        }),
          a.on('applyFrameMetadata', (b) => {
            if (b.type) return;
            let c = a.getOptions().stackParser;
            e.addMetadataToStackFrames(c, b);
          }));
      },
    }));
  },
  43764,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.parseCookie = function (a) {
        let b = {},
          c = 0;
        for (; c < a.length; ) {
          let d = a.indexOf('=', c);
          if (-1 === d) break;
          let e = a.indexOf(';', c);
          if (-1 === e) e = a.length;
          else if (e < d) {
            c = a.lastIndexOf(';', d - 1) + 1;
            continue;
          }
          let f = a.slice(c, d).trim();
          if (void 0 === b[f]) {
            let c = a.slice(d + 1, e).trim();
            34 === c.charCodeAt(0) && (c = c.slice(1, -1));
            try {
              b[f] = -1 !== c.indexOf('%') ? decodeURIComponent(c) : c;
            } catch {
              b[f] = c;
            }
          }
          c = e + 1;
        }
        return b;
      }));
  },
  62203,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = [
      'X-Client-IP',
      'X-Forwarded-For',
      'Fly-Client-IP',
      'CF-Connecting-IP',
      'Fastly-Client-Ip',
      'True-Client-Ip',
      'X-Real-IP',
      'X-Cluster-Client-IP',
      'X-Forwarded',
      'Forwarded-For',
      'Forwarded',
      'X-Vercel-Forwarded-For',
    ];
    ((c.getClientIPAddress = function (a) {
      return (
        d
          .map((b) => {
            let c = a[b],
              d = Array.isArray(c) ? c.join(';') : c;
            return 'Forwarded' === b
              ? (function (a) {
                  if (!a) return null;
                  for (let b of a.split(';')) if (b.startsWith('for=')) return b.slice(4);
                  return null;
                })(d)
              : d?.split(',').map((a) => a.trim());
          })
          .reduce((a, b) => (b ? a.concat(b) : a), [])
          .find((a) => {
            var b;
            return (
              null !== a &&
              ((b = a),
              /(?:^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$)|(?:^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/.test(
                b
              ))
            );
          }) || null
      );
    }),
      (c.ipHeaderNames = d));
  },
  87979,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(98699),
      e = a.r(43764),
      f = a.r(62203),
      g = { cookies: !0, data: !0, headers: !0, query_string: !0, url: !0 };
    c.requestDataIntegration = d.defineIntegration((a = {}) => {
      let b = { ...g, ...a.include };
      return {
        name: 'RequestData',
        processEvent(a, c, d) {
          let { sdkProcessingMetadata: g = {} } = a,
            { normalizedRequest: h, ipAddress: i } = g,
            j = { ...b, ip: b.ip ?? d.getOptions().sendDefaultPii };
          return (
            h &&
              (function (a, b, c, d) {
                if (
                  ((a.request = {
                    ...a.request,
                    ...(function (a, b) {
                      let c = {},
                        d = { ...a.headers };
                      return (
                        b.headers &&
                          ((c.headers = d),
                          b.cookies || delete d.cookie,
                          b.ip ||
                            f.ipHeaderNames.forEach((a) => {
                              delete d[a];
                            })),
                        (c.method = a.method),
                        b.url && (c.url = a.url),
                        b.cookies &&
                          (c.cookies =
                            a.cookies || (d?.cookie ? e.parseCookie(d.cookie) : void 0) || {}),
                        b.query_string && (c.query_string = a.query_string),
                        b.data && (c.data = a.data),
                        c
                      );
                    })(b, d),
                  }),
                  d.ip)
                ) {
                  let d = (b.headers && f.getClientIPAddress(b.headers)) || c.ipAddress;
                  d && (a.user = { ...a.user, ip_address: d });
                }
              })(a, h, { ipAddress: i }, j),
            a
          );
        },
      };
    });
  },
  69232,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(43679),
      e = a.r(78707),
      f = a.r(6325),
      g = a.r(44409);
    function h() {
      'console' in f.GLOBAL_OBJ &&
        d.CONSOLE_LEVELS.forEach(function (a) {
          a in f.GLOBAL_OBJ.console &&
            e.fill(f.GLOBAL_OBJ.console, a, function (b) {
              return (
                (d.originalConsoleMethods[a] = b),
                function (...b) {
                  g.triggerHandlers('console', { args: b, level: a });
                  let c = d.originalConsoleMethods[a];
                  c?.apply(f.GLOBAL_OBJ.console, b);
                }
              );
            });
        });
    }
    c.addConsoleInstrumentationHandler = function (a) {
      let b = 'console';
      (g.addHandler(b, a), g.maybeInstrument(b, h));
    };
  },
  86453,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.severityLevelFromString = function (a) {
        return 'warn' === a
          ? 'warning'
          : ['fatal', 'error', 'warning', 'log', 'info', 'debug'].includes(a)
            ? a
            : 'log';
      }));
  },
  12597,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(73072),
      f = a.r(69232),
      g = a.r(98699),
      h = a.r(43679),
      i = a.r(61843),
      j = a.r(86453),
      k = a.r(27966),
      l = a.r(6325);
    c.captureConsoleIntegration = g.defineIntegration((a = {}) => {
      let b = a.levels || h.CONSOLE_LEVELS,
        c = a.handled ?? !0;
      return {
        name: 'CaptureConsole',
        setup(a) {
          'console' in l.GLOBAL_OBJ &&
            f.addConsoleInstrumentationHandler(({ args: f, level: g }) => {
              d.getClient() === a &&
                b.includes(g) &&
                (function (a, b, c) {
                  let f = { level: j.severityLevelFromString(b), extra: { arguments: a } };
                  d.withScope((d) => {
                    if (
                      (d.addEventProcessor(
                        (a) => (
                          (a.logger = 'console'),
                          i.addExceptionMechanism(a, { handled: c, type: 'console' }),
                          a
                        )
                      ),
                      'assert' === b)
                    ) {
                      if (!a[0]) {
                        let b = `Assertion failed: ${k.safeJoin(a.slice(1), ' ') || 'console.assert'}`;
                        (d.setExtra('arguments', a.slice(1)), e.captureMessage(b, f));
                      }
                      return;
                    }
                    let g = a.find((a) => a instanceof Error);
                    if (g) return void e.captureException(g, f);
                    let h = k.safeJoin(a, ' ');
                    e.captureMessage(h, f);
                  });
                })(f, g, c);
            });
        },
      };
    });
  },
  144,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(98699),
      f = a.r(43679),
      g = a.r(1805),
      h = e.defineIntegration(() => {
        let a;
        return {
          name: 'Dedupe',
          processEvent(b) {
            if (b.type) return b;
            try {
              if (i(b, a))
                return (
                  d.DEBUG_BUILD &&
                    f.debug.warn(
                      'Event dropped due to being a duplicate of previously captured event.'
                    ),
                  null
                );
            } catch {}
            return (a = b);
          },
        };
      });
    function i(a, b) {
      return (
        !!b &&
        !!(
          (function (a, b) {
            let c = a.message,
              d = b.message;
            return (
              (!!c || !!d) && (!c || !!d) && (!!c || !d) && c === d && !!k(a, b) && !!j(a, b) && !0
            );
          })(a, b) ||
          (function (a, b) {
            let c = l(b),
              d = l(a);
            return !!c && !!d && c.type === d.type && c.value === d.value && !!k(a, b) && !!j(a, b);
          })(a, b)
        )
      );
    }
    function j(a, b) {
      let c = g.getFramesFromEvent(a),
        d = g.getFramesFromEvent(b);
      if (!c && !d) return !0;
      if ((c && !d) || (!c && d) || d.length !== c.length) return !1;
      for (let a = 0; a < d.length; a++) {
        let b = d[a],
          e = c[a];
        if (
          b.filename !== e.filename ||
          b.lineno !== e.lineno ||
          b.colno !== e.colno ||
          b.function !== e.function
        )
          return !1;
      }
      return !0;
    }
    function k(a, b) {
      let c = a.fingerprint,
        d = b.fingerprint;
      if (!c && !d) return !0;
      if ((c && !d) || (!c && d)) return !1;
      try {
        return c.join('') === d.join('');
      } catch {
        return !1;
      }
    }
    function l(a) {
      return a.exception?.values?.[0];
    }
    ((c._shouldDropEvent = i), (c.dedupeIntegration = h));
  },
  7863,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(98699),
      f = a.r(43679),
      g = a.r(59242),
      h = a.r(21731),
      i = a.r(78707),
      j = a.r(27966);
    c.extraErrorDataIntegration = e.defineIntegration((a = {}) => {
      let { depth: b = 3, captureErrorCause: c = !0 } = a;
      return {
        name: 'ExtraErrorData',
        processEvent(a, e, k) {
          let { maxValueLength: l = 250 } = k.getOptions();
          return (function (a, b = {}, c, e, k) {
            if (!b.originalException || !g.isError(b.originalException)) return a;
            let l = b.originalException.name || b.originalException.constructor.name,
              m = (function a(b, c, e) {
                try {
                  let d = [
                      'name',
                      'message',
                      'stack',
                      'line',
                      'column',
                      'fileName',
                      'lineNumber',
                      'columnNumber',
                      'toJSON',
                    ],
                    f = {};
                  for (let a of Object.keys(b)) {
                    if (-1 !== d.indexOf(a)) continue;
                    let c = b[a];
                    f[a] = g.isError(c) || 'string' == typeof c ? j.truncate(`${c}`, e) : c;
                  }
                  if (
                    (c &&
                      void 0 !== b.cause &&
                      (g.isError(b.cause)
                        ? (f.cause = {
                            [b.cause.name || b.cause.constructor.name]: a(b.cause, !1, e),
                          })
                        : (f.cause = b.cause)),
                    'function' == typeof b.toJSON)
                  ) {
                    let a = b.toJSON();
                    for (let b of Object.keys(a)) {
                      let c = a[b];
                      f[b] = g.isError(c) ? c.toString() : c;
                    }
                  }
                  return f;
                } catch (a) {
                  d.DEBUG_BUILD &&
                    f.debug.error('Unable to extract extra data from the Error object:', a);
                }
                return null;
              })(b.originalException, e, k);
            if (m) {
              let b = { ...a.contexts },
                d = h.normalize(m, c);
              return (
                g.isPlainObject(d) &&
                  (i.addNonEnumerableProperty(d, '__sentry_skip_normalization__', !0), (b[l] = d)),
                { ...a, contexts: b }
              );
            }
            return a;
          })(a, e, b, c, l);
        },
      };
    });
  },
  66795,
  (a, b, c) => {
    function d(a, b) {
      let c = 0;
      for (let b = a.length - 1; b >= 0; b--) {
        let d = a[b];
        '.' === d
          ? a.splice(b, 1)
          : '..' === d
            ? (a.splice(b, 1), c++)
            : c && (a.splice(b, 1), c--);
      }
      if (b) for (; c--; ) a.unshift('..');
      return a;
    }
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let e = /^(\S+:\\|\/?)([\s\S]*?)((?:\.{1,2}|[^/\\]+?|)(\.[^./\\]*|))(?:[/\\]*)$/;
    function f(a) {
      let b = a.length > 1024 ? `<truncated>${a.slice(-1024)}` : a,
        c = e.exec(b);
      return c ? c.slice(1) : [];
    }
    function g(...a) {
      let b = '',
        c = !1;
      for (let d = a.length - 1; d >= -1 && !c; d--) {
        let e = d >= 0 ? a[d] : '/';
        e && ((b = `${e}/${b}`), (c = '/' === e.charAt(0)));
      }
      return (
        (b = d(
          b.split('/').filter((a) => !!a),
          !c
        ).join('/')),
        (c ? '/' : '') + b || '.'
      );
    }
    function h(a) {
      let b = 0;
      for (; b < a.length && '' === a[b]; b++);
      let c = a.length - 1;
      for (; c >= 0 && '' === a[c]; c--);
      return b > c ? [] : a.slice(b, c - b + 1);
    }
    function i(a) {
      let b = j(a),
        c = '/' === a.slice(-1),
        e = d(
          a.split('/').filter((a) => !!a),
          !b
        ).join('/');
      return (e || b || (e = '.'), e && c && (e += '/'), (b ? '/' : '') + e);
    }
    function j(a) {
      return '/' === a.charAt(0);
    }
    ((c.basename = function (a, b) {
      let c = f(a)[2] || '';
      return (b && c.slice(-1 * b.length) === b && (c = c.slice(0, c.length - b.length)), c);
    }),
      (c.dirname = function (a) {
        let b = f(a),
          c = b[0] || '',
          d = b[1];
        return c || d ? (d && (d = d.slice(0, d.length - 1)), c + d) : '.';
      }),
      (c.isAbsolute = j),
      (c.join = function (...a) {
        return i(a.join('/'));
      }),
      (c.normalizePath = i),
      (c.relative = function (a, b) {
        ((a = g(a).slice(1)), (b = g(b).slice(1)));
        let c = h(a.split('/')),
          d = h(b.split('/')),
          e = Math.min(c.length, d.length),
          f = e;
        for (let a = 0; a < e; a++)
          if (c[a] !== d[a]) {
            f = a;
            break;
          }
        let i = [];
        for (let a = f; a < c.length; a++) i.push('..');
        return (i = i.concat(d.slice(f))).join('/');
      }),
      (c.resolve = g));
  },
  40819,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(98699),
      e = a.r(66795),
      f = a.r(6325),
      g = d.defineIntegration((a = {}) => {
        let b = a.root,
          c = a.prefix || 'app:///',
          d = 'window' in f.GLOBAL_OBJ && !!f.GLOBAL_OBJ.window,
          e = a.iteratee || h({ isBrowser: d, root: b, prefix: c });
        return {
          name: 'RewriteFrames',
          processEvent(a) {
            let b = a;
            return (
              a.exception &&
                Array.isArray(a.exception.values) &&
                (b = (function (a) {
                  try {
                    return {
                      ...a,
                      exception: {
                        ...a.exception,
                        values: a.exception.values.map((a) => {
                          var b;
                          return {
                            ...a,
                            ...(a.stacktrace && {
                              stacktrace: {
                                ...(b = a.stacktrace),
                                frames: b?.frames?.map((a) => e(a)),
                              },
                            }),
                          };
                        }),
                      },
                    };
                  } catch {
                    return a;
                  }
                })(b)),
              b
            );
          },
        };
      });
    function h({ isBrowser: a, root: b, prefix: c }) {
      return (d) => {
        if (!d.filename) return d;
        let f =
            /^[a-zA-Z]:\\/.test(d.filename) ||
            (d.filename.includes('\\') && !d.filename.includes('/')),
          g = /^\//.test(d.filename);
        if (a) {
          if (b) {
            let a = d.filename;
            0 === a.indexOf(b) && (d.filename = a.replace(b, c));
          }
        } else if (f || g) {
          let a = f ? d.filename.replace(/^[a-zA-Z]:/, '').replace(/\\/g, '/') : d.filename,
            g = b ? e.relative(b, a) : e.basename(a);
          d.filename = `${c}${g}`;
        }
        return d;
      };
    }
    ((c.generateIteratee = h), (c.rewriteFramesIntegration = g));
  },
  71828,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(95670),
      e = a.r(25350),
      f = a.r(73072),
      g = a.r(98699),
      h = a.r(21016),
      i = a.r(43679),
      j = a.r(61843),
      k = a.r(59242),
      l = a.r(47534),
      m = a.r(45481),
      n = [
        'reauthenticate',
        'signInAnonymously',
        'signInWithOAuth',
        'signInWithIdToken',
        'signInWithOtp',
        'signInWithPassword',
        'signInWithSSO',
        'signOut',
        'signUp',
        'verifyOtp',
      ],
      o = [
        'createUser',
        'deleteUser',
        'listUsers',
        'getUserById',
        'updateUserById',
        'inviteUserByEmail',
      ],
      p = {
        eq: 'eq',
        neq: 'neq',
        gt: 'gt',
        gte: 'gte',
        lt: 'lt',
        lte: 'lte',
        like: 'like',
        'like(all)': 'likeAllOf',
        'like(any)': 'likeAnyOf',
        ilike: 'ilike',
        'ilike(all)': 'ilikeAllOf',
        'ilike(any)': 'ilikeAnyOf',
        is: 'is',
        in: 'in',
        cs: 'contains',
        cd: 'containedBy',
        sr: 'rangeGt',
        nxl: 'rangeGte',
        sl: 'rangeLt',
        nxr: 'rangeLte',
        adj: 'rangeAdjacent',
        ov: 'overlaps',
        fts: '',
        plfts: 'plain',
        phfts: 'phrase',
        wfts: 'websearch',
        not: 'not',
      },
      q = ['select', 'insert', 'upsert', 'update', 'delete'];
    function r(a) {
      try {
        a.__SENTRY_INSTRUMENTED__ = !0;
      } catch {}
    }
    function s(a) {
      try {
        return a.__SENTRY_INSTRUMENTED__;
      } catch {
        return !1;
      }
    }
    function t(a, b = {}) {
      switch (a) {
        case 'GET':
          return 'select';
        case 'POST':
          if (b.Prefer?.includes('resolution=')) return 'upsert';
          return 'insert';
        case 'PATCH':
          return 'update';
        case 'DELETE':
          return 'delete';
        default:
          return '<unknown-op>';
      }
    }
    function u(a, b) {
      let c;
      if ('' === b || '*' === b) return 'select(*)';
      if ('select' === a) return `select(${b})`;
      if ('or' === a || a.endsWith('.or')) return `${a}${b}`;
      let [d, ...e] = b.split('.');
      return (
        (c = d?.startsWith('fts')
          ? 'textSearch'
          : d?.startsWith('plfts')
            ? 'textSearch[plain]'
            : d?.startsWith('phfts')
              ? 'textSearch[phrase]'
              : d?.startsWith('wfts')
                ? 'textSearch[websearch]'
                : (d && p[d]) || 'filter'),
        `${c}(${a}, ${e.join('.')})`
      );
    }
    function v(a, b = !1) {
      return new Proxy(a, {
        apply: (c, d, e) =>
          m.startSpan(
            {
              name: `auth ${b ? '(admin) ' : ''}${a.name}`,
              attributes: {
                [h.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.supabase',
                [h.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'db',
                'db.system': 'postgresql',
                'db.operation': `auth.${b ? 'admin.' : ''}${a.name}`,
              },
            },
            (a) =>
              Reflect.apply(c, d, e)
                .then(
                  (b) => (
                    b && 'object' == typeof b && 'error' in b && b.error
                      ? (a.setStatus({ code: l.SPAN_STATUS_ERROR }),
                        f.captureException(b.error, {
                          mechanism: { handled: !1, type: 'auto.db.supabase.auth' },
                        }))
                      : a.setStatus({ code: l.SPAN_STATUS_OK }),
                    a.end(),
                    b
                  )
                )
                .catch((b) => {
                  throw (
                    a.setStatus({ code: l.SPAN_STATUS_ERROR }),
                    a.end(),
                    f.captureException(b, {
                      mechanism: { handled: !1, type: 'auto.db.supabase.auth' },
                    }),
                    b
                  );
                })
                .then(...e)
          ),
      });
    }
    let w = (a) => {
        if (!a) {
          e.DEBUG_BUILD &&
            i.debug.warn(
              'Supabase integration was not installed because no Supabase client was provided.'
            );
          return;
        }
        (!(function (a) {
          s(a.prototype.from) ||
            ((a.prototype.from = new Proxy(a.prototype.from, {
              apply(a, b, c) {
                let g = Reflect.apply(a, b, c);
                return (
                  (function (a) {
                    for (let b of q)
                      s(a.prototype[b]) ||
                        ((a.prototype[b] = new Proxy(a.prototype[b], {
                          apply(a, c, g) {
                            let n = Reflect.apply(a, c, g),
                              o = n.constructor;
                            return (
                              e.DEBUG_BUILD &&
                                i.debug.log(
                                  `Instrumenting ${b} operation's PostgRESTFilterBuilder`
                                ),
                              s(o.prototype.then) ||
                                ((o.prototype.then = new Proxy(o.prototype.then, {
                                  apply(a, b, c) {
                                    let e = t(b.method, b.headers);
                                    if (
                                      !q.includes(e) ||
                                      !b?.url?.pathname ||
                                      'string' != typeof b.url.pathname
                                    )
                                      return Reflect.apply(a, b, c);
                                    let g = b.url.pathname.split('/'),
                                      i = g.length > 0 ? g[g.length - 1] : '',
                                      n = [];
                                    for (let [a, c] of b.url.searchParams.entries())
                                      n.push(u(a, c));
                                    let o = Object.create(null);
                                    if (k.isPlainObject(b.body))
                                      for (let [a, c] of Object.entries(b.body)) o[a] = c;
                                    let p = `${'select' === e ? '' : `${e}${o ? '(...) ' : ''}`}${n.join(' ')} from(${i})`,
                                      r = {
                                        'db.table': i,
                                        'db.schema': b.schema,
                                        'db.url': b.url.origin,
                                        'db.sdk': b.headers['X-Client-Info'],
                                        'db.system': 'postgresql',
                                        'db.operation': e,
                                        [h.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.supabase',
                                        [h.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'db',
                                      };
                                    return (
                                      n.length && (r['db.query'] = n),
                                      Object.keys(o).length && (r['db.body'] = o),
                                      m.startSpan({ name: p, attributes: r }, (g) =>
                                        Reflect.apply(a, b, [])
                                          .then(
                                            (a) => {
                                              if (
                                                (g &&
                                                  (a &&
                                                    'object' == typeof a &&
                                                    'status' in a &&
                                                    l.setHttpStatus(g, a.status || 500),
                                                  g.end()),
                                                a.error)
                                              ) {
                                                let b = Error(a.error.message);
                                                (a.error.code && (b.code = a.error.code),
                                                  a.error.details && (b.details = a.error.details));
                                                let c = {};
                                                (n.length && (c.query = n),
                                                  Object.keys(o).length && (c.body = o),
                                                  f.captureException(
                                                    b,
                                                    (a) => (
                                                      a.addEventProcessor(
                                                        (a) => (
                                                          j.addExceptionMechanism(a, {
                                                            handled: !1,
                                                            type: 'auto.db.supabase.postgres',
                                                          }),
                                                          a
                                                        )
                                                      ),
                                                      a.setContext('supabase', c),
                                                      a
                                                    )
                                                  ));
                                              }
                                              let b = {
                                                  type: 'supabase',
                                                  category: `db.${e}`,
                                                  message: p,
                                                },
                                                c = {};
                                              return (
                                                n.length && (c.query = n),
                                                Object.keys(o).length && (c.body = o),
                                                Object.keys(c).length && (b.data = c),
                                                d.addBreadcrumb(b),
                                                a
                                              );
                                            },
                                            (a) => {
                                              throw (g && (l.setHttpStatus(g, 500), g.end()), a);
                                            }
                                          )
                                          .then(...c)
                                      )
                                    );
                                  },
                                })),
                                r(o.prototype.then)),
                              n
                            );
                          },
                        })),
                        r(a.prototype[b]));
                  })(g.constructor),
                  g
                );
              },
            })),
            r(a.prototype.from));
        })(a.constructor === Function ? a : a.constructor),
          (function (a) {
            let b = a.auth;
            if (!(!b || s(a.auth))) {
              for (let c of n) {
                let d = b[c];
                d && 'function' == typeof a.auth[c] && (a.auth[c] = v(d));
              }
              for (let c of o) {
                let d = b.admin[c];
                d && 'function' == typeof a.auth.admin[c] && (a.auth.admin[c] = v(d, !0));
              }
              r(a.auth);
            }
          })(a));
      },
      x = g.defineIntegration((a) => {
        let b;
        return (
          (b = a.supabaseClient),
          {
            setupOnce() {
              w(b);
            },
            name: 'Supabase',
          }
        );
      });
    ((c.DB_OPERATIONS_TO_INSTRUMENT = q),
      (c.FILTER_MAPPINGS = p),
      (c.extractOperation = t),
      (c.instrumentSupabaseClient = w),
      (c.supabaseIntegration = x),
      (c.translateFiltersIntoMethods = u));
  },
  41802,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(98699),
      e = a.r(59242),
      f = a.r(27966);
    function g(a) {
      return {
        ...a,
        path: 'path' in a && Array.isArray(a.path) ? a.path.join('.') : void 0,
        keys: 'keys' in a ? JSON.stringify(a.keys) : void 0,
        unionErrors: 'unionErrors' in a ? JSON.stringify(a.unionErrors) : void 0,
      };
    }
    function h(a) {
      return a.map((a) => ('number' == typeof a ? '<array>' : a)).join('.');
    }
    function i(a) {
      let b = new Set();
      for (let c of a.issues) {
        let a = h(c.path);
        a.length > 0 && b.add(a);
      }
      let c = Array.from(b);
      if (0 === c.length) {
        let b = 'variable';
        if (a.issues.length > 0) {
          let c = a.issues[0];
          void 0 !== c && 'expected' in c && 'string' == typeof c.expected && (b = c.expected);
        }
        return `Failed to validate ${b}`;
      }
      return `Failed to validate keys: ${f.truncate(c.join(', '), 100)}`;
    }
    function j(a, b = !1, c, d) {
      var f;
      if (
        !c.exception?.values ||
        !d.originalException ||
        ((f = d.originalException),
        !(e.isError(f) && 'ZodError' === f.name && Array.isArray(f.issues))) ||
        0 === d.originalException.issues.length
      )
        return c;
      try {
        let e = (b ? d.originalException.issues : d.originalException.issues.slice(0, a)).map(g);
        return (
          b &&
            (Array.isArray(d.attachments) || (d.attachments = []),
            d.attachments.push({
              filename: 'zod_issues.json',
              data: JSON.stringify({ issues: e }),
            })),
          {
            ...c,
            exception: {
              ...c.exception,
              values: [
                { ...c.exception.values[0], value: i(d.originalException) },
                ...c.exception.values.slice(1),
              ],
            },
            extra: { ...c.extra, 'zoderror.issues': e.slice(0, a) },
          }
        );
      } catch (a) {
        return {
          ...c,
          extra: {
            ...c.extra,
            'zoderrors sentry integration parse error': {
              message:
                'an exception was thrown while processing ZodError within applyZodErrorsToEvent()',
              error:
                a instanceof Error
                  ? `${a.name}: ${a.message}
${a.stack}`
                  : 'unknown',
            },
          },
        };
      }
    }
    let k = d.defineIntegration((a = {}) => {
      let b = a.limit ?? 10;
      return { name: 'ZodErrors', processEvent: (c, d) => j(b, a.saveZodIssuesAsAttachment, c, d) };
    });
    ((c.applyZodErrorsToEvent = j),
      (c.flattenIssue = g),
      (c.flattenIssuePath = h),
      (c.formatIssueMessage = i),
      (c.zodErrorsIntegration = k));
  },
  70694,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(98699),
      e = a.r(45685),
      f = a.r(50616),
      g = a.r(1805),
      h = d.defineIntegration((a) => ({
        name: 'ThirdPartyErrorsFilter',
        setup(a) {
          (a.on('beforeEnvelope', (a) => {
            f.forEachEnvelopeItem(a, (a, b) => {
              if ('event' === b) {
                let b = Array.isArray(a) ? a[1] : void 0;
                b && (e.stripMetadataFromStackFrames(b), (a[1] = b));
              }
            });
          }),
            a.on('applyFrameMetadata', (b) => {
              if (b.type) return;
              let c = a.getOptions().stackParser;
              e.addMetadataToStackFrames(c, b);
            }));
        },
        processEvent(b) {
          let c = (function (a) {
            let b = g.getFramesFromEvent(a);
            if (b)
              return b
                .filter((a) => !!a.filename)
                .map((a) =>
                  a.module_metadata
                    ? Object.keys(a.module_metadata)
                        .filter((a) => a.startsWith(i))
                        .map((a) => a.slice(i.length))
                    : []
                );
          })(b);
          if (
            c &&
            c[
              'drop-error-if-contains-third-party-frames' === a.behaviour ||
              'apply-tag-if-contains-third-party-frames' === a.behaviour
                ? 'some'
                : 'every'
            ]((b) => !b.some((b) => a.filterKeys.includes(b)))
          ) {
            if (
              'drop-error-if-contains-third-party-frames' === a.behaviour ||
              'drop-error-if-exclusively-contains-third-party-frames' === a.behaviour
            )
              return null;
            b.tags = { ...b.tags, third_party_code: !0 };
          }
          return b;
        },
      })),
      i = '_sentryBundlerPluginAppKey:';
    c.thirdPartyErrorFilterIntegration = h;
  },
  18323,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(95670),
      e = a.r(57697),
      f = a.r(69232),
      g = a.r(98699),
      h = a.r(43679),
      i = a.r(86453),
      j = a.r(27966),
      k = a.r(6325),
      l = g.defineIntegration((a = {}) => {
        let b = new Set(a.levels || h.CONSOLE_LEVELS);
        return {
          name: 'Console',
          setup(a) {
            f.addConsoleInstrumentationHandler(({ args: c, level: d }) => {
              e.getClient() === a && b.has(d) && m(d, c);
            });
          },
        };
      });
    function m(a, b) {
      let c = {
        category: 'console',
        data: { arguments: b, logger: 'console' },
        level: i.severityLevelFromString(a),
        message: n(b),
      };
      if ('assert' === a)
        if (!1 !== b[0]) return;
        else {
          let a = b.slice(1);
          ((c.message = a.length > 0 ? `Assertion failed: ${n(a)}` : 'Assertion failed'),
            (c.data.arguments = a));
        }
      d.addBreadcrumb(c, { input: b, level: a });
    }
    function n(a) {
      return 'util' in k.GLOBAL_OBJ && 'function' == typeof k.GLOBAL_OBJ.util.format
        ? k.GLOBAL_OBJ.util.format(...a)
        : j.safeJoin(a, ' ');
    }
    ((c.addConsoleBreadcrumb = m), (c.consoleIntegration = l));
  },
  43693,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(25350),
      f = a.r(43679),
      g = a.r(45889),
      h = 'flag.evaluation.';
    function i(a, b, c, d) {
      if ('boolean' != typeof c) return;
      if (a.length > d) {
        e.DEBUG_BUILD &&
          f.debug.error(
            `[Feature Flags] insertToFlagBuffer called on a buffer larger than maxSize=${d}`
          );
        return;
      }
      let g = a.findIndex((a) => a.flag === b);
      (-1 !== g && a.splice(g, 1), a.length === d && a.shift(), a.push({ flag: b, result: c }));
    }
    ((c._INTERNAL_FLAG_BUFFER_SIZE = 100),
      (c._INTERNAL_MAX_FLAGS_PER_SPAN = 10),
      (c._INTERNAL_addFeatureFlagToActiveSpan = function (a, b, c = 10) {
        if ('boolean' != typeof b) return;
        let d = g.getActiveSpan();
        if (!d) return;
        let e = g.spanToJSON(d).data;
        if (`${h}${a}` in e) return void d.setAttribute(`${h}${a}`, b);
        Object.keys(e).filter((a) => a.startsWith(h)).length < c && d.setAttribute(`${h}${a}`, b);
      }),
      (c._INTERNAL_copyFlagsFromScopeToEvent = function (a) {
        let b = d.getCurrentScope().getScopeData().contexts.flags,
          c = b ? b.values : [];
        return (
          c.length &&
            (void 0 === a.contexts && (a.contexts = {}), (a.contexts.flags = { values: [...c] })),
          a
        );
      }),
      (c._INTERNAL_insertFlagToScope = function (a, b, c = 100) {
        let e = d.getCurrentScope().getScopeData().contexts;
        (e.flags || (e.flags = { values: [] }), i(e.flags.values, a, b, c));
      }),
      (c._INTERNAL_insertToFlagBuffer = i));
  },
  1704,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(98699),
      e = a.r(43693);
    c.featureFlagsIntegration = d.defineIntegration(() => ({
      name: 'FeatureFlags',
      processEvent: (a, b, c) => e._INTERNAL_copyFlagsFromScopeToEvent(a),
      addFeatureFlag(a, b) {
        (e._INTERNAL_insertFlagToScope(a, b), e._INTERNAL_addFeatureFlagToActiveSpan(a, b));
      },
    }));
  },
  5819,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(25350),
      f = a.r(43679);
    function g(a) {
      return (
        !!a &&
        void 0 !== a._profiler &&
        'function' == typeof a._profiler.start &&
        'function' == typeof a._profiler.stop
      );
    }
    c.profiler = {
      startProfiler: function () {
        let a = d.getClient();
        if (!a) {
          e.DEBUG_BUILD && f.debug.warn('No Sentry client available, profiling is not started');
          return;
        }
        let b = a.getIntegrationByName('ProfilingIntegration');
        if (!b) {
          e.DEBUG_BUILD && f.debug.warn('ProfilingIntegration is not available');
          return;
        }
        if (!g(b)) {
          e.DEBUG_BUILD && f.debug.warn('Profiler is not available on profiling integration.');
          return;
        }
        b._profiler.start();
      },
      stopProfiler: function () {
        let a = d.getClient();
        if (!a) {
          e.DEBUG_BUILD && f.debug.warn('No Sentry client available, profiling is not started');
          return;
        }
        let b = a.getIntegrationByName('ProfilingIntegration');
        if (!b) {
          e.DEBUG_BUILD && f.debug.warn('ProfilingIntegration is not available');
          return;
        }
        if (!g(b)) {
          e.DEBUG_BUILD && f.debug.warn('Profiler is not available on profiling integration.');
          return;
        }
        b._profiler.stop();
      },
    };
  },
  81548,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(21016),
      f = a.r(45889),
      g = a.r(47534),
      h = a.r(59242),
      i = a.r(79168),
      j = a.r(16073),
      k = a.r(40367),
      l = a.r(45481),
      m = a.r(85453),
      n = a.r(86770);
    function o(a, b, c, d) {
      var e;
      let f = m.getTraceData({ span: c, propagateTraceparent: d }),
        g = f['sentry-trace'],
        i = f.baggage,
        j = f.traceparent;
      if (!g) return;
      let k = b.headers || (h.isRequest(a) ? a.headers : void 0);
      if (!k) return { ...f };
      if (((e = k), 'undefined' != typeof Headers && h.isInstanceOf(e, Headers))) {
        let a = new Headers(k);
        if (
          (a.get('sentry-trace') || a.set('sentry-trace', g),
          d && j && !a.get('traceparent') && a.set('traceparent', j),
          i)
        ) {
          let b = a.get('baggage');
          b ? p(b) || a.set('baggage', `${b},${i}`) : a.set('baggage', i);
        }
        return a;
      }
      if (Array.isArray(k)) {
        let a = [...k];
        (k.find((a) => 'sentry-trace' === a[0]) || a.push(['sentry-trace', g]),
          d && j && !k.find((a) => 'traceparent' === a[0]) && a.push(['traceparent', j]));
        let b = k.find((a) => 'baggage' === a[0] && p(a[1]));
        return (i && !b && a.push(['baggage', i]), a);
      }
      {
        let a = 'sentry-trace' in k ? k['sentry-trace'] : void 0,
          b = 'traceparent' in k ? k.traceparent : void 0,
          c = 'baggage' in k ? k.baggage : void 0,
          e = c ? (Array.isArray(c) ? [...c] : [c]) : [],
          f = c && (Array.isArray(c) ? c.find((a) => p(a)) : p(c));
        i && !f && e.push(i);
        let h = { ...k, 'sentry-trace': a ?? g, baggage: e.length > 0 ? e.join(',') : void 0 };
        return (d && j && !b && (h.traceparent = j), h);
      }
    }
    function p(a) {
      return a.split(',').some((a) => a.trim().startsWith(j.SENTRY_BAGGAGE_KEY_PREFIX));
    }
    ((c._addTracingHeadersToFetchRequest = o),
      (c.instrumentFetchRequest = function (a, b, c, h, j) {
        if (!a.fetchData) return;
        let { method: m, url: p } = a.fetchData,
          q = i.hasSpansEnabled() && b(p);
        if (a.endTimestamp && q) {
          let b = a.fetchData.__span;
          if (!b) return;
          let c = h[b];
          c &&
            ((function (a, b) {
              if (b.response) {
                g.setHttpStatus(a, b.response.status);
                let c = b.response?.headers?.get('content-length');
                if (c) {
                  let b = parseInt(c);
                  b > 0 && a.setAttribute('http.response_content_length', b);
                }
              } else
                b.error && a.setStatus({ code: g.SPAN_STATUS_ERROR, message: 'internal_error' });
              a.end();
            })(c, a),
            delete h[b]);
          return;
        }
        let { spanOrigin: r = 'auto.http.browser', propagateTraceparent: s = !1 } =
            'object' == typeof j ? j : { spanOrigin: j },
          t = !!f.getActiveSpan(),
          u =
            q && t
              ? l.startInactiveSpan(
                  (function (a, b, c) {
                    let d = n.parseStringToURLObject(a);
                    return {
                      name: d ? `${b} ${n.getSanitizedUrlStringFromUrlObject(d)}` : b,
                      attributes: (function (a, b, c, d) {
                        let f = {
                          url: a,
                          type: 'fetch',
                          'http.method': c,
                          [e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: d,
                          [e.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',
                        };
                        return (
                          b &&
                            (n.isURLObjectRelative(b) ||
                              ((f['http.url'] = b.href), (f['server.address'] = b.host)),
                            b.search && (f['http.query'] = b.search),
                            b.hash && (f['http.fragment'] = b.hash)),
                          f
                        );
                      })(a, d, b, c),
                    };
                  })(p, m, r)
                )
              : new k.SentryNonRecordingSpan();
        if (
          ((a.fetchData.__span = u.spanContext().spanId),
          (h[u.spanContext().spanId] = u),
          c(a.fetchData.url))
        ) {
          let b = a.args[0],
            c = a.args[1] || {},
            d = o(b, c, i.hasSpansEnabled() && t ? u : void 0, s);
          d && ((a.args[1] = c), (c.headers = d));
        }
        let v = d.getClient();
        if (v) {
          let b = {
            input: a.args,
            response: a.response,
            startTimestamp: a.startTimestamp,
            endTimestamp: a.endTimestamp,
          };
          v.emit('beforeOutgoingRequestSpan', u, b);
        }
        return u;
      }));
  },
  16868,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(73072),
      f = a.r(21016),
      g = a.r(78707),
      h = a.r(21731),
      i = a.r(45481),
      j = { mechanism: { handled: !1, data: { function: 'trpcMiddleware' } } };
    c.trpcMiddleware = function (a = {}) {
      return async function (b) {
        let { path: c, type: k, next: l, rawInput: m, getRawInput: n } = b,
          o = d.getClient(),
          p = o?.getOptions(),
          q = { procedure_path: c, procedure_type: k };
        if (
          (g.addNonEnumerableProperty(
            q,
            '__sentry_override_normalization_depth__',
            1 + (p?.normalizeDepth ?? 5)
          ),
          (void 0 !== a.attachRpcInput ? a.attachRpcInput : p?.sendDefaultPii) &&
            (void 0 !== m && (q.input = h.normalize(m)), void 0 !== n && 'function' == typeof n))
        )
          try {
            let a = await n();
            q.input = h.normalize(a);
          } catch {}
        return d.withIsolationScope(
          (b) => (
            b.setContext('trpc', q),
            i.startSpanManual(
              {
                name: `trpc/${c}`,
                op: 'rpc.server',
                attributes: {
                  [f.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',
                  [f.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc',
                },
                forceTransaction: !!a.forceTransaction,
              },
              async (a) => {
                try {
                  let b = await l();
                  return (
                    'object' == typeof b &&
                      null !== b &&
                      'ok' in b &&
                      !b.ok &&
                      'error' in b &&
                      e.captureException(b.error, j),
                    a.end(),
                    b
                  );
                } catch (b) {
                  throw (e.captureException(b, j), a.end(), b);
                }
              }
            )
          )
        );
      };
    };
  },
  81844,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(73072),
      f = a.r(45889),
      g = a.r(47534);
    c.captureError = function (a, b, c) {
      try {
        if (!d.getClient()) return;
        let h = f.getActiveSpan();
        (h?.isRecording() && h.setStatus({ code: g.SPAN_STATUS_ERROR, message: 'internal_error' }),
          e.captureException(a, {
            mechanism: {
              type: 'mcp_server',
              handled: !1,
              data: { error_type: b || 'handler_execution', ...c },
            },
          }));
      } catch {}
    };
  },
  9080,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = a.r(78707),
      g = a.r(81844);
    function h(a, b) {
      f.fill(
        a,
        b,
        (a) =>
          function (c, ...f) {
            var g, h, j;
            let k = f[f.length - 1];
            if ('function' != typeof k) return a.call(this, c, ...f);
            let l =
              ((g = k),
              (h = b),
              (j = c),
              function (...a) {
                try {
                  return i.call(this, g, h, j, a);
                } catch (b) {
                  return (
                    d.DEBUG_BUILD && e.debug.warn('MCP handler wrapping failed:', b),
                    g.apply(this, a)
                  );
                }
              });
            return a.call(this, c, ...f.slice(0, -1), l);
          }
      );
    }
    function i(a, b, c, d) {
      try {
        let e = a.apply(this, d);
        if (e && 'object' == typeof e && 'function' == typeof e.then)
          return Promise.resolve(e).catch((a) => {
            throw (j(a, b, c), a);
          });
        return e;
      } catch (a) {
        throw (j(a, b, c), a);
      }
    }
    function j(a, b, c) {
      try {
        let d = {};
        'tool' === b
          ? ((d.tool_name = c),
            'ProtocolValidationError' === a.name ||
            a.message.includes('validation') ||
            a.message.includes('protocol')
              ? g.captureError(a, 'validation', d)
              : 'ServerTimeoutError' === a.name ||
                  a.message.includes('timed out') ||
                  a.message.includes('timeout')
                ? g.captureError(a, 'timeout', d)
                : g.captureError(a, 'tool_execution', d))
          : 'resource' === b
            ? ((d.resource_uri = c), g.captureError(a, 'resource_execution', d))
            : 'prompt' === b && ((d.prompt_name = c), g.captureError(a, 'prompt_execution', d));
      } catch (a) {}
    }
    function k(a) {
      h(a, 'tool');
    }
    function l(a) {
      h(a, 'resource');
    }
    function m(a) {
      h(a, 'prompt');
    }
    ((c.wrapAllMCPHandlers = function (a) {
      (k(a), l(a), m(a));
    }),
      (c.wrapPromptHandlers = m),
      (c.wrapResourceHandlers = l),
      (c.wrapToolHandlers = k));
  },
  27967,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.CLIENT_ADDRESS_ATTRIBUTE = 'client.address'),
      (c.CLIENT_PORT_ATTRIBUTE = 'client.port'),
      (c.MCP_FUNCTION_ORIGIN_VALUE = 'auto.function.mcp_server'),
      (c.MCP_LOGGING_DATA_TYPE_ATTRIBUTE = 'mcp.logging.data_type'),
      (c.MCP_LOGGING_LEVEL_ATTRIBUTE = 'mcp.logging.level'),
      (c.MCP_LOGGING_LOGGER_ATTRIBUTE = 'mcp.logging.logger'),
      (c.MCP_LOGGING_MESSAGE_ATTRIBUTE = 'mcp.logging.message'),
      (c.MCP_METHOD_NAME_ATTRIBUTE = 'mcp.method.name'),
      (c.MCP_NOTIFICATION_CLIENT_TO_SERVER_OP_VALUE = 'mcp.notification.client_to_server'),
      (c.MCP_NOTIFICATION_ORIGIN_VALUE = 'auto.mcp.notification'),
      (c.MCP_NOTIFICATION_SERVER_TO_CLIENT_OP_VALUE = 'mcp.notification.server_to_client'),
      (c.MCP_PROMPT_NAME_ATTRIBUTE = 'mcp.prompt.name'),
      (c.MCP_PROMPT_RESULT_DESCRIPTION_ATTRIBUTE = 'mcp.prompt.result.description'),
      (c.MCP_PROMPT_RESULT_MESSAGE_CONTENT_ATTRIBUTE = 'mcp.prompt.result.message_content'),
      (c.MCP_PROMPT_RESULT_MESSAGE_COUNT_ATTRIBUTE = 'mcp.prompt.result.message_count'),
      (c.MCP_PROMPT_RESULT_PREFIX = 'mcp.prompt.result'),
      (c.MCP_PROTOCOL_VERSION_ATTRIBUTE = 'mcp.protocol.version'),
      (c.MCP_REQUEST_ARGUMENT = 'mcp.request.argument'),
      (c.MCP_REQUEST_ID_ATTRIBUTE = 'mcp.request.id'),
      (c.MCP_RESOURCE_URI_ATTRIBUTE = 'mcp.resource.uri'),
      (c.MCP_ROUTE_SOURCE_VALUE = 'route'),
      (c.MCP_SERVER_NAME_ATTRIBUTE = 'mcp.server.name'),
      (c.MCP_SERVER_OP_VALUE = 'mcp.server'),
      (c.MCP_SERVER_TITLE_ATTRIBUTE = 'mcp.server.title'),
      (c.MCP_SERVER_VERSION_ATTRIBUTE = 'mcp.server.version'),
      (c.MCP_SESSION_ID_ATTRIBUTE = 'mcp.session.id'),
      (c.MCP_TOOL_NAME_ATTRIBUTE = 'mcp.tool.name'),
      (c.MCP_TOOL_RESULT_CONTENT_ATTRIBUTE = 'mcp.tool.result.content'),
      (c.MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE = 'mcp.tool.result.content_count'),
      (c.MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE = 'mcp.tool.result.is_error'),
      (c.MCP_TOOL_RESULT_PREFIX = 'mcp.tool.result'),
      (c.MCP_TRANSPORT_ATTRIBUTE = 'mcp.transport'),
      (c.NETWORK_PROTOCOL_VERSION_ATTRIBUTE = 'network.protocol.version'),
      (c.NETWORK_TRANSPORT_ATTRIBUTE = 'network.transport'));
  },
  37825,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(27967),
      e = new Set([
        d.CLIENT_ADDRESS_ATTRIBUTE,
        d.CLIENT_PORT_ATTRIBUTE,
        d.MCP_LOGGING_MESSAGE_ATTRIBUTE,
        d.MCP_PROMPT_RESULT_DESCRIPTION_ATTRIBUTE,
        d.MCP_PROMPT_RESULT_MESSAGE_CONTENT_ATTRIBUTE,
        d.MCP_RESOURCE_URI_ATTRIBUTE,
        d.MCP_TOOL_RESULT_CONTENT_ATTRIBUTE,
      ]);
    c.filterMcpPiiFromSpanData = function (a, b) {
      return b
        ? a
        : Object.entries(a).reduce(
            (a, [b, c]) => (
              e.has(b) ||
                b.startsWith(`${d.MCP_REQUEST_ARGUMENT}.`) ||
                ((b.startsWith(`${d.MCP_TOOL_RESULT_PREFIX}.`) ||
                  b.startsWith(`${d.MCP_PROMPT_RESULT_PREFIX}.`)) &&
                  !b.endsWith('_count') &&
                  !b.endsWith('_error') &&
                  !b.endsWith('.is_error')) ||
                (a[b] = c),
              a
            ),
            {}
          );
    };
  },
  98250,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679);
    ((c.isJsonRpcNotification = function (a) {
      return (
        'object' == typeof a &&
        null !== a &&
        'jsonrpc' in a &&
        '2.0' === a.jsonrpc &&
        'method' in a &&
        !('id' in a)
      );
    }),
      (c.isJsonRpcRequest = function (a) {
        return (
          'object' == typeof a &&
          null !== a &&
          'jsonrpc' in a &&
          '2.0' === a.jsonrpc &&
          'method' in a &&
          'id' in a
        );
      }),
      (c.isJsonRpcResponse = function (a) {
        return (
          'object' == typeof a &&
          null !== a &&
          'jsonrpc' in a &&
          '2.0' === a.jsonrpc &&
          'id' in a &&
          ('result' in a || 'error' in a)
        );
      }),
      (c.isValidContentItem = function (a) {
        return null != a && 'object' == typeof a;
      }),
      (c.validateMcpServerInstance = function (a) {
        return (
          ('object' == typeof a &&
            null !== a &&
            'resource' in a &&
            'tool' in a &&
            'prompt' in a &&
            'connect' in a) ||
          (d.DEBUG_BUILD && e.debug.warn('Did not patch MCP server. Interface is incompatible.'),
          !1)
        );
      }));
  },
  45499,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(27967),
      e = a.r(98250);
    ((c.extractPromptResultAttributes = function (a) {
      let b = {};
      if (!e.isValidContentItem(a)) return b;
      if (
        ('string' == typeof a.description &&
          (b[d.MCP_PROMPT_RESULT_DESCRIPTION_ATTRIBUTE] = a.description),
        Array.isArray(a.messages))
      ) {
        b[d.MCP_PROMPT_RESULT_MESSAGE_COUNT_ATTRIBUTE] = a.messages.length;
        let g = a.messages;
        for (let [a, d] of g.entries()) {
          var c, f;
          if (!e.isValidContentItem(d)) continue;
          let h = 1 === g.length ? 'mcp.prompt.result' : `mcp.prompt.result.${a}`;
          if (
            ((c = 'role'),
            'string' == typeof (f = d.role) &&
              (b[1 === g.length ? `${h}.message_${c}` : `${h}.${c}`] = f),
            e.isValidContentItem(d.content))
          ) {
            let a = d.content;
            'string' == typeof a.text &&
              (b[1 === g.length ? `${h}.message_content` : `${h}.content`] = a.text);
          }
        }
      }
      return b;
    }),
      (c.extractToolResultAttributes = function (a) {
        if (!e.isValidContentItem(a)) return {};
        let b = Array.isArray(a.content)
          ? (function (a) {
              let b = { [d.MCP_TOOL_RESULT_CONTENT_COUNT_ATTRIBUTE]: a.length };
              for (let [c, d] of a.entries()) {
                if (!e.isValidContentItem(d)) continue;
                let f = 1 === a.length ? 'mcp.tool.result' : `mcp.tool.result.${c}`,
                  g = (a, c) => {
                    'string' == typeof c && (b[`${f}.${a}`] = c);
                  };
                (g('content_type', d.type),
                  g('mime_type', d.mimeType),
                  g('uri', d.uri),
                  g('name', d.name),
                  'string' == typeof d.text && (b[`${f}.content`] = d.text),
                  'string' == typeof d.data && (b[`${f}.data_size`] = d.data.length));
                let h = d.resource;
                e.isValidContentItem(h) &&
                  (g('resource_uri', h.uri), g('resource_mime_type', h.mimeType));
              }
              return b;
            })(a.content)
          : {};
        return (
          'boolean' == typeof a.isError && (b[d.MCP_TOOL_RESULT_IS_ERROR_ATTRIBUTE] = a.isError),
          b
        );
      }));
  },
  98588,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(47534),
      f = a.r(37825),
      g = a.r(45499),
      h = new WeakMap();
    function i(a) {
      let b = h.get(a);
      return (b || ((b = new Map()), h.set(a, b)), b);
    }
    ((c.cleanupPendingSpansForTransport = function (a) {
      let b = h.get(a);
      if (b) {
        for (let [, a] of b)
          (a.span.setStatus({ code: e.SPAN_STATUS_ERROR, message: 'cancelled' }), a.span.end());
        b.clear();
      }
    }),
      (c.completeSpanWithResults = function (a, b, c) {
        let e = i(a),
          h = e.get(b);
        if (h) {
          let { span: a, method: i } = h;
          if ('tools/call' === i) {
            let b = g.extractToolResultAttributes(c),
              e = d.getClient(),
              h = !!e?.getOptions().sendDefaultPii,
              i = f.filterMcpPiiFromSpanData(b, h);
            a.setAttributes(i);
          } else if ('prompts/get' === i) {
            let b = g.extractPromptResultAttributes(c),
              e = d.getClient(),
              h = !!e?.getOptions().sendDefaultPii,
              i = f.filterMcpPiiFromSpanData(b, h);
            a.setAttributes(i);
          }
          (a.end(), e.delete(b));
        }
      }),
      (c.storeSpanForRequest = function (a, b, c, d) {
        i(a).set(b, { span: c, method: d, startTime: Date.now() });
      }));
  },
  31529,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = new WeakMap();
    ((c.cleanupSessionDataForTransport = function (a) {
      d.delete(a);
    }),
      (c.getClientInfoForTransport = function (a) {
        return d.get(a)?.clientInfo;
      }),
      (c.getProtocolVersionForTransport = function (a) {
        return d.get(a)?.protocolVersion;
      }),
      (c.getSessionDataForTransport = function (a) {
        return d.get(a);
      }),
      (c.storeSessionDataForTransport = function (a, b) {
        a.sessionId && d.set(a, b);
      }),
      (c.updateSessionDataForTransport = function (a, b) {
        if (a.sessionId) {
          let c = d.get(a) || {};
          d.set(a, { ...c, ...b });
        }
      }));
  },
  76506,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(27967),
      e = a.r(31529),
      f = a.r(98250);
    function g(a) {
      let b = {};
      return (
        f.isValidContentItem(a) &&
          ('string' == typeof a.name && (b.name = a.name),
          'string' == typeof a.title && (b.title = a.title),
          'string' == typeof a.version && (b.version = a.version)),
        b
      );
    }
    function h(a) {
      let b = e.getClientInfoForTransport(a),
        c = {};
      return (
        b?.name && (c['mcp.client.name'] = b.name),
        b?.title && (c['mcp.client.title'] = b.title),
        b?.version && (c['mcp.client.version'] = b.version),
        c
      );
    }
    function i(a) {
      let b = e.getSessionDataForTransport(a)?.serverInfo,
        c = {};
      return (
        b?.name && (c[d.MCP_SERVER_NAME_ATTRIBUTE] = b.name),
        b?.title && (c[d.MCP_SERVER_TITLE_ATTRIBUTE] = b.title),
        b?.version && (c[d.MCP_SERVER_VERSION_ATTRIBUTE] = b.version),
        c
      );
    }
    function j(a) {
      return {
        address:
          a?.requestInfo?.remoteAddress ||
          a?.clientAddress ||
          a?.request?.ip ||
          a?.request?.connection?.remoteAddress,
        port: a?.requestInfo?.remotePort || a?.clientPort || a?.request?.connection?.remotePort,
      };
    }
    function k(a) {
      if (!a?.constructor) return { mcpTransport: 'unknown', networkTransport: 'unknown' };
      let b = 'string' == typeof a.constructor?.name ? a.constructor.name : 'unknown',
        c = 'unknown',
        d = b.toLowerCase();
      return (
        d.includes('stdio')
          ? (c = 'pipe')
          : (d.includes('http') || d.includes('sse')) && (c = 'tcp'),
        { mcpTransport: b, networkTransport: c }
      );
    }
    ((c.buildTransportAttributes = function (a, b) {
      let c = a && 'sessionId' in a ? a.sessionId : void 0,
        f = b ? j(b) : {},
        { mcpTransport: g, networkTransport: l } = k(a),
        m = h(a),
        n = i(a),
        o = e.getProtocolVersionForTransport(a);
      return {
        ...(c && { [d.MCP_SESSION_ID_ATTRIBUTE]: c }),
        ...(f.address && { [d.CLIENT_ADDRESS_ATTRIBUTE]: f.address }),
        ...(f.port && { [d.CLIENT_PORT_ATTRIBUTE]: f.port }),
        [d.MCP_TRANSPORT_ATTRIBUTE]: g,
        [d.NETWORK_TRANSPORT_ATTRIBUTE]: l,
        [d.NETWORK_PROTOCOL_VERSION_ATTRIBUTE]: '2.0',
        ...(o && { [d.MCP_PROTOCOL_VERSION_ATTRIBUTE]: o }),
        ...m,
        ...n,
      };
    }),
      (c.extractClientInfo = j),
      (c.extractSessionDataFromInitializeRequest = function (a) {
        let b = {};
        return (
          f.isValidContentItem(a.params) &&
            ('string' == typeof a.params.protocolVersion &&
              (b.protocolVersion = a.params.protocolVersion),
            a.params.clientInfo && (b.clientInfo = g(a.params.clientInfo))),
          b
        );
      }),
      (c.extractSessionDataFromInitializeResponse = function (a) {
        let b = {};
        return (
          f.isValidContentItem(a) &&
            ('string' == typeof a.protocolVersion && (b.protocolVersion = a.protocolVersion),
            a.serverInfo && (b.serverInfo = g(a.serverInfo))),
          b
        );
      }),
      (c.getClientAttributes = h),
      (c.getServerAttributes = i),
      (c.getTransportTypes = k));
  },
  55822,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(27967),
      e = {
        'tools/call': {
          targetField: 'name',
          targetAttribute: d.MCP_TOOL_NAME_ATTRIBUTE,
          captureArguments: !0,
          argumentsField: 'arguments',
        },
        'resources/read': {
          targetField: 'uri',
          targetAttribute: d.MCP_RESOURCE_URI_ATTRIBUTE,
          captureUri: !0,
        },
        'resources/subscribe': {
          targetField: 'uri',
          targetAttribute: d.MCP_RESOURCE_URI_ATTRIBUTE,
        },
        'resources/unsubscribe': {
          targetField: 'uri',
          targetAttribute: d.MCP_RESOURCE_URI_ATTRIBUTE,
        },
        'prompts/get': {
          targetField: 'name',
          targetAttribute: d.MCP_PROMPT_NAME_ATTRIBUTE,
          captureName: !0,
          captureArguments: !0,
          argumentsField: 'arguments',
        },
      };
    ((c.extractTargetInfo = function (a, b) {
      let c = e[a];
      if (!c) return { attributes: {} };
      let d = c.targetField && 'string' == typeof b?.[c.targetField] ? b[c.targetField] : void 0;
      return { target: d, attributes: d && c.targetAttribute ? { [c.targetAttribute]: d } : {} };
    }),
      (c.getRequestArguments = function (a, b) {
        let c = {},
          f = e[a];
        if (!f) return c;
        if (f.captureArguments && f.argumentsField && b?.[f.argumentsField]) {
          let a = b[f.argumentsField];
          if ('object' == typeof a && null !== a)
            for (let [b, e] of Object.entries(a))
              c[`${d.MCP_REQUEST_ARGUMENT}.${b.toLowerCase()}`] = JSON.stringify(e);
        }
        return (
          f.captureUri && b?.uri && (c[`${d.MCP_REQUEST_ARGUMENT}.uri`] = JSON.stringify(b.uri)),
          f.captureName &&
            b?.name &&
            (c[`${d.MCP_REQUEST_ARGUMENT}.name`] = JSON.stringify(b.name)),
          c
        );
      }));
  },
  2906,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(86770),
      e = a.r(27967),
      f = a.r(55822);
    function g(a, b) {
      let c = {};
      switch (a) {
        case 'notifications/cancelled':
          (b?.requestId && (c['mcp.cancelled.request_id'] = String(b.requestId)),
            b?.reason && (c['mcp.cancelled.reason'] = String(b.reason)));
          break;
        case 'notifications/message':
          (b?.level && (c[e.MCP_LOGGING_LEVEL_ATTRIBUTE] = String(b.level)),
            b?.logger && (c[e.MCP_LOGGING_LOGGER_ATTRIBUTE] = String(b.logger)),
            b?.data !== void 0 &&
              ((c[e.MCP_LOGGING_DATA_TYPE_ATTRIBUTE] = typeof b.data),
              'string' == typeof b.data
                ? (c[e.MCP_LOGGING_MESSAGE_ATTRIBUTE] = b.data)
                : (c[e.MCP_LOGGING_MESSAGE_ATTRIBUTE] = JSON.stringify(b.data))));
          break;
        case 'notifications/progress':
          (b?.progressToken && (c['mcp.progress.token'] = String(b.progressToken)),
            'number' == typeof b?.progress && (c['mcp.progress.current'] = b.progress),
            'number' == typeof b?.total &&
              ((c['mcp.progress.total'] = b.total),
              'number' == typeof b?.progress &&
                (c['mcp.progress.percentage'] = (b.progress / b.total) * 100)),
            b?.message && (c['mcp.progress.message'] = String(b.message)));
          break;
        case 'notifications/resources/updated':
          if (b?.uri) {
            c[e.MCP_RESOURCE_URI_ATTRIBUTE] = String(b.uri);
            let a = d.parseStringToURLObject(String(b.uri));
            a &&
              !d.isURLObjectRelative(a) &&
              (c['mcp.resource.protocol'] = a.protocol.replace(':', ''));
          }
          break;
        case 'notifications/initialized':
          ((c['mcp.lifecycle.phase'] = 'initialization_complete'), (c['mcp.protocol.ready'] = 1));
      }
      return c;
    }
    ((c.buildTypeSpecificAttributes = function (a, b, c) {
      if ('request' === a) {
        let a = f.extractTargetInfo(b.method, c || {});
        return {
          ...(void 0 !== b.id && { [e.MCP_REQUEST_ID_ATTRIBUTE]: String(b.id) }),
          ...a.attributes,
          ...f.getRequestArguments(b.method, c || {}),
        };
      }
      return g(b.method, c || {});
    }),
      (c.getNotificationAttributes = g));
  },
  69519,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(21016),
      f = a.r(45481),
      g = a.r(2906),
      h = a.r(27967),
      i = a.r(55822),
      j = a.r(37825),
      k = a.r(76506);
    function l(a, b) {
      return b ? `${a} ${b}` : a;
    }
    function m(a) {
      let b, c;
      switch (a) {
        case 'request':
          ((b = h.MCP_SERVER_OP_VALUE), (c = h.MCP_FUNCTION_ORIGIN_VALUE));
          break;
        case 'notification-incoming':
          ((b = h.MCP_NOTIFICATION_CLIENT_TO_SERVER_OP_VALUE),
            (c = h.MCP_NOTIFICATION_ORIGIN_VALUE));
          break;
        case 'notification-outgoing':
          ((b = h.MCP_NOTIFICATION_SERVER_TO_CLIENT_OP_VALUE),
            (c = h.MCP_NOTIFICATION_ORIGIN_VALUE));
      }
      return {
        [e.SEMANTIC_ATTRIBUTE_SENTRY_OP]: b,
        [e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: c,
        [e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: h.MCP_ROUTE_SOURCE_VALUE,
      };
    }
    function n(a) {
      let b,
        { type: c, message: e, transport: n, extra: o, callback: p } = a,
        { method: q } = e,
        r = e.params;
      if ('request' === c) {
        let a = i.extractTargetInfo(q, r || {});
        b = l(q, a.target);
      } else b = q;
      let s = {
          ...k.buildTransportAttributes(n, o),
          [h.MCP_METHOD_NAME_ATTRIBUTE]: q,
          ...g.buildTypeSpecificAttributes(c, e, r),
          ...m(c),
        },
        t = d.getClient(),
        u = !!t?.getOptions().sendDefaultPii,
        v = j.filterMcpPiiFromSpanData(s, u);
      return f.startSpan({ name: b, forceTransaction: !0, attributes: v }, p);
    }
    ((c.buildMcpServerSpanConfig = function (a, b, c) {
      let { method: e } = a,
        f = a.params,
        n = i.extractTargetInfo(e, f || {}),
        o = l(e, n.target),
        p = {
          ...k.buildTransportAttributes(b, c),
          [h.MCP_METHOD_NAME_ATTRIBUTE]: e,
          ...g.buildTypeSpecificAttributes('request', a, f),
          ...m('request'),
        },
        q = d.getClient(),
        r = !!q?.getOptions().sendDefaultPii,
        s = j.filterMcpPiiFromSpanData(p, r);
      return { name: o, op: h.MCP_SERVER_OP_VALUE, forceTransaction: !0, attributes: s };
    }),
      (c.createMcpNotificationSpan = function (a, b, c, d) {
        return n({
          type: 'notification-incoming',
          message: a,
          transport: b,
          extra: c,
          callback: d,
        });
      }),
      (c.createMcpOutgoingNotificationSpan = function (a, b, c) {
        return n({ type: 'notification-outgoing', message: a, transport: b, callback: c });
      }));
  },
  63033,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(78707),
      f = a.r(45481),
      g = a.r(98588),
      h = a.r(81844),
      i = a.r(76506),
      j = a.r(31529),
      k = a.r(69519),
      l = a.r(98250);
    ((c.wrapTransportError = function (a) {
      a.onerror &&
        e.fill(
          a,
          'onerror',
          (a) =>
            function (b) {
              return (
                (function (a) {
                  try {
                    h.captureError(a, 'transport');
                  } catch {}
                })(b),
                a.call(this, b)
              );
            }
        );
    }),
      (c.wrapTransportOnClose = function (a) {
        a.onclose &&
          e.fill(
            a,
            'onclose',
            (a) =>
              function (...b) {
                return (
                  g.cleanupPendingSpansForTransport(this),
                  j.cleanupSessionDataForTransport(this),
                  a.call(this, ...b)
                );
              }
          );
      }),
      (c.wrapTransportOnMessage = function (a) {
        a.onmessage &&
          e.fill(
            a,
            'onmessage',
            (a) =>
              function (b, c) {
                if (l.isJsonRpcRequest(b)) {
                  if ('initialize' === b.method)
                    try {
                      let a = i.extractSessionDataFromInitializeRequest(b);
                      j.storeSessionDataForTransport(this, a);
                    } catch {}
                  let e = d.getIsolationScope().clone();
                  return d.withIsolationScope(e, () => {
                    let d = k.buildMcpServerSpanConfig(b, this, c),
                      e = f.startInactiveSpan(d);
                    return (
                      g.storeSpanForRequest(this, b.id, e, b.method),
                      f.withActiveSpan(e, () => a.call(this, b, c))
                    );
                  });
                }
                return l.isJsonRpcNotification(b)
                  ? k.createMcpNotificationSpan(b, this, c, () => a.call(this, b, c))
                  : a.call(this, b, c);
              }
          );
      }),
      (c.wrapTransportSend = function (a) {
        a.send &&
          e.fill(
            a,
            'send',
            (a) =>
              async function (...b) {
                let [c] = b;
                if (l.isJsonRpcNotification(c))
                  return k.createMcpOutgoingNotificationSpan(c, this, () => a.call(this, ...b));
                if (l.isJsonRpcResponse(c) && null !== c.id && void 0 !== c.id) {
                  if (
                    (c.error &&
                      (function (a) {
                        try {
                          if (
                            a &&
                            'object' == typeof a &&
                            'code' in a &&
                            'message' in a &&
                            (-32603 === a.code || (a.code >= -32099 && a.code <= -32e3))
                          ) {
                            let b = Error(a.message);
                            ((b.name = `JsonRpcError_${a.code}`), h.captureError(b, 'protocol'));
                          }
                        } catch {}
                      })(c.error),
                    l.isValidContentItem(c.result) &&
                      (c.result.protocolVersion || c.result.serverInfo))
                  )
                    try {
                      let a = i.extractSessionDataFromInitializeResponse(c.result);
                      j.updateSessionDataForTransport(this, a);
                    } catch {}
                  g.completeSpanWithResults(this, c.id, c.result);
                }
                return a.call(this, ...b);
              }
          );
      }));
  },
  40421,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78707),
      e = a.r(9080),
      f = a.r(63033),
      g = a.r(98250),
      h = new WeakSet();
    c.wrapMcpServerWithSentry = function (a) {
      return (
        h.has(a) ||
          !g.validateMcpServerInstance(a) ||
          (d.fill(
            a,
            'connect',
            (a) =>
              async function (b, ...c) {
                let d = await a.call(this, b, ...c);
                return (
                  f.wrapTransportOnMessage(b),
                  f.wrapTransportSend(b),
                  f.wrapTransportOnClose(b),
                  f.wrapTransportError(b),
                  d
                );
              }
          ),
          e.wrapAllMCPHandlers(a),
          h.add(a)),
        a
      );
    };
  },
  74735,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697);
    c.captureFeedback = function (a, b = {}, c = d.getCurrentScope()) {
      let { message: e, name: f, email: g, url: h, source: i, associatedEventId: j, tags: k } = a,
        l = {
          contexts: {
            feedback: {
              contact_email: g,
              name: f,
              message: e,
              url: h,
              source: i,
              associated_event_id: j,
            },
          },
          type: 'feedback',
          level: 'info',
          tags: k,
        },
        m = c?.getClient() || d.getClient();
      return (m && m.emit('beforeSendFeedback', l, b), c.captureEvent(l, b));
    };
  },
  8871,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(25350),
      f = a.r(69232),
      g = a.r(98699),
      h = a.r(21016),
      i = a.r(43679),
      j = a.r(59242),
      k = a.r(21731),
      l = a.r(6325),
      m = a.r(88132),
      n = { [h.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.console.logging' };
    function o(a, b, c) {
      var d, e, f;
      return 'util' in l.GLOBAL_OBJ && 'function' == typeof l.GLOBAL_OBJ.util.format
        ? l.GLOBAL_OBJ.util.format(...a)
        : ((d = a),
          (e = b),
          (f = c),
          d
            .map((a) => (j.isPrimitive(a) ? String(a) : JSON.stringify(k.normalize(a, e, f))))
            .join(' '));
    }
    c.consoleLoggingIntegration = g.defineIntegration((a = {}) => {
      let b = a.levels || i.CONSOLE_LEVELS;
      return {
        name: 'ConsoleLogs',
        setup(a) {
          let {
            enableLogs: c,
            normalizeDepth: g = 3,
            normalizeMaxBreadth: h = 1e3,
          } = a.getOptions();
          if (!c) {
            e.DEBUG_BUILD &&
              i.debug.warn('`enableLogs` is not enabled, ConsoleLogs integration disabled');
            return;
          }
          f.addConsoleInstrumentationHandler(({ args: c, level: e }) => {
            if (d.getClient() !== a || !b.includes(e)) return;
            if ('assert' === e) {
              if (!c[0]) {
                let a = c.slice(1),
                  b = a.length > 0 ? `Assertion failed: ${o(a, g, h)}` : 'Assertion failed';
                m._INTERNAL_captureLog({ level: 'error', message: b, attributes: n });
              }
              return;
            }
            let f = 'log' === e;
            m._INTERNAL_captureLog({
              level: f ? 'info' : e,
              message: o(c, g, h),
              severityNumber: f ? 10 : void 0,
              attributes: n,
            });
          });
        },
      };
    });
  },
  15373,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.toolCallSpanMap = new Map()));
  },
  21303,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.ANTHROPIC_AI_RESPONSE_TIMESTAMP_ATTRIBUTE = 'anthropic.response.timestamp'),
      (c.GEN_AI_OPERATION_NAME_ATTRIBUTE = 'gen_ai.operation.name'),
      (c.GEN_AI_PROMPT_ATTRIBUTE = 'gen_ai.prompt'),
      (c.GEN_AI_REQUEST_AVAILABLE_TOOLS_ATTRIBUTE = 'gen_ai.request.available_tools'),
      (c.GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE = 'gen_ai.request.frequency_penalty'),
      (c.GEN_AI_REQUEST_MAX_TOKENS_ATTRIBUTE = 'gen_ai.request.max_tokens'),
      (c.GEN_AI_REQUEST_MESSAGES_ATTRIBUTE = 'gen_ai.request.messages'),
      (c.GEN_AI_REQUEST_MODEL_ATTRIBUTE = 'gen_ai.request.model'),
      (c.GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE = 'gen_ai.request.presence_penalty'),
      (c.GEN_AI_REQUEST_STREAM_ATTRIBUTE = 'gen_ai.request.stream'),
      (c.GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE = 'gen_ai.request.temperature'),
      (c.GEN_AI_REQUEST_TOP_K_ATTRIBUTE = 'gen_ai.request.top_k'),
      (c.GEN_AI_REQUEST_TOP_P_ATTRIBUTE = 'gen_ai.request.top_p'),
      (c.GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE = 'gen_ai.response.finish_reasons'),
      (c.GEN_AI_RESPONSE_ID_ATTRIBUTE = 'gen_ai.response.id'),
      (c.GEN_AI_RESPONSE_MODEL_ATTRIBUTE = 'gen_ai.response.model'),
      (c.GEN_AI_RESPONSE_STREAMING_ATTRIBUTE = 'gen_ai.response.streaming'),
      (c.GEN_AI_RESPONSE_TEXT_ATTRIBUTE = 'gen_ai.response.text'),
      (c.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = 'gen_ai.response.tool_calls'),
      (c.GEN_AI_SYSTEM_ATTRIBUTE = 'gen_ai.system'),
      (c.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.input_tokens'),
      (c.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.output_tokens'),
      (c.GEN_AI_USAGE_TOTAL_TOKENS_ATTRIBUTE = 'gen_ai.usage.total_tokens'),
      (c.OPENAI_OPERATIONS = { CHAT: 'chat', RESPONSES: 'responses' }),
      (c.OPENAI_RESPONSE_ID_ATTRIBUTE = 'openai.response.id'),
      (c.OPENAI_RESPONSE_MODEL_ATTRIBUTE = 'openai.response.model'),
      (c.OPENAI_RESPONSE_TIMESTAMP_ATTRIBUTE = 'openai.response.timestamp'),
      (c.OPENAI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = 'openai.usage.completion_tokens'),
      (c.OPENAI_USAGE_PROMPT_TOKENS_ATTRIBUTE = 'openai.usage.prompt_tokens'));
  },
  12289,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(21303),
      e = a.r(15373);
    ((c._INTERNAL_cleanupToolCallSpan = function (a) {
      e.toolCallSpanMap.delete(a);
    }),
      (c._INTERNAL_getSpanForToolCallId = function (a) {
        return e.toolCallSpanMap.get(a);
      }),
      (c.accumulateTokensForParent = function (a, b) {
        let c = a.parent_span_id;
        if (!c) return;
        let e = a.data[d.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE],
          f = a.data[d.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE];
        if ('number' == typeof e || 'number' == typeof f) {
          let a = b.get(c) || { inputTokens: 0, outputTokens: 0 };
          ('number' == typeof e && (a.inputTokens += e),
            'number' == typeof f && (a.outputTokens += f),
            b.set(c, a));
        }
      }),
      (c.applyAccumulatedTokens = function (a, b) {
        let c = b.get(a.span_id);
        c &&
          a.data &&
          (c.inputTokens > 0 && (a.data[d.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] = c.inputTokens),
          c.outputTokens > 0 && (a.data[d.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] = c.outputTokens),
          (c.inputTokens > 0 || c.outputTokens > 0) &&
            (a.data['gen_ai.usage.total_tokens'] = c.inputTokens + c.outputTokens));
      }));
  },
  3743,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.AI_MODEL_ID_ATTRIBUTE = 'ai.model.id'),
      (c.AI_MODEL_PROVIDER_ATTRIBUTE = 'ai.model.provider'),
      (c.AI_PROMPT_ATTRIBUTE = 'ai.prompt'),
      (c.AI_PROMPT_MESSAGES_ATTRIBUTE = 'ai.prompt.messages'),
      (c.AI_PROMPT_TOOLS_ATTRIBUTE = 'ai.prompt.tools'),
      (c.AI_RESPONSE_OBJECT_ATTRIBUTE = 'ai.response.object'),
      (c.AI_RESPONSE_PROVIDER_METADATA_ATTRIBUTE = 'ai.response.providerMetadata'),
      (c.AI_RESPONSE_TEXT_ATTRIBUTE = 'ai.response.text'),
      (c.AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = 'ai.response.toolCalls'),
      (c.AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE = 'ai.telemetry.functionId'),
      (c.AI_TOOL_CALL_ARGS_ATTRIBUTE = 'ai.toolCall.args'),
      (c.AI_TOOL_CALL_ID_ATTRIBUTE = 'ai.toolCall.id'),
      (c.AI_TOOL_CALL_NAME_ATTRIBUTE = 'ai.toolCall.name'),
      (c.AI_TOOL_CALL_RESULT_ATTRIBUTE = 'ai.toolCall.result'),
      (c.AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = 'ai.usage.completionTokens'),
      (c.AI_USAGE_PROMPT_TOKENS_ATTRIBUTE = 'ai.usage.promptTokens'),
      (c.GEN_AI_RESPONSE_MODEL_ATTRIBUTE = 'gen_ai.response.model'),
      (c.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.input_tokens'),
      (c.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.output_tokens'));
  },
  96510,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(21016),
      e = a.r(45889),
      f = a.r(15373),
      g = a.r(12289),
      h = a.r(3743);
    function i(a, b) {
      a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, b);
    }
    function j(a) {
      let { data: b, description: c } = e.spanToJSON(a);
      if (!c) return;
      if (b[h.AI_TOOL_CALL_NAME_ATTRIBUTE] && b[h.AI_TOOL_CALL_ID_ATTRIBUTE] && 'ai.toolCall' === c)
        return void (function (a, b) {
          (i(a, 'auto.vercelai.otel'),
            a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.execute_tool'),
            l(b, h.AI_TOOL_CALL_NAME_ATTRIBUTE, 'gen_ai.tool.name'),
            l(b, h.AI_TOOL_CALL_ID_ATTRIBUTE, 'gen_ai.tool.call.id'));
          let c = b['gen_ai.tool.call.id'];
          ('string' == typeof c && f.toolCallSpanMap.set(c, a),
            b['gen_ai.tool.type'] || a.setAttribute('gen_ai.tool.type', 'function'));
          let e = b['gen_ai.tool.name'];
          e && a.updateName(`execute_tool ${e}`);
        })(a, b);
      let g = b[h.AI_MODEL_ID_ATTRIBUTE],
        j = b[h.AI_MODEL_PROVIDER_ATTRIBUTE];
      'string' == typeof g &&
        'string' == typeof j &&
        g &&
        j &&
        (function (a, b, c) {
          i(a, 'auto.vercelai.otel');
          let e = b.replace('ai.', '');
          (a.setAttribute('ai.pipeline.name', e), a.updateName(e));
          let f = c[h.AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE];
          if (
            (f &&
              'string' == typeof f &&
              b.split('.').length - 1 == 1 &&
              (a.updateName(`${e} ${f}`), a.setAttribute('gen_ai.function_id', f)),
            c[h.AI_PROMPT_ATTRIBUTE] && a.setAttribute('gen_ai.prompt', c[h.AI_PROMPT_ATTRIBUTE]),
            c[h.AI_MODEL_ID_ATTRIBUTE] &&
              !c[h.GEN_AI_RESPONSE_MODEL_ATTRIBUTE] &&
              a.setAttribute(h.GEN_AI_RESPONSE_MODEL_ATTRIBUTE, c[h.AI_MODEL_ID_ATTRIBUTE]),
            a.setAttribute('ai.streaming', b.includes('stream')),
            'ai.generateText' === b)
          )
            return a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');
          if ('ai.generateText.doGenerate' === b) {
            (a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_text'),
              a.updateName(`generate_text ${c[h.AI_MODEL_ID_ATTRIBUTE]}`));
            return;
          }
          if ('ai.streamText' === b)
            return a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');
          if ('ai.streamText.doStream' === b) {
            (a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_text'),
              a.updateName(`stream_text ${c[h.AI_MODEL_ID_ATTRIBUTE]}`));
            return;
          }
          if ('ai.generateObject' === b)
            return a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');
          if ('ai.generateObject.doGenerate' === b) {
            (a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_object'),
              a.updateName(`generate_object ${c[h.AI_MODEL_ID_ATTRIBUTE]}`));
            return;
          }
          if ('ai.streamObject' === b)
            return a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');
          if ('ai.streamObject.doStream' === b) {
            (a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_object'),
              a.updateName(`stream_object ${c[h.AI_MODEL_ID_ATTRIBUTE]}`));
            return;
          }
          if ('ai.embed' === b)
            return a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');
          if ('ai.embed.doEmbed' === b) {
            (a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed'),
              a.updateName(`embed ${c[h.AI_MODEL_ID_ATTRIBUTE]}`));
            return;
          }
          if ('ai.embedMany' === b)
            return a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');
          if ('ai.embedMany.doEmbed' === b) {
            (a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed_many'),
              a.updateName(`embed_many ${c[h.AI_MODEL_ID_ATTRIBUTE]}`));
            return;
          }
          b.startsWith('ai.stream') && a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run');
        })(a, c, b);
    }
    function k(a) {
      if ('transaction' === a.type && a.spans) {
        let b = new Map();
        for (let c of a.spans)
          ((function (a) {
            let { data: b, origin: c } = a;
            if ('auto.vercelai.otel' === c)
              for (let a of (l(
                b,
                h.AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,
                h.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE
              ),
              l(b, h.AI_USAGE_PROMPT_TOKENS_ATTRIBUTE, h.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE),
              'number' == typeof b[h.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] &&
                'number' == typeof b[h.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] &&
                (b['gen_ai.usage.total_tokens'] =
                  b[h.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] +
                  b[h.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE]),
              l(b, h.AI_PROMPT_MESSAGES_ATTRIBUTE, 'gen_ai.request.messages'),
              l(b, h.AI_RESPONSE_TEXT_ATTRIBUTE, 'gen_ai.response.text'),
              l(b, h.AI_RESPONSE_TOOL_CALLS_ATTRIBUTE, 'gen_ai.response.tool_calls'),
              l(b, h.AI_RESPONSE_OBJECT_ATTRIBUTE, 'gen_ai.response.object'),
              l(b, h.AI_PROMPT_TOOLS_ATTRIBUTE, 'gen_ai.request.available_tools'),
              l(b, h.AI_TOOL_CALL_ARGS_ATTRIBUTE, 'gen_ai.tool.input'),
              l(b, h.AI_TOOL_CALL_RESULT_ATTRIBUTE, 'gen_ai.tool.output'),
              (function (a) {
                let b = a[h.AI_RESPONSE_PROVIDER_METADATA_ATTRIBUTE];
                if (b)
                  try {
                    let c = JSON.parse(b);
                    (c.openai &&
                      (m(a, 'gen_ai.usage.input_tokens.cached', c.openai.cachedPromptTokens),
                      m(a, 'gen_ai.usage.output_tokens.reasoning', c.openai.reasoningTokens),
                      m(
                        a,
                        'gen_ai.usage.output_tokens.prediction_accepted',
                        c.openai.acceptedPredictionTokens
                      ),
                      m(
                        a,
                        'gen_ai.usage.output_tokens.prediction_rejected',
                        c.openai.rejectedPredictionTokens
                      ),
                      m(a, 'gen_ai.conversation.id', c.openai.responseId)),
                      c.anthropic &&
                        (m(a, 'gen_ai.usage.input_tokens.cached', c.anthropic.cacheReadInputTokens),
                        m(
                          a,
                          'gen_ai.usage.input_tokens.cache_write',
                          c.anthropic.cacheCreationInputTokens
                        )),
                      c.bedrock?.usage &&
                        (m(
                          a,
                          'gen_ai.usage.input_tokens.cached',
                          c.bedrock.usage.cacheReadInputTokens
                        ),
                        m(
                          a,
                          'gen_ai.usage.input_tokens.cache_write',
                          c.bedrock.usage.cacheWriteInputTokens
                        )),
                      c.deepseek &&
                        (m(a, 'gen_ai.usage.input_tokens.cached', c.deepseek.promptCacheHitTokens),
                        m(
                          a,
                          'gen_ai.usage.input_tokens.cache_miss',
                          c.deepseek.promptCacheMissTokens
                        )));
                  } catch {}
              })(b),
              Object.keys(b)))
                a.startsWith('ai.') && l(b, a, `vercel.${a}`);
          })(c),
            g.accumulateTokensForParent(c, b));
        for (let c of a.spans) 'gen_ai.invoke_agent' === c.op && g.applyAccumulatedTokens(c, b);
        let c = a.contexts?.trace;
        c && 'gen_ai.invoke_agent' === c.op && g.applyAccumulatedTokens(c, b);
      }
      return a;
    }
    function l(a, b, c) {
      null != a[b] && ((a[c] = a[b]), delete a[b]);
    }
    function m(a, b, c) {
      null != c && (a[b] = c);
    }
    c.addVercelAiProcessors = function (a) {
      (a.on('spanStart', j),
        a.addEventProcessor(Object.assign(k, { id: 'VercelAiEventProcessor' })));
    };
  },
  31723,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = [
        'response.output_item.added',
        'response.function_call_arguments.delta',
        'response.function_call_arguments.done',
        'response.output_item.done',
      ],
      e = [
        'response.created',
        'response.in_progress',
        'response.failed',
        'response.completed',
        'response.incomplete',
        'response.queued',
        'response.output_text.delta',
        ...d,
      ];
    ((c.INSTRUMENTED_METHODS = ['responses.create', 'chat.completions.create']),
      (c.OPENAI_INTEGRATION_NAME = 'OpenAI'),
      (c.RESPONSES_TOOL_CALL_EVENT_TYPES = d),
      (c.RESPONSE_EVENT_TYPES = e));
  },
  68296,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(21303),
      e = a.r(31723);
    function f(a) {
      return a.includes('chat.completions')
        ? d.OPENAI_OPERATIONS.CHAT
        : a.includes('responses')
          ? d.OPENAI_OPERATIONS.RESPONSES
          : a.split('.').pop() || 'unknown';
    }
    ((c.buildMethodPath = function (a, b) {
      return a ? `${a}.${b}` : b;
    }),
      (c.getOperationName = f),
      (c.getSpanOperation = function (a) {
        return `gen_ai.${f(a)}`;
      }),
      (c.isChatCompletionChunk = function (a) {
        return (
          null !== a &&
          'object' == typeof a &&
          'object' in a &&
          'chat.completion.chunk' === a.object
        );
      }),
      (c.isChatCompletionResponse = function (a) {
        return (
          null !== a && 'object' == typeof a && 'object' in a && 'chat.completion' === a.object
        );
      }),
      (c.isResponsesApiResponse = function (a) {
        return null !== a && 'object' == typeof a && 'object' in a && 'response' === a.object;
      }),
      (c.isResponsesApiStreamEvent = function (a) {
        return (
          null !== a &&
          'object' == typeof a &&
          'type' in a &&
          'string' == typeof a.type &&
          a.type.startsWith('response.')
        );
      }),
      (c.setCommonResponseAttributes = function (a, b, c, e) {
        (a.setAttributes({
          [d.OPENAI_RESPONSE_ID_ATTRIBUTE]: b,
          [d.GEN_AI_RESPONSE_ID_ATTRIBUTE]: b,
        }),
          a.setAttributes({
            [d.OPENAI_RESPONSE_MODEL_ATTRIBUTE]: c,
            [d.GEN_AI_RESPONSE_MODEL_ATTRIBUTE]: c,
          }),
          a.setAttributes({
            [d.OPENAI_RESPONSE_TIMESTAMP_ATTRIBUTE]: new Date(1e3 * e).toISOString(),
          }));
      }),
      (c.setTokenUsageAttributes = function (a, b, c, e) {
        (void 0 !== b &&
          a.setAttributes({
            [d.OPENAI_USAGE_PROMPT_TOKENS_ATTRIBUTE]: b,
            [d.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE]: b,
          }),
          void 0 !== c &&
            a.setAttributes({
              [d.OPENAI_USAGE_COMPLETION_TOKENS_ATTRIBUTE]: c,
              [d.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE]: c,
            }),
          void 0 !== e && a.setAttributes({ [d.GEN_AI_USAGE_TOTAL_TOKENS_ATTRIBUTE]: e }));
      }),
      (c.shouldInstrument = function (a) {
        return e.INSTRUMENTED_METHODS.includes(a);
      }));
  },
  52021,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(73072),
      e = a.r(47534),
      f = a.r(21303),
      g = a.r(31723),
      h = a.r(68296);
    c.instrumentStream = async function* (a, b, c) {
      let i = {
        eventTypes: [],
        responseTexts: [],
        finishReasons: [],
        responseId: '',
        responseModel: '',
        responseTimestamp: 0,
        promptTokens: void 0,
        completionTokens: void 0,
        totalTokens: void 0,
        chatCompletionToolCalls: {},
        responsesApiToolCalls: [],
      };
      try {
        for await (let f of a) {
          if (h.isChatCompletionChunk(f))
            for (let a of ((i.responseId = f.id ?? i.responseId),
            (i.responseModel = f.model ?? i.responseModel),
            (i.responseTimestamp = f.created ?? i.responseTimestamp),
            f.usage &&
              ((i.promptTokens = f.usage.prompt_tokens),
              (i.completionTokens = f.usage.completion_tokens),
              (i.totalTokens = f.usage.total_tokens)),
            f.choices ?? []))
              (c &&
                (a.delta?.content && i.responseTexts.push(a.delta.content),
                a.delta?.tool_calls &&
                  (function (a, b) {
                    for (let c of a) {
                      let a = c.index;
                      if (void 0 !== a && c.function)
                        if (a in b.chatCompletionToolCalls) {
                          let d = b.chatCompletionToolCalls[a];
                          c.function.arguments &&
                            d?.function &&
                            (d.function.arguments += c.function.arguments);
                        } else
                          b.chatCompletionToolCalls[a] = {
                            ...c,
                            function: {
                              name: c.function.name,
                              arguments: c.function.arguments || '',
                            },
                          };
                    }
                  })(a.delta.tool_calls, i)),
                a.finish_reason && i.finishReasons.push(a.finish_reason));
          else
            h.isResponsesApiStreamEvent(f) &&
              (function (a, b, c, f) {
                if (!(a && 'object' == typeof a)) return b.eventTypes.push('unknown:non-object');
                if (a instanceof Error) {
                  (f.setStatus({ code: e.SPAN_STATUS_ERROR, message: 'internal_error' }),
                    d.captureException(a, { mechanism: { handled: !1 } }));
                  return;
                }
                if ('type' in a) {
                  if (!g.RESPONSE_EVENT_TYPES.includes(a.type)) return b.eventTypes.push(a.type);
                  if (
                    c &&
                    ('response.output_item.done' === a.type &&
                      'item' in a &&
                      b.responsesApiToolCalls.push(a.item),
                    'response.output_text.delta' === a.type && 'delta' in a && a.delta)
                  )
                    return b.responseTexts.push(a.delta);
                  if ('response' in a) {
                    let { response: d } = a;
                    ((b.responseId = d.id ?? b.responseId),
                      (b.responseModel = d.model ?? b.responseModel),
                      (b.responseTimestamp = d.created_at ?? b.responseTimestamp),
                      d.usage &&
                        ((b.promptTokens = d.usage.input_tokens),
                        (b.completionTokens = d.usage.output_tokens),
                        (b.totalTokens = d.usage.total_tokens)),
                      d.status && b.finishReasons.push(d.status),
                      c && d.output_text && b.responseTexts.push(d.output_text));
                  }
                }
              })(f, i, c, b);
          yield f;
        }
      } finally {
        (h.setCommonResponseAttributes(b, i.responseId, i.responseModel, i.responseTimestamp),
          h.setTokenUsageAttributes(b, i.promptTokens, i.completionTokens, i.totalTokens),
          b.setAttributes({ [f.GEN_AI_RESPONSE_STREAMING_ATTRIBUTE]: !0 }),
          i.finishReasons.length &&
            b.setAttributes({
              [f.GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE]: JSON.stringify(i.finishReasons),
            }),
          c &&
            i.responseTexts.length &&
            b.setAttributes({ [f.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: i.responseTexts.join('') }));
        let a = [...Object.values(i.chatCompletionToolCalls), ...i.responsesApiToolCalls];
        (a.length > 0 &&
          b.setAttributes({ [f.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE]: JSON.stringify(a) }),
          b.end());
      }
    };
  },
  14329,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(73072),
      f = a.r(21016),
      g = a.r(47534),
      h = a.r(45481),
      i = a.r(21303),
      j = a.r(31723),
      k = a.r(52021),
      l = a.r(68296);
    function m(a, b) {
      ('messages' in b &&
        a.setAttributes({ [i.GEN_AI_REQUEST_MESSAGES_ATTRIBUTE]: JSON.stringify(b.messages) }),
        'input' in b &&
          a.setAttributes({ [i.GEN_AI_REQUEST_MESSAGES_ATTRIBUTE]: JSON.stringify(b.input) }));
    }
    c.instrumentOpenAiClient = function (a, b) {
      return (function a(b, c = '', n) {
        return new Proxy(b, {
          get(b, o) {
            let p = b[o],
              q = l.buildMethodPath(c, String(o));
            if ('function' == typeof p && l.shouldInstrument(q))
              return async function (...a) {
                let c =
                    n ||
                    (function () {
                      let a = d.getCurrentScope().getClient(),
                        b = a?.getIntegrationByName(j.OPENAI_INTEGRATION_NAME),
                        c = !!b && !!a?.getOptions().sendDefaultPii;
                      return {
                        recordInputs: b?.options?.recordInputs ?? c,
                        recordOutputs: b?.options?.recordOutputs ?? c,
                      };
                    })(),
                  o = (function (a, b) {
                    let c = {
                      [i.GEN_AI_SYSTEM_ATTRIBUTE]: 'openai',
                      [i.GEN_AI_OPERATION_NAME_ATTRIBUTE]: l.getOperationName(b),
                      [f.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.openai',
                    };
                    if (a.length > 0 && 'object' == typeof a[0] && null !== a[0]) {
                      let b = a[0],
                        d = [
                          ...(Array.isArray(b.tools) ? b.tools : []),
                          ...(b.web_search_options && 'object' == typeof b.web_search_options
                            ? [{ type: 'web_search_options', ...b.web_search_options }]
                            : []),
                        ];
                      d.length > 0 &&
                        (c[i.GEN_AI_REQUEST_AVAILABLE_TOOLS_ATTRIBUTE] = JSON.stringify(d));
                    }
                    if (a.length > 0 && 'object' == typeof a[0] && null !== a[0]) {
                      let b = a[0];
                      ((c[i.GEN_AI_REQUEST_MODEL_ATTRIBUTE] = b.model ?? 'unknown'),
                        'temperature' in b &&
                          (c[i.GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE] = b.temperature),
                        'top_p' in b && (c[i.GEN_AI_REQUEST_TOP_P_ATTRIBUTE] = b.top_p),
                        'frequency_penalty' in b &&
                          (c[i.GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE] = b.frequency_penalty),
                        'presence_penalty' in b &&
                          (c[i.GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE] = b.presence_penalty),
                        'stream' in b && (c[i.GEN_AI_REQUEST_STREAM_ATTRIBUTE] = b.stream));
                    } else c[i.GEN_AI_REQUEST_MODEL_ATTRIBUTE] = 'unknown';
                    return c;
                  })(a, q),
                  r = o[i.GEN_AI_REQUEST_MODEL_ATTRIBUTE] || 'unknown',
                  s = l.getOperationName(q),
                  t = a[0];
                return t && 'object' == typeof t && !0 === t.stream
                  ? h.startSpanManual(
                      {
                        name: `${s} ${r} stream-response`,
                        op: l.getSpanOperation(q),
                        attributes: o,
                      },
                      async (d) => {
                        try {
                          c.recordInputs && a[0] && 'object' == typeof a[0] && m(d, a[0]);
                          let e = await p.apply(b, a);
                          return k.instrumentStream(e, d, c.recordOutputs ?? !1);
                        } catch (a) {
                          throw (
                            d.setStatus({ code: g.SPAN_STATUS_ERROR, message: 'internal_error' }),
                            e.captureException(a, { mechanism: { handled: !1 } }),
                            d.end(),
                            a
                          );
                        }
                      }
                    )
                  : h.startSpan(
                      { name: `${s} ${r}`, op: l.getSpanOperation(q), attributes: o },
                      async (d) => {
                        try {
                          c.recordInputs && a[0] && 'object' == typeof a[0] && m(d, a[0]);
                          let e = await p.apply(b, a);
                          return (
                            !(function (a, b, c) {
                              if (b && 'object' == typeof b) {
                                if (l.isChatCompletionResponse(b)) {
                                  if (
                                    (l.setCommonResponseAttributes(a, b.id, b.model, b.created),
                                    b.usage &&
                                      l.setTokenUsageAttributes(
                                        a,
                                        b.usage.prompt_tokens,
                                        b.usage.completion_tokens,
                                        b.usage.total_tokens
                                      ),
                                    Array.isArray(b.choices))
                                  ) {
                                    let d = b.choices
                                      .map((a) => a.finish_reason)
                                      .filter((a) => null !== a);
                                    if (
                                      (d.length > 0 &&
                                        a.setAttributes({
                                          [i.GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE]:
                                            JSON.stringify(d),
                                        }),
                                      c)
                                    ) {
                                      let c = b.choices
                                        .map((a) => a.message?.tool_calls)
                                        .filter((a) => Array.isArray(a) && a.length > 0)
                                        .flat();
                                      c.length > 0 &&
                                        a.setAttributes({
                                          [i.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE]:
                                            JSON.stringify(c),
                                        });
                                    }
                                  }
                                  if (c && b.choices?.length) {
                                    let c = b.choices.map((a) => a.message?.content || '');
                                    a.setAttributes({
                                      [i.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: JSON.stringify(c),
                                    });
                                  }
                                } else if (l.isResponsesApiResponse(b)) {
                                  if (
                                    (l.setCommonResponseAttributes(a, b.id, b.model, b.created_at),
                                    b.status &&
                                      a.setAttributes({
                                        [i.GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE]:
                                          JSON.stringify([b.status]),
                                      }),
                                    b.usage &&
                                      l.setTokenUsageAttributes(
                                        a,
                                        b.usage.input_tokens,
                                        b.usage.output_tokens,
                                        b.usage.total_tokens
                                      ),
                                    c && Array.isArray(b.output) && b.output.length > 0)
                                  ) {
                                    let c = b.output.filter(
                                      (a) =>
                                        'object' == typeof a &&
                                        null !== a &&
                                        'function_call' === a.type
                                    );
                                    c.length > 0 &&
                                      a.setAttributes({
                                        [i.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE]: JSON.stringify(c),
                                      });
                                  }
                                  c &&
                                    b.output_text &&
                                    a.setAttributes({
                                      [i.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: b.output_text,
                                    });
                                }
                              }
                            })(d, e, c.recordOutputs),
                            e
                          );
                        } catch (a) {
                          throw (e.captureException(a), a);
                        }
                      }
                    );
              };
            return 'function' == typeof p ? p.bind(b) : p && 'object' == typeof p ? a(p, q, n) : p;
          },
        });
      })(a, '', b);
    };
  },
  57047,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(21303);
    function e(a) {
      return a.includes('messages')
        ? 'messages'
        : a.includes('completions')
          ? 'completions'
          : a.includes('models')
            ? 'models'
            : a.split('.').pop() || 'unknown';
    }
    ((c.buildMethodPath = function (a, b) {
      return a ? `${a}.${b}` : b;
    }),
      (c.getFinalOperationName = e),
      (c.getSpanOperation = function (a) {
        return `gen_ai.${e(a)}`;
      }),
      (c.setTokenUsageAttributes = function (a, b, c, e, f) {
        (void 0 !== b && a.setAttributes({ [d.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE]: b }),
          void 0 !== c && a.setAttributes({ [d.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE]: c }),
          (void 0 !== b || void 0 !== c || void 0 !== e || void 0 !== f) &&
            a.setAttributes({
              [d.GEN_AI_USAGE_TOTAL_TOKENS_ATTRIBUTE]: (b ?? 0) + (c ?? 0) + (e ?? 0) + (f ?? 0),
            }));
      }));
  },
  42991,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.ANTHROPIC_AI_INSTRUMENTED_METHODS = [
        'messages.create',
        'messages.stream',
        'messages.countTokens',
        'models.get',
        'completions.create',
        'models.retrieve',
        'beta.messages.create',
      ]),
      (c.ANTHROPIC_AI_INTEGRATION_NAME = 'Anthropic_AI'));
  },
  33545,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(73072),
      e = a.r(47534),
      f = a.r(21303),
      g = a.r(57047);
    c.instrumentStream = async function* (a, b, c) {
      let h = {
        responseTexts: [],
        finishReasons: [],
        responseId: '',
        responseModel: '',
        promptTokens: void 0,
        completionTokens: void 0,
        cacheCreationInputTokens: void 0,
        cacheReadInputTokens: void 0,
        toolCalls: [],
        activeToolBlocks: {},
      };
      try {
        for await (let f of a)
          (!(function (a, b, c, f) {
            if (
              a &&
              'object' == typeof a &&
              !(function (a, b) {
                if ('type' in a && 'string' == typeof a.type && 'error' === a.type) {
                  let c = a.error?.message ?? 'internal_error';
                  return (
                    b.setStatus({ code: e.SPAN_STATUS_ERROR, message: c }),
                    d.captureException(Error(`anthropic_stream_error: ${c}`), {
                      mechanism: {
                        handled: !1,
                        type: 'auto.ai.anthropic',
                        data: { function: 'anthropic_stream_error' },
                      },
                      data: { function: 'anthropic_stream_error' },
                    }),
                    !0
                  );
                }
                return !1;
              })(a, f)
            ) {
              if (
                ('message_delta' === a.type &&
                  a.usage &&
                  'output_tokens' in a.usage &&
                  'number' == typeof a.usage.output_tokens &&
                  (b.completionTokens = a.usage.output_tokens),
                a.message)
              ) {
                let c = a.message;
                (c.id && (b.responseId = c.id),
                  c.model && (b.responseModel = c.model),
                  c.stop_reason && b.finishReasons.push(c.stop_reason),
                  c.usage &&
                    ('number' == typeof c.usage.input_tokens &&
                      (b.promptTokens = c.usage.input_tokens),
                    'number' == typeof c.usage.cache_creation_input_tokens &&
                      (b.cacheCreationInputTokens = c.usage.cache_creation_input_tokens),
                    'number' == typeof c.usage.cache_read_input_tokens &&
                      (b.cacheReadInputTokens = c.usage.cache_read_input_tokens)));
              }
              'content_block_start' === a.type &&
                'number' == typeof a.index &&
                a.content_block &&
                ('tool_use' === a.content_block.type ||
                  'server_tool_use' === a.content_block.type) &&
                (b.activeToolBlocks[a.index] = {
                  id: a.content_block.id,
                  name: a.content_block.name,
                  inputJsonParts: [],
                });
              if ('content_block_delta' === a.type && a.delta) {
                if (
                  'number' == typeof a.index &&
                  'partial_json' in a.delta &&
                  'string' == typeof a.delta.partial_json
                ) {
                  let c = b.activeToolBlocks[a.index];
                  c && c.inputJsonParts.push(a.delta.partial_json);
                }
                c && 'string' == typeof a.delta.text && b.responseTexts.push(a.delta.text);
              }
              !(function (a, b) {
                let c;
                if ('content_block_stop' !== a.type || 'number' != typeof a.index) return;
                let d = b.activeToolBlocks[a.index];
                if (!d) return;
                let e = d.inputJsonParts.join('');
                try {
                  c = e ? JSON.parse(e) : {};
                } catch {
                  c = { __unparsed: e };
                }
                (b.toolCalls.push({ type: 'tool_use', id: d.id, name: d.name, input: c }),
                  delete b.activeToolBlocks[a.index]);
              })(a, b);
            }
          })(f, h, c, b),
            yield f);
      } finally {
        (h.responseId && b.setAttributes({ [f.GEN_AI_RESPONSE_ID_ATTRIBUTE]: h.responseId }),
          h.responseModel &&
            b.setAttributes({ [f.GEN_AI_RESPONSE_MODEL_ATTRIBUTE]: h.responseModel }),
          g.setTokenUsageAttributes(
            b,
            h.promptTokens,
            h.completionTokens,
            h.cacheCreationInputTokens,
            h.cacheReadInputTokens
          ),
          b.setAttributes({ [f.GEN_AI_RESPONSE_STREAMING_ATTRIBUTE]: !0 }),
          h.finishReasons.length > 0 &&
            b.setAttributes({
              [f.GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE]: JSON.stringify(h.finishReasons),
            }),
          c &&
            h.responseTexts.length > 0 &&
            b.setAttributes({ [f.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: h.responseTexts.join('') }),
          c &&
            h.toolCalls.length > 0 &&
            b.setAttributes({
              [f.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE]: JSON.stringify(h.toolCalls),
            }),
          b.end());
      }
    };
  },
  47209,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(42991);
    c.shouldInstrument = function (a) {
      return d.ANTHROPIC_AI_INSTRUMENTED_METHODS.includes(a);
    };
  },
  47605,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(57697),
      e = a.r(73072),
      f = a.r(21016),
      g = a.r(47534),
      h = a.r(45481),
      i = a.r(21303),
      j = a.r(57047),
      k = a.r(42991),
      l = a.r(33545),
      m = a.r(47209);
    function n(a, b) {
      ('messages' in b &&
        a.setAttributes({ [i.GEN_AI_REQUEST_MESSAGES_ATTRIBUTE]: JSON.stringify(b.messages) }),
        'input' in b &&
          a.setAttributes({ [i.GEN_AI_REQUEST_MESSAGES_ATTRIBUTE]: JSON.stringify(b.input) }),
        'prompt' in b &&
          a.setAttributes({ [i.GEN_AI_PROMPT_ATTRIBUTE]: JSON.stringify(b.prompt) }));
    }
    c.instrumentAnthropicAiClient = function (a, b) {
      return (function a(b, c = '', o) {
        return new Proxy(b, {
          get(b, p) {
            let q = b[p],
              r = j.buildMethodPath(c, String(p));
            if ('function' == typeof q && m.shouldInstrument(r))
              return async function (...a) {
                let c =
                    o ||
                    (function () {
                      let a = d.getCurrentScope().getClient(),
                        b = a?.getIntegrationByName(k.ANTHROPIC_AI_INTEGRATION_NAME),
                        c = !!b && !!a?.getOptions().sendDefaultPii;
                      return {
                        recordInputs: b?.options?.recordInputs ?? c,
                        recordOutputs: b?.options?.recordOutputs ?? c,
                      };
                    })(),
                  m = (function (a, b) {
                    let c = {
                      [i.GEN_AI_SYSTEM_ATTRIBUTE]: 'anthropic',
                      [i.GEN_AI_OPERATION_NAME_ATTRIBUTE]: j.getFinalOperationName(b),
                      [f.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ai.anthropic',
                    };
                    if (a.length > 0 && 'object' == typeof a[0] && null !== a[0]) {
                      let b = a[0];
                      (b.tools &&
                        Array.isArray(b.tools) &&
                        (c[i.GEN_AI_REQUEST_AVAILABLE_TOOLS_ATTRIBUTE] = JSON.stringify(b.tools)),
                        (c[i.GEN_AI_REQUEST_MODEL_ATTRIBUTE] = b.model ?? 'unknown'),
                        'temperature' in b &&
                          (c[i.GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE] = b.temperature),
                        'top_p' in b && (c[i.GEN_AI_REQUEST_TOP_P_ATTRIBUTE] = b.top_p),
                        'stream' in b && (c[i.GEN_AI_REQUEST_STREAM_ATTRIBUTE] = b.stream),
                        'top_k' in b && (c[i.GEN_AI_REQUEST_TOP_K_ATTRIBUTE] = b.top_k),
                        'frequency_penalty' in b &&
                          (c[i.GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE] = b.frequency_penalty),
                        'max_tokens' in b &&
                          (c[i.GEN_AI_REQUEST_MAX_TOKENS_ATTRIBUTE] = b.max_tokens));
                    } else
                      'models.retrieve' === b || 'models.get' === b
                        ? (c[i.GEN_AI_REQUEST_MODEL_ATTRIBUTE] = a[0])
                        : (c[i.GEN_AI_REQUEST_MODEL_ATTRIBUTE] = 'unknown');
                    return c;
                  })(a, r),
                  p = m[i.GEN_AI_REQUEST_MODEL_ATTRIBUTE] ?? 'unknown',
                  s = j.getFinalOperationName(r),
                  t = 'object' == typeof a[0] ? a[0] : void 0,
                  u = !!t?.stream,
                  v = 'messages.stream' === r;
                return u || v
                  ? h.startSpanManual(
                      {
                        name: `${s} ${p} stream-response`,
                        op: j.getSpanOperation(r),
                        attributes: m,
                      },
                      async (d) => {
                        try {
                          c.recordInputs && t && n(d, t);
                          let e = await q.apply(b, a);
                          return l.instrumentStream(e, d, c.recordOutputs ?? !1);
                        } catch (a) {
                          throw (
                            d.setStatus({ code: g.SPAN_STATUS_ERROR, message: 'internal_error' }),
                            e.captureException(a, {
                              mechanism: {
                                handled: !1,
                                type: 'auto.ai.anthropic',
                                data: { function: r },
                              },
                            }),
                            d.end(),
                            a
                          );
                        }
                      }
                    )
                  : h.startSpan(
                      { name: `${s} ${p}`, op: j.getSpanOperation(r), attributes: m },
                      async (d) => {
                        try {
                          c.recordInputs && a[0] && 'object' == typeof a[0] && n(d, a[0]);
                          let e = await q.apply(b, a);
                          var f = c.recordOutputs;
                          if (e && 'object' == typeof e) {
                            if (f) {
                              if ('content' in e && Array.isArray(e.content)) {
                                d.setAttributes({
                                  [i.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: e.content
                                    .map((a) => a.text)
                                    .filter((a) => !!a)
                                    .join(''),
                                });
                                let a = [];
                                for (let b of e.content)
                                  ('tool_use' === b.type || 'server_tool_use' === b.type) &&
                                    a.push(b);
                                a.length > 0 &&
                                  d.setAttributes({
                                    [i.GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE]: JSON.stringify(a),
                                  });
                              }
                              ('completion' in e &&
                                d.setAttributes({
                                  [i.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: e.completion,
                                }),
                                'input_tokens' in e &&
                                  d.setAttributes({
                                    [i.GEN_AI_RESPONSE_TEXT_ATTRIBUTE]: JSON.stringify(
                                      e.input_tokens
                                    ),
                                  }));
                            }
                            (d.setAttributes({ [i.GEN_AI_RESPONSE_ID_ATTRIBUTE]: e.id }),
                              d.setAttributes({ [i.GEN_AI_RESPONSE_MODEL_ATTRIBUTE]: e.model }),
                              'created' in e &&
                                'number' == typeof e.created &&
                                d.setAttributes({
                                  [i.ANTHROPIC_AI_RESPONSE_TIMESTAMP_ATTRIBUTE]: new Date(
                                    1e3 * e.created
                                  ).toISOString(),
                                }),
                              'created_at' in e &&
                                'number' == typeof e.created_at &&
                                d.setAttributes({
                                  [i.ANTHROPIC_AI_RESPONSE_TIMESTAMP_ATTRIBUTE]: new Date(
                                    1e3 * e.created_at
                                  ).toISOString(),
                                }),
                              e.usage &&
                                j.setTokenUsageAttributes(
                                  d,
                                  e.usage.input_tokens,
                                  e.usage.output_tokens,
                                  e.usage.cache_creation_input_tokens,
                                  e.usage.cache_read_input_tokens
                                ));
                          }
                          return e;
                        } catch (a) {
                          throw (
                            e.captureException(a, {
                              mechanism: {
                                handled: !1,
                                type: 'auto.ai.anthropic',
                                data: { function: r },
                              },
                            }),
                            a
                          );
                        }
                      }
                    );
              };
            return 'function' == typeof q ? q.bind(b) : q && 'object' == typeof q ? a(q, r, o) : q;
          },
        });
      })(a, '', b);
    };
  },
  2849,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.getBreadcrumbLogLevelFromHttpStatusCode = function (a) {
        if (void 0 !== a) return a >= 400 && a < 500 ? 'warning' : a >= 500 ? 'error' : void 0;
      }));
  },
  41754,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.SentryError = class extends Error {
        constructor(a, b = 'warn') {
          (super(a), (this.message = a), (this.logLevel = b));
        }
      }));
  },
  87653,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25350),
      e = a.r(43679),
      f = a.r(6325).GLOBAL_OBJ;
    function g() {
      if (!('fetch' in f)) return !1;
      try {
        return (new Headers(), new Request('http://www.example.com'), new Response(), !0);
      } catch {
        return !1;
      }
    }
    function h(a) {
      return a && /^function\s+\w+\(\)\s+\{\s+\[native code\]\s+\}$/.test(a.toString());
    }
    ((c.isNativeFunction = h),
      (c.supportsDOMError = function () {
        try {
          return (new DOMError(''), !0);
        } catch {
          return !1;
        }
      }),
      (c.supportsDOMException = function () {
        try {
          return (new DOMException(''), !0);
        } catch {
          return !1;
        }
      }),
      (c.supportsErrorEvent = function () {
        try {
          return (new ErrorEvent(''), !0);
        } catch {
          return !1;
        }
      }),
      (c.supportsFetch = g),
      (c.supportsHistory = function () {
        return 'history' in f && !!f.history;
      }),
      (c.supportsNativeFetch = function () {
        if ('string' == typeof EdgeRuntime) return !0;
        if (!g()) return !1;
        if (h(f.fetch)) return !0;
        let a = !1,
          b = f.document;
        if (b && 'function' == typeof b.createElement)
          try {
            let c = b.createElement('iframe');
            ((c.hidden = !0),
              b.head.appendChild(c),
              c.contentWindow?.fetch && (a = h(c.contentWindow.fetch)),
              b.head.removeChild(c));
          } catch (a) {
            d.DEBUG_BUILD &&
              e.debug.warn(
                'Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ',
                a
              );
          }
        return a;
      }),
      (c.supportsReferrerPolicy = function () {
        if (!g()) return !1;
        try {
          return (new Request('_', { referrerPolicy: 'origin' }), !0);
        } catch {
          return !1;
        }
      }),
      (c.supportsReportingObserver = function () {
        return 'ReportingObserver' in f;
      }));
  },
  57010,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(59242),
      e = a.r(78707),
      f = a.r(87653),
      g = a.r(59671),
      h = a.r(6325),
      i = a.r(44409);
    function j(a, b = !1) {
      (!b || f.supportsNativeFetch()) &&
        e.fill(h.GLOBAL_OBJ, 'fetch', function (b) {
          return function (...c) {
            let f = Error(),
              { method: j, url: k } = o(c),
              l = {
                args: c,
                fetchData: { method: j, url: k },
                startTimestamp: 1e3 * g.timestampInSeconds(),
                virtualError: f,
                headers: (function (a) {
                  let [b, c] = a;
                  try {
                    if ('object' == typeof c && null !== c && 'headers' in c && c.headers)
                      return new Headers(c.headers);
                    if (d.isRequest(b)) return new Headers(b.headers);
                  } catch {}
                })(c),
              };
            return (
              a || i.triggerHandlers('fetch', { ...l }),
              b.apply(h.GLOBAL_OBJ, c).then(
                async (b) => (
                  a
                    ? a(b)
                    : i.triggerHandlers('fetch', {
                        ...l,
                        endTimestamp: 1e3 * g.timestampInSeconds(),
                        response: b,
                      }),
                  b
                ),
                (a) => {
                  if (
                    (i.triggerHandlers('fetch', {
                      ...l,
                      endTimestamp: 1e3 * g.timestampInSeconds(),
                      error: a,
                    }),
                    d.isError(a) &&
                      void 0 === a.stack &&
                      ((a.stack = f.stack), e.addNonEnumerableProperty(a, 'framesToPop', 1)),
                    a instanceof TypeError &&
                      ('Failed to fetch' === a.message ||
                        'Load failed' === a.message ||
                        'NetworkError when attempting to fetch resource.' === a.message))
                  )
                    try {
                      let b = new URL(l.fetchData.url);
                      a.message = `${a.message} (${b.host})`;
                    } catch {}
                  throw a;
                }
              )
            );
          };
        });
    }
    async function k(a, b) {
      if (a?.body) {
        let c = a.body,
          d = c.getReader(),
          e = setTimeout(() => {
            c.cancel().then(null, () => {});
          }, 9e4),
          f = !0;
        for (; f; ) {
          let a;
          try {
            a = setTimeout(() => {
              c.cancel().then(null, () => {});
            }, 5e3);
            let { done: e } = await d.read();
            (clearTimeout(a), e && (b(), (f = !1)));
          } catch {
            f = !1;
          } finally {
            clearTimeout(a);
          }
        }
        (clearTimeout(e), d.releaseLock(), c.cancel().then(null, () => {}));
      }
    }
    function l(a) {
      let b;
      try {
        b = a.clone();
      } catch {
        return;
      }
      k(b, () => {
        i.triggerHandlers('fetch-body-resolved', {
          endTimestamp: 1e3 * g.timestampInSeconds(),
          response: a,
        });
      });
    }
    function m(a, b) {
      return !!a && 'object' == typeof a && !!a[b];
    }
    function n(a) {
      return 'string' == typeof a
        ? a
        : a
          ? m(a, 'url')
            ? a.url
            : a.toString
              ? a.toString()
              : ''
          : '';
    }
    function o(a) {
      if (0 === a.length) return { method: 'GET', url: '' };
      if (2 === a.length) {
        let [b, c] = a;
        return { url: n(b), method: m(c, 'method') ? String(c.method).toUpperCase() : 'GET' };
      }
      let b = a[0];
      return { url: n(b), method: m(b, 'method') ? String(b.method).toUpperCase() : 'GET' };
    }
    ((c.addFetchEndInstrumentationHandler = function (a) {
      let b = 'fetch-body-resolved';
      (i.addHandler(b, a), i.maybeInstrument(b, () => j(l)));
    }),
      (c.addFetchInstrumentationHandler = function (a, b) {
        let c = 'fetch';
        (i.addHandler(c, a), i.maybeInstrument(c, () => j(void 0, b)));
      }),
      (c.parseFetchArgs = o));
  },
  16492,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.getSDKSource = function () {
        return 'npm';
      }),
      (c.isBrowserBundle = function () {
        return 'undefined' != typeof __SENTRY_BROWSER_BUNDLE__ && !!__SENTRY_BROWSER_BUNDLE__;
      }));
  },
  17937,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(16492);
    function e(a, b) {
      return a.require(b);
    }
    ((c.isNodeEnv = function () {
      return (
        !d.isBrowserBundle() &&
        '[object process]' ===
          Object.prototype.toString.call('undefined' != typeof process ? process : 0)
      );
    }),
      (c.loadModule = function (a, c = b) {
        let d;
        try {
          d = e(c, a);
        } catch {}
        if (!d)
          try {
            let { cwd: b } = e(c, 'process');
            d = e(c, `${b()}/node_modules/${a}`);
          } catch {}
        return d;
      }));
  },
  97735,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      a.r(17937),
      a.r(6325),
      (c.isBrowser = function () {
        return !1;
      }));
  },
  466,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(1805);
    function e(a, b = !1) {
      return (
        !(
          b ||
          (a &&
            !a.startsWith('/') &&
            !a.match(/^[A-Z]:/) &&
            !a.startsWith('.') &&
            !a.match(/^[a-zA-Z]([a-zA-Z0-9.\-+])*:\/\//))
        ) &&
        void 0 !== a &&
        !a.includes('node_modules/')
      );
    }
    function f(a) {
      let b = /^\s*[-]{4,}$/,
        c = /at (?:async )?(?:(.+?)\s+\()?(?:(.+):(\d+):(\d+)?|([^)]+))\)?/,
        f = /at (?:async )?(.+?) \(data:(.*?),/;
      return (h) => {
        let i = h.match(f);
        if (i) return { filename: `<data:${i[2]}>`, function: i[1] };
        let j = h.match(c);
        if (j) {
          let b, c, f, h, i;
          if (j[1]) {
            let a = (f = j[1]).lastIndexOf('.');
            if (('.' === f[a - 1] && a--, a > 0)) {
              ((b = f.slice(0, a)), (c = f.slice(a + 1)));
              let d = b.indexOf('.Module');
              d > 0 && ((f = f.slice(d + 1)), (b = b.slice(0, d)));
            }
            h = void 0;
          }
          (c && ((h = b), (i = c)),
            '<anonymous>' === c && ((i = void 0), (f = void 0)),
            void 0 === f && ((i = i || d.UNKNOWN_FUNCTION), (f = h ? `${h}.${i}` : i)));
          let k = j[2]?.startsWith('file://') ? j[2].slice(7) : j[2],
            l = 'native' === j[5];
          return (
            k?.match(/\/[A-Z]:/) && (k = k.slice(1)),
            k || !j[5] || l || (k = j[5]),
            {
              filename: k ? decodeURI(k) : void 0,
              module: a ? a(k) : void 0,
              function: f,
              lineno: g(j[3]),
              colno: g(j[4]),
              in_app: e(k || '', l),
            }
          );
        }
        if (h.match(b)) return { filename: h };
      };
    }
    function g(a) {
      return parseInt(a || '', 10) || void 0;
    }
    ((c.filenameIsInApp = e),
      (c.node = f),
      (c.nodeStackLineParser = function (a) {
        return [90, f(a)];
      }));
  },
  53788,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(466),
      e = a.r(1805);
    ((c.callFrameToStackFrame = function (a, b, c) {
      let f = b ? b.replace(/^file:\/\//, '') : void 0,
        g = a.location.columnNumber ? a.location.columnNumber + 1 : void 0,
        h = a.location.lineNumber ? a.location.lineNumber + 1 : void 0;
      return {
        filename: f,
        module: c(f),
        function: a.functionName || e.UNKNOWN_FUNCTION,
        colno: g,
        lineno: h,
        in_app: f ? d.filenameIsInApp(f) : void 0,
      };
    }),
      (c.watchdogTimer = function (a, b, c, d) {
        let e = a(),
          f = !1,
          g = !0;
        return (
          setInterval(() => {
            let a = e.getTimeMs();
            (!1 === f && a > b + c && ((f = !0), g && d()), a < b + c && (f = !1));
          }, 20),
          {
            poll: () => {
              e.reset();
            },
            enabled: (a) => {
              g = a;
            },
          }
        );
      }));
  },
  3568,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.LRUMap = class {
        constructor(a) {
          ((this._maxSize = a), (this._cache = new Map()));
        }
        get size() {
          return this._cache.size;
        }
        get(a) {
          let b = this._cache.get(a);
          if (void 0 !== b) return (this._cache.delete(a), this._cache.set(a, b), b);
        }
        set(a, b) {
          (this._cache.size >= this._maxSize && this._cache.delete(this._cache.keys().next().value),
            this._cache.set(a, b));
        }
        remove(a) {
          let b = this._cache.get(a);
          return (b && this._cache.delete(a), b);
        }
        clear() {
          this._cache.clear();
        }
        keys() {
          return Array.from(this._cache.keys());
        }
        values() {
          let a = [];
          return (this._cache.forEach((b) => a.push(b)), a);
        }
      }));
  },
  6176,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(6325);
    c.vercelWaitUntil = function (a) {
      let b = d.GLOBAL_OBJ[Symbol.for('@vercel/request-context')],
        c = b?.get?.();
      c?.waitUntil && c.waitUntil(a);
    };
  },
  9232,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(73072),
      e = a.r(43679),
      f = a.r(6176),
      g = a.r(6325);
    async function h(a) {
      try {
        (e.debug.log('Flushing events...'), await d.flush(a), e.debug.log('Done flushing events'));
      } catch (a) {
        e.debug.log('Error while flushing events:\n', a);
      }
    }
    c.flushIfServerless = async function (a = {}) {
      let { timeout: b = 2e3 } = a;
      return 'cloudflareWaitUntil' in a && 'function' == typeof a?.cloudflareWaitUntil
        ? void a.cloudflareWaitUntil(h(b))
        : 'cloudflareCtx' in a && 'function' == typeof a.cloudflareCtx?.waitUntil
          ? void a.cloudflareCtx.waitUntil(h(b))
          : g.GLOBAL_OBJ[Symbol.for('@vercel/request-context')]
            ? void f.vercelWaitUntil(h(b))
            : 'undefined' == typeof process
              ? void 0
              : void (
                  (process.env.FUNCTIONS_WORKER_RUNTIME ||
                    process.env.LAMBDA_TASK_ROOT ||
                    process.env.K_SERVICE ||
                    process.env.CF_PAGES ||
                    process.env.VERCEL ||
                    process.env.NETLIFY) &&
                  (await h(b))
                );
    };
  },
  57277,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.escapeStringForRegex = function (a) {
        return a.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d');
      }));
  },
  32723,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(70826),
      e = a.r(13340),
      f = a.r(59980),
      g = a.r(31685),
      h = a.r(40367),
      i = a.r(47534),
      j = a.r(45481),
      k = a.r(7001),
      l = a.r(76537),
      m = a.r(83054),
      n = a.r(59534),
      o = a.r(21016),
      p = a.r(78669),
      q = a.r(73072),
      r = a.r(57697),
      s = a.r(55851),
      t = a.r(85194),
      u = a.r(5356),
      v = a.r(99309),
      w = a.r(77542),
      x = a.r(63881),
      y = a.r(1272),
      z = a.r(58249),
      A = a.r(30161),
      B = a.r(40322),
      C = a.r(75032),
      D = a.r(1697),
      E = a.r(38616),
      F = a.r(98699),
      G = a.r(70197),
      H = a.r(73519),
      I = a.r(26095),
      J = a.r(79168),
      K = a.r(23528),
      L = a.r(96718),
      M = a.r(3740),
      N = a.r(64620),
      O = a.r(45889),
      P = a.r(87726),
      Q = a.r(86e3),
      R = a.r(85453),
      S = a.r(62694),
      T = a.r(90934),
      U = a.r(30191),
      V = a.r(92487),
      W = a.r(95670),
      X = a.r(29933),
      Y = a.r(18715),
      Z = a.r(51380),
      $ = a.r(2175),
      _ = a.r(87979),
      aa = a.r(12597),
      ab = a.r(144),
      ac = a.r(7863),
      ad = a.r(40819),
      ae = a.r(71828),
      af = a.r(41802),
      ag = a.r(70694),
      ah = a.r(18323),
      ai = a.r(1704),
      aj = a.r(5819),
      ak = a.r(81548),
      al = a.r(16868),
      am = a.r(40421),
      an = a.r(74735),
      ao = a.r(88132),
      ap = a.r(8871),
      aq = a.r(96510),
      ar = a.r(12289),
      as = a.r(14329),
      at = a.r(31723),
      au = a.r(47605),
      av = a.r(42991),
      aw = a.r(43693),
      ax = a.r(54292),
      ay = a.r(2849),
      az = a.r(78713),
      aA = a.r(77885),
      aB = a.r(41754),
      aC = a.r(6325),
      aD = a.r(69232),
      aE = a.r(57010),
      aF = a.r(64341),
      aG = a.r(11677),
      aH = a.r(44409),
      aI = a.r(59242),
      aJ = a.r(97735),
      aK = a.r(43679),
      aL = a.r(61843),
      aM = a.r(17937),
      aN = a.r(21731),
      aO = a.r(78707),
      aP = a.r(66795),
      aQ = a.r(64796),
      aR = a.r(86453),
      aS = a.r(1805),
      aT = a.r(466),
      aU = a.r(27966),
      aV = a.r(87653),
      aW = a.r(3261),
      aX = a.r(59671),
      aY = a.r(12138),
      aZ = a.r(16492),
      a$ = a.r(50616),
      a_ = a.r(88577),
      a0 = a.r(48006),
      a1 = a.r(16073),
      a2 = a.r(86770),
      a3 = a.r(44681),
      a4 = a.r(53788),
      a5 = a.r(3568),
      a6 = a.r(66652),
      a7 = a.r(6176),
      a8 = a.r(9232),
      a9 = a.r(74898),
      ba = a.r(65889),
      bb = a.r(57277);
    ((c.registerSpanErrorInstrumentation = d.registerSpanErrorInstrumentation),
      (c.getCapturedScopesOnSpan = e.getCapturedScopesOnSpan),
      (c.setCapturedScopesOnSpan = e.setCapturedScopesOnSpan),
      (c.TRACING_DEFAULTS = f.TRACING_DEFAULTS),
      (c.startIdleSpan = f.startIdleSpan),
      (c.SentrySpan = g.SentrySpan),
      (c.SentryNonRecordingSpan = h.SentryNonRecordingSpan),
      (c.SPAN_STATUS_ERROR = i.SPAN_STATUS_ERROR),
      (c.SPAN_STATUS_OK = i.SPAN_STATUS_OK),
      (c.SPAN_STATUS_UNSET = i.SPAN_STATUS_UNSET),
      (c.getSpanStatusFromHttpCode = i.getSpanStatusFromHttpCode),
      (c.setHttpStatus = i.setHttpStatus),
      (c.continueTrace = j.continueTrace),
      (c.startInactiveSpan = j.startInactiveSpan),
      (c.startNewTrace = j.startNewTrace),
      (c.startSpan = j.startSpan),
      (c.startSpanManual = j.startSpanManual),
      (c.suppressTracing = j.suppressTracing),
      (c.withActiveSpan = j.withActiveSpan),
      (c.getDynamicSamplingContextFromClient = k.getDynamicSamplingContextFromClient),
      (c.getDynamicSamplingContextFromScope = k.getDynamicSamplingContextFromScope),
      (c.getDynamicSamplingContextFromSpan = k.getDynamicSamplingContextFromSpan),
      (c.spanToBaggageHeader = k.spanToBaggageHeader),
      (c.setMeasurement = l.setMeasurement),
      (c.timedEventsToMeasurements = l.timedEventsToMeasurements),
      (c.sampleSpan = m.sampleSpan),
      (c.logSpanEnd = n.logSpanEnd),
      (c.logSpanStart = n.logSpanStart),
      (c.SEMANTIC_ATTRIBUTE_CACHE_HIT = o.SEMANTIC_ATTRIBUTE_CACHE_HIT),
      (c.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = o.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE),
      (c.SEMANTIC_ATTRIBUTE_CACHE_KEY = o.SEMANTIC_ATTRIBUTE_CACHE_KEY),
      (c.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = o.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME),
      (c.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = o.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD),
      (c.SEMANTIC_ATTRIBUTE_PROFILE_ID = o.SEMANTIC_ATTRIBUTE_PROFILE_ID),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = o.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON =
        o.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = o.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE =
        o.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_OP = o.SEMANTIC_ATTRIBUTE_SENTRY_OP),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = o.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE =
        o.SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = o.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = o.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE),
      (c.SEMANTIC_ATTRIBUTE_URL_FULL = o.SEMANTIC_ATTRIBUTE_URL_FULL),
      (c.SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = o.SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE),
      (c.createEventEnvelope = p.createEventEnvelope),
      (c.createSessionEnvelope = p.createSessionEnvelope),
      (c.createSpanEnvelope = p.createSpanEnvelope),
      (c.addEventProcessor = q.addEventProcessor),
      (c.captureCheckIn = q.captureCheckIn),
      (c.captureEvent = q.captureEvent),
      (c.captureException = q.captureException),
      (c.captureMessage = q.captureMessage),
      (c.captureSession = q.captureSession),
      (c.close = q.close),
      (c.endSession = q.endSession),
      (c.flush = q.flush),
      (c.isEnabled = q.isEnabled),
      (c.isInitialized = q.isInitialized),
      (c.lastEventId = q.lastEventId),
      (c.setContext = q.setContext),
      (c.setExtra = q.setExtra),
      (c.setExtras = q.setExtras),
      (c.setTag = q.setTag),
      (c.setTags = q.setTags),
      (c.setUser = q.setUser),
      (c.startSession = q.startSession),
      (c.withMonitor = q.withMonitor),
      (c.getClient = r.getClient),
      (c.getCurrentScope = r.getCurrentScope),
      (c.getGlobalScope = r.getGlobalScope),
      (c.getIsolationScope = r.getIsolationScope),
      (c.getTraceContextFromScope = r.getTraceContextFromScope),
      (c.withIsolationScope = r.withIsolationScope),
      (c.withScope = r.withScope),
      (c.getDefaultCurrentScope = s.getDefaultCurrentScope),
      (c.getDefaultIsolationScope = s.getDefaultIsolationScope),
      (c.setAsyncContextStrategy = t.setAsyncContextStrategy),
      (c.getGlobalSingleton = u.getGlobalSingleton),
      (c.getMainCarrier = u.getMainCarrier),
      (c.closeSession = v.closeSession),
      (c.makeSession = v.makeSession),
      (c.updateSession = v.updateSession),
      (c.Scope = w.Scope),
      (c.notifyEventProcessors = x.notifyEventProcessors),
      (c.getEnvelopeEndpointWithUrlEncodedAuth = y.getEnvelopeEndpointWithUrlEncodedAuth),
      (c.getReportDialogEndpoint = y.getReportDialogEndpoint),
      (c.Client = z.Client),
      (c.ServerRuntimeClient = A.ServerRuntimeClient),
      (c.initAndBind = B.initAndBind),
      (c.setCurrentClient = B.setCurrentClient),
      (c.createTransport = C.createTransport),
      (c.makeOfflineTransport = D.makeOfflineTransport),
      (c.makeMultiplexedTransport = E.makeMultiplexedTransport),
      (c.addIntegration = F.addIntegration),
      (c.defineIntegration = F.defineIntegration),
      (c.getIntegrationsToSetup = F.getIntegrationsToSetup),
      (c.applyScopeDataToEvent = G.applyScopeDataToEvent),
      (c.mergeScopeData = G.mergeScopeData),
      (c.prepareEvent = H.prepareEvent),
      (c.createCheckInEnvelope = I.createCheckInEnvelope),
      (c.hasSpansEnabled = J.hasSpansEnabled),
      (c.isSentryRequestUrl = K.isSentryRequestUrl),
      (c.handleCallbackErrors = L.handleCallbackErrors),
      (c.fmt = M.fmt),
      (c.parameterize = M.parameterize),
      (c.addAutoIpAddressToSession = N.addAutoIpAddressToSession),
      (c.addAutoIpAddressToUser = N.addAutoIpAddressToUser),
      (c.addChildSpanToSpan = O.addChildSpanToSpan),
      (c.convertSpanLinksForEnvelope = O.convertSpanLinksForEnvelope),
      (c.getActiveSpan = O.getActiveSpan),
      (c.getRootSpan = O.getRootSpan),
      (c.getSpanDescendants = O.getSpanDescendants),
      (c.getStatusMessage = O.getStatusMessage),
      (c.spanIsSampled = O.spanIsSampled),
      (c.spanTimeInputToSeconds = O.spanTimeInputToSeconds),
      (c.spanToJSON = O.spanToJSON),
      (c.spanToTraceContext = O.spanToTraceContext),
      (c.spanToTraceHeader = O.spanToTraceHeader),
      (c.updateSpanName = O.updateSpanName),
      (c.parseSampleRate = P.parseSampleRate),
      (c.applySdkMetadata = Q.applySdkMetadata),
      (c.getTraceData = R.getTraceData),
      (c.getTraceMetaTags = S.getTraceMetaTags),
      (c.debounce = T.debounce),
      (c.extractQueryParamsFromUrl = U.extractQueryParamsFromUrl),
      (c.headersToDict = U.headersToDict),
      (c.httpRequestToRequestData = U.httpRequestToRequestData),
      (c.winterCGHeadersToDict = U.winterCGHeadersToDict),
      (c.winterCGRequestToRequestData = U.winterCGRequestToRequestData),
      (c.DEFAULT_ENVIRONMENT = V.DEFAULT_ENVIRONMENT),
      (c.addBreadcrumb = W.addBreadcrumb),
      (c.functionToStringIntegration = X.functionToStringIntegration),
      (c.eventFiltersIntegration = Y.eventFiltersIntegration),
      (c.inboundFiltersIntegration = Y.inboundFiltersIntegration),
      (c.linkedErrorsIntegration = Z.linkedErrorsIntegration),
      (c.moduleMetadataIntegration = $.moduleMetadataIntegration),
      (c.requestDataIntegration = _.requestDataIntegration),
      (c.captureConsoleIntegration = aa.captureConsoleIntegration),
      (c.dedupeIntegration = ab.dedupeIntegration),
      (c.extraErrorDataIntegration = ac.extraErrorDataIntegration),
      (c.rewriteFramesIntegration = ad.rewriteFramesIntegration),
      (c.instrumentSupabaseClient = ae.instrumentSupabaseClient),
      (c.supabaseIntegration = ae.supabaseIntegration),
      (c.zodErrorsIntegration = af.zodErrorsIntegration),
      (c.thirdPartyErrorFilterIntegration = ag.thirdPartyErrorFilterIntegration),
      (c.consoleIntegration = ah.consoleIntegration),
      (c.featureFlagsIntegration = ai.featureFlagsIntegration),
      (c.profiler = aj.profiler),
      (c.instrumentFetchRequest = ak.instrumentFetchRequest),
      (c.trpcMiddleware = al.trpcMiddleware),
      (c.wrapMcpServerWithSentry = am.wrapMcpServerWithSentry),
      (c.captureFeedback = an.captureFeedback),
      (c._INTERNAL_captureLog = ao._INTERNAL_captureLog),
      (c._INTERNAL_captureSerializedLog = ao._INTERNAL_captureSerializedLog),
      (c._INTERNAL_flushLogsBuffer = ao._INTERNAL_flushLogsBuffer),
      (c.consoleLoggingIntegration = ap.consoleLoggingIntegration),
      (c.addVercelAiProcessors = aq.addVercelAiProcessors),
      (c._INTERNAL_cleanupToolCallSpan = ar._INTERNAL_cleanupToolCallSpan),
      (c._INTERNAL_getSpanForToolCallId = ar._INTERNAL_getSpanForToolCallId),
      (c.instrumentOpenAiClient = as.instrumentOpenAiClient),
      (c.OPENAI_INTEGRATION_NAME = at.OPENAI_INTEGRATION_NAME),
      (c.instrumentAnthropicAiClient = au.instrumentAnthropicAiClient),
      (c.ANTHROPIC_AI_INTEGRATION_NAME = av.ANTHROPIC_AI_INTEGRATION_NAME),
      (c._INTERNAL_FLAG_BUFFER_SIZE = aw._INTERNAL_FLAG_BUFFER_SIZE),
      (c._INTERNAL_MAX_FLAGS_PER_SPAN = aw._INTERNAL_MAX_FLAGS_PER_SPAN),
      (c._INTERNAL_addFeatureFlagToActiveSpan = aw._INTERNAL_addFeatureFlagToActiveSpan),
      (c._INTERNAL_copyFlagsFromScopeToEvent = aw._INTERNAL_copyFlagsFromScopeToEvent),
      (c._INTERNAL_insertFlagToScope = aw._INTERNAL_insertFlagToScope),
      (c.applyAggregateErrorsToEvent = ax.applyAggregateErrorsToEvent),
      (c.getBreadcrumbLogLevelFromHttpStatusCode = ay.getBreadcrumbLogLevelFromHttpStatusCode),
      (c.getComponentName = az.getComponentName),
      (c.getLocationHref = az.getLocationHref),
      (c.htmlTreeAsString = az.htmlTreeAsString),
      (c.dsnFromString = aA.dsnFromString),
      (c.dsnToString = aA.dsnToString),
      (c.makeDsn = aA.makeDsn),
      (c.SentryError = aB.SentryError),
      (c.GLOBAL_OBJ = aC.GLOBAL_OBJ),
      (c.addConsoleInstrumentationHandler = aD.addConsoleInstrumentationHandler),
      (c.addFetchEndInstrumentationHandler = aE.addFetchEndInstrumentationHandler),
      (c.addFetchInstrumentationHandler = aE.addFetchInstrumentationHandler),
      (c.addGlobalErrorInstrumentationHandler = aF.addGlobalErrorInstrumentationHandler),
      (c.addGlobalUnhandledRejectionInstrumentationHandler =
        aG.addGlobalUnhandledRejectionInstrumentationHandler),
      (c.addHandler = aH.addHandler),
      (c.maybeInstrument = aH.maybeInstrument),
      (c.resetInstrumentationHandlers = aH.resetInstrumentationHandlers),
      (c.triggerHandlers = aH.triggerHandlers),
      (c.isDOMError = aI.isDOMError),
      (c.isDOMException = aI.isDOMException),
      (c.isElement = aI.isElement),
      (c.isError = aI.isError),
      (c.isErrorEvent = aI.isErrorEvent),
      (c.isEvent = aI.isEvent),
      (c.isInstanceOf = aI.isInstanceOf),
      (c.isParameterizedString = aI.isParameterizedString),
      (c.isPlainObject = aI.isPlainObject),
      (c.isPrimitive = aI.isPrimitive),
      (c.isRegExp = aI.isRegExp),
      (c.isString = aI.isString),
      (c.isSyntheticEvent = aI.isSyntheticEvent),
      (c.isThenable = aI.isThenable),
      (c.isVueViewModel = aI.isVueViewModel),
      (c.isBrowser = aJ.isBrowser),
      (c.CONSOLE_LEVELS = aK.CONSOLE_LEVELS),
      (c.consoleSandbox = aK.consoleSandbox),
      (c.debug = aK.debug),
      (c.originalConsoleMethods = aK.originalConsoleMethods),
      (c.addContextToFrame = aL.addContextToFrame),
      (c.addExceptionMechanism = aL.addExceptionMechanism),
      (c.addExceptionTypeValue = aL.addExceptionTypeValue),
      (c.checkOrSetAlreadyCaught = aL.checkOrSetAlreadyCaught),
      (c.getEventDescription = aL.getEventDescription),
      (c.parseSemver = aL.parseSemver),
      (c.uuid4 = aL.uuid4),
      (c.isNodeEnv = aM.isNodeEnv),
      (c.loadModule = aM.loadModule),
      (c.normalize = aN.normalize),
      (c.normalizeToSize = aN.normalizeToSize),
      (c.normalizeUrlToBase = aN.normalizeUrlToBase),
      (c.addNonEnumerableProperty = aO.addNonEnumerableProperty),
      (c.convertToPlainObject = aO.convertToPlainObject),
      (c.dropUndefinedKeys = aO.dropUndefinedKeys),
      (c.extractExceptionKeysForMessage = aO.extractExceptionKeysForMessage),
      (c.fill = aO.fill),
      (c.getOriginalFunction = aO.getOriginalFunction),
      (c.markFunctionWrapped = aO.markFunctionWrapped),
      (c.objectify = aO.objectify),
      (c.basename = aP.basename),
      (c.dirname = aP.dirname),
      (c.isAbsolute = aP.isAbsolute),
      (c.join = aP.join),
      (c.normalizePath = aP.normalizePath),
      (c.relative = aP.relative),
      (c.resolve = aP.resolve),
      (c.SENTRY_BUFFER_FULL_ERROR = aQ.SENTRY_BUFFER_FULL_ERROR),
      (c.makePromiseBuffer = aQ.makePromiseBuffer),
      (c.severityLevelFromString = aR.severityLevelFromString),
      (c.UNKNOWN_FUNCTION = aS.UNKNOWN_FUNCTION),
      (c.createStackParser = aS.createStackParser),
      (c.getFramesFromEvent = aS.getFramesFromEvent),
      (c.getFunctionName = aS.getFunctionName),
      (c.stackParserFromStackParserOptions = aS.stackParserFromStackParserOptions),
      (c.stripSentryFramesAndReverse = aS.stripSentryFramesAndReverse),
      (c.filenameIsInApp = aT.filenameIsInApp),
      (c.node = aT.node),
      (c.nodeStackLineParser = aT.nodeStackLineParser),
      (c.isMatchingPattern = aU.isMatchingPattern),
      (c.safeJoin = aU.safeJoin),
      (c.snipLine = aU.snipLine),
      (c.stringMatchesSomePattern = aU.stringMatchesSomePattern),
      (c.truncate = aU.truncate),
      (c.isNativeFunction = aV.isNativeFunction),
      (c.supportsDOMError = aV.supportsDOMError),
      (c.supportsDOMException = aV.supportsDOMException),
      (c.supportsErrorEvent = aV.supportsErrorEvent),
      (c.supportsFetch = aV.supportsFetch),
      (c.supportsHistory = aV.supportsHistory),
      (c.supportsNativeFetch = aV.supportsNativeFetch),
      (c.supportsReferrerPolicy = aV.supportsReferrerPolicy),
      (c.supportsReportingObserver = aV.supportsReportingObserver),
      (c.SyncPromise = aW.SyncPromise),
      (c.rejectedSyncPromise = aW.rejectedSyncPromise),
      (c.resolvedSyncPromise = aW.resolvedSyncPromise),
      (c.browserPerformanceTimeOrigin = aX.browserPerformanceTimeOrigin),
      (c.dateTimestampInSeconds = aX.dateTimestampInSeconds),
      (c.timestampInSeconds = aX.timestampInSeconds),
      (c.TRACEPARENT_REGEXP = aY.TRACEPARENT_REGEXP),
      (c.extractTraceparentData = aY.extractTraceparentData),
      (c.generateSentryTraceHeader = aY.generateSentryTraceHeader),
      (c.propagationContextFromHeaders = aY.propagationContextFromHeaders),
      (c.shouldContinueTrace = aY.shouldContinueTrace),
      (c.getSDKSource = aZ.getSDKSource),
      (c.isBrowserBundle = aZ.isBrowserBundle),
      (c.addItemToEnvelope = a$.addItemToEnvelope),
      (c.createAttachmentEnvelopeItem = a$.createAttachmentEnvelopeItem),
      (c.createEnvelope = a$.createEnvelope),
      (c.createEventEnvelopeHeaders = a$.createEventEnvelopeHeaders),
      (c.createSpanEnvelopeItem = a$.createSpanEnvelopeItem),
      (c.envelopeContainsItemType = a$.envelopeContainsItemType),
      (c.envelopeItemTypeToDataCategory = a$.envelopeItemTypeToDataCategory),
      (c.forEachEnvelopeItem = a$.forEachEnvelopeItem),
      (c.getSdkMetadataForEnvelopeHeader = a$.getSdkMetadataForEnvelopeHeader),
      (c.parseEnvelope = a$.parseEnvelope),
      (c.serializeEnvelope = a$.serializeEnvelope),
      (c.createClientReportEnvelope = a_.createClientReportEnvelope),
      (c.DEFAULT_RETRY_AFTER = a0.DEFAULT_RETRY_AFTER),
      (c.disabledUntil = a0.disabledUntil),
      (c.isRateLimited = a0.isRateLimited),
      (c.parseRetryAfterHeader = a0.parseRetryAfterHeader),
      (c.updateRateLimits = a0.updateRateLimits),
      (c.MAX_BAGGAGE_STRING_LENGTH = a1.MAX_BAGGAGE_STRING_LENGTH),
      (c.SENTRY_BAGGAGE_KEY_PREFIX = a1.SENTRY_BAGGAGE_KEY_PREFIX),
      (c.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = a1.SENTRY_BAGGAGE_KEY_PREFIX_REGEX),
      (c.baggageHeaderToDynamicSamplingContext = a1.baggageHeaderToDynamicSamplingContext),
      (c.dynamicSamplingContextToSentryBaggageHeader =
        a1.dynamicSamplingContextToSentryBaggageHeader),
      (c.objectToBaggageHeader = a1.objectToBaggageHeader),
      (c.parseBaggageHeader = a1.parseBaggageHeader),
      (c.getHttpSpanDetailsFromUrlObject = a2.getHttpSpanDetailsFromUrlObject),
      (c.getSanitizedUrlString = a2.getSanitizedUrlString),
      (c.getSanitizedUrlStringFromUrlObject = a2.getSanitizedUrlStringFromUrlObject),
      (c.isURLObjectRelative = a2.isURLObjectRelative),
      (c.parseStringToURLObject = a2.parseStringToURLObject),
      (c.parseUrl = a2.parseUrl),
      (c.stripUrlQueryAndFragment = a2.stripUrlQueryAndFragment),
      (c.eventFromMessage = a3.eventFromMessage),
      (c.eventFromUnknownInput = a3.eventFromUnknownInput),
      (c.exceptionFromError = a3.exceptionFromError),
      (c.parseStackFrames = a3.parseStackFrames),
      (c.callFrameToStackFrame = a4.callFrameToStackFrame),
      (c.watchdogTimer = a4.watchdogTimer),
      (c.LRUMap = a5.LRUMap),
      (c.generateSpanId = a6.generateSpanId),
      (c.generateTraceId = a6.generateTraceId),
      (c.vercelWaitUntil = a7.vercelWaitUntil),
      (c.flushIfServerless = a8.flushIfServerless),
      (c.SDK_VERSION = a9.SDK_VERSION),
      (c.getDebugImagesForResources = ba.getDebugImagesForResources),
      (c.getFilenameToDebugIdMap = ba.getFilenameToDebugIdMap),
      (c.escapeStringForRegex = bb.escapeStringForRegex));
  },
  734,
  (a) => {
    'use strict';
    a.s(['context', () => b]);
    var b = a.i(45883).ContextAPI.getInstance();
  },
  86010,
  43189,
  (a) => {
    'use strict';
    (a.s(['metrics', () => z], 86010),
      a.s(['NOOP_METER', () => m, 'createNoopMeter', () => u], 43189));
    var b = (function () {
        var a = function (b, c) {
          return (a =
            Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array &&
              function (a, b) {
                a.__proto__ = b;
              }) ||
            function (a, b) {
              for (var c in b) Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
            })(b, c);
        };
        return function (b, c) {
          if ('function' != typeof c && null !== c)
            throw TypeError('Class extends value ' + String(c) + ' is not a constructor or null');
          function d() {
            this.constructor = b;
          }
          (a(b, c),
            (b.prototype = null === c ? Object.create(c) : ((d.prototype = c.prototype), new d())));
        };
      })(),
      c = (function () {
        function a() {}
        return (
          (a.prototype.createGauge = function (a, b) {
            return o;
          }),
          (a.prototype.createHistogram = function (a, b) {
            return p;
          }),
          (a.prototype.createCounter = function (a, b) {
            return n;
          }),
          (a.prototype.createUpDownCounter = function (a, b) {
            return q;
          }),
          (a.prototype.createObservableGauge = function (a, b) {
            return s;
          }),
          (a.prototype.createObservableCounter = function (a, b) {
            return r;
          }),
          (a.prototype.createObservableUpDownCounter = function (a, b) {
            return t;
          }),
          (a.prototype.addBatchObservableCallback = function (a, b) {}),
          (a.prototype.removeBatchObservableCallback = function (a) {}),
          a
        );
      })(),
      d = function () {},
      e = (function (a) {
        function c() {
          return (null !== a && a.apply(this, arguments)) || this;
        }
        return (b(c, a), (c.prototype.add = function (a, b) {}), c);
      })(d),
      f = (function (a) {
        function c() {
          return (null !== a && a.apply(this, arguments)) || this;
        }
        return (b(c, a), (c.prototype.add = function (a, b) {}), c);
      })(d),
      g = (function (a) {
        function c() {
          return (null !== a && a.apply(this, arguments)) || this;
        }
        return (b(c, a), (c.prototype.record = function (a, b) {}), c);
      })(d),
      h = (function (a) {
        function c() {
          return (null !== a && a.apply(this, arguments)) || this;
        }
        return (b(c, a), (c.prototype.record = function (a, b) {}), c);
      })(d),
      i = (function () {
        function a() {}
        return (
          (a.prototype.addCallback = function (a) {}),
          (a.prototype.removeCallback = function (a) {}),
          a
        );
      })(),
      j = (function (a) {
        function c() {
          return (null !== a && a.apply(this, arguments)) || this;
        }
        return (b(c, a), c);
      })(i),
      k = (function (a) {
        function c() {
          return (null !== a && a.apply(this, arguments)) || this;
        }
        return (b(c, a), c);
      })(i),
      l = (function (a) {
        function c() {
          return (null !== a && a.apply(this, arguments)) || this;
        }
        return (b(c, a), c);
      })(i),
      m = new c(),
      n = new e(),
      o = new g(),
      p = new h(),
      q = new f(),
      r = new j(),
      s = new k(),
      t = new l();
    function u() {
      return m;
    }
    var v = new ((function () {
        function a() {}
        return (
          (a.prototype.getMeter = function (a, b, c) {
            return m;
          }),
          a
        );
      })())(),
      w = a.i(65791),
      x = a.i(48289),
      y = 'metrics',
      z = (function () {
        function a() {}
        return (
          (a.getInstance = function () {
            return (this._instance || (this._instance = new a()), this._instance);
          }),
          (a.prototype.setGlobalMeterProvider = function (a) {
            return (0, w.registerGlobal)(y, a, x.DiagAPI.instance());
          }),
          (a.prototype.getMeterProvider = function () {
            return (0, w.getGlobal)(y) || v;
          }),
          (a.prototype.getMeter = function (a, b, c) {
            return this.getMeterProvider().getMeter(a, b, c);
          }),
          (a.prototype.disable = function () {
            (0, w.unregisterGlobal)(y, x.DiagAPI.instance());
          }),
          a
        );
      })().getInstance();
  },
  2561,
  80948,
  34090,
  (a) => {
    'use strict';
    a.s(['propagation', () => v], 2561);
    var b = a.i(65791),
      c = (function () {
        function a() {}
        return (
          (a.prototype.inject = function (a, b) {}),
          (a.prototype.extract = function (a, b) {
            return a;
          }),
          (a.prototype.fields = function () {
            return [];
          }),
          a
        );
      })();
    a.s(['defaultTextMapGetter', () => d, 'defaultTextMapSetter', () => e], 80948);
    var d = {
        get: function (a, b) {
          if (null != a) return a[b];
        },
        keys: function (a) {
          return null == a ? [] : Object.keys(a);
        },
      },
      e = {
        set: function (a, b, c) {
          null != a && (a[b] = c);
        },
      },
      f = a.i(45883),
      g = (0, a.i(33871).createContextKey)('OpenTelemetry Baggage Key');
    function h(a) {
      return a.getValue(g) || void 0;
    }
    function i() {
      return h(f.ContextAPI.getInstance().active());
    }
    function j(a, b) {
      return a.setValue(g, b);
    }
    function k(a) {
      return a.deleteValue(g);
    }
    a.s(['baggageEntryMetadataFromString', () => s, 'createBaggage', () => r], 34090);
    var l = a.i(48289),
      m = function (a, b) {
        var c = 'function' == typeof Symbol && a[Symbol.iterator];
        if (!c) return a;
        var d,
          e,
          f = c.call(a),
          g = [];
        try {
          for (; (void 0 === b || b-- > 0) && !(d = f.next()).done; ) g.push(d.value);
        } catch (a) {
          e = { error: a };
        } finally {
          try {
            d && !d.done && (c = f.return) && c.call(f);
          } finally {
            if (e) throw e.error;
          }
        }
        return g;
      },
      n = function (a) {
        var b = 'function' == typeof Symbol && Symbol.iterator,
          c = b && a[b],
          d = 0;
        if (c) return c.call(a);
        if (a && 'number' == typeof a.length)
          return {
            next: function () {
              return (a && d >= a.length && (a = void 0), { value: a && a[d++], done: !a });
            },
          };
        throw TypeError(b ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      },
      o = (function () {
        function a(a) {
          this._entries = a ? new Map(a) : new Map();
        }
        return (
          (a.prototype.getEntry = function (a) {
            var b = this._entries.get(a);
            if (b) return Object.assign({}, b);
          }),
          (a.prototype.getAllEntries = function () {
            return Array.from(this._entries.entries()).map(function (a) {
              var b = m(a, 2);
              return [b[0], b[1]];
            });
          }),
          (a.prototype.setEntry = function (b, c) {
            var d = new a(this._entries);
            return (d._entries.set(b, c), d);
          }),
          (a.prototype.removeEntry = function (b) {
            var c = new a(this._entries);
            return (c._entries.delete(b), c);
          }),
          (a.prototype.removeEntries = function () {
            for (var b, c, d = [], e = 0; e < arguments.length; e++) d[e] = arguments[e];
            var f = new a(this._entries);
            try {
              for (var g = n(d), h = g.next(); !h.done; h = g.next()) {
                var i = h.value;
                f._entries.delete(i);
              }
            } catch (a) {
              b = { error: a };
            } finally {
              try {
                h && !h.done && (c = g.return) && c.call(g);
              } finally {
                if (b) throw b.error;
              }
            }
            return f;
          }),
          (a.prototype.clear = function () {
            return new a();
          }),
          a
        );
      })(),
      p = Symbol('BaggageEntryMetadata'),
      q = l.DiagAPI.instance();
    function r(a) {
      return (void 0 === a && (a = {}), new o(new Map(Object.entries(a))));
    }
    function s(a) {
      return (
        'string' != typeof a &&
          (q.error('Cannot create baggage metadata from unknown type: ' + typeof a), (a = '')),
        {
          __TYPE__: p,
          toString: function () {
            return a;
          },
        }
      );
    }
    var t = 'propagation',
      u = new c(),
      v = (function () {
        function a() {
          ((this.createBaggage = r),
            (this.getBaggage = h),
            (this.getActiveBaggage = i),
            (this.setBaggage = j),
            (this.deleteBaggage = k));
        }
        return (
          (a.getInstance = function () {
            return (this._instance || (this._instance = new a()), this._instance);
          }),
          (a.prototype.setGlobalPropagator = function (a) {
            return (0, b.registerGlobal)(t, a, l.DiagAPI.instance());
          }),
          (a.prototype.inject = function (a, b, c) {
            return (void 0 === c && (c = e), this._getGlobalPropagator().inject(a, b, c));
          }),
          (a.prototype.extract = function (a, b, c) {
            return (void 0 === c && (c = d), this._getGlobalPropagator().extract(a, b, c));
          }),
          (a.prototype.fields = function () {
            return this._getGlobalPropagator().fields();
          }),
          (a.prototype.disable = function () {
            (0, b.unregisterGlobal)(t, l.DiagAPI.instance());
          }),
          (a.prototype._getGlobalPropagator = function () {
            return (0, b.getGlobal)(t) || u;
          }),
          a
        );
      })().getInstance();
  },
  45883,
  33871,
  26200,
  1879,
  32739,
  54735,
  52580,
  73609,
  (a) => {
    'use strict';
    function b(a) {
      return Symbol.for(a);
    }
    (a.s(['ContextAPI', () => n], 45883),
      a.s(['ROOT_CONTEXT', () => d, 'createContextKey', () => b], 33871));
    var c,
      d = new (function a(b) {
        var c = this;
        ((c._currentContext = b ? new Map(b) : new Map()),
          (c.getValue = function (a) {
            return c._currentContext.get(a);
          }),
          (c.setValue = function (b, d) {
            var e = new a(c._currentContext);
            return (e._currentContext.set(b, d), e);
          }),
          (c.deleteValue = function (b) {
            var d = new a(c._currentContext);
            return (d._currentContext.delete(b), d);
          }));
      })(),
      e = function (a, b) {
        var c = 'function' == typeof Symbol && a[Symbol.iterator];
        if (!c) return a;
        var d,
          e,
          f = c.call(a),
          g = [];
        try {
          for (; (void 0 === b || b-- > 0) && !(d = f.next()).done; ) g.push(d.value);
        } catch (a) {
          e = { error: a };
        } finally {
          try {
            d && !d.done && (c = f.return) && c.call(f);
          } finally {
            if (e) throw e.error;
          }
        }
        return g;
      },
      f = function (a, b, c) {
        if (c || 2 == arguments.length)
          for (var d, e = 0, f = b.length; e < f; e++)
            (!d && e in b) || (d || (d = Array.prototype.slice.call(b, 0, e)), (d[e] = b[e]));
        return a.concat(d || Array.prototype.slice.call(b));
      },
      g = (function () {
        function a() {}
        return (
          (a.prototype.active = function () {
            return d;
          }),
          (a.prototype.with = function (a, b, c) {
            for (var d = [], g = 3; g < arguments.length; g++) d[g - 3] = arguments[g];
            return b.call.apply(b, f([c], e(d), !1));
          }),
          (a.prototype.bind = function (a, b) {
            return b;
          }),
          (a.prototype.enable = function () {
            return this;
          }),
          (a.prototype.disable = function () {
            return this;
          }),
          a
        );
      })(),
      h = a.i(65791),
      i = a.i(48289),
      j = function (a, b) {
        var c = 'function' == typeof Symbol && a[Symbol.iterator];
        if (!c) return a;
        var d,
          e,
          f = c.call(a),
          g = [];
        try {
          for (; (void 0 === b || b-- > 0) && !(d = f.next()).done; ) g.push(d.value);
        } catch (a) {
          e = { error: a };
        } finally {
          try {
            d && !d.done && (c = f.return) && c.call(f);
          } finally {
            if (e) throw e.error;
          }
        }
        return g;
      },
      k = function (a, b, c) {
        if (c || 2 == arguments.length)
          for (var d, e = 0, f = b.length; e < f; e++)
            (!d && e in b) || (d || (d = Array.prototype.slice.call(b, 0, e)), (d[e] = b[e]));
        return a.concat(d || Array.prototype.slice.call(b));
      },
      l = 'context',
      m = new g(),
      n = (function () {
        function a() {}
        return (
          (a.getInstance = function () {
            return (this._instance || (this._instance = new a()), this._instance);
          }),
          (a.prototype.setGlobalContextManager = function (a) {
            return (0, h.registerGlobal)(l, a, i.DiagAPI.instance());
          }),
          (a.prototype.active = function () {
            return this._getContextManager().active();
          }),
          (a.prototype.with = function (a, b, c) {
            for (var d, e = [], f = 3; f < arguments.length; f++) e[f - 3] = arguments[f];
            return (d = this._getContextManager()).with.apply(d, k([a, b, c], j(e), !1));
          }),
          (a.prototype.bind = function (a, b) {
            return this._getContextManager().bind(a, b);
          }),
          (a.prototype._getContextManager = function () {
            return (0, h.getGlobal)(l) || m;
          }),
          (a.prototype.disable = function () {
            (this._getContextManager().disable(), (0, h.unregisterGlobal)(l, i.DiagAPI.instance()));
          }),
          a
        );
      })();
    (a.s(['trace', () => M], 73609),
      a.s(['ProxyTracerProvider', () => K], 52580),
      a.s(['ProxyTracer', () => I], 54735),
      a.s(
        ['INVALID_SPANID', () => o, 'INVALID_SPAN_CONTEXT', () => q, 'INVALID_TRACEID', () => p],
        1879
      ),
      a.s(['TraceFlags', () => c], 26200),
      (function (a) {
        ((a[(a.NONE = 0)] = 'NONE'), (a[(a.SAMPLED = 1)] = 'SAMPLED'));
      })(c || (c = {})));
    var o = '0000000000000000',
      p = '00000000000000000000000000000000',
      q = { traceId: p, spanId: o, traceFlags: c.NONE },
      r = (function () {
        function a(a) {
          (void 0 === a && (a = q), (this._spanContext = a));
        }
        return (
          (a.prototype.spanContext = function () {
            return this._spanContext;
          }),
          (a.prototype.setAttribute = function (a, b) {
            return this;
          }),
          (a.prototype.setAttributes = function (a) {
            return this;
          }),
          (a.prototype.addEvent = function (a, b) {
            return this;
          }),
          (a.prototype.addLink = function (a) {
            return this;
          }),
          (a.prototype.addLinks = function (a) {
            return this;
          }),
          (a.prototype.setStatus = function (a) {
            return this;
          }),
          (a.prototype.updateName = function (a) {
            return this;
          }),
          (a.prototype.end = function (a) {}),
          (a.prototype.isRecording = function () {
            return !1;
          }),
          (a.prototype.recordException = function (a, b) {}),
          a
        );
      })(),
      s = b('OpenTelemetry Context Key SPAN');
    function t(a) {
      return a.getValue(s) || void 0;
    }
    function u() {
      return t(n.getInstance().active());
    }
    function v(a, b) {
      return a.setValue(s, b);
    }
    function w(a) {
      return a.deleteValue(s);
    }
    function x(a, b) {
      return v(a, new r(b));
    }
    function y(a) {
      var b;
      return null == (b = t(a)) ? void 0 : b.spanContext();
    }
    a.s(
      [
        'isSpanContextValid',
        () => D,
        'isValidSpanId',
        () => C,
        'isValidTraceId',
        () => B,
        'wrapSpanContext',
        () => E,
      ],
      32739
    );
    var z = /^([0-9a-f]{32})$/i,
      A = /^[0-9a-f]{16}$/i;
    function B(a) {
      return z.test(a) && a !== p;
    }
    function C(a) {
      return A.test(a) && a !== o;
    }
    function D(a) {
      return B(a.traceId) && C(a.spanId);
    }
    function E(a) {
      return new r(a);
    }
    var F = n.getInstance(),
      G = (function () {
        function a() {}
        return (
          (a.prototype.startSpan = function (a, b, c) {
            if ((void 0 === c && (c = F.active()), null == b ? void 0 : b.root)) return new r();
            var d,
              e = c && y(c);
            return 'object' == typeof (d = e) &&
              'string' == typeof d.spanId &&
              'string' == typeof d.traceId &&
              'number' == typeof d.traceFlags &&
              D(e)
              ? new r(e)
              : new r();
          }),
          (a.prototype.startActiveSpan = function (a, b, c, d) {
            if (!(arguments.length < 2)) {
              2 == arguments.length
                ? (g = b)
                : 3 == arguments.length
                  ? ((e = b), (g = c))
                  : ((e = b), (f = c), (g = d));
              var e,
                f,
                g,
                h = null != f ? f : F.active(),
                i = this.startSpan(a, e, h),
                j = v(h, i);
              return F.with(j, g, void 0, i);
            }
          }),
          a
        );
      })(),
      H = new G(),
      I = (function () {
        function a(a, b, c, d) {
          ((this._provider = a), (this.name = b), (this.version = c), (this.options = d));
        }
        return (
          (a.prototype.startSpan = function (a, b, c) {
            return this._getTracer().startSpan(a, b, c);
          }),
          (a.prototype.startActiveSpan = function (a, b, c, d) {
            var e = this._getTracer();
            return Reflect.apply(e.startActiveSpan, e, arguments);
          }),
          (a.prototype._getTracer = function () {
            if (this._delegate) return this._delegate;
            var a = this._provider.getDelegateTracer(this.name, this.version, this.options);
            return a ? ((this._delegate = a), this._delegate) : H;
          }),
          a
        );
      })(),
      J = new ((function () {
        function a() {}
        return (
          (a.prototype.getTracer = function (a, b, c) {
            return new G();
          }),
          a
        );
      })())(),
      K = (function () {
        function a() {}
        return (
          (a.prototype.getTracer = function (a, b, c) {
            var d;
            return null != (d = this.getDelegateTracer(a, b, c)) ? d : new I(this, a, b, c);
          }),
          (a.prototype.getDelegate = function () {
            var a;
            return null != (a = this._delegate) ? a : J;
          }),
          (a.prototype.setDelegate = function (a) {
            this._delegate = a;
          }),
          (a.prototype.getDelegateTracer = function (a, b, c) {
            var d;
            return null == (d = this._delegate) ? void 0 : d.getTracer(a, b, c);
          }),
          a
        );
      })(),
      L = 'trace',
      M = (function () {
        function a() {
          ((this._proxyTracerProvider = new K()),
            (this.wrapSpanContext = E),
            (this.isSpanContextValid = D),
            (this.deleteSpan = w),
            (this.getSpan = t),
            (this.getActiveSpan = u),
            (this.getSpanContext = y),
            (this.setSpan = v),
            (this.setSpanContext = x));
        }
        return (
          (a.getInstance = function () {
            return (this._instance || (this._instance = new a()), this._instance);
          }),
          (a.prototype.setGlobalTracerProvider = function (a) {
            var b = (0, h.registerGlobal)(L, this._proxyTracerProvider, i.DiagAPI.instance());
            return (b && this._proxyTracerProvider.setDelegate(a), b);
          }),
          (a.prototype.getTracerProvider = function () {
            return (0, h.getGlobal)(L) || this._proxyTracerProvider;
          }),
          (a.prototype.getTracer = function (a, b) {
            return this.getTracerProvider().getTracer(a, b);
          }),
          (a.prototype.disable = function () {
            ((0, h.unregisterGlobal)(L, i.DiagAPI.instance()),
              (this._proxyTracerProvider = new K()));
          }),
          a
        );
      })().getInstance();
  },
  79616,
  38998,
  23216,
  (a) => {
    'use strict';
    var b, c, d;
    (a.s(['SamplingDecision', () => b], 79616),
      (function (a) {
        ((a[(a.NOT_RECORD = 0)] = 'NOT_RECORD'),
          (a[(a.RECORD = 1)] = 'RECORD'),
          (a[(a.RECORD_AND_SAMPLED = 2)] = 'RECORD_AND_SAMPLED'));
      })(b || (b = {})),
      a.s(['SpanKind', () => c], 38998),
      (function (a) {
        ((a[(a.INTERNAL = 0)] = 'INTERNAL'),
          (a[(a.SERVER = 1)] = 'SERVER'),
          (a[(a.CLIENT = 2)] = 'CLIENT'),
          (a[(a.PRODUCER = 3)] = 'PRODUCER'),
          (a[(a.CONSUMER = 4)] = 'CONSUMER'));
      })(c || (c = {})),
      a.s(['SpanStatusCode', () => d], 23216),
      (function (a) {
        ((a[(a.UNSET = 0)] = 'UNSET'), (a[(a.OK = 1)] = 'OK'), (a[(a.ERROR = 2)] = 'ERROR'));
      })(d || (d = {})));
  },
  77674,
  (a) => {
    'use strict';
    (a.s(
      [
        'DiagConsoleLogger',
        () => l,
        'DiagLogLevel',
        () => m.DiagLogLevel,
        'INVALID_SPANID',
        () => C.INVALID_SPANID,
        'INVALID_SPAN_CONTEXT',
        () => C.INVALID_SPAN_CONTEXT,
        'INVALID_TRACEID',
        () => C.INVALID_TRACEID,
        'ProxyTracer',
        () => p.ProxyTracer,
        'ProxyTracerProvider',
        () => q.ProxyTracerProvider,
        'ROOT_CONTEXT',
        () => j.ROOT_CONTEXT,
        'SamplingDecision',
        () => r.SamplingDecision,
        'SpanKind',
        () => s.SpanKind,
        'SpanStatusCode',
        () => t.SpanStatusCode,
        'TraceFlags',
        () => u.TraceFlags,
        'ValueType',
        () => b,
        'baggageEntryMetadataFromString',
        () => i.baggageEntryMetadataFromString,
        'context',
        () => D.context,
        'createContextKey',
        () => j.createContextKey,
        'createNoopMeter',
        () => n.createNoopMeter,
        'createTraceState',
        () => A,
        'default',
        () => h,
        'defaultTextMapGetter',
        () => o.defaultTextMapGetter,
        'defaultTextMapSetter',
        () => o.defaultTextMapSetter,
        'diag',
        () => E.diag,
        'isSpanContextValid',
        () => B.isSpanContextValid,
        'isValidSpanId',
        () => B.isValidSpanId,
        'isValidTraceId',
        () => B.isValidTraceId,
        'metrics',
        () => F.metrics,
        'propagation',
        () => G.propagation,
        'trace',
        () => H.trace,
      ],
      77674
    ),
      a.s(['default', () => h], 83406));
    var b,
      c = a.i(734),
      d = a.i(84151),
      e = a.i(86010),
      f = a.i(2561),
      g = a.i(73609);
    let h = {
      context: c.context,
      diag: d.diag,
      metrics: e.metrics,
      propagation: f.propagation,
      trace: g.trace,
    };
    a.i(83406);
    var i = a.i(34090),
      j = a.i(33871),
      k = [
        { n: 'error', c: 'error' },
        { n: 'warn', c: 'warn' },
        { n: 'info', c: 'info' },
        { n: 'debug', c: 'debug' },
        { n: 'verbose', c: 'trace' },
      ],
      l = function () {
        for (var a = 0; a < k.length; a++)
          this[k[a].n] = (function (a) {
            return function () {
              for (var b = [], c = 0; c < arguments.length; c++) b[c] = arguments[c];
              if (console) {
                var d = console[a];
                if (('function' != typeof d && (d = console.log), 'function' == typeof d))
                  return d.apply(console, b);
              }
            };
          })(k[a].c);
      },
      m = a.i(35434),
      n = a.i(43189);
    !(function (a) {
      ((a[(a.INT = 0)] = 'INT'), (a[(a.DOUBLE = 1)] = 'DOUBLE'));
    })(b || (b = {}));
    var o = a.i(80948),
      p = a.i(54735),
      q = a.i(52580),
      r = a.i(79616),
      s = a.i(38998),
      t = a.i(23216),
      u = a.i(26200),
      v = '[_0-9a-z-*/]',
      w = RegExp(
        '^(?:[a-z]' + v + '{0,255}|' + ('[a-z0-9]' + v + '{0,240}@[a-z]') + v + '{0,13})$'
      ),
      x = /^[ -~]{0,255}[!-~]$/,
      y = /,|=/,
      z = (function () {
        function a(a) {
          ((this._internalState = new Map()), a && this._parse(a));
        }
        return (
          (a.prototype.set = function (a, b) {
            var c = this._clone();
            return (
              c._internalState.has(a) && c._internalState.delete(a),
              c._internalState.set(a, b),
              c
            );
          }),
          (a.prototype.unset = function (a) {
            var b = this._clone();
            return (b._internalState.delete(a), b);
          }),
          (a.prototype.get = function (a) {
            return this._internalState.get(a);
          }),
          (a.prototype.serialize = function () {
            var a = this;
            return this._keys()
              .reduce(function (b, c) {
                return (b.push(c + '=' + a.get(c)), b);
              }, [])
              .join(',');
          }),
          (a.prototype._parse = function (a) {
            !(a.length > 512) &&
              ((this._internalState = a
                .split(',')
                .reverse()
                .reduce(function (a, b) {
                  var c = b.trim(),
                    d = c.indexOf('=');
                  if (-1 !== d) {
                    var e = c.slice(0, d),
                      f = c.slice(d + 1, b.length);
                    w.test(e) && x.test(f) && !y.test(f) && a.set(e, f);
                  }
                  return a;
                }, new Map())),
              this._internalState.size > 32 &&
                (this._internalState = new Map(
                  Array.from(this._internalState.entries()).reverse().slice(0, 32)
                )));
          }),
          (a.prototype._keys = function () {
            return Array.from(this._internalState.keys()).reverse();
          }),
          (a.prototype._clone = function () {
            var b = new a();
            return ((b._internalState = new Map(this._internalState)), b);
          }),
          a
        );
      })();
    function A(a) {
      return new z(a);
    }
    var B = a.i(32739),
      C = a.i(1879),
      D = c,
      E = d,
      F = e,
      G = f,
      H = g;
  },
  79833,
  (a) => {
    'use strict';
    a.s([
      'ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED',
      () => c,
      'ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED',
      () => d,
      'ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED',
      () => e,
      'ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED',
      () => f,
      'ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED',
      () => j,
      'ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER',
      () => k,
      'ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER',
      () => l,
      'ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED',
      () => m,
      'ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE',
      () => q,
      'ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS',
      () => r,
      'ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT',
      () => b,
      'ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE',
      () => g,
      'ATTR_ASPNETCORE_RATE_LIMITING_POLICY',
      () => h,
      'ATTR_ASPNETCORE_RATE_LIMITING_RESULT',
      () => i,
      'ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED',
      () => n,
      'ATTR_ASPNETCORE_ROUTING_IS_FALLBACK',
      () => o,
      'ATTR_ASPNETCORE_ROUTING_MATCH_STATUS',
      () => p,
      'ATTR_ASPNETCORE_USER_IS_AUTHENTICATED',
      () => s,
      'ATTR_CLIENT_ADDRESS',
      () => t,
      'ATTR_CLIENT_PORT',
      () => u,
      'ATTR_CODE_COLUMN_NUMBER',
      () => v,
      'ATTR_CODE_FILE_PATH',
      () => w,
      'ATTR_CODE_FUNCTION_NAME',
      () => x,
      'ATTR_CODE_LINE_NUMBER',
      () => y,
      'ATTR_CODE_STACKTRACE',
      () => z,
      'ATTR_DB_COLLECTION_NAME',
      () => A,
      'ATTR_DB_NAMESPACE',
      () => B,
      'ATTR_DB_OPERATION_BATCH_SIZE',
      () => C,
      'ATTR_DB_OPERATION_NAME',
      () => D,
      'ATTR_DB_QUERY_SUMMARY',
      () => E,
      'ATTR_DB_QUERY_TEXT',
      () => F,
      'ATTR_DB_RESPONSE_STATUS_CODE',
      () => G,
      'ATTR_DB_STORED_PROCEDURE_NAME',
      () => H,
      'ATTR_DB_SYSTEM_NAME',
      () => I,
      'ATTR_DOTNET_GC_HEAP_GENERATION',
      () => N,
      'ATTR_ERROR_TYPE',
      () => T,
      'ATTR_EXCEPTION_ESCAPED',
      () => V,
      'ATTR_EXCEPTION_MESSAGE',
      () => W,
      'ATTR_EXCEPTION_STACKTRACE',
      () => X,
      'ATTR_EXCEPTION_TYPE',
      () => Y,
      'ATTR_HTTP_REQUEST_HEADER',
      () => Z,
      'ATTR_HTTP_REQUEST_METHOD',
      () => $,
      'ATTR_HTTP_REQUEST_METHOD_ORIGINAL',
      () => aj,
      'ATTR_HTTP_REQUEST_RESEND_COUNT',
      () => ak,
      'ATTR_HTTP_RESPONSE_HEADER',
      () => al,
      'ATTR_HTTP_RESPONSE_STATUS_CODE',
      () => am,
      'ATTR_HTTP_ROUTE',
      () => an,
      'ATTR_JVM_GC_ACTION',
      () => ao,
      'ATTR_JVM_GC_NAME',
      () => ap,
      'ATTR_JVM_MEMORY_POOL_NAME',
      () => aq,
      'ATTR_JVM_MEMORY_TYPE',
      () => ar,
      'ATTR_JVM_THREAD_DAEMON',
      () => au,
      'ATTR_JVM_THREAD_STATE',
      () => av,
      'ATTR_NETWORK_LOCAL_ADDRESS',
      () => aC,
      'ATTR_NETWORK_LOCAL_PORT',
      () => aD,
      'ATTR_NETWORK_PEER_ADDRESS',
      () => aE,
      'ATTR_NETWORK_PEER_PORT',
      () => aF,
      'ATTR_NETWORK_PROTOCOL_NAME',
      () => aG,
      'ATTR_NETWORK_PROTOCOL_VERSION',
      () => aH,
      'ATTR_NETWORK_TRANSPORT',
      () => aI,
      'ATTR_NETWORK_TYPE',
      () => aO,
      'ATTR_OTEL_SCOPE_NAME',
      () => aR,
      'ATTR_OTEL_SCOPE_VERSION',
      () => aS,
      'ATTR_OTEL_STATUS_CODE',
      () => aT,
      'ATTR_OTEL_STATUS_DESCRIPTION',
      () => aW,
      'ATTR_SERVER_ADDRESS',
      () => aX,
      'ATTR_SERVER_PORT',
      () => aY,
      'ATTR_SERVICE_NAME',
      () => aZ,
      'ATTR_SERVICE_VERSION',
      () => a$,
      'ATTR_SIGNALR_CONNECTION_STATUS',
      () => a_,
      'ATTR_SIGNALR_TRANSPORT',
      () => a3,
      'ATTR_TELEMETRY_SDK_LANGUAGE',
      () => a7,
      'ATTR_TELEMETRY_SDK_NAME',
      () => bk,
      'ATTR_TELEMETRY_SDK_VERSION',
      () => bl,
      'ATTR_URL_FRAGMENT',
      () => bm,
      'ATTR_URL_FULL',
      () => bn,
      'ATTR_URL_PATH',
      () => bo,
      'ATTR_URL_QUERY',
      () => bp,
      'ATTR_URL_SCHEME',
      () => bq,
      'ATTR_USER_AGENT_ORIGINAL',
      () => br,
      'DB_SYSTEM_NAME_VALUE_MARIADB',
      () => J,
      'DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER',
      () => K,
      'DB_SYSTEM_NAME_VALUE_MYSQL',
      () => L,
      'DB_SYSTEM_NAME_VALUE_POSTGRESQL',
      () => M,
      'DOTNET_GC_HEAP_GENERATION_VALUE_GEN0',
      () => O,
      'DOTNET_GC_HEAP_GENERATION_VALUE_GEN1',
      () => P,
      'DOTNET_GC_HEAP_GENERATION_VALUE_GEN2',
      () => Q,
      'DOTNET_GC_HEAP_GENERATION_VALUE_LOH',
      () => R,
      'DOTNET_GC_HEAP_GENERATION_VALUE_POH',
      () => S,
      'ERROR_TYPE_VALUE_OTHER',
      () => U,
      'HTTP_REQUEST_METHOD_VALUE_CONNECT',
      () => aa,
      'HTTP_REQUEST_METHOD_VALUE_DELETE',
      () => ab,
      'HTTP_REQUEST_METHOD_VALUE_GET',
      () => ac,
      'HTTP_REQUEST_METHOD_VALUE_HEAD',
      () => ad,
      'HTTP_REQUEST_METHOD_VALUE_OPTIONS',
      () => ae,
      'HTTP_REQUEST_METHOD_VALUE_OTHER',
      () => _,
      'HTTP_REQUEST_METHOD_VALUE_PATCH',
      () => af,
      'HTTP_REQUEST_METHOD_VALUE_POST',
      () => ag,
      'HTTP_REQUEST_METHOD_VALUE_PUT',
      () => ah,
      'HTTP_REQUEST_METHOD_VALUE_TRACE',
      () => ai,
      'JVM_MEMORY_TYPE_VALUE_HEAP',
      () => as,
      'JVM_MEMORY_TYPE_VALUE_NON_HEAP',
      () => at,
      'JVM_THREAD_STATE_VALUE_BLOCKED',
      () => aw,
      'JVM_THREAD_STATE_VALUE_NEW',
      () => ax,
      'JVM_THREAD_STATE_VALUE_RUNNABLE',
      () => ay,
      'JVM_THREAD_STATE_VALUE_TERMINATED',
      () => az,
      'JVM_THREAD_STATE_VALUE_TIMED_WAITING',
      () => aA,
      'JVM_THREAD_STATE_VALUE_WAITING',
      () => aB,
      'NETWORK_TRANSPORT_VALUE_PIPE',
      () => aJ,
      'NETWORK_TRANSPORT_VALUE_QUIC',
      () => aK,
      'NETWORK_TRANSPORT_VALUE_TCP',
      () => aL,
      'NETWORK_TRANSPORT_VALUE_UDP',
      () => aM,
      'NETWORK_TRANSPORT_VALUE_UNIX',
      () => aN,
      'NETWORK_TYPE_VALUE_IPV4',
      () => aP,
      'NETWORK_TYPE_VALUE_IPV6',
      () => aQ,
      'OTEL_STATUS_CODE_VALUE_ERROR',
      () => aU,
      'OTEL_STATUS_CODE_VALUE_OK',
      () => aV,
      'SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN',
      () => a0,
      'SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE',
      () => a1,
      'SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT',
      () => a2,
      'SIGNALR_TRANSPORT_VALUE_LONG_POLLING',
      () => a4,
      'SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS',
      () => a5,
      'SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS',
      () => a6,
      'TELEMETRY_SDK_LANGUAGE_VALUE_CPP',
      () => a8,
      'TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET',
      () => a9,
      'TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG',
      () => ba,
      'TELEMETRY_SDK_LANGUAGE_VALUE_GO',
      () => bb,
      'TELEMETRY_SDK_LANGUAGE_VALUE_JAVA',
      () => bc,
      'TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS',
      () => bd,
      'TELEMETRY_SDK_LANGUAGE_VALUE_PHP',
      () => be,
      'TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON',
      () => bf,
      'TELEMETRY_SDK_LANGUAGE_VALUE_RUBY',
      () => bg,
      'TELEMETRY_SDK_LANGUAGE_VALUE_RUST',
      () => bh,
      'TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT',
      () => bi,
      'TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS',
      () => bj,
    ]);
    let b = 'aspnetcore.diagnostics.exception.result',
      c = 'aborted',
      d = 'handled',
      e = 'skipped',
      f = 'unhandled',
      g = 'aspnetcore.diagnostics.handler.type',
      h = 'aspnetcore.rate_limiting.policy',
      i = 'aspnetcore.rate_limiting.result',
      j = 'acquired',
      k = 'endpoint_limiter',
      l = 'global_limiter',
      m = 'request_canceled',
      n = 'aspnetcore.request.is_unhandled',
      o = 'aspnetcore.routing.is_fallback',
      p = 'aspnetcore.routing.match_status',
      q = 'failure',
      r = 'success',
      s = 'aspnetcore.user.is_authenticated',
      t = 'client.address',
      u = 'client.port',
      v = 'code.column.number',
      w = 'code.file.path',
      x = 'code.function.name',
      y = 'code.line.number',
      z = 'code.stacktrace',
      A = 'db.collection.name',
      B = 'db.namespace',
      C = 'db.operation.batch.size',
      D = 'db.operation.name',
      E = 'db.query.summary',
      F = 'db.query.text',
      G = 'db.response.status_code',
      H = 'db.stored_procedure.name',
      I = 'db.system.name',
      J = 'mariadb',
      K = 'microsoft.sql_server',
      L = 'mysql',
      M = 'postgresql',
      N = 'dotnet.gc.heap.generation',
      O = 'gen0',
      P = 'gen1',
      Q = 'gen2',
      R = 'loh',
      S = 'poh',
      T = 'error.type',
      U = '_OTHER',
      V = 'exception.escaped',
      W = 'exception.message',
      X = 'exception.stacktrace',
      Y = 'exception.type',
      Z = (a) => `http.request.header.${a}`,
      $ = 'http.request.method',
      _ = '_OTHER',
      aa = 'CONNECT',
      ab = 'DELETE',
      ac = 'GET',
      ad = 'HEAD',
      ae = 'OPTIONS',
      af = 'PATCH',
      ag = 'POST',
      ah = 'PUT',
      ai = 'TRACE',
      aj = 'http.request.method_original',
      ak = 'http.request.resend_count',
      al = (a) => `http.response.header.${a}`,
      am = 'http.response.status_code',
      an = 'http.route',
      ao = 'jvm.gc.action',
      ap = 'jvm.gc.name',
      aq = 'jvm.memory.pool.name',
      ar = 'jvm.memory.type',
      as = 'heap',
      at = 'non_heap',
      au = 'jvm.thread.daemon',
      av = 'jvm.thread.state',
      aw = 'blocked',
      ax = 'new',
      ay = 'runnable',
      az = 'terminated',
      aA = 'timed_waiting',
      aB = 'waiting',
      aC = 'network.local.address',
      aD = 'network.local.port',
      aE = 'network.peer.address',
      aF = 'network.peer.port',
      aG = 'network.protocol.name',
      aH = 'network.protocol.version',
      aI = 'network.transport',
      aJ = 'pipe',
      aK = 'quic',
      aL = 'tcp',
      aM = 'udp',
      aN = 'unix',
      aO = 'network.type',
      aP = 'ipv4',
      aQ = 'ipv6',
      aR = 'otel.scope.name',
      aS = 'otel.scope.version',
      aT = 'otel.status_code',
      aU = 'ERROR',
      aV = 'OK',
      aW = 'otel.status_description',
      aX = 'server.address',
      aY = 'server.port',
      aZ = 'service.name',
      a$ = 'service.version',
      a_ = 'signalr.connection.status',
      a0 = 'app_shutdown',
      a1 = 'normal_closure',
      a2 = 'timeout',
      a3 = 'signalr.transport',
      a4 = 'long_polling',
      a5 = 'server_sent_events',
      a6 = 'web_sockets',
      a7 = 'telemetry.sdk.language',
      a8 = 'cpp',
      a9 = 'dotnet',
      ba = 'erlang',
      bb = 'go',
      bc = 'java',
      bd = 'nodejs',
      be = 'php',
      bf = 'python',
      bg = 'ruby',
      bh = 'rust',
      bi = 'swift',
      bj = 'webjs',
      bk = 'telemetry.sdk.name',
      bl = 'telemetry.sdk.version',
      bm = 'url.fragment',
      bn = 'url.full',
      bo = 'url.path',
      bp = 'url.query',
      bq = 'url.scheme',
      br = 'user_agent.original';
  },
  33369,
  (a) => {
    'use strict';
    (a.s(
      [
        'AnchoredClock',
        () => q,
        'BindOnceFuture',
        () => aH,
        'CompositePropagator',
        () => V,
        'ExportResultCode',
        () => b,
        'RPCType',
        () => c,
        'SDK_INFO',
        () => N,
        'TRACE_PARENT_HEADER',
        () => ae,
        'TRACE_STATE_HEADER',
        () => af,
        'TimeoutError',
        () => aC,
        'TraceState',
        () => ad,
        'W3CBaggagePropagator',
        () => p,
        'W3CTraceContextPropagator',
        () => ai,
        '_globalThis',
        () => O,
        'addHrTimes',
        () => L,
        'callWithTimeout',
        () => aD,
        'deleteRPCMetadata',
        () => al,
        'diagLogLevelFromString',
        () => aK,
        'getBooleanFromEnv',
        () => S,
        'getNumberFromEnv',
        () => Q,
        'getRPCMetadata',
        () => am,
        'getStringFromEnv',
        () => R,
        'getStringListFromEnv',
        () => T,
        'getTimeOrigin',
        () => B,
        'globalErrorHandler',
        () => y,
        'hrTime',
        () => C,
        'hrTimeDuration',
        () => E,
        'hrTimeToMicroseconds',
        () => I,
        'hrTimeToMilliseconds',
        () => H,
        'hrTimeToNanoseconds',
        () => G,
        'hrTimeToTimeStamp',
        () => F,
        'internal',
        () => j,
        'isAttributeValue',
        () => t,
        'isTimeInput',
        () => K,
        'isTimeInputHrTime',
        () => J,
        'isTracingSuppressed',
        () => i,
        'isUrlIgnored',
        () => aF,
        'loggingErrorHandler',
        () => v,
        'merge',
        () => av,
        'millisToHrTime',
        () => A,
        'otperformance',
        () => z,
        'parseKeyPairsIntoRecord',
        () => o,
        'parseTraceParent',
        () => ah,
        'sanitizeAttributes',
        () => s,
        'setGlobalErrorHandler',
        () => x,
        'setRPCMetadata',
        () => ak,
        'suppressTracing',
        () => g,
        'timeInputToHrTime',
        () => D,
        'unrefTimer',
        () => U,
        'unsuppressTracing',
        () => h,
        'urlMatches',
        () => aE,
      ],
      33369
    ),
      a.s(['internal', () => j], 56252));
    var b,
      c,
      d = a.i(734),
      e = a.i(33871);
    let f = (0, e.createContextKey)('OpenTelemetry SDK Context Key SUPPRESS_TRACING');
    function g(a) {
      return a.setValue(f, !0);
    }
    function h(a) {
      return a.deleteValue(f);
    }
    function i(a) {
      return !0 === a.getValue(f);
    }
    let j = {
      _export: function (a, b) {
        return new Promise((c) => {
          d.context.with(g(d.context.active()), () => {
            a.export(b, (a) => {
              c(a);
            });
          });
        });
      },
    };
    a.i(56252);
    var k = a.i(2561);
    let l = 'baggage';
    var m = a.i(34090);
    function n(a) {
      let b,
        c = a.split(';');
      if (c.length <= 0) return;
      let d = c.shift();
      if (!d) return;
      let e = d.indexOf('=');
      if (e <= 0) return;
      let f = decodeURIComponent(d.substring(0, e).trim()),
        g = decodeURIComponent(d.substring(e + 1).trim());
      return (
        c.length > 0 && (b = (0, m.baggageEntryMetadataFromString)(c.join(';'))),
        { key: f, value: g, metadata: b }
      );
    }
    function o(a) {
      let b = {};
      return (
        'string' == typeof a &&
          a.length > 0 &&
          a.split(',').forEach((a) => {
            let c = n(a);
            void 0 !== c && c.value.length > 0 && (b[c.key] = c.value);
          }),
        b
      );
    }
    class p {
      inject(a, b, c) {
        let d = k.propagation.getBaggage(a);
        if (!d || i(a)) return;
        let e = d
          .getAllEntries()
          .map(([a, b]) => {
            let c = `${encodeURIComponent(a)}=${encodeURIComponent(b.value)}`;
            return (void 0 !== b.metadata && (c += ';' + b.metadata.toString()), c);
          })
          .filter((a) => a.length <= 4096)
          .slice(0, 180)
          .reduce((a, b) => {
            let c = `${a}${'' !== a ? ',' : ''}${b}`;
            return c.length > 8192 ? a : c;
          }, '');
        e.length > 0 && c.set(b, l, e);
      }
      extract(a, b, c) {
        let d = c.get(b, l),
          e = Array.isArray(d) ? d.join(',') : d;
        if (!e) return a;
        let f = {};
        return 0 === e.length ||
          (e.split(',').forEach((a) => {
            let b = n(a);
            if (b) {
              let a = { value: b.value };
              (b.metadata && (a.metadata = b.metadata), (f[b.key] = a));
            }
          }),
          0 === Object.entries(f).length)
          ? a
          : k.propagation.setBaggage(a, k.propagation.createBaggage(f));
      }
      fields() {
        return [l];
      }
    }
    class q {
      _monotonicClock;
      _epochMillis;
      _performanceMillis;
      constructor(a, b) {
        ((this._monotonicClock = b),
          (this._epochMillis = a.now()),
          (this._performanceMillis = b.now()));
      }
      now() {
        let a = this._monotonicClock.now() - this._performanceMillis;
        return this._epochMillis + a;
      }
    }
    var r = a.i(84151);
    function s(a) {
      let b = {};
      if ('object' != typeof a || null == a) return b;
      for (let [d, e] of Object.entries(a)) {
        var c;
        if (!('string' == typeof (c = d) && c.length > 0)) {
          r.diag.warn(`Invalid attribute key: ${d}`);
          continue;
        }
        if (!t(e)) {
          r.diag.warn(`Invalid attribute value set for key: ${d}`);
          continue;
        }
        Array.isArray(e) ? (b[d] = e.slice()) : (b[d] = e);
      }
      return b;
    }
    function t(a) {
      return (
        null == a ||
        (Array.isArray(a)
          ? (function (a) {
              let b;
              for (let c of a)
                if (null != c) {
                  if (!b) {
                    if (u(c)) {
                      b = typeof c;
                      continue;
                    }
                    return !1;
                  }
                  if (typeof c !== b) return !1;
                }
              return !0;
            })(a)
          : u(a))
      );
    }
    function u(a) {
      switch (typeof a) {
        case 'number':
        case 'boolean':
        case 'string':
          return !0;
      }
      return !1;
    }
    function v() {
      return (a) => {
        var b;
        r.diag.error(
          'string' == typeof (b = a)
            ? b
            : JSON.stringify(
                (function (a) {
                  let b = {},
                    c = a;
                  for (; null !== c; )
                    (Object.getOwnPropertyNames(c).forEach((a) => {
                      if (b[a]) return;
                      let d = c[a];
                      d && (b[a] = String(d));
                    }),
                      (c = Object.getPrototypeOf(c)));
                  return b;
                })(b)
              )
        );
      };
    }
    let w = v();
    function x(a) {
      w = a;
    }
    function y(a) {
      try {
        w(a);
      } catch {}
    }
    let z = a.i(60438).performance;
    function A(a) {
      return [Math.trunc(a / 1e3), Math.round((a % 1e3) * 1e6)];
    }
    function B() {
      let a = z.timeOrigin;
      return ('number' != typeof a && (a = z.timing && z.timing.fetchStart), a);
    }
    function C(a) {
      return L(A(B()), A('number' == typeof a ? a : z.now()));
    }
    function D(a) {
      if (J(a)) return a;
      if ('number' == typeof a)
        if (a < B()) return C(a);
        else return A(a);
      if (a instanceof Date) return A(a.getTime());
      throw TypeError('Invalid input type');
    }
    function E(a, b) {
      let c = b[0] - a[0],
        d = b[1] - a[1];
      return (d < 0 && ((c -= 1), (d += 1e9)), [c, d]);
    }
    function F(a) {
      let b = `${'0'.repeat(9)}${a[1]}Z`,
        c = b.substring(b.length - 9 - 1);
      return new Date(1e3 * a[0]).toISOString().replace('000Z', c);
    }
    function G(a) {
      return 1e9 * a[0] + a[1];
    }
    function H(a) {
      return 1e3 * a[0] + a[1] / 1e6;
    }
    function I(a) {
      return 1e6 * a[0] + a[1] / 1e3;
    }
    function J(a) {
      return (
        Array.isArray(a) && 2 === a.length && 'number' == typeof a[0] && 'number' == typeof a[1]
      );
    }
    function K(a) {
      return J(a) || 'number' == typeof a || a instanceof Date;
    }
    function L(a, b) {
      let c = [a[0] + b[0], a[1] + b[1]];
      return (c[1] >= 1e9 && ((c[1] -= 1e9), (c[0] += 1)), c);
    }
    !(function (a) {
      ((a[(a.SUCCESS = 0)] = 'SUCCESS'), (a[(a.FAILED = 1)] = 'FAILED'));
    })(b || (b = {}));
    var M = a.i(79833);
    let N = {
        [M.ATTR_TELEMETRY_SDK_NAME]: 'opentelemetry',
        'process.runtime.name': 'node',
        [M.ATTR_TELEMETRY_SDK_LANGUAGE]: M.TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS,
        [M.ATTR_TELEMETRY_SDK_VERSION]: '2.0.1',
      },
      O = 'object' == typeof globalThis ? globalThis : a.g;
    var P = a.i(24361);
    function Q(a) {
      let b = process.env[a];
      if (null == b || '' === b.trim()) return;
      let c = Number(b);
      return isNaN(c)
        ? void r.diag.warn(
            `Unknown value ${(0, P.inspect)(b)} for ${a}, expected a number, using defaults`
          )
        : c;
    }
    function R(a) {
      let b = process.env[a];
      if (null != b && '' !== b.trim()) return b;
    }
    function S(a) {
      let b = process.env[a]?.trim().toLowerCase();
      return (
        null != b &&
        '' !== b &&
        ('true' === b ||
          ('false' !== b &&
            (r.diag.warn(
              `Unknown value ${(0, P.inspect)(b)} for ${a}, expected 'true' or 'false', falling back to 'false' (default)`
            ),
            !1)))
      );
    }
    function T(a) {
      return R(a)
        ?.split(',')
        .map((a) => a.trim())
        .filter((a) => '' !== a);
    }
    function U(a) {
      a.unref();
    }
    class V {
      _propagators;
      _fields;
      constructor(a = {}) {
        ((this._propagators = a.propagators ?? []),
          (this._fields = Array.from(
            new Set(
              this._propagators
                .map((a) => ('function' == typeof a.fields ? a.fields() : []))
                .reduce((a, b) => a.concat(b), [])
            )
          )));
      }
      inject(a, b, c) {
        for (let d of this._propagators)
          try {
            d.inject(a, b, c);
          } catch (a) {
            r.diag.warn(`Failed to inject with ${d.constructor.name}. Err: ${a.message}`);
          }
      }
      extract(a, b, c) {
        return this._propagators.reduce((a, d) => {
          try {
            return d.extract(a, b, c);
          } catch (a) {
            r.diag.warn(`Failed to extract with ${d.constructor.name}. Err: ${a.message}`);
          }
          return a;
        }, a);
      }
      fields() {
        return this._fields.slice();
      }
    }
    var W = a.i(32739),
      X = a.i(73609),
      Y = a.i(26200);
    let Z = '[_0-9a-z-*/]',
      $ = `[a-z]${Z}{0,255}`,
      _ = `[a-z0-9]${Z}{0,240}@[a-z]${Z}{0,13}`,
      aa = RegExp(`^(?:${$}|${_})$`),
      ab = /^[ -~]{0,255}[!-~]$/,
      ac = /,|=/;
    class ad {
      _internalState = new Map();
      constructor(a) {
        a && this._parse(a);
      }
      set(a, b) {
        let c = this._clone();
        return (
          c._internalState.has(a) && c._internalState.delete(a),
          c._internalState.set(a, b),
          c
        );
      }
      unset(a) {
        let b = this._clone();
        return (b._internalState.delete(a), b);
      }
      get(a) {
        return this._internalState.get(a);
      }
      serialize() {
        return this._keys()
          .reduce((a, b) => (a.push(b + '=' + this.get(b)), a), [])
          .join(',');
      }
      _parse(a) {
        !(a.length > 512) &&
          ((this._internalState = a
            .split(',')
            .reverse()
            .reduce((a, b) => {
              let c = b.trim(),
                d = c.indexOf('=');
              if (-1 !== d) {
                let e = c.slice(0, d),
                  f = c.slice(d + 1, b.length);
                aa.test(e) && ab.test(f) && !ac.test(f) && a.set(e, f);
              }
              return a;
            }, new Map())),
          this._internalState.size > 32 &&
            (this._internalState = new Map(
              Array.from(this._internalState.entries()).reverse().slice(0, 32)
            )));
      }
      _keys() {
        return Array.from(this._internalState.keys()).reverse();
      }
      _clone() {
        let a = new ad();
        return ((a._internalState = new Map(this._internalState)), a);
      }
    }
    let ae = 'traceparent',
      af = 'tracestate',
      ag = RegExp(
        '^\\s?((?!ff)[\\da-f]{2})-((?![0]{32})[\\da-f]{32})-((?![0]{16})[\\da-f]{16})-([\\da-f]{2})(-.*)?\\s?$'
      );
    function ah(a) {
      let b = ag.exec(a);
      return !b || ('00' === b[1] && b[5])
        ? null
        : { traceId: b[2], spanId: b[3], traceFlags: parseInt(b[4], 16) };
    }
    class ai {
      inject(a, b, c) {
        let d = X.trace.getSpanContext(a);
        if (!d || i(a) || !(0, W.isSpanContextValid)(d)) return;
        let e = `00-${d.traceId}-${d.spanId}-0${Number(d.traceFlags || Y.TraceFlags.NONE).toString(16)}`;
        (c.set(b, ae, e), d.traceState && c.set(b, af, d.traceState.serialize()));
      }
      extract(a, b, c) {
        let d = c.get(b, ae);
        if (!d) return a;
        let e = Array.isArray(d) ? d[0] : d;
        if ('string' != typeof e) return a;
        let f = ah(e);
        if (!f) return a;
        f.isRemote = !0;
        let g = c.get(b, af);
        if (g) {
          let a = Array.isArray(g) ? g.join(',') : g;
          f.traceState = new ad('string' == typeof a ? a : void 0);
        }
        return X.trace.setSpanContext(a, f);
      }
      fields() {
        return [ae, af];
      }
    }
    let aj = (0, e.createContextKey)('OpenTelemetry SDK Context Key RPC_METADATA');
    function ak(a, b) {
      return a.setValue(aj, b);
    }
    function al(a) {
      return a.deleteValue(aj);
    }
    function am(a) {
      return a.getValue(aj);
    }
    (c || (c = {})).HTTP = 'http';
    let an = Function.prototype.toString,
      ao = an.call(Object),
      ap = Object.getPrototypeOf,
      aq = Object.prototype,
      ar = aq.hasOwnProperty,
      as = Symbol ? Symbol.toStringTag : void 0,
      at = aq.toString;
    function au(a) {
      var b, c, d;
      if (
        null == (b = a) ||
        'object' != typeof b ||
        '[object Object]' !==
          (null == (c = a)
            ? void 0 === c
              ? '[object Undefined]'
              : '[object Null]'
            : as && as in Object(c)
              ? (function (a) {
                  let b = ar.call(a, as),
                    c = a[as],
                    d = !1;
                  try {
                    ((a[as] = void 0), (d = !0));
                  } catch (a) {}
                  let e = at.call(a);
                  return (d && (b ? (a[as] = c) : delete a[as]), e);
                })(c)
              : ((d = c), at.call(d)))
      )
        return !1;
      let e = ap(a);
      if (null === e) return !0;
      let f = ar.call(e, 'constructor') && e.constructor;
      return 'function' == typeof f && f instanceof f && an.call(f) === ao;
    }
    function av(...a) {
      let b = a.shift(),
        c = new WeakMap();
      for (; a.length > 0; )
        b = (function a(b, c, d = 0, e) {
          let f;
          if (!(d > 20)) {
            if ((d++, aB(b) || aB(c) || az(c))) f = aw(c);
            else if (ay(b)) {
              if (((f = b.slice()), ay(c)))
                for (let a = 0, b = c.length; a < b; a++) f.push(aw(c[a]));
              else if (aA(c)) {
                let a = Object.keys(c);
                for (let b = 0, d = a.length; b < d; b++) {
                  let d = a[b];
                  f[d] = aw(c[d]);
                }
              }
            } else if (aA(b))
              if (aA(c)) {
                var g, h;
                if (((g = b), (h = c), !(au(g) && au(h)))) return c;
                f = Object.assign({}, b);
                let i = Object.keys(c);
                for (let g = 0, h = i.length; g < h; g++) {
                  let h = i[g],
                    j = c[h];
                  if (aB(j)) void 0 === j ? delete f[h] : (f[h] = j);
                  else {
                    let g = f[h];
                    if (ax(b, h, e) || ax(c, h, e)) delete f[h];
                    else {
                      if (aA(g) && aA(j)) {
                        let a = e.get(g) || [],
                          d = e.get(j) || [];
                        (a.push({ obj: b, key: h }),
                          d.push({ obj: c, key: h }),
                          e.set(g, a),
                          e.set(j, d));
                      }
                      f[h] = a(f[h], j, d, e);
                    }
                  }
                }
              } else f = c;
            return f;
          }
        })(b, a.shift(), 0, c);
      return b;
    }
    function aw(a) {
      return ay(a) ? a.slice() : a;
    }
    function ax(a, b, c) {
      let d = c.get(a[b]) || [];
      for (let c = 0, e = d.length; c < e; c++) {
        let e = d[c];
        if (e.key === b && e.obj === a) return !0;
      }
      return !1;
    }
    function ay(a) {
      return Array.isArray(a);
    }
    function az(a) {
      return 'function' == typeof a;
    }
    function aA(a) {
      return !aB(a) && !ay(a) && !az(a) && 'object' == typeof a;
    }
    function aB(a) {
      return (
        'string' == typeof a ||
        'number' == typeof a ||
        'boolean' == typeof a ||
        void 0 === a ||
        a instanceof Date ||
        a instanceof RegExp ||
        null === a
      );
    }
    class aC extends Error {
      constructor(a) {
        (super(a), Object.setPrototypeOf(this, aC.prototype));
      }
    }
    function aD(a, b) {
      let c;
      return Promise.race([
        a,
        new Promise(function (a, d) {
          c = setTimeout(function () {
            d(new aC('Operation timed out.'));
          }, b);
        }),
      ]).then(
        (a) => (clearTimeout(c), a),
        (a) => {
          throw (clearTimeout(c), a);
        }
      );
    }
    function aE(a, b) {
      return 'string' == typeof b ? a === b : !!a.match(b);
    }
    function aF(a, b) {
      if (!b) return !1;
      for (let c of b) if (aE(a, c)) return !0;
      return !1;
    }
    class aG {
      _promise;
      _resolve;
      _reject;
      constructor() {
        this._promise = new Promise((a, b) => {
          ((this._resolve = a), (this._reject = b));
        });
      }
      get promise() {
        return this._promise;
      }
      resolve(a) {
        this._resolve(a);
      }
      reject(a) {
        this._reject(a);
      }
    }
    class aH {
      _callback;
      _that;
      _isCalled = !1;
      _deferred = new aG();
      constructor(a, b) {
        ((this._callback = a), (this._that = b));
      }
      get isCalled() {
        return this._isCalled;
      }
      get promise() {
        return this._deferred.promise;
      }
      call(...a) {
        if (!this._isCalled) {
          this._isCalled = !0;
          try {
            Promise.resolve(this._callback.call(this._that, ...a)).then(
              (a) => this._deferred.resolve(a),
              (a) => this._deferred.reject(a)
            );
          } catch (a) {
            this._deferred.reject(a);
          }
        }
        return this._deferred.promise;
      }
    }
    var aI = a.i(35434);
    let aJ = {
      ALL: aI.DiagLogLevel.ALL,
      VERBOSE: aI.DiagLogLevel.VERBOSE,
      DEBUG: aI.DiagLogLevel.DEBUG,
      INFO: aI.DiagLogLevel.INFO,
      WARN: aI.DiagLogLevel.WARN,
      ERROR: aI.DiagLogLevel.ERROR,
      NONE: aI.DiagLogLevel.NONE,
    };
    function aK(a) {
      if (null == a) return;
      let b = aJ[a.toUpperCase()];
      return null == b
        ? (r.diag.warn(
            `Unknown log level "${a}", expected one of ${Object.keys(aJ)}, using default`
          ),
          aI.DiagLogLevel.INFO)
        : b;
    }
  },
  33732,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.VERSION = void 0),
      (c.VERSION = '0.203.0'));
  },
  38625,
  (a) => {
    'use strict';
    (a.s(
      [
        'InstrumentationBase',
        () => ad,
        'InstrumentationNodeModuleDefinition',
        () => af,
        'InstrumentationNodeModuleFile',
        () => ag,
        'SemconvStability',
        () => b,
        'isWrapped',
        () => ac,
        'registerInstrumentations',
        () => n,
        'safeExecuteInTheMiddle',
        () => aa,
        'safeExecuteInTheMiddleAsync',
        () => ab,
        'semconvStabilityFromStr',
        () => ah,
      ],
      38625
    ),
      a.s([], 4810),
      a.i(4810));
    var b,
      c = a.i(73609),
      d = a.i(86010);
    let e = 'object' == typeof globalThis ? globalThis : a.g,
      f = Symbol.for('io.opentelemetry.js.api.logs');
    class g {
      emit(a) {}
    }
    let h = new g(),
      i = new (class {
        getLogger(a, b, c) {
          return new g();
        }
      })();
    class j {
      constructor(a, b, c, d) {
        ((this._provider = a), (this.name = b), (this.version = c), (this.options = d));
      }
      emit(a) {
        this._getLogger().emit(a);
      }
      _getLogger() {
        if (this._delegate) return this._delegate;
        let a = this._provider.getDelegateLogger(this.name, this.version, this.options);
        return a ? ((this._delegate = a), this._delegate) : h;
      }
    }
    class k {
      getLogger(a, b, c) {
        var d;
        return null != (d = this.getDelegateLogger(a, b, c)) ? d : new j(this, a, b, c);
      }
      getDelegate() {
        var a;
        return null != (a = this._delegate) ? a : i;
      }
      setDelegate(a) {
        this._delegate = a;
      }
      getDelegateLogger(a, b, c) {
        var d;
        return null == (d = this._delegate) ? void 0 : d.getLogger(a, b, c);
      }
    }
    class l {
      constructor() {
        this._proxyLoggerProvider = new k();
      }
      static getInstance() {
        return (this._instance || (this._instance = new l()), this._instance);
      }
      setGlobalLoggerProvider(a) {
        return e[f]
          ? this.getLoggerProvider()
          : ((e[f] = (b) => (1 === b ? a : i)), this._proxyLoggerProvider.setDelegate(a), a);
      }
      getLoggerProvider() {
        var a, b;
        return null != (b = null == (a = e[f]) ? void 0 : a.call(e, 1))
          ? b
          : this._proxyLoggerProvider;
      }
      getLogger(a, b, c) {
        return this.getLoggerProvider().getLogger(a, b, c);
      }
      disable() {
        (delete e[f], (this._proxyLoggerProvider = new k()));
      }
    }
    let m = l.getInstance();
    function n(a) {
      let b = a.tracerProvider || c.trace.getTracerProvider(),
        e = a.meterProvider || d.metrics.getMeterProvider(),
        f = a.loggerProvider || m.getLoggerProvider(),
        g = a.instrumentations?.flat() ?? [];
      for (let a = 0, c = g.length; a < c; a++) {
        let c = g[a];
        (b && c.setTracerProvider(b),
          e && c.setMeterProvider(e),
          f && c.setLoggerProvider && c.setLoggerProvider(f),
          c.getConfig().enabled || c.enable());
      }
      return () => {
        g.forEach((a) => a.disable());
      };
    }
    var o = a.i(14747),
      p = a.i(24361),
      q = a.i(84151);
    let r =
        /^(?:v)?(?<version>(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*))(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<build>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/,
      s =
        /^(?<op><|>|=|==|<=|>=|~|\^|~>)?\s*(?:v)?(?<version>(?<major>x|X|\*|0|[1-9]\d*)(?:\.(?<minor>x|X|\*|0|[1-9]\d*))?(?:\.(?<patch>x|X|\*|0|[1-9]\d*))?)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<build>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/,
      t = { '>': [1], '>=': [0, 1], '=': [0], '<=': [-1, 0], '<': [-1], '!=': [-1, 1] };
    function u(a, b, c, d) {
      if (b.includes('||')) {
        for (let e of b.trim().split('||')) if (v(a, e, c, d)) return !0;
        return !1;
      }
      if (b.includes(' - ')) {
        var e, f;
        ((e = b),
          (f = d),
          (b = e.replace(
            K,
            (a, b, c, d, e, g, h, i, j, k, l, m) => (
              (b = w(c)
                ? ''
                : w(d)
                  ? `>=${c}.0.0${f?.includePrerelease ? '-0' : ''}`
                  : w(e)
                    ? `>=${c}.${d}.0${f?.includePrerelease ? '-0' : ''}`
                    : g
                      ? `>=${b}`
                      : `>=${b}${f?.includePrerelease ? '-0' : ''}`),
              (i = w(j)
                ? ''
                : w(k)
                  ? `<${+j + 1}.0.0-0`
                  : w(l)
                    ? `<${j}.${+k + 1}.0-0`
                    : m
                      ? `<=${j}.${k}.${l}-${m}`
                      : f?.includePrerelease
                        ? `<${j}.${k}.${+l + 1}-0`
                        : `<=${i}`),
              `${b} ${i}`.trim()
            )
          )));
      } else if (b.includes(' ')) {
        for (let e of b
          .trim()
          .replace(/\s{2,}/g, ' ')
          .split(' '))
          if (!v(a, e, c, d)) return !1;
        return !0;
      }
      return v(a, b, c, d);
    }
    function v(a, b, c, d) {
      var e, f, g, h;
      if (
        ((e = b),
        (f = d),
        (b = ((g = e =
          (e = (function (a, b) {
            let c = b?.includePrerelease ? '-0' : '';
            return a.replace(M, (a, b, d, e, f) =>
              w(b)
                ? ''
                : w(d)
                  ? `>=${b}.0.0${c} <${+b + 1}.0.0-0`
                  : w(e)
                    ? '0' === b
                      ? `>=${b}.${d}.0${c} <${b}.${+d + 1}.0-0`
                      : `>=${b}.${d}.0${c} <${+b + 1}.0.0-0`
                    : f
                      ? '0' === b
                        ? '0' === d
                          ? `>=${b}.${d}.${e}-${f} <${b}.${d}.${+e + 1}-0`
                          : `>=${b}.${d}.${e}-${f} <${b}.${+d + 1}.0-0`
                        : `>=${b}.${d}.${e}-${f} <${+b + 1}.0.0-0`
                      : '0' === b
                        ? '0' === d
                          ? `>=${b}.${d}.${e}${c} <${b}.${d}.${+e + 1}-0`
                          : `>=${b}.${d}.${e}${c} <${b}.${+d + 1}.0-0`
                        : `>=${b}.${d}.${e} <${+b + 1}.0.0-0`
            );
          })((e = e.trim()), f)).replace(L, (a, b, c, d, e) =>
            w(b)
              ? ''
              : w(c)
                ? `>=${b}.0.0 <${+b + 1}.0.0-0`
                : w(d)
                  ? `>=${b}.${c}.0 <${b}.${+c + 1}.0-0`
                  : e
                    ? `>=${b}.${c}.${d}-${e} <${b}.${+c + 1}.0-0`
                    : `>=${b}.${c}.${d} <${b}.${+c + 1}.0-0`
          )),
        (h = f),
        (e = g.replace(J, (a, b, c, d, e, f) => {
          let g = w(c),
            i = g || w(d),
            j = i || w(e);
          return (
            '=' === b && j && (b = ''),
            (f = h?.includePrerelease ? '-0' : ''),
            g
              ? (a = '>' === b || '<' === b ? '<0.0.0-0' : '*')
              : b && j
                ? (i && (d = 0),
                  (e = 0),
                  '>' === b
                    ? ((b = '>='), i ? ((c = +c + 1), (d = 0)) : (d = +d + 1), (e = 0))
                    : '<=' === b && ((b = '<'), i ? (c = +c + 1) : (d = +d + 1)),
                  '<' === b && (f = '-0'),
                  (a = `${b + c}.${d}.${e}${f}`))
                : i
                  ? (a = `>=${c}.0.0${f} <${+c + 1}.0.0-0`)
                  : j && (a = `>=${c}.${d}.0${f} <${c}.${+d + 1}.0-0`),
            a
          );
        }))).trim())).includes(' ')
      )
        return u(a, b, c, d);
      {
        let d = (function (a) {
          if (!a) return {};
          let b = a.match(s);
          if (!b) return (q.diag.error(`Invalid range: ${a}`), { invalid: !0 });
          let c = b.groups.op,
            d = b.groups.version,
            e = b.groups.prerelease,
            f = b.groups.build,
            g = d.split('.'),
            h = e?.split('.');
          return (
            '==' === c && (c = '='),
            {
              op: c || '=',
              version: d,
              versionSegments: g,
              versionSegmentCount: g.length,
              prerelease: e,
              prereleaseSegments: h,
              prereleaseSegmentCount: h ? h.length : 0,
              build: f,
            }
          );
        })(b);
        return (
          c.push(d),
          (function (a, b) {
            if (b.invalid) return !1;
            if (!b.version || x(b.version)) return !0;
            let c = z(a.versionSegments || [], b.versionSegments || []);
            if (0 === c) {
              let d = a.prereleaseSegments || [],
                e = b.prereleaseSegments || [];
              c =
                d.length || e.length
                  ? !d.length && e.length
                    ? 1
                    : d.length && !e.length
                      ? -1
                      : z(d, e)
                  : 0;
            }
            return t[b.op]?.includes(c);
          })(a, d)
        );
      }
    }
    function w(a) {
      return !a || 'x' === a.toLowerCase() || '*' === a;
    }
    function x(a) {
      return '*' === a || 'x' === a || 'X' === a;
    }
    function y(a) {
      let b = parseInt(a, 10);
      return isNaN(b) ? a : b;
    }
    function z(a, b) {
      for (let c = 0; c < Math.max(a.length, b.length); c++) {
        let d = (function (a, b) {
          if (x(a) || x(b)) return 0;
          let [c, d] = (function (a, b) {
            if (typeof a != typeof b) return [String(a), String(b)];
            if ('number' == typeof a) return [a, b];
            if ('string' == typeof a) return [a, b];
            throw Error('Version segments can only be strings or numbers');
          })(y(a), y(b));
          return c > d ? 1 : c < d ? -1 : 0;
        })(a[c] || '0', b[c] || '0');
        if (0 !== d) return d;
      }
      return 0;
    }
    let A = '[a-zA-Z0-9-]',
      B = '0|[1-9]\\d*',
      C = `\\d*[a-zA-Z-]${A}*`,
      D = `(?:${B}|${C})`,
      E = `(?:-(${D}(?:\\.${D})*))`,
      F = `${A}+`,
      G = `(?:\\+(${F}(?:\\.${F})*))`,
      H = `${B}|x|X|\\*`,
      I = `[v=\\s]*(${H})(?:\\.(${H})(?:\\.(${H})(?:${E})?${G}?)?)?`,
      J = RegExp(`^((?:<|>)?=?)\\s*${I}$`),
      K = RegExp(`^\\s*(${I})\\s+-\\s+(${I})\\s*$`),
      L = RegExp(`^(?:~>?)${I}$`),
      M = RegExp(`^(?:\\^)${I}$`),
      N = console.error.bind(console);
    function O(a, b, c) {
      let d = !!a[b] && Object.prototype.propertyIsEnumerable.call(a, b);
      Object.defineProperty(a, b, { configurable: !0, enumerable: d, writable: !0, value: c });
    }
    let P = (a, b, c) => {
        if (!a || !a[b]) return void N('no original function ' + String(b) + ' to wrap');
        if (!c) {
          (N('no wrapper function'), N(Error().stack));
          return;
        }
        let d = a[b];
        if ('function' != typeof d || 'function' != typeof c)
          return void N('original object and wrapper must be functions');
        let e = c(d, b);
        return (
          O(e, '__original', d),
          O(e, '__unwrap', () => {
            a[b] === e && O(a, b, d);
          }),
          O(e, '__wrapped', !0),
          O(a, b, e),
          e
        );
      },
      Q = (a, b, c) => {
        if (a) Array.isArray(a) || (a = [a]);
        else {
          (N('must provide one or more modules to patch'), N(Error().stack));
          return;
        }
        if (!(b && Array.isArray(b)))
          return void N('must provide one or more functions to wrap on modules');
        a.forEach((a) => {
          b.forEach((b) => {
            P(a, b, c);
          });
        });
      },
      R = (a, b) => {
        if (!a || !a[b]) {
          (N('no function to unwrap.'), N(Error().stack));
          return;
        }
        let c = a[b];
        if (c.__unwrap) return void c.__unwrap();
        N('no original to unwrap to -- has ' + String(b) + ' already been unwrapped?');
      },
      S = (a, b) => {
        if (a) Array.isArray(a) || (a = [a]);
        else {
          (N('must provide one or more modules to patch'), N(Error().stack));
          return;
        }
        if (!(b && Array.isArray(b)))
          return void N('must provide one or more functions to unwrap on modules');
        a.forEach((a) => {
          b.forEach((b) => {
            R(a, b);
          });
        });
      };
    function T(a) {
      a &&
        a.logger &&
        ('function' != typeof a.logger
          ? N("new logger isn't a function, not replacing")
          : (N = a.logger));
    }
    ((T.wrap = P),
      (T.massWrap = Q),
      (T.unwrap = R),
      (T.massUnwrap = S),
      (globalThis._sentryNextJsVersion = '15.5.2'));
    class U {
      instrumentationName;
      instrumentationVersion;
      _config = {};
      _tracer;
      _meter;
      _logger;
      _diag;
      constructor(a, b, e) {
        ((this.instrumentationName = a),
          (this.instrumentationVersion = b),
          this.setConfig(e),
          (this._diag = q.diag.createComponentLogger({ namespace: a })),
          (this._tracer = c.trace.getTracer(a, b)),
          (this._meter = d.metrics.getMeter(a, b)),
          (this._logger = m.getLogger(a, b)),
          this._updateMetricInstruments());
      }
      _wrap = P;
      _unwrap = R;
      _massWrap = Q;
      _massUnwrap = S;
      get meter() {
        return this._meter;
      }
      setMeterProvider(a) {
        ((this._meter = a.getMeter(this.instrumentationName, this.instrumentationVersion)),
          this._updateMetricInstruments());
      }
      get logger() {
        return this._logger;
      }
      setLoggerProvider(a) {
        this._logger = a.getLogger(this.instrumentationName, this.instrumentationVersion);
      }
      getModuleDefinitions() {
        let a = this.init() ?? [];
        return Array.isArray(a) ? a : [a];
      }
      _updateMetricInstruments() {}
      getConfig() {
        return this._config;
      }
      setConfig(a) {
        this._config = { enabled: !0, ...a };
      }
      setTracerProvider(a) {
        this._tracer = a.getTracer(this.instrumentationName, this.instrumentationVersion);
      }
      get tracer() {
        return this._tracer;
      }
      _runSpanCustomizationHook(a, b, c, d) {
        if (a)
          try {
            a(c, d);
          } catch (a) {
            this._diag.error(
              'Error running span customization hook due to exception in handler',
              { triggerName: b },
              a
            );
          }
      }
    }
    var V = a.i(79314);
    class W {
      hooks = [];
      children = new Map();
    }
    class X {
      _trie = new W();
      _counter = 0;
      insert(a) {
        let b = this._trie;
        for (let c of a.moduleName.split('/')) {
          let a = b.children.get(c);
          (a || ((a = new W()), b.children.set(c, a)), (b = a));
        }
        b.hooks.push({ hook: a, insertedId: this._counter++ });
      }
      search(a, { maintainInsertionOrder: b, fullOnly: c } = {}) {
        let d = this._trie,
          e = [],
          f = !0;
        for (let b of a.split('/')) {
          let a = d.children.get(b);
          if (!a) {
            f = !1;
            break;
          }
          (c || e.push(...a.hooks), (d = a));
        }
        return (c && f && e.push(...d.hooks), 0 === e.length)
          ? []
          : 1 === e.length
            ? [e[0].hook]
            : (b && e.sort((a, b) => a.insertedId - b.insertedId), e.map(({ hook: a }) => a));
      }
    }
    let Y = ['afterEach', 'after', 'beforeEach', 'before', 'describe', 'it'].every(
      (b) => 'function' == typeof a.g[b]
    );
    class Z {
      _moduleNameTrie = new X();
      static _instance;
      constructor() {
        this._initialize();
      }
      _initialize() {
        new V.Hook(null, { internals: !0 }, (a, b, c) => {
          var d;
          let e = ((d = b), '/' !== o.sep ? d.split(o.sep).join('/') : d);
          for (let { onRequire: d } of this._moduleNameTrie.search(e, {
            maintainInsertionOrder: !0,
            fullOnly: void 0 === c,
          }))
            a = d(a, b, c);
          return a;
        });
      }
      register(a, b) {
        let c = { moduleName: a, onRequire: b };
        return (this._moduleNameTrie.insert(c), c);
      }
      static getInstance() {
        return Y ? new Z() : (this._instance = this._instance ?? new Z());
      }
    }
    var $ = a.i(85397),
      _ = a.i(22734);
    function aa(a, b, c) {
      let d, e;
      try {
        e = a();
      } catch (a) {
        d = a;
      } finally {
        if ((b(d, e), d && !c)) throw d;
        return e;
      }
    }
    async function ab(a, b, c) {
      let d, e;
      try {
        e = await a();
      } catch (a) {
        d = a;
      } finally {
        if ((b(d, e), d && !c)) throw d;
        return e;
      }
    }
    function ac(a) {
      return (
        'function' == typeof a &&
        'function' == typeof a.__original &&
        'function' == typeof a.__unwrap &&
        !0 === a.__wrapped
      );
    }
    globalThis._sentryNextJsVersion = '15.5.2';
    class ad extends U {
      _modules;
      _hooks = [];
      _requireInTheMiddleSingleton = Z.getInstance();
      _enabled = !1;
      constructor(a, b, c) {
        super(a, b, c);
        let d = this.init();
        (d && !Array.isArray(d) && (d = [d]),
          (this._modules = d || []),
          this._config.enabled && this.enable());
      }
      _wrap = (a, b, c) => {
        if ((ac(a[b]) && this._unwrap(a, b), !p.types.isProxy(a))) return P(a, b, c);
        {
          let d = P(Object.assign({}, a), b, c);
          return (Object.defineProperty(a, b, { value: d }), d);
        }
      };
      _unwrap = (a, b) =>
        p.types.isProxy(a) ? Object.defineProperty(a, b, { value: a[b] }) : R(a, b);
      _massWrap = (a, b, c) =>
        a
          ? (Array.isArray(a) || (a = [a]), b && Array.isArray(b))
            ? void a.forEach((a) => {
                b.forEach((b) => {
                  this._wrap(a, b, c);
                });
              })
            : void q.diag.error('must provide one or more functions to wrap on modules')
          : void q.diag.error('must provide one or more modules to patch');
      _massUnwrap = (a, b) =>
        a
          ? (Array.isArray(a) || (a = [a]), b && Array.isArray(b))
            ? void a.forEach((a) => {
                b.forEach((b) => {
                  this._unwrap(a, b);
                });
              })
            : void q.diag.error('must provide one or more functions to wrap on modules')
          : void q.diag.error('must provide one or more modules to patch');
      _warnOnPreloadedModules() {
        this._modules.forEach((b) => {
          let { name: c } = b;
          try {
            let b = (() => {
              let a = Error('Cannot find module as expression is too dynamic');
              throw ((a.code = 'MODULE_NOT_FOUND'), a);
            })();
            a.c[b] &&
              this._diag.warn(
                `Module ${c} has been loaded before ${this.instrumentationName} so it might not work, please initialize it before requiring ${c}`
              );
          } catch {}
        });
      }
      _extractPackageVersion(a) {
        try {
          let b = (0, _.readFileSync)(o.join(a, 'package.json'), { encoding: 'utf8' }),
            c = JSON.parse(b).version;
          return 'string' == typeof c ? c : void 0;
        } catch {
          q.diag.warn('Failed extracting version', a);
        }
      }
      _onRequire(a, b, c, d) {
        if (!d)
          return 'function' == typeof a.patch && ((a.moduleExports = b), this._enabled)
            ? (this._diag.debug(
                'Applying instrumentation patch for nodejs core module on require hook',
                { module: a.name }
              ),
              a.patch(b))
            : b;
        let e = this._extractPackageVersion(d);
        if (((a.moduleVersion = e), a.name === c))
          return ae(a.supportedVersions, e, a.includePrerelease) &&
            'function' == typeof a.patch &&
            ((a.moduleExports = b), this._enabled)
            ? (this._diag.debug('Applying instrumentation patch for module on require hook', {
                module: a.name,
                version: a.moduleVersion,
                baseDir: d,
              }),
              a.patch(b, a.moduleVersion))
            : b;
        let f = a.files ?? [],
          g = o.normalize(c);
        return f
          .filter((a) => a.name === g)
          .filter((b) => ae(b.supportedVersions, e, a.includePrerelease))
          .reduce(
            (b, c) =>
              ((c.moduleExports = b), this._enabled)
                ? (this._diag.debug(
                    'Applying instrumentation patch for nodejs module file on require hook',
                    { module: a.name, version: a.moduleVersion, fileName: c.name, baseDir: d }
                  ),
                  c.patch(b, a.moduleVersion))
                : b,
            b
          );
      }
      enable() {
        if (!this._enabled) {
          if (((this._enabled = !0), this._hooks.length > 0)) {
            for (let a of this._modules)
              for (let b of ('function' == typeof a.patch &&
                a.moduleExports &&
                (this._diag.debug(
                  'Applying instrumentation patch for nodejs module on instrumentation enabled',
                  { module: a.name, version: a.moduleVersion }
                ),
                a.patch(a.moduleExports, a.moduleVersion)),
              a.files))
                b.moduleExports &&
                  (this._diag.debug(
                    'Applying instrumentation patch for nodejs module file on instrumentation enabled',
                    { module: a.name, version: a.moduleVersion, fileName: b.name }
                  ),
                  b.patch(b.moduleExports, a.moduleVersion));
            return;
          }
          for (let a of (this._warnOnPreloadedModules(), this._modules)) {
            let b = (b, c, d) => {
                if (!d && o.isAbsolute(c)) {
                  let a = o.parse(c);
                  ((c = a.name), (d = a.dir));
                }
                return this._onRequire(a, b, c, d);
              },
              c = (b, c, d) => this._onRequire(a, b, c, d),
              d = o.isAbsolute(a.name)
                ? new V.Hook([a.name], { internals: !0 }, c)
                : this._requireInTheMiddleSingleton.register(a.name, c);
            this._hooks.push(d);
            let e = new $.Hook([a.name], { internals: !1 }, b);
            this._hooks.push(e);
          }
        }
      }
      disable() {
        if (this._enabled)
          for (let a of ((this._enabled = !1), this._modules))
            for (let b of ('function' == typeof a.unpatch &&
              a.moduleExports &&
              (this._diag.debug(
                'Removing instrumentation patch for nodejs module on instrumentation disabled',
                { module: a.name, version: a.moduleVersion }
              ),
              a.unpatch(a.moduleExports, a.moduleVersion)),
            a.files))
              b.moduleExports &&
                (this._diag.debug(
                  'Removing instrumentation patch for nodejs module file on instrumentation disabled',
                  { module: a.name, version: a.moduleVersion, fileName: b.name }
                ),
                b.unpatch(b.moduleExports, a.moduleVersion));
      }
      isEnabled() {
        return this._enabled;
      }
    }
    function ae(a, b, c) {
      return void 0 === b
        ? a.includes('*')
        : a.some((a) =>
            (function (a, b, c) {
              var d, e, f;
              if (!('string' == typeof (d = a) && r.test(d)))
                return (q.diag.error(`Invalid version: ${a}`), !1);
              if (!b) return !0;
              b = b.replace(/([<>=~^]+)\s+/g, '$1');
              let g = (function (a) {
                let b = a.match(r);
                if (!b) return void q.diag.error(`Invalid version: ${a}`);
                let c = b.groups.version,
                  d = b.groups.prerelease,
                  e = b.groups.build,
                  f = c.split('.'),
                  g = d?.split('.');
                return {
                  op: void 0,
                  version: c,
                  versionSegments: f,
                  versionSegmentCount: f.length,
                  prerelease: d,
                  prereleaseSegments: g,
                  prereleaseSegmentCount: g ? g.length : 0,
                  build: e,
                };
              })(a);
              if (!g) return !1;
              let h = [],
                i = u(g, b, h, c);
              return i && !c?.includePrerelease
                ? ((e = g),
                  (f = h),
                  !e.prerelease || f.some((a) => a.prerelease && a.version === e.version))
                : i;
            })(b, a, { includePrerelease: c })
          );
    }
    class af {
      name;
      supportedVersions;
      patch;
      unpatch;
      files;
      constructor(a, b, c, d, e) {
        ((this.name = a),
          (this.supportedVersions = b),
          (this.patch = c),
          (this.unpatch = d),
          (this.files = e || []));
      }
    }
    class ag {
      supportedVersions;
      patch;
      unpatch;
      name;
      constructor(a, b, c, d) {
        ((this.supportedVersions = b),
          (this.patch = c),
          (this.unpatch = d),
          (this.name = (0, o.normalize)(a)));
      }
    }
    function ah(a, c) {
      let d = b.OLD;
      for (let e of c
        ?.split(',')
        .map((a) => a.trim())
        .filter((a) => '' !== a) ?? [])
        if (e.toLowerCase() === a + '/dup') {
          d = b.DUPLICATE;
          break;
        } else e.toLowerCase() === a && (d = b.STABLE);
      return d;
    }
    !(function (a) {
      ((a[(a.STABLE = 1)] = 'STABLE'),
        (a[(a.OLD = 2)] = 'OLD'),
        (a[(a.DUPLICATE = 3)] = 'DUPLICATE'));
    })(b || (b = {}));
  },
  79154,
  (a) => {
    'use strict';
    function b(a) {
      let b = {},
        c = a.length;
      for (let d = 0; d < c; d++) {
        let c = a[d];
        c && (b[String(c).toUpperCase().replace(/[-.]/g, '_')] = c);
      }
      return b;
    }
    (a.s(
      [
        'ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED',
        () => lj.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED,
        'ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED',
        () => lj.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED,
        'ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED',
        () => lj.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED,
        'ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED',
        () => lj.ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED,
        'ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED',
        () => lj.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED,
        'ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER',
        () => lj.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER,
        'ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER',
        () => lj.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER,
        'ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED',
        () => lj.ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED,
        'ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE',
        () => lj.ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE,
        'ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS',
        () => lj.ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS,
        'ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT',
        () => lj.ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT,
        'ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE',
        () => lj.ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE,
        'ATTR_ASPNETCORE_RATE_LIMITING_POLICY',
        () => lj.ATTR_ASPNETCORE_RATE_LIMITING_POLICY,
        'ATTR_ASPNETCORE_RATE_LIMITING_RESULT',
        () => lj.ATTR_ASPNETCORE_RATE_LIMITING_RESULT,
        'ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED',
        () => lj.ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED,
        'ATTR_ASPNETCORE_ROUTING_IS_FALLBACK',
        () => lj.ATTR_ASPNETCORE_ROUTING_IS_FALLBACK,
        'ATTR_ASPNETCORE_ROUTING_MATCH_STATUS',
        () => lj.ATTR_ASPNETCORE_ROUTING_MATCH_STATUS,
        'ATTR_ASPNETCORE_USER_IS_AUTHENTICATED',
        () => lj.ATTR_ASPNETCORE_USER_IS_AUTHENTICATED,
        'ATTR_CLIENT_ADDRESS',
        () => lj.ATTR_CLIENT_ADDRESS,
        'ATTR_CLIENT_PORT',
        () => lj.ATTR_CLIENT_PORT,
        'ATTR_CODE_COLUMN_NUMBER',
        () => lj.ATTR_CODE_COLUMN_NUMBER,
        'ATTR_CODE_FILE_PATH',
        () => lj.ATTR_CODE_FILE_PATH,
        'ATTR_CODE_FUNCTION_NAME',
        () => lj.ATTR_CODE_FUNCTION_NAME,
        'ATTR_CODE_LINE_NUMBER',
        () => lj.ATTR_CODE_LINE_NUMBER,
        'ATTR_CODE_STACKTRACE',
        () => lj.ATTR_CODE_STACKTRACE,
        'ATTR_DB_COLLECTION_NAME',
        () => lj.ATTR_DB_COLLECTION_NAME,
        'ATTR_DB_NAMESPACE',
        () => lj.ATTR_DB_NAMESPACE,
        'ATTR_DB_OPERATION_BATCH_SIZE',
        () => lj.ATTR_DB_OPERATION_BATCH_SIZE,
        'ATTR_DB_OPERATION_NAME',
        () => lj.ATTR_DB_OPERATION_NAME,
        'ATTR_DB_QUERY_SUMMARY',
        () => lj.ATTR_DB_QUERY_SUMMARY,
        'ATTR_DB_QUERY_TEXT',
        () => lj.ATTR_DB_QUERY_TEXT,
        'ATTR_DB_RESPONSE_STATUS_CODE',
        () => lj.ATTR_DB_RESPONSE_STATUS_CODE,
        'ATTR_DB_STORED_PROCEDURE_NAME',
        () => lj.ATTR_DB_STORED_PROCEDURE_NAME,
        'ATTR_DB_SYSTEM_NAME',
        () => lj.ATTR_DB_SYSTEM_NAME,
        'ATTR_DOTNET_GC_HEAP_GENERATION',
        () => lj.ATTR_DOTNET_GC_HEAP_GENERATION,
        'ATTR_ERROR_TYPE',
        () => lj.ATTR_ERROR_TYPE,
        'ATTR_EXCEPTION_ESCAPED',
        () => lj.ATTR_EXCEPTION_ESCAPED,
        'ATTR_EXCEPTION_MESSAGE',
        () => lj.ATTR_EXCEPTION_MESSAGE,
        'ATTR_EXCEPTION_STACKTRACE',
        () => lj.ATTR_EXCEPTION_STACKTRACE,
        'ATTR_EXCEPTION_TYPE',
        () => lj.ATTR_EXCEPTION_TYPE,
        'ATTR_HTTP_REQUEST_HEADER',
        () => lj.ATTR_HTTP_REQUEST_HEADER,
        'ATTR_HTTP_REQUEST_METHOD',
        () => lj.ATTR_HTTP_REQUEST_METHOD,
        'ATTR_HTTP_REQUEST_METHOD_ORIGINAL',
        () => lj.ATTR_HTTP_REQUEST_METHOD_ORIGINAL,
        'ATTR_HTTP_REQUEST_RESEND_COUNT',
        () => lj.ATTR_HTTP_REQUEST_RESEND_COUNT,
        'ATTR_HTTP_RESPONSE_HEADER',
        () => lj.ATTR_HTTP_RESPONSE_HEADER,
        'ATTR_HTTP_RESPONSE_STATUS_CODE',
        () => lj.ATTR_HTTP_RESPONSE_STATUS_CODE,
        'ATTR_HTTP_ROUTE',
        () => lj.ATTR_HTTP_ROUTE,
        'ATTR_JVM_GC_ACTION',
        () => lj.ATTR_JVM_GC_ACTION,
        'ATTR_JVM_GC_NAME',
        () => lj.ATTR_JVM_GC_NAME,
        'ATTR_JVM_MEMORY_POOL_NAME',
        () => lj.ATTR_JVM_MEMORY_POOL_NAME,
        'ATTR_JVM_MEMORY_TYPE',
        () => lj.ATTR_JVM_MEMORY_TYPE,
        'ATTR_JVM_THREAD_DAEMON',
        () => lj.ATTR_JVM_THREAD_DAEMON,
        'ATTR_JVM_THREAD_STATE',
        () => lj.ATTR_JVM_THREAD_STATE,
        'ATTR_NETWORK_LOCAL_ADDRESS',
        () => lj.ATTR_NETWORK_LOCAL_ADDRESS,
        'ATTR_NETWORK_LOCAL_PORT',
        () => lj.ATTR_NETWORK_LOCAL_PORT,
        'ATTR_NETWORK_PEER_ADDRESS',
        () => lj.ATTR_NETWORK_PEER_ADDRESS,
        'ATTR_NETWORK_PEER_PORT',
        () => lj.ATTR_NETWORK_PEER_PORT,
        'ATTR_NETWORK_PROTOCOL_NAME',
        () => lj.ATTR_NETWORK_PROTOCOL_NAME,
        'ATTR_NETWORK_PROTOCOL_VERSION',
        () => lj.ATTR_NETWORK_PROTOCOL_VERSION,
        'ATTR_NETWORK_TRANSPORT',
        () => lj.ATTR_NETWORK_TRANSPORT,
        'ATTR_NETWORK_TYPE',
        () => lj.ATTR_NETWORK_TYPE,
        'ATTR_OTEL_SCOPE_NAME',
        () => lj.ATTR_OTEL_SCOPE_NAME,
        'ATTR_OTEL_SCOPE_VERSION',
        () => lj.ATTR_OTEL_SCOPE_VERSION,
        'ATTR_OTEL_STATUS_CODE',
        () => lj.ATTR_OTEL_STATUS_CODE,
        'ATTR_OTEL_STATUS_DESCRIPTION',
        () => lj.ATTR_OTEL_STATUS_DESCRIPTION,
        'ATTR_SERVER_ADDRESS',
        () => lj.ATTR_SERVER_ADDRESS,
        'ATTR_SERVER_PORT',
        () => lj.ATTR_SERVER_PORT,
        'ATTR_SERVICE_NAME',
        () => lj.ATTR_SERVICE_NAME,
        'ATTR_SERVICE_VERSION',
        () => lj.ATTR_SERVICE_VERSION,
        'ATTR_SIGNALR_CONNECTION_STATUS',
        () => lj.ATTR_SIGNALR_CONNECTION_STATUS,
        'ATTR_SIGNALR_TRANSPORT',
        () => lj.ATTR_SIGNALR_TRANSPORT,
        'ATTR_TELEMETRY_SDK_LANGUAGE',
        () => lj.ATTR_TELEMETRY_SDK_LANGUAGE,
        'ATTR_TELEMETRY_SDK_NAME',
        () => lj.ATTR_TELEMETRY_SDK_NAME,
        'ATTR_TELEMETRY_SDK_VERSION',
        () => lj.ATTR_TELEMETRY_SDK_VERSION,
        'ATTR_URL_FRAGMENT',
        () => lj.ATTR_URL_FRAGMENT,
        'ATTR_URL_FULL',
        () => lj.ATTR_URL_FULL,
        'ATTR_URL_PATH',
        () => lj.ATTR_URL_PATH,
        'ATTR_URL_QUERY',
        () => lj.ATTR_URL_QUERY,
        'ATTR_URL_SCHEME',
        () => lj.ATTR_URL_SCHEME,
        'ATTR_USER_AGENT_ORIGINAL',
        () => lj.ATTR_USER_AGENT_ORIGINAL,
        'AWSECSLAUNCHTYPEVALUES_EC2',
        () => kq,
        'AWSECSLAUNCHTYPEVALUES_FARGATE',
        () => kr,
        'AwsEcsLaunchtypeValues',
        () => ks,
        'CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS',
        () => j7,
        'CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC',
        () => j8,
        'CLOUDPLATFORMVALUES_AWS_EC2',
        () => j9,
        'CLOUDPLATFORMVALUES_AWS_ECS',
        () => ka,
        'CLOUDPLATFORMVALUES_AWS_EKS',
        () => kb,
        'CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK',
        () => kd,
        'CLOUDPLATFORMVALUES_AWS_LAMBDA',
        () => kc,
        'CLOUDPLATFORMVALUES_AZURE_AKS',
        () => kg,
        'CLOUDPLATFORMVALUES_AZURE_APP_SERVICE',
        () => ki,
        'CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES',
        () => kf,
        'CLOUDPLATFORMVALUES_AZURE_FUNCTIONS',
        () => kh,
        'CLOUDPLATFORMVALUES_AZURE_VM',
        () => ke,
        'CLOUDPLATFORMVALUES_GCP_APP_ENGINE',
        () => kn,
        'CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS',
        () => km,
        'CLOUDPLATFORMVALUES_GCP_CLOUD_RUN',
        () => kk,
        'CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE',
        () => kj,
        'CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE',
        () => kl,
        'CLOUDPROVIDERVALUES_ALIBABA_CLOUD',
        () => jN,
        'CLOUDPROVIDERVALUES_AWS',
        () => jO,
        'CLOUDPROVIDERVALUES_AZURE',
        () => jP,
        'CLOUDPROVIDERVALUES_GCP',
        () => jQ,
        'CloudPlatformValues',
        () => ko,
        'CloudProviderValues',
        () => jR,
        'DBCASSANDRACONSISTENCYLEVELVALUES_ALL',
        () => eX,
        'DBCASSANDRACONSISTENCYLEVELVALUES_ANY',
        () => e3,
        'DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM',
        () => eY,
        'DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE',
        () => e2,
        'DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM',
        () => e$,
        'DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL',
        () => e5,
        'DBCASSANDRACONSISTENCYLEVELVALUES_ONE',
        () => e_,
        'DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM',
        () => eZ,
        'DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL',
        () => e4,
        'DBCASSANDRACONSISTENCYLEVELVALUES_THREE',
        () => e1,
        'DBCASSANDRACONSISTENCYLEVELVALUES_TWO',
        () => e0,
        'DBSYSTEMVALUES_ADABAS',
        () => el,
        'DBSYSTEMVALUES_CACHE',
        () => ek,
        'DBSYSTEMVALUES_CASSANDRA',
        () => eC,
        'DBSYSTEMVALUES_CLOUDSCAPE',
        () => ec,
        'DBSYSTEMVALUES_COCKROACHDB',
        () => eO,
        'DBSYSTEMVALUES_COLDFUSION',
        () => eB,
        'DBSYSTEMVALUES_COSMOSDB',
        () => eI,
        'DBSYSTEMVALUES_COUCHBASE',
        () => eG,
        'DBSYSTEMVALUES_COUCHDB',
        () => eH,
        'DBSYSTEMVALUES_DB2',
        () => d8,
        'DBSYSTEMVALUES_DERBY',
        () => en,
        'DBSYSTEMVALUES_DYNAMODB',
        () => eJ,
        'DBSYSTEMVALUES_EDB',
        () => ej,
        'DBSYSTEMVALUES_ELASTICSEARCH',
        () => eM,
        'DBSYSTEMVALUES_FILEMAKER',
        () => eo,
        'DBSYSTEMVALUES_FIREBIRD',
        () => em,
        'DBSYSTEMVALUES_FIRSTSQL',
        () => ei,
        'DBSYSTEMVALUES_GEODE',
        () => eL,
        'DBSYSTEMVALUES_H2',
        () => eA,
        'DBSYSTEMVALUES_HANADB',
        () => eg,
        'DBSYSTEMVALUES_HBASE',
        () => eD,
        'DBSYSTEMVALUES_HIVE',
        () => eb,
        'DBSYSTEMVALUES_HSQLDB',
        () => ed,
        'DBSYSTEMVALUES_INFORMIX',
        () => ep,
        'DBSYSTEMVALUES_INGRES',
        () => eh,
        'DBSYSTEMVALUES_INSTANTDB',
        () => eq,
        'DBSYSTEMVALUES_INTERBASE',
        () => er,
        'DBSYSTEMVALUES_MARIADB',
        () => es,
        'DBSYSTEMVALUES_MAXDB',
        () => ef,
        'DBSYSTEMVALUES_MEMCACHED',
        () => eN,
        'DBSYSTEMVALUES_MONGODB',
        () => eE,
        'DBSYSTEMVALUES_MSSQL',
        () => d5,
        'DBSYSTEMVALUES_MYSQL',
        () => d6,
        'DBSYSTEMVALUES_NEO4J',
        () => eK,
        'DBSYSTEMVALUES_NETEZZA',
        () => et,
        'DBSYSTEMVALUES_ORACLE',
        () => d7,
        'DBSYSTEMVALUES_OTHER_SQL',
        () => d4,
        'DBSYSTEMVALUES_PERVASIVE',
        () => eu,
        'DBSYSTEMVALUES_POINTBASE',
        () => ev,
        'DBSYSTEMVALUES_POSTGRESQL',
        () => d9,
        'DBSYSTEMVALUES_PROGRESS',
        () => ee,
        'DBSYSTEMVALUES_REDIS',
        () => eF,
        'DBSYSTEMVALUES_REDSHIFT',
        () => ea,
        'DBSYSTEMVALUES_SQLITE',
        () => ew,
        'DBSYSTEMVALUES_SYBASE',
        () => ex,
        'DBSYSTEMVALUES_TERADATA',
        () => ey,
        'DBSYSTEMVALUES_VERTICA',
        () => ez,
        'DB_SYSTEM_NAME_VALUE_MARIADB',
        () => lj.DB_SYSTEM_NAME_VALUE_MARIADB,
        'DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER',
        () => lj.DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER,
        'DB_SYSTEM_NAME_VALUE_MYSQL',
        () => lj.DB_SYSTEM_NAME_VALUE_MYSQL,
        'DB_SYSTEM_NAME_VALUE_POSTGRESQL',
        () => lj.DB_SYSTEM_NAME_VALUE_POSTGRESQL,
        'DOTNET_GC_HEAP_GENERATION_VALUE_GEN0',
        () => lj.DOTNET_GC_HEAP_GENERATION_VALUE_GEN0,
        'DOTNET_GC_HEAP_GENERATION_VALUE_GEN1',
        () => lj.DOTNET_GC_HEAP_GENERATION_VALUE_GEN1,
        'DOTNET_GC_HEAP_GENERATION_VALUE_GEN2',
        () => lj.DOTNET_GC_HEAP_GENERATION_VALUE_GEN2,
        'DOTNET_GC_HEAP_GENERATION_VALUE_LOH',
        () => lj.DOTNET_GC_HEAP_GENERATION_VALUE_LOH,
        'DOTNET_GC_HEAP_GENERATION_VALUE_POH',
        () => lj.DOTNET_GC_HEAP_GENERATION_VALUE_POH,
        'DbCassandraConsistencyLevelValues',
        () => e6,
        'DbSystemValues',
        () => eP,
        'ERROR_TYPE_VALUE_OTHER',
        () => lj.ERROR_TYPE_VALUE_OTHER,
        'EVENT_EXCEPTION',
        () => l7,
        'FAASDOCUMENTOPERATIONVALUES_DELETE',
        () => fn,
        'FAASDOCUMENTOPERATIONVALUES_EDIT',
        () => fm,
        'FAASDOCUMENTOPERATIONVALUES_INSERT',
        () => fl,
        'FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD',
        () => fr,
        'FAASINVOKEDPROVIDERVALUES_AWS',
        () => fs,
        'FAASINVOKEDPROVIDERVALUES_AZURE',
        () => ft,
        'FAASINVOKEDPROVIDERVALUES_GCP',
        () => fu,
        'FAASTRIGGERVALUES_DATASOURCE',
        () => fc,
        'FAASTRIGGERVALUES_HTTP',
        () => fd,
        'FAASTRIGGERVALUES_OTHER',
        () => fg,
        'FAASTRIGGERVALUES_PUBSUB',
        () => fe,
        'FAASTRIGGERVALUES_TIMER',
        () => ff,
        'FaasDocumentOperationValues',
        () => fo,
        'FaasInvokedProviderValues',
        () => fv,
        'FaasTriggerValues',
        () => fh,
        'HOSTARCHVALUES_AMD64',
        () => kz,
        'HOSTARCHVALUES_ARM32',
        () => kA,
        'HOSTARCHVALUES_ARM64',
        () => kB,
        'HOSTARCHVALUES_IA64',
        () => kC,
        'HOSTARCHVALUES_PPC32',
        () => kD,
        'HOSTARCHVALUES_PPC64',
        () => kE,
        'HOSTARCHVALUES_X86',
        () => kF,
        'HTTPFLAVORVALUES_HTTP_1_0',
        () => gz,
        'HTTPFLAVORVALUES_HTTP_1_1',
        () => gA,
        'HTTPFLAVORVALUES_HTTP_2_0',
        () => gB,
        'HTTPFLAVORVALUES_QUIC',
        () => gD,
        'HTTPFLAVORVALUES_SPDY',
        () => gC,
        'HTTP_REQUEST_METHOD_VALUE_CONNECT',
        () => lj.HTTP_REQUEST_METHOD_VALUE_CONNECT,
        'HTTP_REQUEST_METHOD_VALUE_DELETE',
        () => lj.HTTP_REQUEST_METHOD_VALUE_DELETE,
        'HTTP_REQUEST_METHOD_VALUE_GET',
        () => lj.HTTP_REQUEST_METHOD_VALUE_GET,
        'HTTP_REQUEST_METHOD_VALUE_HEAD',
        () => lj.HTTP_REQUEST_METHOD_VALUE_HEAD,
        'HTTP_REQUEST_METHOD_VALUE_OPTIONS',
        () => lj.HTTP_REQUEST_METHOD_VALUE_OPTIONS,
        'HTTP_REQUEST_METHOD_VALUE_OTHER',
        () => lj.HTTP_REQUEST_METHOD_VALUE_OTHER,
        'HTTP_REQUEST_METHOD_VALUE_PATCH',
        () => lj.HTTP_REQUEST_METHOD_VALUE_PATCH,
        'HTTP_REQUEST_METHOD_VALUE_POST',
        () => lj.HTTP_REQUEST_METHOD_VALUE_POST,
        'HTTP_REQUEST_METHOD_VALUE_PUT',
        () => lj.HTTP_REQUEST_METHOD_VALUE_PUT,
        'HTTP_REQUEST_METHOD_VALUE_TRACE',
        () => lj.HTTP_REQUEST_METHOD_VALUE_TRACE,
        'HostArchValues',
        () => kG,
        'HttpFlavorValues',
        () => gE,
        'JVM_MEMORY_TYPE_VALUE_HEAP',
        () => lj.JVM_MEMORY_TYPE_VALUE_HEAP,
        'JVM_MEMORY_TYPE_VALUE_NON_HEAP',
        () => lj.JVM_MEMORY_TYPE_VALUE_NON_HEAP,
        'JVM_THREAD_STATE_VALUE_BLOCKED',
        () => lj.JVM_THREAD_STATE_VALUE_BLOCKED,
        'JVM_THREAD_STATE_VALUE_NEW',
        () => lj.JVM_THREAD_STATE_VALUE_NEW,
        'JVM_THREAD_STATE_VALUE_RUNNABLE',
        () => lj.JVM_THREAD_STATE_VALUE_RUNNABLE,
        'JVM_THREAD_STATE_VALUE_TERMINATED',
        () => lj.JVM_THREAD_STATE_VALUE_TERMINATED,
        'JVM_THREAD_STATE_VALUE_TIMED_WAITING',
        () => lj.JVM_THREAD_STATE_VALUE_TIMED_WAITING,
        'JVM_THREAD_STATE_VALUE_WAITING',
        () => lj.JVM_THREAD_STATE_VALUE_WAITING,
        'MESSAGETYPEVALUES_RECEIVED',
        () => g8,
        'MESSAGETYPEVALUES_SENT',
        () => g7,
        'MESSAGINGDESTINATIONKINDVALUES_QUEUE',
        () => gH,
        'MESSAGINGDESTINATIONKINDVALUES_TOPIC',
        () => gI,
        'MESSAGINGOPERATIONVALUES_PROCESS',
        () => gN,
        'MESSAGINGOPERATIONVALUES_RECEIVE',
        () => gM,
        'METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS',
        () => lk,
        'METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES',
        () => ll,
        'METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS',
        () => lm,
        'METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS',
        () => lp,
        'METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION',
        () => lo,
        'METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE',
        () => ln,
        'METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS',
        () => lq,
        'METRIC_DB_CLIENT_OPERATION_DURATION',
        () => lr,
        'METRIC_DOTNET_ASSEMBLY_COUNT',
        () => ls,
        'METRIC_DOTNET_EXCEPTIONS',
        () => lt,
        'METRIC_DOTNET_GC_COLLECTIONS',
        () => lu,
        'METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED',
        () => lv,
        'METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE',
        () => lw,
        'METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE',
        () => lx,
        'METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE',
        () => ly,
        'METRIC_DOTNET_GC_PAUSE_TIME',
        () => lz,
        'METRIC_DOTNET_JIT_COMPILATION_TIME',
        () => lA,
        'METRIC_DOTNET_JIT_COMPILED_IL_SIZE',
        () => lB,
        'METRIC_DOTNET_JIT_COMPILED_METHODS',
        () => lC,
        'METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS',
        () => lD,
        'METRIC_DOTNET_PROCESS_CPU_COUNT',
        () => lE,
        'METRIC_DOTNET_PROCESS_CPU_TIME',
        () => lF,
        'METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET',
        () => lG,
        'METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH',
        () => lH,
        'METRIC_DOTNET_THREAD_POOL_THREAD_COUNT',
        () => lI,
        'METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT',
        () => lJ,
        'METRIC_DOTNET_TIMER_COUNT',
        () => lK,
        'METRIC_HTTP_CLIENT_REQUEST_DURATION',
        () => lL,
        'METRIC_HTTP_SERVER_REQUEST_DURATION',
        () => lM,
        'METRIC_JVM_CLASS_COUNT',
        () => lN,
        'METRIC_JVM_CLASS_LOADED',
        () => lO,
        'METRIC_JVM_CLASS_UNLOADED',
        () => lP,
        'METRIC_JVM_CPU_COUNT',
        () => lQ,
        'METRIC_JVM_CPU_RECENT_UTILIZATION',
        () => lR,
        'METRIC_JVM_CPU_TIME',
        () => lS,
        'METRIC_JVM_GC_DURATION',
        () => lT,
        'METRIC_JVM_MEMORY_COMMITTED',
        () => lU,
        'METRIC_JVM_MEMORY_LIMIT',
        () => lV,
        'METRIC_JVM_MEMORY_USED',
        () => lW,
        'METRIC_JVM_MEMORY_USED_AFTER_LAST_GC',
        () => lX,
        'METRIC_JVM_THREAD_COUNT',
        () => lY,
        'METRIC_KESTREL_ACTIVE_CONNECTIONS',
        () => lZ,
        'METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES',
        () => l$,
        'METRIC_KESTREL_CONNECTION_DURATION',
        () => l_,
        'METRIC_KESTREL_QUEUED_CONNECTIONS',
        () => l0,
        'METRIC_KESTREL_QUEUED_REQUESTS',
        () => l1,
        'METRIC_KESTREL_REJECTED_CONNECTIONS',
        () => l2,
        'METRIC_KESTREL_TLS_HANDSHAKE_DURATION',
        () => l3,
        'METRIC_KESTREL_UPGRADED_CONNECTIONS',
        () => l4,
        'METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS',
        () => l5,
        'METRIC_SIGNALR_SERVER_CONNECTION_DURATION',
        () => l6,
        'MessageTypeValues',
        () => g9,
        'MessagingDestinationKindValues',
        () => gJ,
        'MessagingOperationValues',
        () => gO,
        'NETHOSTCONNECTIONSUBTYPEVALUES_CDMA',
        () => ge,
        'NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT',
        () => gh,
        'NETHOSTCONNECTIONSUBTYPEVALUES_EDGE',
        () => gc,
        'NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD',
        () => go,
        'NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0',
        () => gf,
        'NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A',
        () => gg,
        'NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B',
        () => gm,
        'NETHOSTCONNECTIONSUBTYPEVALUES_GPRS',
        () => gb,
        'NETHOSTCONNECTIONSUBTYPEVALUES_GSM',
        () => gq,
        'NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA',
        () => gi,
        'NETHOSTCONNECTIONSUBTYPEVALUES_HSPA',
        () => gk,
        'NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP',
        () => gp,
        'NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA',
        () => gj,
        'NETHOSTCONNECTIONSUBTYPEVALUES_IDEN',
        () => gl,
        'NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN',
        () => gs,
        'NETHOSTCONNECTIONSUBTYPEVALUES_LTE',
        () => gn,
        'NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA',
        () => gv,
        'NETHOSTCONNECTIONSUBTYPEVALUES_NR',
        () => gt,
        'NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA',
        () => gu,
        'NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA',
        () => gr,
        'NETHOSTCONNECTIONSUBTYPEVALUES_UMTS',
        () => gd,
        'NETHOSTCONNECTIONTYPEVALUES_CELL',
        () => fR,
        'NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE',
        () => fS,
        'NETHOSTCONNECTIONTYPEVALUES_UNKNOWN',
        () => fT,
        'NETHOSTCONNECTIONTYPEVALUES_WIFI',
        () => fP,
        'NETHOSTCONNECTIONTYPEVALUES_WIRED',
        () => fQ,
        'NETTRANSPORTVALUES_INPROC',
        () => fH,
        'NETTRANSPORTVALUES_IP',
        () => fE,
        'NETTRANSPORTVALUES_IP_TCP',
        () => fC,
        'NETTRANSPORTVALUES_IP_UDP',
        () => fD,
        'NETTRANSPORTVALUES_OTHER',
        () => fI,
        'NETTRANSPORTVALUES_PIPE',
        () => fG,
        'NETTRANSPORTVALUES_UNIX',
        () => fF,
        'NETWORK_TRANSPORT_VALUE_PIPE',
        () => lj.NETWORK_TRANSPORT_VALUE_PIPE,
        'NETWORK_TRANSPORT_VALUE_QUIC',
        () => lj.NETWORK_TRANSPORT_VALUE_QUIC,
        'NETWORK_TRANSPORT_VALUE_TCP',
        () => lj.NETWORK_TRANSPORT_VALUE_TCP,
        'NETWORK_TRANSPORT_VALUE_UDP',
        () => lj.NETWORK_TRANSPORT_VALUE_UDP,
        'NETWORK_TRANSPORT_VALUE_UNIX',
        () => lj.NETWORK_TRANSPORT_VALUE_UNIX,
        'NETWORK_TYPE_VALUE_IPV4',
        () => lj.NETWORK_TYPE_VALUE_IPV4,
        'NETWORK_TYPE_VALUE_IPV6',
        () => lj.NETWORK_TYPE_VALUE_IPV6,
        'NetHostConnectionSubtypeValues',
        () => gw,
        'NetHostConnectionTypeValues',
        () => fU,
        'NetTransportValues',
        () => fJ,
        'OSTYPEVALUES_AIX',
        () => kZ,
        'OSTYPEVALUES_DARWIN',
        () => kT,
        'OSTYPEVALUES_DRAGONFLYBSD',
        () => kX,
        'OSTYPEVALUES_FREEBSD',
        () => kU,
        'OSTYPEVALUES_HPUX',
        () => kY,
        'OSTYPEVALUES_LINUX',
        () => kS,
        'OSTYPEVALUES_NETBSD',
        () => kV,
        'OSTYPEVALUES_OPENBSD',
        () => kW,
        'OSTYPEVALUES_SOLARIS',
        () => k$,
        'OSTYPEVALUES_WINDOWS',
        () => kR,
        'OSTYPEVALUES_Z_OS',
        () => k_,
        'OTEL_STATUS_CODE_VALUE_ERROR',
        () => lj.OTEL_STATUS_CODE_VALUE_ERROR,
        'OTEL_STATUS_CODE_VALUE_OK',
        () => lj.OTEL_STATUS_CODE_VALUE_OK,
        'OsTypeValues',
        () => k0,
        'RPCGRPCSTATUSCODEVALUES_ABORTED',
        () => gZ,
        'RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS',
        () => gV,
        'RPCGRPCSTATUSCODEVALUES_CANCELLED',
        () => gQ,
        'RPCGRPCSTATUSCODEVALUES_DATA_LOSS',
        () => g2,
        'RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED',
        () => gT,
        'RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION',
        () => gY,
        'RPCGRPCSTATUSCODEVALUES_INTERNAL',
        () => g0,
        'RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT',
        () => gS,
        'RPCGRPCSTATUSCODEVALUES_NOT_FOUND',
        () => gU,
        'RPCGRPCSTATUSCODEVALUES_OK',
        () => gP,
        'RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE',
        () => g$,
        'RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED',
        () => gW,
        'RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED',
        () => gX,
        'RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED',
        () => g3,
        'RPCGRPCSTATUSCODEVALUES_UNAVAILABLE',
        () => g1,
        'RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED',
        () => g_,
        'RPCGRPCSTATUSCODEVALUES_UNKNOWN',
        () => gR,
        'RpcGrpcStatusCodeValues',
        () => g4,
        'SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET',
        () => cF,
        'SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS',
        () => cR,
        'SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ',
        () => cC,
        'SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY',
        () => cy,
        'SEMATTRS_AWS_DYNAMODB_COUNT',
        () => cP,
        'SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE',
        () => cK,
        'SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES',
        () => cI,
        'SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES',
        () => cS,
        'SEMATTRS_AWS_DYNAMODB_INDEX_NAME',
        () => cG,
        'SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS',
        () => cz,
        'SEMATTRS_AWS_DYNAMODB_LIMIT',
        () => cE,
        'SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES',
        () => cJ,
        'SEMATTRS_AWS_DYNAMODB_PROJECTION',
        () => cD,
        'SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY',
        () => cA,
        'SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY',
        () => cB,
        'SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT',
        () => cQ,
        'SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD',
        () => cM,
        'SEMATTRS_AWS_DYNAMODB_SEGMENT',
        () => cN,
        'SEMATTRS_AWS_DYNAMODB_SELECT',
        () => cH,
        'SEMATTRS_AWS_DYNAMODB_TABLE_COUNT',
        () => cL,
        'SEMATTRS_AWS_DYNAMODB_TABLE_NAMES',
        () => cx,
        'SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS',
        () => cO,
        'SEMATTRS_AWS_LAMBDA_INVOKED_ARN',
        () => bm,
        'SEMATTRS_CODE_FILEPATH',
        () => cg,
        'SEMATTRS_CODE_FUNCTION',
        () => ce,
        'SEMATTRS_CODE_LINENO',
        () => ch,
        'SEMATTRS_CODE_NAMESPACE',
        () => cf,
        'SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL',
        () => bx,
        'SEMATTRS_DB_CASSANDRA_COORDINATOR_DC',
        () => bC,
        'SEMATTRS_DB_CASSANDRA_COORDINATOR_ID',
        () => bB,
        'SEMATTRS_DB_CASSANDRA_IDEMPOTENCE',
        () => bz,
        'SEMATTRS_DB_CASSANDRA_KEYSPACE',
        () => bv,
        'SEMATTRS_DB_CASSANDRA_PAGE_SIZE',
        () => bw,
        'SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT',
        () => bA,
        'SEMATTRS_DB_CASSANDRA_TABLE',
        () => by,
        'SEMATTRS_DB_CONNECTION_STRING',
        () => bo,
        'SEMATTRS_DB_HBASE_NAMESPACE',
        () => bD,
        'SEMATTRS_DB_JDBC_DRIVER_CLASSNAME',
        () => bq,
        'SEMATTRS_DB_MONGODB_COLLECTION',
        () => bF,
        'SEMATTRS_DB_MSSQL_INSTANCE_NAME',
        () => bu,
        'SEMATTRS_DB_NAME',
        () => br,
        'SEMATTRS_DB_OPERATION',
        () => bt,
        'SEMATTRS_DB_REDIS_DATABASE_INDEX',
        () => bE,
        'SEMATTRS_DB_SQL_TABLE',
        () => bG,
        'SEMATTRS_DB_STATEMENT',
        () => bs,
        'SEMATTRS_DB_SYSTEM',
        () => bn,
        'SEMATTRS_DB_USER',
        () => bp,
        'SEMATTRS_ENDUSER_ID',
        () => b9,
        'SEMATTRS_ENDUSER_ROLE',
        () => ca,
        'SEMATTRS_ENDUSER_SCOPE',
        () => cb,
        'SEMATTRS_EXCEPTION_ESCAPED',
        () => bK,
        'SEMATTRS_EXCEPTION_MESSAGE',
        () => bI,
        'SEMATTRS_EXCEPTION_STACKTRACE',
        () => bJ,
        'SEMATTRS_EXCEPTION_TYPE',
        () => bH,
        'SEMATTRS_FAAS_COLDSTART',
        () => bT,
        'SEMATTRS_FAAS_CRON',
        () => bS,
        'SEMATTRS_FAAS_DOCUMENT_COLLECTION',
        () => bN,
        'SEMATTRS_FAAS_DOCUMENT_NAME',
        () => bQ,
        'SEMATTRS_FAAS_DOCUMENT_OPERATION',
        () => bO,
        'SEMATTRS_FAAS_DOCUMENT_TIME',
        () => bP,
        'SEMATTRS_FAAS_EXECUTION',
        () => bM,
        'SEMATTRS_FAAS_INVOKED_NAME',
        () => bU,
        'SEMATTRS_FAAS_INVOKED_PROVIDER',
        () => bV,
        'SEMATTRS_FAAS_INVOKED_REGION',
        () => bW,
        'SEMATTRS_FAAS_TIME',
        () => bR,
        'SEMATTRS_FAAS_TRIGGER',
        () => bL,
        'SEMATTRS_HTTP_CLIENT_IP',
        () => cw,
        'SEMATTRS_HTTP_FLAVOR',
        () => co,
        'SEMATTRS_HTTP_HOST',
        () => cl,
        'SEMATTRS_HTTP_METHOD',
        () => ci,
        'SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH',
        () => cq,
        'SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED',
        () => cr,
        'SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH',
        () => cs,
        'SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED',
        () => ct,
        'SEMATTRS_HTTP_ROUTE',
        () => cv,
        'SEMATTRS_HTTP_SCHEME',
        () => cm,
        'SEMATTRS_HTTP_SERVER_NAME',
        () => cu,
        'SEMATTRS_HTTP_STATUS_CODE',
        () => cn,
        'SEMATTRS_HTTP_TARGET',
        () => ck,
        'SEMATTRS_HTTP_URL',
        () => cj,
        'SEMATTRS_HTTP_USER_AGENT',
        () => cp,
        'SEMATTRS_MESSAGE_COMPRESSED_SIZE',
        () => dk,
        'SEMATTRS_MESSAGE_ID',
        () => dj,
        'SEMATTRS_MESSAGE_TYPE',
        () => di,
        'SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE',
        () => dl,
        'SEMATTRS_MESSAGING_CONSUMER_ID',
        () => c3,
        'SEMATTRS_MESSAGING_CONVERSATION_ID',
        () => c_,
        'SEMATTRS_MESSAGING_DESTINATION',
        () => cU,
        'SEMATTRS_MESSAGING_DESTINATION_KIND',
        () => cV,
        'SEMATTRS_MESSAGING_KAFKA_CLIENT_ID',
        () => c7,
        'SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP',
        () => c6,
        'SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY',
        () => c5,
        'SEMATTRS_MESSAGING_KAFKA_PARTITION',
        () => c8,
        'SEMATTRS_MESSAGING_KAFKA_TOMBSTONE',
        () => c9,
        'SEMATTRS_MESSAGING_MESSAGE_ID',
        () => c$,
        'SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES',
        () => c1,
        'SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES',
        () => c0,
        'SEMATTRS_MESSAGING_OPERATION',
        () => c2,
        'SEMATTRS_MESSAGING_PROTOCOL',
        () => cX,
        'SEMATTRS_MESSAGING_PROTOCOL_VERSION',
        () => cY,
        'SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY',
        () => c4,
        'SEMATTRS_MESSAGING_SYSTEM',
        () => cT,
        'SEMATTRS_MESSAGING_TEMP_DESTINATION',
        () => cW,
        'SEMATTRS_MESSAGING_URL',
        () => cZ,
        'SEMATTRS_NET_HOST_CARRIER_ICC',
        () => b7,
        'SEMATTRS_NET_HOST_CARRIER_MCC',
        () => b5,
        'SEMATTRS_NET_HOST_CARRIER_MNC',
        () => b6,
        'SEMATTRS_NET_HOST_CARRIER_NAME',
        () => b4,
        'SEMATTRS_NET_HOST_CONNECTION_SUBTYPE',
        () => b3,
        'SEMATTRS_NET_HOST_CONNECTION_TYPE',
        () => b2,
        'SEMATTRS_NET_HOST_IP',
        () => b_,
        'SEMATTRS_NET_HOST_NAME',
        () => b1,
        'SEMATTRS_NET_HOST_PORT',
        () => b0,
        'SEMATTRS_NET_PEER_IP',
        () => bY,
        'SEMATTRS_NET_PEER_NAME',
        () => b$,
        'SEMATTRS_NET_PEER_PORT',
        () => bZ,
        'SEMATTRS_NET_TRANSPORT',
        () => bX,
        'SEMATTRS_PEER_SERVICE',
        () => b8,
        'SEMATTRS_RPC_GRPC_STATUS_CODE',
        () => dd,
        'SEMATTRS_RPC_JSONRPC_ERROR_CODE',
        () => dg,
        'SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE',
        () => dh,
        'SEMATTRS_RPC_JSONRPC_REQUEST_ID',
        () => df,
        'SEMATTRS_RPC_JSONRPC_VERSION',
        () => de,
        'SEMATTRS_RPC_METHOD',
        () => dc,
        'SEMATTRS_RPC_SERVICE',
        () => db,
        'SEMATTRS_RPC_SYSTEM',
        () => da,
        'SEMATTRS_THREAD_ID',
        () => cc,
        'SEMATTRS_THREAD_NAME',
        () => cd,
        'SEMRESATTRS_AWS_ECS_CLUSTER_ARN',
        () => iz,
        'SEMRESATTRS_AWS_ECS_CONTAINER_ARN',
        () => iy,
        'SEMRESATTRS_AWS_ECS_LAUNCHTYPE',
        () => iA,
        'SEMRESATTRS_AWS_ECS_TASK_ARN',
        () => iB,
        'SEMRESATTRS_AWS_ECS_TASK_FAMILY',
        () => iC,
        'SEMRESATTRS_AWS_ECS_TASK_REVISION',
        () => iD,
        'SEMRESATTRS_AWS_EKS_CLUSTER_ARN',
        () => iE,
        'SEMRESATTRS_AWS_LOG_GROUP_ARNS',
        () => iG,
        'SEMRESATTRS_AWS_LOG_GROUP_NAMES',
        () => iF,
        'SEMRESATTRS_AWS_LOG_STREAM_ARNS',
        () => iI,
        'SEMRESATTRS_AWS_LOG_STREAM_NAMES',
        () => iH,
        'SEMRESATTRS_CLOUD_ACCOUNT_ID',
        () => iu,
        'SEMRESATTRS_CLOUD_AVAILABILITY_ZONE',
        () => iw,
        'SEMRESATTRS_CLOUD_PLATFORM',
        () => ix,
        'SEMRESATTRS_CLOUD_PROVIDER',
        () => it,
        'SEMRESATTRS_CLOUD_REGION',
        () => iv,
        'SEMRESATTRS_CONTAINER_ID',
        () => iK,
        'SEMRESATTRS_CONTAINER_IMAGE_NAME',
        () => iM,
        'SEMRESATTRS_CONTAINER_IMAGE_TAG',
        () => iN,
        'SEMRESATTRS_CONTAINER_NAME',
        () => iJ,
        'SEMRESATTRS_CONTAINER_RUNTIME',
        () => iL,
        'SEMRESATTRS_DEPLOYMENT_ENVIRONMENT',
        () => iO,
        'SEMRESATTRS_DEVICE_ID',
        () => iP,
        'SEMRESATTRS_DEVICE_MODEL_IDENTIFIER',
        () => iQ,
        'SEMRESATTRS_DEVICE_MODEL_NAME',
        () => iR,
        'SEMRESATTRS_FAAS_ID',
        () => iT,
        'SEMRESATTRS_FAAS_INSTANCE',
        () => iV,
        'SEMRESATTRS_FAAS_MAX_MEMORY',
        () => iW,
        'SEMRESATTRS_FAAS_NAME',
        () => iS,
        'SEMRESATTRS_FAAS_VERSION',
        () => iU,
        'SEMRESATTRS_HOST_ARCH',
        () => i$,
        'SEMRESATTRS_HOST_ID',
        () => iX,
        'SEMRESATTRS_HOST_IMAGE_ID',
        () => i0,
        'SEMRESATTRS_HOST_IMAGE_NAME',
        () => i_,
        'SEMRESATTRS_HOST_IMAGE_VERSION',
        () => i1,
        'SEMRESATTRS_HOST_NAME',
        () => iY,
        'SEMRESATTRS_HOST_TYPE',
        () => iZ,
        'SEMRESATTRS_K8S_CLUSTER_NAME',
        () => i2,
        'SEMRESATTRS_K8S_CONTAINER_NAME',
        () => i8,
        'SEMRESATTRS_K8S_CRONJOB_NAME',
        () => jk,
        'SEMRESATTRS_K8S_CRONJOB_UID',
        () => jj,
        'SEMRESATTRS_K8S_DAEMONSET_NAME',
        () => jg,
        'SEMRESATTRS_K8S_DAEMONSET_UID',
        () => jf,
        'SEMRESATTRS_K8S_DEPLOYMENT_NAME',
        () => jc,
        'SEMRESATTRS_K8S_DEPLOYMENT_UID',
        () => jb,
        'SEMRESATTRS_K8S_JOB_NAME',
        () => ji,
        'SEMRESATTRS_K8S_JOB_UID',
        () => jh,
        'SEMRESATTRS_K8S_NAMESPACE_NAME',
        () => i5,
        'SEMRESATTRS_K8S_NODE_NAME',
        () => i3,
        'SEMRESATTRS_K8S_NODE_UID',
        () => i4,
        'SEMRESATTRS_K8S_POD_NAME',
        () => i7,
        'SEMRESATTRS_K8S_POD_UID',
        () => i6,
        'SEMRESATTRS_K8S_REPLICASET_NAME',
        () => ja,
        'SEMRESATTRS_K8S_REPLICASET_UID',
        () => i9,
        'SEMRESATTRS_K8S_STATEFULSET_NAME',
        () => je,
        'SEMRESATTRS_K8S_STATEFULSET_UID',
        () => jd,
        'SEMRESATTRS_OS_DESCRIPTION',
        () => jm,
        'SEMRESATTRS_OS_NAME',
        () => jn,
        'SEMRESATTRS_OS_TYPE',
        () => jl,
        'SEMRESATTRS_OS_VERSION',
        () => jo,
        'SEMRESATTRS_PROCESS_COMMAND',
        () => js,
        'SEMRESATTRS_PROCESS_COMMAND_ARGS',
        () => ju,
        'SEMRESATTRS_PROCESS_COMMAND_LINE',
        () => jt,
        'SEMRESATTRS_PROCESS_EXECUTABLE_NAME',
        () => jq,
        'SEMRESATTRS_PROCESS_EXECUTABLE_PATH',
        () => jr,
        'SEMRESATTRS_PROCESS_OWNER',
        () => jv,
        'SEMRESATTRS_PROCESS_PID',
        () => jp,
        'SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION',
        () => jy,
        'SEMRESATTRS_PROCESS_RUNTIME_NAME',
        () => jw,
        'SEMRESATTRS_PROCESS_RUNTIME_VERSION',
        () => jx,
        'SEMRESATTRS_SERVICE_INSTANCE_ID',
        () => jB,
        'SEMRESATTRS_SERVICE_NAME',
        () => jz,
        'SEMRESATTRS_SERVICE_NAMESPACE',
        () => jA,
        'SEMRESATTRS_SERVICE_VERSION',
        () => jC,
        'SEMRESATTRS_TELEMETRY_AUTO_VERSION',
        () => jG,
        'SEMRESATTRS_TELEMETRY_SDK_LANGUAGE',
        () => jE,
        'SEMRESATTRS_TELEMETRY_SDK_NAME',
        () => jD,
        'SEMRESATTRS_TELEMETRY_SDK_VERSION',
        () => jF,
        'SEMRESATTRS_WEBENGINE_DESCRIPTION',
        () => jJ,
        'SEMRESATTRS_WEBENGINE_NAME',
        () => jH,
        'SEMRESATTRS_WEBENGINE_VERSION',
        () => jI,
        'SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN',
        () => lj.SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN,
        'SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE',
        () => lj.SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE,
        'SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT',
        () => lj.SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT,
        'SIGNALR_TRANSPORT_VALUE_LONG_POLLING',
        () => lj.SIGNALR_TRANSPORT_VALUE_LONG_POLLING,
        'SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS',
        () => lj.SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS,
        'SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS',
        () => lj.SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS,
        'SemanticAttributes',
        () => dm,
        'SemanticResourceAttributes',
        () => jK,
        'TELEMETRYSDKLANGUAGEVALUES_CPP',
        () => k8,
        'TELEMETRYSDKLANGUAGEVALUES_DOTNET',
        () => k9,
        'TELEMETRYSDKLANGUAGEVALUES_ERLANG',
        () => la,
        'TELEMETRYSDKLANGUAGEVALUES_GO',
        () => lb,
        'TELEMETRYSDKLANGUAGEVALUES_JAVA',
        () => lc,
        'TELEMETRYSDKLANGUAGEVALUES_NODEJS',
        () => ld,
        'TELEMETRYSDKLANGUAGEVALUES_PHP',
        () => le,
        'TELEMETRYSDKLANGUAGEVALUES_PYTHON',
        () => lf,
        'TELEMETRYSDKLANGUAGEVALUES_RUBY',
        () => lg,
        'TELEMETRYSDKLANGUAGEVALUES_WEBJS',
        () => lh,
        'TELEMETRY_SDK_LANGUAGE_VALUE_CPP',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_CPP,
        'TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET,
        'TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG,
        'TELEMETRY_SDK_LANGUAGE_VALUE_GO',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_GO,
        'TELEMETRY_SDK_LANGUAGE_VALUE_JAVA',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_JAVA,
        'TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS,
        'TELEMETRY_SDK_LANGUAGE_VALUE_PHP',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_PHP,
        'TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON,
        'TELEMETRY_SDK_LANGUAGE_VALUE_RUBY',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_RUBY,
        'TELEMETRY_SDK_LANGUAGE_VALUE_RUST',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_RUST,
        'TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT,
        'TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS',
        () => lj.TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS,
        'TelemetrySdkLanguageValues',
        () => li,
      ],
      79154
    ),
      a.s([], 33961),
      a.i(33961),
      a.s(
        [
          'DBCASSANDRACONSISTENCYLEVELVALUES_ALL',
          () => eX,
          'DBCASSANDRACONSISTENCYLEVELVALUES_ANY',
          () => e3,
          'DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM',
          () => eY,
          'DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE',
          () => e2,
          'DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM',
          () => e$,
          'DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL',
          () => e5,
          'DBCASSANDRACONSISTENCYLEVELVALUES_ONE',
          () => e_,
          'DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM',
          () => eZ,
          'DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL',
          () => e4,
          'DBCASSANDRACONSISTENCYLEVELVALUES_THREE',
          () => e1,
          'DBCASSANDRACONSISTENCYLEVELVALUES_TWO',
          () => e0,
          'DBSYSTEMVALUES_ADABAS',
          () => el,
          'DBSYSTEMVALUES_CACHE',
          () => ek,
          'DBSYSTEMVALUES_CASSANDRA',
          () => eC,
          'DBSYSTEMVALUES_CLOUDSCAPE',
          () => ec,
          'DBSYSTEMVALUES_COCKROACHDB',
          () => eO,
          'DBSYSTEMVALUES_COLDFUSION',
          () => eB,
          'DBSYSTEMVALUES_COSMOSDB',
          () => eI,
          'DBSYSTEMVALUES_COUCHBASE',
          () => eG,
          'DBSYSTEMVALUES_COUCHDB',
          () => eH,
          'DBSYSTEMVALUES_DB2',
          () => d8,
          'DBSYSTEMVALUES_DERBY',
          () => en,
          'DBSYSTEMVALUES_DYNAMODB',
          () => eJ,
          'DBSYSTEMVALUES_EDB',
          () => ej,
          'DBSYSTEMVALUES_ELASTICSEARCH',
          () => eM,
          'DBSYSTEMVALUES_FILEMAKER',
          () => eo,
          'DBSYSTEMVALUES_FIREBIRD',
          () => em,
          'DBSYSTEMVALUES_FIRSTSQL',
          () => ei,
          'DBSYSTEMVALUES_GEODE',
          () => eL,
          'DBSYSTEMVALUES_H2',
          () => eA,
          'DBSYSTEMVALUES_HANADB',
          () => eg,
          'DBSYSTEMVALUES_HBASE',
          () => eD,
          'DBSYSTEMVALUES_HIVE',
          () => eb,
          'DBSYSTEMVALUES_HSQLDB',
          () => ed,
          'DBSYSTEMVALUES_INFORMIX',
          () => ep,
          'DBSYSTEMVALUES_INGRES',
          () => eh,
          'DBSYSTEMVALUES_INSTANTDB',
          () => eq,
          'DBSYSTEMVALUES_INTERBASE',
          () => er,
          'DBSYSTEMVALUES_MARIADB',
          () => es,
          'DBSYSTEMVALUES_MAXDB',
          () => ef,
          'DBSYSTEMVALUES_MEMCACHED',
          () => eN,
          'DBSYSTEMVALUES_MONGODB',
          () => eE,
          'DBSYSTEMVALUES_MSSQL',
          () => d5,
          'DBSYSTEMVALUES_MYSQL',
          () => d6,
          'DBSYSTEMVALUES_NEO4J',
          () => eK,
          'DBSYSTEMVALUES_NETEZZA',
          () => et,
          'DBSYSTEMVALUES_ORACLE',
          () => d7,
          'DBSYSTEMVALUES_OTHER_SQL',
          () => d4,
          'DBSYSTEMVALUES_PERVASIVE',
          () => eu,
          'DBSYSTEMVALUES_POINTBASE',
          () => ev,
          'DBSYSTEMVALUES_POSTGRESQL',
          () => d9,
          'DBSYSTEMVALUES_PROGRESS',
          () => ee,
          'DBSYSTEMVALUES_REDIS',
          () => eF,
          'DBSYSTEMVALUES_REDSHIFT',
          () => ea,
          'DBSYSTEMVALUES_SQLITE',
          () => ew,
          'DBSYSTEMVALUES_SYBASE',
          () => ex,
          'DBSYSTEMVALUES_TERADATA',
          () => ey,
          'DBSYSTEMVALUES_VERTICA',
          () => ez,
          'DbCassandraConsistencyLevelValues',
          () => e6,
          'DbSystemValues',
          () => eP,
          'FAASDOCUMENTOPERATIONVALUES_DELETE',
          () => fn,
          'FAASDOCUMENTOPERATIONVALUES_EDIT',
          () => fm,
          'FAASDOCUMENTOPERATIONVALUES_INSERT',
          () => fl,
          'FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD',
          () => fr,
          'FAASINVOKEDPROVIDERVALUES_AWS',
          () => fs,
          'FAASINVOKEDPROVIDERVALUES_AZURE',
          () => ft,
          'FAASINVOKEDPROVIDERVALUES_GCP',
          () => fu,
          'FAASTRIGGERVALUES_DATASOURCE',
          () => fc,
          'FAASTRIGGERVALUES_HTTP',
          () => fd,
          'FAASTRIGGERVALUES_OTHER',
          () => fg,
          'FAASTRIGGERVALUES_PUBSUB',
          () => fe,
          'FAASTRIGGERVALUES_TIMER',
          () => ff,
          'FaasDocumentOperationValues',
          () => fo,
          'FaasInvokedProviderValues',
          () => fv,
          'FaasTriggerValues',
          () => fh,
          'HTTPFLAVORVALUES_HTTP_1_0',
          () => gz,
          'HTTPFLAVORVALUES_HTTP_1_1',
          () => gA,
          'HTTPFLAVORVALUES_HTTP_2_0',
          () => gB,
          'HTTPFLAVORVALUES_QUIC',
          () => gD,
          'HTTPFLAVORVALUES_SPDY',
          () => gC,
          'HttpFlavorValues',
          () => gE,
          'MESSAGETYPEVALUES_RECEIVED',
          () => g8,
          'MESSAGETYPEVALUES_SENT',
          () => g7,
          'MESSAGINGDESTINATIONKINDVALUES_QUEUE',
          () => gH,
          'MESSAGINGDESTINATIONKINDVALUES_TOPIC',
          () => gI,
          'MESSAGINGOPERATIONVALUES_PROCESS',
          () => gN,
          'MESSAGINGOPERATIONVALUES_RECEIVE',
          () => gM,
          'MessageTypeValues',
          () => g9,
          'MessagingDestinationKindValues',
          () => gJ,
          'MessagingOperationValues',
          () => gO,
          'NETHOSTCONNECTIONSUBTYPEVALUES_CDMA',
          () => ge,
          'NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT',
          () => gh,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EDGE',
          () => gc,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD',
          () => go,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0',
          () => gf,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A',
          () => gg,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B',
          () => gm,
          'NETHOSTCONNECTIONSUBTYPEVALUES_GPRS',
          () => gb,
          'NETHOSTCONNECTIONSUBTYPEVALUES_GSM',
          () => gq,
          'NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA',
          () => gi,
          'NETHOSTCONNECTIONSUBTYPEVALUES_HSPA',
          () => gk,
          'NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP',
          () => gp,
          'NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA',
          () => gj,
          'NETHOSTCONNECTIONSUBTYPEVALUES_IDEN',
          () => gl,
          'NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN',
          () => gs,
          'NETHOSTCONNECTIONSUBTYPEVALUES_LTE',
          () => gn,
          'NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA',
          () => gv,
          'NETHOSTCONNECTIONSUBTYPEVALUES_NR',
          () => gt,
          'NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA',
          () => gu,
          'NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA',
          () => gr,
          'NETHOSTCONNECTIONSUBTYPEVALUES_UMTS',
          () => gd,
          'NETHOSTCONNECTIONTYPEVALUES_CELL',
          () => fR,
          'NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE',
          () => fS,
          'NETHOSTCONNECTIONTYPEVALUES_UNKNOWN',
          () => fT,
          'NETHOSTCONNECTIONTYPEVALUES_WIFI',
          () => fP,
          'NETHOSTCONNECTIONTYPEVALUES_WIRED',
          () => fQ,
          'NETTRANSPORTVALUES_INPROC',
          () => fH,
          'NETTRANSPORTVALUES_IP',
          () => fE,
          'NETTRANSPORTVALUES_IP_TCP',
          () => fC,
          'NETTRANSPORTVALUES_IP_UDP',
          () => fD,
          'NETTRANSPORTVALUES_OTHER',
          () => fI,
          'NETTRANSPORTVALUES_PIPE',
          () => fG,
          'NETTRANSPORTVALUES_UNIX',
          () => fF,
          'NetHostConnectionSubtypeValues',
          () => gw,
          'NetHostConnectionTypeValues',
          () => fU,
          'NetTransportValues',
          () => fJ,
          'RPCGRPCSTATUSCODEVALUES_ABORTED',
          () => gZ,
          'RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS',
          () => gV,
          'RPCGRPCSTATUSCODEVALUES_CANCELLED',
          () => gQ,
          'RPCGRPCSTATUSCODEVALUES_DATA_LOSS',
          () => g2,
          'RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED',
          () => gT,
          'RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION',
          () => gY,
          'RPCGRPCSTATUSCODEVALUES_INTERNAL',
          () => g0,
          'RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT',
          () => gS,
          'RPCGRPCSTATUSCODEVALUES_NOT_FOUND',
          () => gU,
          'RPCGRPCSTATUSCODEVALUES_OK',
          () => gP,
          'RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE',
          () => g$,
          'RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED',
          () => gW,
          'RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED',
          () => gX,
          'RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED',
          () => g3,
          'RPCGRPCSTATUSCODEVALUES_UNAVAILABLE',
          () => g1,
          'RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED',
          () => g_,
          'RPCGRPCSTATUSCODEVALUES_UNKNOWN',
          () => gR,
          'RpcGrpcStatusCodeValues',
          () => g4,
          'SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET',
          () => cF,
          'SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS',
          () => cR,
          'SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ',
          () => cC,
          'SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY',
          () => cy,
          'SEMATTRS_AWS_DYNAMODB_COUNT',
          () => cP,
          'SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE',
          () => cK,
          'SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES',
          () => cI,
          'SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES',
          () => cS,
          'SEMATTRS_AWS_DYNAMODB_INDEX_NAME',
          () => cG,
          'SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS',
          () => cz,
          'SEMATTRS_AWS_DYNAMODB_LIMIT',
          () => cE,
          'SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES',
          () => cJ,
          'SEMATTRS_AWS_DYNAMODB_PROJECTION',
          () => cD,
          'SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY',
          () => cA,
          'SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY',
          () => cB,
          'SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT',
          () => cQ,
          'SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD',
          () => cM,
          'SEMATTRS_AWS_DYNAMODB_SEGMENT',
          () => cN,
          'SEMATTRS_AWS_DYNAMODB_SELECT',
          () => cH,
          'SEMATTRS_AWS_DYNAMODB_TABLE_COUNT',
          () => cL,
          'SEMATTRS_AWS_DYNAMODB_TABLE_NAMES',
          () => cx,
          'SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS',
          () => cO,
          'SEMATTRS_AWS_LAMBDA_INVOKED_ARN',
          () => bm,
          'SEMATTRS_CODE_FILEPATH',
          () => cg,
          'SEMATTRS_CODE_FUNCTION',
          () => ce,
          'SEMATTRS_CODE_LINENO',
          () => ch,
          'SEMATTRS_CODE_NAMESPACE',
          () => cf,
          'SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL',
          () => bx,
          'SEMATTRS_DB_CASSANDRA_COORDINATOR_DC',
          () => bC,
          'SEMATTRS_DB_CASSANDRA_COORDINATOR_ID',
          () => bB,
          'SEMATTRS_DB_CASSANDRA_IDEMPOTENCE',
          () => bz,
          'SEMATTRS_DB_CASSANDRA_KEYSPACE',
          () => bv,
          'SEMATTRS_DB_CASSANDRA_PAGE_SIZE',
          () => bw,
          'SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT',
          () => bA,
          'SEMATTRS_DB_CASSANDRA_TABLE',
          () => by,
          'SEMATTRS_DB_CONNECTION_STRING',
          () => bo,
          'SEMATTRS_DB_HBASE_NAMESPACE',
          () => bD,
          'SEMATTRS_DB_JDBC_DRIVER_CLASSNAME',
          () => bq,
          'SEMATTRS_DB_MONGODB_COLLECTION',
          () => bF,
          'SEMATTRS_DB_MSSQL_INSTANCE_NAME',
          () => bu,
          'SEMATTRS_DB_NAME',
          () => br,
          'SEMATTRS_DB_OPERATION',
          () => bt,
          'SEMATTRS_DB_REDIS_DATABASE_INDEX',
          () => bE,
          'SEMATTRS_DB_SQL_TABLE',
          () => bG,
          'SEMATTRS_DB_STATEMENT',
          () => bs,
          'SEMATTRS_DB_SYSTEM',
          () => bn,
          'SEMATTRS_DB_USER',
          () => bp,
          'SEMATTRS_ENDUSER_ID',
          () => b9,
          'SEMATTRS_ENDUSER_ROLE',
          () => ca,
          'SEMATTRS_ENDUSER_SCOPE',
          () => cb,
          'SEMATTRS_EXCEPTION_ESCAPED',
          () => bK,
          'SEMATTRS_EXCEPTION_MESSAGE',
          () => bI,
          'SEMATTRS_EXCEPTION_STACKTRACE',
          () => bJ,
          'SEMATTRS_EXCEPTION_TYPE',
          () => bH,
          'SEMATTRS_FAAS_COLDSTART',
          () => bT,
          'SEMATTRS_FAAS_CRON',
          () => bS,
          'SEMATTRS_FAAS_DOCUMENT_COLLECTION',
          () => bN,
          'SEMATTRS_FAAS_DOCUMENT_NAME',
          () => bQ,
          'SEMATTRS_FAAS_DOCUMENT_OPERATION',
          () => bO,
          'SEMATTRS_FAAS_DOCUMENT_TIME',
          () => bP,
          'SEMATTRS_FAAS_EXECUTION',
          () => bM,
          'SEMATTRS_FAAS_INVOKED_NAME',
          () => bU,
          'SEMATTRS_FAAS_INVOKED_PROVIDER',
          () => bV,
          'SEMATTRS_FAAS_INVOKED_REGION',
          () => bW,
          'SEMATTRS_FAAS_TIME',
          () => bR,
          'SEMATTRS_FAAS_TRIGGER',
          () => bL,
          'SEMATTRS_HTTP_CLIENT_IP',
          () => cw,
          'SEMATTRS_HTTP_FLAVOR',
          () => co,
          'SEMATTRS_HTTP_HOST',
          () => cl,
          'SEMATTRS_HTTP_METHOD',
          () => ci,
          'SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH',
          () => cq,
          'SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED',
          () => cr,
          'SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH',
          () => cs,
          'SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED',
          () => ct,
          'SEMATTRS_HTTP_ROUTE',
          () => cv,
          'SEMATTRS_HTTP_SCHEME',
          () => cm,
          'SEMATTRS_HTTP_SERVER_NAME',
          () => cu,
          'SEMATTRS_HTTP_STATUS_CODE',
          () => cn,
          'SEMATTRS_HTTP_TARGET',
          () => ck,
          'SEMATTRS_HTTP_URL',
          () => cj,
          'SEMATTRS_HTTP_USER_AGENT',
          () => cp,
          'SEMATTRS_MESSAGE_COMPRESSED_SIZE',
          () => dk,
          'SEMATTRS_MESSAGE_ID',
          () => dj,
          'SEMATTRS_MESSAGE_TYPE',
          () => di,
          'SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE',
          () => dl,
          'SEMATTRS_MESSAGING_CONSUMER_ID',
          () => c3,
          'SEMATTRS_MESSAGING_CONVERSATION_ID',
          () => c_,
          'SEMATTRS_MESSAGING_DESTINATION',
          () => cU,
          'SEMATTRS_MESSAGING_DESTINATION_KIND',
          () => cV,
          'SEMATTRS_MESSAGING_KAFKA_CLIENT_ID',
          () => c7,
          'SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP',
          () => c6,
          'SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY',
          () => c5,
          'SEMATTRS_MESSAGING_KAFKA_PARTITION',
          () => c8,
          'SEMATTRS_MESSAGING_KAFKA_TOMBSTONE',
          () => c9,
          'SEMATTRS_MESSAGING_MESSAGE_ID',
          () => c$,
          'SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES',
          () => c1,
          'SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES',
          () => c0,
          'SEMATTRS_MESSAGING_OPERATION',
          () => c2,
          'SEMATTRS_MESSAGING_PROTOCOL',
          () => cX,
          'SEMATTRS_MESSAGING_PROTOCOL_VERSION',
          () => cY,
          'SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY',
          () => c4,
          'SEMATTRS_MESSAGING_SYSTEM',
          () => cT,
          'SEMATTRS_MESSAGING_TEMP_DESTINATION',
          () => cW,
          'SEMATTRS_MESSAGING_URL',
          () => cZ,
          'SEMATTRS_NET_HOST_CARRIER_ICC',
          () => b7,
          'SEMATTRS_NET_HOST_CARRIER_MCC',
          () => b5,
          'SEMATTRS_NET_HOST_CARRIER_MNC',
          () => b6,
          'SEMATTRS_NET_HOST_CARRIER_NAME',
          () => b4,
          'SEMATTRS_NET_HOST_CONNECTION_SUBTYPE',
          () => b3,
          'SEMATTRS_NET_HOST_CONNECTION_TYPE',
          () => b2,
          'SEMATTRS_NET_HOST_IP',
          () => b_,
          'SEMATTRS_NET_HOST_NAME',
          () => b1,
          'SEMATTRS_NET_HOST_PORT',
          () => b0,
          'SEMATTRS_NET_PEER_IP',
          () => bY,
          'SEMATTRS_NET_PEER_NAME',
          () => b$,
          'SEMATTRS_NET_PEER_PORT',
          () => bZ,
          'SEMATTRS_NET_TRANSPORT',
          () => bX,
          'SEMATTRS_PEER_SERVICE',
          () => b8,
          'SEMATTRS_RPC_GRPC_STATUS_CODE',
          () => dd,
          'SEMATTRS_RPC_JSONRPC_ERROR_CODE',
          () => dg,
          'SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE',
          () => dh,
          'SEMATTRS_RPC_JSONRPC_REQUEST_ID',
          () => df,
          'SEMATTRS_RPC_JSONRPC_VERSION',
          () => de,
          'SEMATTRS_RPC_METHOD',
          () => dc,
          'SEMATTRS_RPC_SERVICE',
          () => db,
          'SEMATTRS_RPC_SYSTEM',
          () => da,
          'SEMATTRS_THREAD_ID',
          () => cc,
          'SEMATTRS_THREAD_NAME',
          () => cd,
          'SemanticAttributes',
          () => dm,
        ],
        44267
      ),
      a.s([], 96653),
      a.i(96653),
      a.s(
        [
          'DBCASSANDRACONSISTENCYLEVELVALUES_ALL',
          () => eX,
          'DBCASSANDRACONSISTENCYLEVELVALUES_ANY',
          () => e3,
          'DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM',
          () => eY,
          'DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE',
          () => e2,
          'DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM',
          () => e$,
          'DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL',
          () => e5,
          'DBCASSANDRACONSISTENCYLEVELVALUES_ONE',
          () => e_,
          'DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM',
          () => eZ,
          'DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL',
          () => e4,
          'DBCASSANDRACONSISTENCYLEVELVALUES_THREE',
          () => e1,
          'DBCASSANDRACONSISTENCYLEVELVALUES_TWO',
          () => e0,
          'DBSYSTEMVALUES_ADABAS',
          () => el,
          'DBSYSTEMVALUES_CACHE',
          () => ek,
          'DBSYSTEMVALUES_CASSANDRA',
          () => eC,
          'DBSYSTEMVALUES_CLOUDSCAPE',
          () => ec,
          'DBSYSTEMVALUES_COCKROACHDB',
          () => eO,
          'DBSYSTEMVALUES_COLDFUSION',
          () => eB,
          'DBSYSTEMVALUES_COSMOSDB',
          () => eI,
          'DBSYSTEMVALUES_COUCHBASE',
          () => eG,
          'DBSYSTEMVALUES_COUCHDB',
          () => eH,
          'DBSYSTEMVALUES_DB2',
          () => d8,
          'DBSYSTEMVALUES_DERBY',
          () => en,
          'DBSYSTEMVALUES_DYNAMODB',
          () => eJ,
          'DBSYSTEMVALUES_EDB',
          () => ej,
          'DBSYSTEMVALUES_ELASTICSEARCH',
          () => eM,
          'DBSYSTEMVALUES_FILEMAKER',
          () => eo,
          'DBSYSTEMVALUES_FIREBIRD',
          () => em,
          'DBSYSTEMVALUES_FIRSTSQL',
          () => ei,
          'DBSYSTEMVALUES_GEODE',
          () => eL,
          'DBSYSTEMVALUES_H2',
          () => eA,
          'DBSYSTEMVALUES_HANADB',
          () => eg,
          'DBSYSTEMVALUES_HBASE',
          () => eD,
          'DBSYSTEMVALUES_HIVE',
          () => eb,
          'DBSYSTEMVALUES_HSQLDB',
          () => ed,
          'DBSYSTEMVALUES_INFORMIX',
          () => ep,
          'DBSYSTEMVALUES_INGRES',
          () => eh,
          'DBSYSTEMVALUES_INSTANTDB',
          () => eq,
          'DBSYSTEMVALUES_INTERBASE',
          () => er,
          'DBSYSTEMVALUES_MARIADB',
          () => es,
          'DBSYSTEMVALUES_MAXDB',
          () => ef,
          'DBSYSTEMVALUES_MEMCACHED',
          () => eN,
          'DBSYSTEMVALUES_MONGODB',
          () => eE,
          'DBSYSTEMVALUES_MSSQL',
          () => d5,
          'DBSYSTEMVALUES_MYSQL',
          () => d6,
          'DBSYSTEMVALUES_NEO4J',
          () => eK,
          'DBSYSTEMVALUES_NETEZZA',
          () => et,
          'DBSYSTEMVALUES_ORACLE',
          () => d7,
          'DBSYSTEMVALUES_OTHER_SQL',
          () => d4,
          'DBSYSTEMVALUES_PERVASIVE',
          () => eu,
          'DBSYSTEMVALUES_POINTBASE',
          () => ev,
          'DBSYSTEMVALUES_POSTGRESQL',
          () => d9,
          'DBSYSTEMVALUES_PROGRESS',
          () => ee,
          'DBSYSTEMVALUES_REDIS',
          () => eF,
          'DBSYSTEMVALUES_REDSHIFT',
          () => ea,
          'DBSYSTEMVALUES_SQLITE',
          () => ew,
          'DBSYSTEMVALUES_SYBASE',
          () => ex,
          'DBSYSTEMVALUES_TERADATA',
          () => ey,
          'DBSYSTEMVALUES_VERTICA',
          () => ez,
          'DbCassandraConsistencyLevelValues',
          () => e6,
          'DbSystemValues',
          () => eP,
          'FAASDOCUMENTOPERATIONVALUES_DELETE',
          () => fn,
          'FAASDOCUMENTOPERATIONVALUES_EDIT',
          () => fm,
          'FAASDOCUMENTOPERATIONVALUES_INSERT',
          () => fl,
          'FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD',
          () => fr,
          'FAASINVOKEDPROVIDERVALUES_AWS',
          () => fs,
          'FAASINVOKEDPROVIDERVALUES_AZURE',
          () => ft,
          'FAASINVOKEDPROVIDERVALUES_GCP',
          () => fu,
          'FAASTRIGGERVALUES_DATASOURCE',
          () => fc,
          'FAASTRIGGERVALUES_HTTP',
          () => fd,
          'FAASTRIGGERVALUES_OTHER',
          () => fg,
          'FAASTRIGGERVALUES_PUBSUB',
          () => fe,
          'FAASTRIGGERVALUES_TIMER',
          () => ff,
          'FaasDocumentOperationValues',
          () => fo,
          'FaasInvokedProviderValues',
          () => fv,
          'FaasTriggerValues',
          () => fh,
          'HTTPFLAVORVALUES_HTTP_1_0',
          () => gz,
          'HTTPFLAVORVALUES_HTTP_1_1',
          () => gA,
          'HTTPFLAVORVALUES_HTTP_2_0',
          () => gB,
          'HTTPFLAVORVALUES_QUIC',
          () => gD,
          'HTTPFLAVORVALUES_SPDY',
          () => gC,
          'HttpFlavorValues',
          () => gE,
          'MESSAGETYPEVALUES_RECEIVED',
          () => g8,
          'MESSAGETYPEVALUES_SENT',
          () => g7,
          'MESSAGINGDESTINATIONKINDVALUES_QUEUE',
          () => gH,
          'MESSAGINGDESTINATIONKINDVALUES_TOPIC',
          () => gI,
          'MESSAGINGOPERATIONVALUES_PROCESS',
          () => gN,
          'MESSAGINGOPERATIONVALUES_RECEIVE',
          () => gM,
          'MessageTypeValues',
          () => g9,
          'MessagingDestinationKindValues',
          () => gJ,
          'MessagingOperationValues',
          () => gO,
          'NETHOSTCONNECTIONSUBTYPEVALUES_CDMA',
          () => ge,
          'NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT',
          () => gh,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EDGE',
          () => gc,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD',
          () => go,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0',
          () => gf,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A',
          () => gg,
          'NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B',
          () => gm,
          'NETHOSTCONNECTIONSUBTYPEVALUES_GPRS',
          () => gb,
          'NETHOSTCONNECTIONSUBTYPEVALUES_GSM',
          () => gq,
          'NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA',
          () => gi,
          'NETHOSTCONNECTIONSUBTYPEVALUES_HSPA',
          () => gk,
          'NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP',
          () => gp,
          'NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA',
          () => gj,
          'NETHOSTCONNECTIONSUBTYPEVALUES_IDEN',
          () => gl,
          'NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN',
          () => gs,
          'NETHOSTCONNECTIONSUBTYPEVALUES_LTE',
          () => gn,
          'NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA',
          () => gv,
          'NETHOSTCONNECTIONSUBTYPEVALUES_NR',
          () => gt,
          'NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA',
          () => gu,
          'NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA',
          () => gr,
          'NETHOSTCONNECTIONSUBTYPEVALUES_UMTS',
          () => gd,
          'NETHOSTCONNECTIONTYPEVALUES_CELL',
          () => fR,
          'NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE',
          () => fS,
          'NETHOSTCONNECTIONTYPEVALUES_UNKNOWN',
          () => fT,
          'NETHOSTCONNECTIONTYPEVALUES_WIFI',
          () => fP,
          'NETHOSTCONNECTIONTYPEVALUES_WIRED',
          () => fQ,
          'NETTRANSPORTVALUES_INPROC',
          () => fH,
          'NETTRANSPORTVALUES_IP',
          () => fE,
          'NETTRANSPORTVALUES_IP_TCP',
          () => fC,
          'NETTRANSPORTVALUES_IP_UDP',
          () => fD,
          'NETTRANSPORTVALUES_OTHER',
          () => fI,
          'NETTRANSPORTVALUES_PIPE',
          () => fG,
          'NETTRANSPORTVALUES_UNIX',
          () => fF,
          'NetHostConnectionSubtypeValues',
          () => gw,
          'NetHostConnectionTypeValues',
          () => fU,
          'NetTransportValues',
          () => fJ,
          'RPCGRPCSTATUSCODEVALUES_ABORTED',
          () => gZ,
          'RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS',
          () => gV,
          'RPCGRPCSTATUSCODEVALUES_CANCELLED',
          () => gQ,
          'RPCGRPCSTATUSCODEVALUES_DATA_LOSS',
          () => g2,
          'RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED',
          () => gT,
          'RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION',
          () => gY,
          'RPCGRPCSTATUSCODEVALUES_INTERNAL',
          () => g0,
          'RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT',
          () => gS,
          'RPCGRPCSTATUSCODEVALUES_NOT_FOUND',
          () => gU,
          'RPCGRPCSTATUSCODEVALUES_OK',
          () => gP,
          'RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE',
          () => g$,
          'RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED',
          () => gW,
          'RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED',
          () => gX,
          'RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED',
          () => g3,
          'RPCGRPCSTATUSCODEVALUES_UNAVAILABLE',
          () => g1,
          'RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED',
          () => g_,
          'RPCGRPCSTATUSCODEVALUES_UNKNOWN',
          () => gR,
          'RpcGrpcStatusCodeValues',
          () => g4,
          'SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET',
          () => cF,
          'SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS',
          () => cR,
          'SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ',
          () => cC,
          'SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY',
          () => cy,
          'SEMATTRS_AWS_DYNAMODB_COUNT',
          () => cP,
          'SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE',
          () => cK,
          'SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES',
          () => cI,
          'SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES',
          () => cS,
          'SEMATTRS_AWS_DYNAMODB_INDEX_NAME',
          () => cG,
          'SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS',
          () => cz,
          'SEMATTRS_AWS_DYNAMODB_LIMIT',
          () => cE,
          'SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES',
          () => cJ,
          'SEMATTRS_AWS_DYNAMODB_PROJECTION',
          () => cD,
          'SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY',
          () => cA,
          'SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY',
          () => cB,
          'SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT',
          () => cQ,
          'SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD',
          () => cM,
          'SEMATTRS_AWS_DYNAMODB_SEGMENT',
          () => cN,
          'SEMATTRS_AWS_DYNAMODB_SELECT',
          () => cH,
          'SEMATTRS_AWS_DYNAMODB_TABLE_COUNT',
          () => cL,
          'SEMATTRS_AWS_DYNAMODB_TABLE_NAMES',
          () => cx,
          'SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS',
          () => cO,
          'SEMATTRS_AWS_LAMBDA_INVOKED_ARN',
          () => bm,
          'SEMATTRS_CODE_FILEPATH',
          () => cg,
          'SEMATTRS_CODE_FUNCTION',
          () => ce,
          'SEMATTRS_CODE_LINENO',
          () => ch,
          'SEMATTRS_CODE_NAMESPACE',
          () => cf,
          'SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL',
          () => bx,
          'SEMATTRS_DB_CASSANDRA_COORDINATOR_DC',
          () => bC,
          'SEMATTRS_DB_CASSANDRA_COORDINATOR_ID',
          () => bB,
          'SEMATTRS_DB_CASSANDRA_IDEMPOTENCE',
          () => bz,
          'SEMATTRS_DB_CASSANDRA_KEYSPACE',
          () => bv,
          'SEMATTRS_DB_CASSANDRA_PAGE_SIZE',
          () => bw,
          'SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT',
          () => bA,
          'SEMATTRS_DB_CASSANDRA_TABLE',
          () => by,
          'SEMATTRS_DB_CONNECTION_STRING',
          () => bo,
          'SEMATTRS_DB_HBASE_NAMESPACE',
          () => bD,
          'SEMATTRS_DB_JDBC_DRIVER_CLASSNAME',
          () => bq,
          'SEMATTRS_DB_MONGODB_COLLECTION',
          () => bF,
          'SEMATTRS_DB_MSSQL_INSTANCE_NAME',
          () => bu,
          'SEMATTRS_DB_NAME',
          () => br,
          'SEMATTRS_DB_OPERATION',
          () => bt,
          'SEMATTRS_DB_REDIS_DATABASE_INDEX',
          () => bE,
          'SEMATTRS_DB_SQL_TABLE',
          () => bG,
          'SEMATTRS_DB_STATEMENT',
          () => bs,
          'SEMATTRS_DB_SYSTEM',
          () => bn,
          'SEMATTRS_DB_USER',
          () => bp,
          'SEMATTRS_ENDUSER_ID',
          () => b9,
          'SEMATTRS_ENDUSER_ROLE',
          () => ca,
          'SEMATTRS_ENDUSER_SCOPE',
          () => cb,
          'SEMATTRS_EXCEPTION_ESCAPED',
          () => bK,
          'SEMATTRS_EXCEPTION_MESSAGE',
          () => bI,
          'SEMATTRS_EXCEPTION_STACKTRACE',
          () => bJ,
          'SEMATTRS_EXCEPTION_TYPE',
          () => bH,
          'SEMATTRS_FAAS_COLDSTART',
          () => bT,
          'SEMATTRS_FAAS_CRON',
          () => bS,
          'SEMATTRS_FAAS_DOCUMENT_COLLECTION',
          () => bN,
          'SEMATTRS_FAAS_DOCUMENT_NAME',
          () => bQ,
          'SEMATTRS_FAAS_DOCUMENT_OPERATION',
          () => bO,
          'SEMATTRS_FAAS_DOCUMENT_TIME',
          () => bP,
          'SEMATTRS_FAAS_EXECUTION',
          () => bM,
          'SEMATTRS_FAAS_INVOKED_NAME',
          () => bU,
          'SEMATTRS_FAAS_INVOKED_PROVIDER',
          () => bV,
          'SEMATTRS_FAAS_INVOKED_REGION',
          () => bW,
          'SEMATTRS_FAAS_TIME',
          () => bR,
          'SEMATTRS_FAAS_TRIGGER',
          () => bL,
          'SEMATTRS_HTTP_CLIENT_IP',
          () => cw,
          'SEMATTRS_HTTP_FLAVOR',
          () => co,
          'SEMATTRS_HTTP_HOST',
          () => cl,
          'SEMATTRS_HTTP_METHOD',
          () => ci,
          'SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH',
          () => cq,
          'SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED',
          () => cr,
          'SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH',
          () => cs,
          'SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED',
          () => ct,
          'SEMATTRS_HTTP_ROUTE',
          () => cv,
          'SEMATTRS_HTTP_SCHEME',
          () => cm,
          'SEMATTRS_HTTP_SERVER_NAME',
          () => cu,
          'SEMATTRS_HTTP_STATUS_CODE',
          () => cn,
          'SEMATTRS_HTTP_TARGET',
          () => ck,
          'SEMATTRS_HTTP_URL',
          () => cj,
          'SEMATTRS_HTTP_USER_AGENT',
          () => cp,
          'SEMATTRS_MESSAGE_COMPRESSED_SIZE',
          () => dk,
          'SEMATTRS_MESSAGE_ID',
          () => dj,
          'SEMATTRS_MESSAGE_TYPE',
          () => di,
          'SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE',
          () => dl,
          'SEMATTRS_MESSAGING_CONSUMER_ID',
          () => c3,
          'SEMATTRS_MESSAGING_CONVERSATION_ID',
          () => c_,
          'SEMATTRS_MESSAGING_DESTINATION',
          () => cU,
          'SEMATTRS_MESSAGING_DESTINATION_KIND',
          () => cV,
          'SEMATTRS_MESSAGING_KAFKA_CLIENT_ID',
          () => c7,
          'SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP',
          () => c6,
          'SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY',
          () => c5,
          'SEMATTRS_MESSAGING_KAFKA_PARTITION',
          () => c8,
          'SEMATTRS_MESSAGING_KAFKA_TOMBSTONE',
          () => c9,
          'SEMATTRS_MESSAGING_MESSAGE_ID',
          () => c$,
          'SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES',
          () => c1,
          'SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES',
          () => c0,
          'SEMATTRS_MESSAGING_OPERATION',
          () => c2,
          'SEMATTRS_MESSAGING_PROTOCOL',
          () => cX,
          'SEMATTRS_MESSAGING_PROTOCOL_VERSION',
          () => cY,
          'SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY',
          () => c4,
          'SEMATTRS_MESSAGING_SYSTEM',
          () => cT,
          'SEMATTRS_MESSAGING_TEMP_DESTINATION',
          () => cW,
          'SEMATTRS_MESSAGING_URL',
          () => cZ,
          'SEMATTRS_NET_HOST_CARRIER_ICC',
          () => b7,
          'SEMATTRS_NET_HOST_CARRIER_MCC',
          () => b5,
          'SEMATTRS_NET_HOST_CARRIER_MNC',
          () => b6,
          'SEMATTRS_NET_HOST_CARRIER_NAME',
          () => b4,
          'SEMATTRS_NET_HOST_CONNECTION_SUBTYPE',
          () => b3,
          'SEMATTRS_NET_HOST_CONNECTION_TYPE',
          () => b2,
          'SEMATTRS_NET_HOST_IP',
          () => b_,
          'SEMATTRS_NET_HOST_NAME',
          () => b1,
          'SEMATTRS_NET_HOST_PORT',
          () => b0,
          'SEMATTRS_NET_PEER_IP',
          () => bY,
          'SEMATTRS_NET_PEER_NAME',
          () => b$,
          'SEMATTRS_NET_PEER_PORT',
          () => bZ,
          'SEMATTRS_NET_TRANSPORT',
          () => bX,
          'SEMATTRS_PEER_SERVICE',
          () => b8,
          'SEMATTRS_RPC_GRPC_STATUS_CODE',
          () => dd,
          'SEMATTRS_RPC_JSONRPC_ERROR_CODE',
          () => dg,
          'SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE',
          () => dh,
          'SEMATTRS_RPC_JSONRPC_REQUEST_ID',
          () => df,
          'SEMATTRS_RPC_JSONRPC_VERSION',
          () => de,
          'SEMATTRS_RPC_METHOD',
          () => dc,
          'SEMATTRS_RPC_SERVICE',
          () => db,
          'SEMATTRS_RPC_SYSTEM',
          () => da,
          'SEMATTRS_THREAD_ID',
          () => cc,
          'SEMATTRS_THREAD_NAME',
          () => cd,
          'SemanticAttributes',
          () => dm,
        ],
        17007
      ));
    let c = 'aws.lambda.invoked_arn',
      d = 'db.system',
      e = 'db.connection_string',
      f = 'db.user',
      g = 'db.jdbc.driver_classname',
      h = 'db.name',
      i = 'db.statement',
      j = 'db.operation',
      k = 'db.mssql.instance_name',
      l = 'db.cassandra.keyspace',
      m = 'db.cassandra.page_size',
      n = 'db.cassandra.consistency_level',
      o = 'db.cassandra.table',
      p = 'db.cassandra.idempotence',
      q = 'db.cassandra.speculative_execution_count',
      r = 'db.cassandra.coordinator.id',
      s = 'db.cassandra.coordinator.dc',
      t = 'db.hbase.namespace',
      u = 'db.redis.database_index',
      v = 'db.mongodb.collection',
      w = 'db.sql.table',
      x = 'exception.type',
      y = 'exception.message',
      z = 'exception.stacktrace',
      A = 'exception.escaped',
      B = 'faas.trigger',
      C = 'faas.execution',
      D = 'faas.document.collection',
      E = 'faas.document.operation',
      F = 'faas.document.time',
      G = 'faas.document.name',
      H = 'faas.time',
      I = 'faas.cron',
      J = 'faas.coldstart',
      K = 'faas.invoked_name',
      L = 'faas.invoked_provider',
      M = 'faas.invoked_region',
      N = 'net.transport',
      O = 'net.peer.ip',
      P = 'net.peer.port',
      Q = 'net.peer.name',
      R = 'net.host.ip',
      S = 'net.host.port',
      T = 'net.host.name',
      U = 'net.host.connection.type',
      V = 'net.host.connection.subtype',
      W = 'net.host.carrier.name',
      X = 'net.host.carrier.mcc',
      Y = 'net.host.carrier.mnc',
      Z = 'net.host.carrier.icc',
      $ = 'peer.service',
      _ = 'enduser.id',
      aa = 'enduser.role',
      ab = 'enduser.scope',
      ac = 'thread.id',
      ad = 'thread.name',
      ae = 'code.function',
      af = 'code.namespace',
      ag = 'code.filepath',
      ah = 'code.lineno',
      ai = 'http.method',
      aj = 'http.url',
      ak = 'http.target',
      al = 'http.host',
      am = 'http.scheme',
      an = 'http.status_code',
      ao = 'http.flavor',
      ap = 'http.user_agent',
      aq = 'http.request_content_length',
      ar = 'http.request_content_length_uncompressed',
      as = 'http.response_content_length',
      at = 'http.response_content_length_uncompressed',
      au = 'http.server_name',
      av = 'http.route',
      aw = 'http.client_ip',
      ax = 'aws.dynamodb.table_names',
      ay = 'aws.dynamodb.consumed_capacity',
      az = 'aws.dynamodb.item_collection_metrics',
      aA = 'aws.dynamodb.provisioned_read_capacity',
      aB = 'aws.dynamodb.provisioned_write_capacity',
      aC = 'aws.dynamodb.consistent_read',
      aD = 'aws.dynamodb.projection',
      aE = 'aws.dynamodb.limit',
      aF = 'aws.dynamodb.attributes_to_get',
      aG = 'aws.dynamodb.index_name',
      aH = 'aws.dynamodb.select',
      aI = 'aws.dynamodb.global_secondary_indexes',
      aJ = 'aws.dynamodb.local_secondary_indexes',
      aK = 'aws.dynamodb.exclusive_start_table',
      aL = 'aws.dynamodb.table_count',
      aM = 'aws.dynamodb.scan_forward',
      aN = 'aws.dynamodb.segment',
      aO = 'aws.dynamodb.total_segments',
      aP = 'aws.dynamodb.count',
      aQ = 'aws.dynamodb.scanned_count',
      aR = 'aws.dynamodb.attribute_definitions',
      aS = 'aws.dynamodb.global_secondary_index_updates',
      aT = 'messaging.system',
      aU = 'messaging.destination',
      aV = 'messaging.destination_kind',
      aW = 'messaging.temp_destination',
      aX = 'messaging.protocol',
      aY = 'messaging.protocol_version',
      aZ = 'messaging.url',
      a$ = 'messaging.message_id',
      a_ = 'messaging.conversation_id',
      a0 = 'messaging.message_payload_size_bytes',
      a1 = 'messaging.message_payload_compressed_size_bytes',
      a2 = 'messaging.operation',
      a3 = 'messaging.consumer_id',
      a4 = 'messaging.rabbitmq.routing_key',
      a5 = 'messaging.kafka.message_key',
      a6 = 'messaging.kafka.consumer_group',
      a7 = 'messaging.kafka.client_id',
      a8 = 'messaging.kafka.partition',
      a9 = 'messaging.kafka.tombstone',
      ba = 'rpc.system',
      bb = 'rpc.service',
      bc = 'rpc.method',
      bd = 'rpc.grpc.status_code',
      be = 'rpc.jsonrpc.version',
      bf = 'rpc.jsonrpc.request_id',
      bg = 'rpc.jsonrpc.error_code',
      bh = 'rpc.jsonrpc.error_message',
      bi = 'message.type',
      bj = 'message.id',
      bk = 'message.compressed_size',
      bl = 'message.uncompressed_size',
      bm = c,
      bn = d,
      bo = e,
      bp = f,
      bq = g,
      br = h,
      bs = i,
      bt = j,
      bu = k,
      bv = l,
      bw = m,
      bx = n,
      by = o,
      bz = p,
      bA = q,
      bB = r,
      bC = s,
      bD = t,
      bE = u,
      bF = v,
      bG = w,
      bH = x,
      bI = y,
      bJ = z,
      bK = A,
      bL = B,
      bM = C,
      bN = D,
      bO = E,
      bP = F,
      bQ = G,
      bR = H,
      bS = I,
      bT = J,
      bU = K,
      bV = L,
      bW = M,
      bX = N,
      bY = O,
      bZ = P,
      b$ = Q,
      b_ = R,
      b0 = S,
      b1 = T,
      b2 = U,
      b3 = V,
      b4 = W,
      b5 = X,
      b6 = Y,
      b7 = Z,
      b8 = $,
      b9 = _,
      ca = aa,
      cb = ab,
      cc = ac,
      cd = ad,
      ce = ae,
      cf = af,
      cg = ag,
      ch = ah,
      ci = ai,
      cj = aj,
      ck = ak,
      cl = al,
      cm = am,
      cn = an,
      co = ao,
      cp = ap,
      cq = aq,
      cr = ar,
      cs = as,
      ct = at,
      cu = au,
      cv = av,
      cw = aw,
      cx = ax,
      cy = ay,
      cz = az,
      cA = aA,
      cB = aB,
      cC = aC,
      cD = aD,
      cE = aE,
      cF = aF,
      cG = aG,
      cH = aH,
      cI = aI,
      cJ = aJ,
      cK = aK,
      cL = aL,
      cM = aM,
      cN = aN,
      cO = aO,
      cP = aP,
      cQ = aQ,
      cR = aR,
      cS = aS,
      cT = aT,
      cU = aU,
      cV = aV,
      cW = aW,
      cX = aX,
      cY = aY,
      cZ = aZ,
      c$ = a$,
      c_ = a_,
      c0 = a0,
      c1 = a1,
      c2 = a2,
      c3 = a3,
      c4 = a4,
      c5 = a5,
      c6 = a6,
      c7 = a7,
      c8 = a8,
      c9 = a9,
      da = ba,
      db = bb,
      dc = bc,
      dd = bd,
      de = be,
      df = bf,
      dg = bg,
      dh = bh,
      di = bi,
      dj = bj,
      dk = bk,
      dl = bl,
      dm = b([
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u,
        v,
        w,
        x,
        y,
        z,
        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,
        $,
        _,
        aa,
        ab,
        ac,
        ad,
        ae,
        af,
        ag,
        ah,
        ai,
        aj,
        ak,
        al,
        am,
        an,
        ao,
        ap,
        aq,
        ar,
        as,
        at,
        au,
        av,
        aw,
        ax,
        ay,
        az,
        aA,
        aB,
        aC,
        aD,
        aE,
        aF,
        aG,
        aH,
        aI,
        aJ,
        aK,
        aL,
        aM,
        aN,
        aO,
        aP,
        aQ,
        aR,
        aS,
        aT,
        aU,
        aV,
        aW,
        aX,
        aY,
        aZ,
        a$,
        a_,
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
        ba,
        bb,
        bc,
        bd,
        be,
        bf,
        bg,
        bh,
        bi,
        bj,
        bk,
        bl,
      ]),
      dn = 'other_sql',
      dp = 'mssql',
      dq = 'mysql',
      dr = 'oracle',
      ds = 'postgresql',
      dt = 'redshift',
      du = 'hive',
      dv = 'cloudscape',
      dw = 'hsqldb',
      dx = 'progress',
      dy = 'maxdb',
      dz = 'hanadb',
      dA = 'ingres',
      dB = 'firstsql',
      dC = 'cache',
      dD = 'adabas',
      dE = 'firebird',
      dF = 'derby',
      dG = 'filemaker',
      dH = 'informix',
      dI = 'instantdb',
      dJ = 'interbase',
      dK = 'mariadb',
      dL = 'netezza',
      dM = 'pervasive',
      dN = 'pointbase',
      dO = 'sqlite',
      dP = 'sybase',
      dQ = 'teradata',
      dR = 'vertica',
      dS = 'coldfusion',
      dT = 'cassandra',
      dU = 'hbase',
      dV = 'mongodb',
      dW = 'redis',
      dX = 'couchbase',
      dY = 'couchdb',
      dZ = 'cosmosdb',
      d$ = 'dynamodb',
      d_ = 'neo4j',
      d0 = 'geode',
      d1 = 'elasticsearch',
      d2 = 'memcached',
      d3 = 'cockroachdb',
      d4 = dn,
      d5 = dp,
      d6 = dq,
      d7 = dr,
      d8 = 'db2',
      d9 = ds,
      ea = dt,
      eb = du,
      ec = dv,
      ed = dw,
      ee = dx,
      ef = dy,
      eg = dz,
      eh = dA,
      ei = dB,
      ej = 'edb',
      ek = dC,
      el = dD,
      em = dE,
      en = dF,
      eo = dG,
      ep = dH,
      eq = dI,
      er = dJ,
      es = dK,
      et = dL,
      eu = dM,
      ev = dN,
      ew = dO,
      ex = dP,
      ey = dQ,
      ez = dR,
      eA = 'h2',
      eB = dS,
      eC = dT,
      eD = dU,
      eE = dV,
      eF = dW,
      eG = dX,
      eH = dY,
      eI = dZ,
      eJ = d$,
      eK = d_,
      eL = d0,
      eM = d1,
      eN = d2,
      eO = d3,
      eP = b([
        dn,
        dp,
        dq,
        dr,
        'db2',
        ds,
        dt,
        du,
        dv,
        dw,
        dx,
        dy,
        dz,
        dA,
        dB,
        'edb',
        dC,
        dD,
        dE,
        dF,
        dG,
        dH,
        dI,
        dJ,
        dK,
        dL,
        dM,
        dN,
        dO,
        dP,
        dQ,
        dR,
        'h2',
        dS,
        dT,
        dU,
        dV,
        dW,
        dX,
        dY,
        dZ,
        d$,
        d_,
        d0,
        d1,
        d2,
        d3,
      ]),
      eQ = 'each_quorum',
      eR = 'quorum',
      eS = 'local_quorum',
      eT = 'three',
      eU = 'local_one',
      eV = 'serial',
      eW = 'local_serial',
      eX = 'all',
      eY = eQ,
      eZ = eR,
      e$ = eS,
      e_ = 'one',
      e0 = 'two',
      e1 = eT,
      e2 = eU,
      e3 = 'any',
      e4 = eV,
      e5 = eW,
      e6 = b(['all', eQ, eR, eS, 'one', 'two', eT, eU, 'any', eV, eW]),
      e7 = 'datasource',
      e8 = 'http',
      e9 = 'pubsub',
      fa = 'timer',
      fb = 'other',
      fc = e7,
      fd = e8,
      fe = e9,
      ff = fa,
      fg = fb,
      fh = b([e7, e8, e9, fa, fb]),
      fi = 'insert',
      fj = 'edit',
      fk = 'delete',
      fl = fi,
      fm = fj,
      fn = fk,
      fo = b([fi, fj, fk]),
      fp = 'alibaba_cloud',
      fq = 'azure',
      fr = fp,
      fs = 'aws',
      ft = fq,
      fu = 'gcp',
      fv = b([fp, 'aws', fq, 'gcp']),
      fw = 'ip_tcp',
      fx = 'ip_udp',
      fy = 'unix',
      fz = 'pipe',
      fA = 'inproc',
      fB = 'other',
      fC = fw,
      fD = fx,
      fE = 'ip',
      fF = fy,
      fG = fz,
      fH = fA,
      fI = fB,
      fJ = b([fw, fx, 'ip', fy, fz, fA, fB]),
      fK = 'wifi',
      fL = 'wired',
      fM = 'cell',
      fN = 'unavailable',
      fO = 'unknown',
      fP = fK,
      fQ = fL,
      fR = fM,
      fS = fN,
      fT = fO,
      fU = b([fK, fL, fM, fN, fO]),
      fV = 'gprs',
      fW = 'edge',
      fX = 'umts',
      fY = 'cdma',
      fZ = 'evdo_0',
      f$ = 'evdo_a',
      f_ = 'cdma2000_1xrtt',
      f0 = 'hsdpa',
      f1 = 'hsupa',
      f2 = 'hspa',
      f3 = 'iden',
      f4 = 'evdo_b',
      f5 = 'ehrpd',
      f6 = 'hspap',
      f7 = 'td_scdma',
      f8 = 'iwlan',
      f9 = 'nrnsa',
      ga = 'lte_ca',
      gb = fV,
      gc = fW,
      gd = fX,
      ge = fY,
      gf = fZ,
      gg = f$,
      gh = f_,
      gi = f0,
      gj = f1,
      gk = f2,
      gl = f3,
      gm = f4,
      gn = 'lte',
      go = f5,
      gp = f6,
      gq = 'gsm',
      gr = f7,
      gs = f8,
      gt = 'nr',
      gu = f9,
      gv = ga,
      gw = b([
        fV,
        fW,
        fX,
        fY,
        fZ,
        f$,
        f_,
        f0,
        f1,
        f2,
        f3,
        f4,
        'lte',
        f5,
        f6,
        'gsm',
        f7,
        f8,
        'nr',
        f9,
        ga,
      ]),
      gx = 'SPDY',
      gy = 'QUIC',
      gz = '1.0',
      gA = '1.1',
      gB = '2.0',
      gC = gx,
      gD = gy,
      gE = { HTTP_1_0: '1.0', HTTP_1_1: '1.1', HTTP_2_0: '2.0', SPDY: gx, QUIC: gy },
      gF = 'queue',
      gG = 'topic',
      gH = gF,
      gI = gG,
      gJ = b([gF, gG]),
      gK = 'receive',
      gL = 'process',
      gM = gK,
      gN = gL,
      gO = b([gK, gL]),
      gP = 0,
      gQ = 1,
      gR = 2,
      gS = 3,
      gT = 4,
      gU = 5,
      gV = 6,
      gW = 7,
      gX = 8,
      gY = 9,
      gZ = 10,
      g$ = 11,
      g_ = 12,
      g0 = 13,
      g1 = 14,
      g2 = 15,
      g3 = 16,
      g4 = {
        OK: 0,
        CANCELLED: 1,
        UNKNOWN: 2,
        INVALID_ARGUMENT: 3,
        DEADLINE_EXCEEDED: 4,
        NOT_FOUND: 5,
        ALREADY_EXISTS: 6,
        PERMISSION_DENIED: 7,
        RESOURCE_EXHAUSTED: 8,
        FAILED_PRECONDITION: 9,
        ABORTED: 10,
        OUT_OF_RANGE: 11,
        UNIMPLEMENTED: 12,
        INTERNAL: 13,
        UNAVAILABLE: 14,
        DATA_LOSS: 15,
        UNAUTHENTICATED: 16,
      },
      g5 = 'SENT',
      g6 = 'RECEIVED',
      g7 = g5,
      g8 = g6,
      g9 = b([g5, g6]);
    (a.i(17007),
      a.i(44267),
      a.s(
        [
          'AWSECSLAUNCHTYPEVALUES_EC2',
          () => kq,
          'AWSECSLAUNCHTYPEVALUES_FARGATE',
          () => kr,
          'AwsEcsLaunchtypeValues',
          () => ks,
          'CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS',
          () => j7,
          'CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC',
          () => j8,
          'CLOUDPLATFORMVALUES_AWS_EC2',
          () => j9,
          'CLOUDPLATFORMVALUES_AWS_ECS',
          () => ka,
          'CLOUDPLATFORMVALUES_AWS_EKS',
          () => kb,
          'CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK',
          () => kd,
          'CLOUDPLATFORMVALUES_AWS_LAMBDA',
          () => kc,
          'CLOUDPLATFORMVALUES_AZURE_AKS',
          () => kg,
          'CLOUDPLATFORMVALUES_AZURE_APP_SERVICE',
          () => ki,
          'CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES',
          () => kf,
          'CLOUDPLATFORMVALUES_AZURE_FUNCTIONS',
          () => kh,
          'CLOUDPLATFORMVALUES_AZURE_VM',
          () => ke,
          'CLOUDPLATFORMVALUES_GCP_APP_ENGINE',
          () => kn,
          'CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS',
          () => km,
          'CLOUDPLATFORMVALUES_GCP_CLOUD_RUN',
          () => kk,
          'CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE',
          () => kj,
          'CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE',
          () => kl,
          'CLOUDPROVIDERVALUES_ALIBABA_CLOUD',
          () => jN,
          'CLOUDPROVIDERVALUES_AWS',
          () => jO,
          'CLOUDPROVIDERVALUES_AZURE',
          () => jP,
          'CLOUDPROVIDERVALUES_GCP',
          () => jQ,
          'CloudPlatformValues',
          () => ko,
          'CloudProviderValues',
          () => jR,
          'HOSTARCHVALUES_AMD64',
          () => kz,
          'HOSTARCHVALUES_ARM32',
          () => kA,
          'HOSTARCHVALUES_ARM64',
          () => kB,
          'HOSTARCHVALUES_IA64',
          () => kC,
          'HOSTARCHVALUES_PPC32',
          () => kD,
          'HOSTARCHVALUES_PPC64',
          () => kE,
          'HOSTARCHVALUES_X86',
          () => kF,
          'HostArchValues',
          () => kG,
          'OSTYPEVALUES_AIX',
          () => kZ,
          'OSTYPEVALUES_DARWIN',
          () => kT,
          'OSTYPEVALUES_DRAGONFLYBSD',
          () => kX,
          'OSTYPEVALUES_FREEBSD',
          () => kU,
          'OSTYPEVALUES_HPUX',
          () => kY,
          'OSTYPEVALUES_LINUX',
          () => kS,
          'OSTYPEVALUES_NETBSD',
          () => kV,
          'OSTYPEVALUES_OPENBSD',
          () => kW,
          'OSTYPEVALUES_SOLARIS',
          () => k$,
          'OSTYPEVALUES_WINDOWS',
          () => kR,
          'OSTYPEVALUES_Z_OS',
          () => k_,
          'OsTypeValues',
          () => k0,
          'SEMRESATTRS_AWS_ECS_CLUSTER_ARN',
          () => iz,
          'SEMRESATTRS_AWS_ECS_CONTAINER_ARN',
          () => iy,
          'SEMRESATTRS_AWS_ECS_LAUNCHTYPE',
          () => iA,
          'SEMRESATTRS_AWS_ECS_TASK_ARN',
          () => iB,
          'SEMRESATTRS_AWS_ECS_TASK_FAMILY',
          () => iC,
          'SEMRESATTRS_AWS_ECS_TASK_REVISION',
          () => iD,
          'SEMRESATTRS_AWS_EKS_CLUSTER_ARN',
          () => iE,
          'SEMRESATTRS_AWS_LOG_GROUP_ARNS',
          () => iG,
          'SEMRESATTRS_AWS_LOG_GROUP_NAMES',
          () => iF,
          'SEMRESATTRS_AWS_LOG_STREAM_ARNS',
          () => iI,
          'SEMRESATTRS_AWS_LOG_STREAM_NAMES',
          () => iH,
          'SEMRESATTRS_CLOUD_ACCOUNT_ID',
          () => iu,
          'SEMRESATTRS_CLOUD_AVAILABILITY_ZONE',
          () => iw,
          'SEMRESATTRS_CLOUD_PLATFORM',
          () => ix,
          'SEMRESATTRS_CLOUD_PROVIDER',
          () => it,
          'SEMRESATTRS_CLOUD_REGION',
          () => iv,
          'SEMRESATTRS_CONTAINER_ID',
          () => iK,
          'SEMRESATTRS_CONTAINER_IMAGE_NAME',
          () => iM,
          'SEMRESATTRS_CONTAINER_IMAGE_TAG',
          () => iN,
          'SEMRESATTRS_CONTAINER_NAME',
          () => iJ,
          'SEMRESATTRS_CONTAINER_RUNTIME',
          () => iL,
          'SEMRESATTRS_DEPLOYMENT_ENVIRONMENT',
          () => iO,
          'SEMRESATTRS_DEVICE_ID',
          () => iP,
          'SEMRESATTRS_DEVICE_MODEL_IDENTIFIER',
          () => iQ,
          'SEMRESATTRS_DEVICE_MODEL_NAME',
          () => iR,
          'SEMRESATTRS_FAAS_ID',
          () => iT,
          'SEMRESATTRS_FAAS_INSTANCE',
          () => iV,
          'SEMRESATTRS_FAAS_MAX_MEMORY',
          () => iW,
          'SEMRESATTRS_FAAS_NAME',
          () => iS,
          'SEMRESATTRS_FAAS_VERSION',
          () => iU,
          'SEMRESATTRS_HOST_ARCH',
          () => i$,
          'SEMRESATTRS_HOST_ID',
          () => iX,
          'SEMRESATTRS_HOST_IMAGE_ID',
          () => i0,
          'SEMRESATTRS_HOST_IMAGE_NAME',
          () => i_,
          'SEMRESATTRS_HOST_IMAGE_VERSION',
          () => i1,
          'SEMRESATTRS_HOST_NAME',
          () => iY,
          'SEMRESATTRS_HOST_TYPE',
          () => iZ,
          'SEMRESATTRS_K8S_CLUSTER_NAME',
          () => i2,
          'SEMRESATTRS_K8S_CONTAINER_NAME',
          () => i8,
          'SEMRESATTRS_K8S_CRONJOB_NAME',
          () => jk,
          'SEMRESATTRS_K8S_CRONJOB_UID',
          () => jj,
          'SEMRESATTRS_K8S_DAEMONSET_NAME',
          () => jg,
          'SEMRESATTRS_K8S_DAEMONSET_UID',
          () => jf,
          'SEMRESATTRS_K8S_DEPLOYMENT_NAME',
          () => jc,
          'SEMRESATTRS_K8S_DEPLOYMENT_UID',
          () => jb,
          'SEMRESATTRS_K8S_JOB_NAME',
          () => ji,
          'SEMRESATTRS_K8S_JOB_UID',
          () => jh,
          'SEMRESATTRS_K8S_NAMESPACE_NAME',
          () => i5,
          'SEMRESATTRS_K8S_NODE_NAME',
          () => i3,
          'SEMRESATTRS_K8S_NODE_UID',
          () => i4,
          'SEMRESATTRS_K8S_POD_NAME',
          () => i7,
          'SEMRESATTRS_K8S_POD_UID',
          () => i6,
          'SEMRESATTRS_K8S_REPLICASET_NAME',
          () => ja,
          'SEMRESATTRS_K8S_REPLICASET_UID',
          () => i9,
          'SEMRESATTRS_K8S_STATEFULSET_NAME',
          () => je,
          'SEMRESATTRS_K8S_STATEFULSET_UID',
          () => jd,
          'SEMRESATTRS_OS_DESCRIPTION',
          () => jm,
          'SEMRESATTRS_OS_NAME',
          () => jn,
          'SEMRESATTRS_OS_TYPE',
          () => jl,
          'SEMRESATTRS_OS_VERSION',
          () => jo,
          'SEMRESATTRS_PROCESS_COMMAND',
          () => js,
          'SEMRESATTRS_PROCESS_COMMAND_ARGS',
          () => ju,
          'SEMRESATTRS_PROCESS_COMMAND_LINE',
          () => jt,
          'SEMRESATTRS_PROCESS_EXECUTABLE_NAME',
          () => jq,
          'SEMRESATTRS_PROCESS_EXECUTABLE_PATH',
          () => jr,
          'SEMRESATTRS_PROCESS_OWNER',
          () => jv,
          'SEMRESATTRS_PROCESS_PID',
          () => jp,
          'SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION',
          () => jy,
          'SEMRESATTRS_PROCESS_RUNTIME_NAME',
          () => jw,
          'SEMRESATTRS_PROCESS_RUNTIME_VERSION',
          () => jx,
          'SEMRESATTRS_SERVICE_INSTANCE_ID',
          () => jB,
          'SEMRESATTRS_SERVICE_NAME',
          () => jz,
          'SEMRESATTRS_SERVICE_NAMESPACE',
          () => jA,
          'SEMRESATTRS_SERVICE_VERSION',
          () => jC,
          'SEMRESATTRS_TELEMETRY_AUTO_VERSION',
          () => jG,
          'SEMRESATTRS_TELEMETRY_SDK_LANGUAGE',
          () => jE,
          'SEMRESATTRS_TELEMETRY_SDK_NAME',
          () => jD,
          'SEMRESATTRS_TELEMETRY_SDK_VERSION',
          () => jF,
          'SEMRESATTRS_WEBENGINE_DESCRIPTION',
          () => jJ,
          'SEMRESATTRS_WEBENGINE_NAME',
          () => jH,
          'SEMRESATTRS_WEBENGINE_VERSION',
          () => jI,
          'SemanticResourceAttributes',
          () => jK,
          'TELEMETRYSDKLANGUAGEVALUES_CPP',
          () => k8,
          'TELEMETRYSDKLANGUAGEVALUES_DOTNET',
          () => k9,
          'TELEMETRYSDKLANGUAGEVALUES_ERLANG',
          () => la,
          'TELEMETRYSDKLANGUAGEVALUES_GO',
          () => lb,
          'TELEMETRYSDKLANGUAGEVALUES_JAVA',
          () => lc,
          'TELEMETRYSDKLANGUAGEVALUES_NODEJS',
          () => ld,
          'TELEMETRYSDKLANGUAGEVALUES_PHP',
          () => le,
          'TELEMETRYSDKLANGUAGEVALUES_PYTHON',
          () => lf,
          'TELEMETRYSDKLANGUAGEVALUES_RUBY',
          () => lg,
          'TELEMETRYSDKLANGUAGEVALUES_WEBJS',
          () => lh,
          'TelemetrySdkLanguageValues',
          () => li,
        ],
        45336
      ),
      a.s([], 23649),
      a.i(23649),
      a.s(
        [
          'AWSECSLAUNCHTYPEVALUES_EC2',
          () => kq,
          'AWSECSLAUNCHTYPEVALUES_FARGATE',
          () => kr,
          'AwsEcsLaunchtypeValues',
          () => ks,
          'CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS',
          () => j7,
          'CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC',
          () => j8,
          'CLOUDPLATFORMVALUES_AWS_EC2',
          () => j9,
          'CLOUDPLATFORMVALUES_AWS_ECS',
          () => ka,
          'CLOUDPLATFORMVALUES_AWS_EKS',
          () => kb,
          'CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK',
          () => kd,
          'CLOUDPLATFORMVALUES_AWS_LAMBDA',
          () => kc,
          'CLOUDPLATFORMVALUES_AZURE_AKS',
          () => kg,
          'CLOUDPLATFORMVALUES_AZURE_APP_SERVICE',
          () => ki,
          'CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES',
          () => kf,
          'CLOUDPLATFORMVALUES_AZURE_FUNCTIONS',
          () => kh,
          'CLOUDPLATFORMVALUES_AZURE_VM',
          () => ke,
          'CLOUDPLATFORMVALUES_GCP_APP_ENGINE',
          () => kn,
          'CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS',
          () => km,
          'CLOUDPLATFORMVALUES_GCP_CLOUD_RUN',
          () => kk,
          'CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE',
          () => kj,
          'CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE',
          () => kl,
          'CLOUDPROVIDERVALUES_ALIBABA_CLOUD',
          () => jN,
          'CLOUDPROVIDERVALUES_AWS',
          () => jO,
          'CLOUDPROVIDERVALUES_AZURE',
          () => jP,
          'CLOUDPROVIDERVALUES_GCP',
          () => jQ,
          'CloudPlatformValues',
          () => ko,
          'CloudProviderValues',
          () => jR,
          'HOSTARCHVALUES_AMD64',
          () => kz,
          'HOSTARCHVALUES_ARM32',
          () => kA,
          'HOSTARCHVALUES_ARM64',
          () => kB,
          'HOSTARCHVALUES_IA64',
          () => kC,
          'HOSTARCHVALUES_PPC32',
          () => kD,
          'HOSTARCHVALUES_PPC64',
          () => kE,
          'HOSTARCHVALUES_X86',
          () => kF,
          'HostArchValues',
          () => kG,
          'OSTYPEVALUES_AIX',
          () => kZ,
          'OSTYPEVALUES_DARWIN',
          () => kT,
          'OSTYPEVALUES_DRAGONFLYBSD',
          () => kX,
          'OSTYPEVALUES_FREEBSD',
          () => kU,
          'OSTYPEVALUES_HPUX',
          () => kY,
          'OSTYPEVALUES_LINUX',
          () => kS,
          'OSTYPEVALUES_NETBSD',
          () => kV,
          'OSTYPEVALUES_OPENBSD',
          () => kW,
          'OSTYPEVALUES_SOLARIS',
          () => k$,
          'OSTYPEVALUES_WINDOWS',
          () => kR,
          'OSTYPEVALUES_Z_OS',
          () => k_,
          'OsTypeValues',
          () => k0,
          'SEMRESATTRS_AWS_ECS_CLUSTER_ARN',
          () => iz,
          'SEMRESATTRS_AWS_ECS_CONTAINER_ARN',
          () => iy,
          'SEMRESATTRS_AWS_ECS_LAUNCHTYPE',
          () => iA,
          'SEMRESATTRS_AWS_ECS_TASK_ARN',
          () => iB,
          'SEMRESATTRS_AWS_ECS_TASK_FAMILY',
          () => iC,
          'SEMRESATTRS_AWS_ECS_TASK_REVISION',
          () => iD,
          'SEMRESATTRS_AWS_EKS_CLUSTER_ARN',
          () => iE,
          'SEMRESATTRS_AWS_LOG_GROUP_ARNS',
          () => iG,
          'SEMRESATTRS_AWS_LOG_GROUP_NAMES',
          () => iF,
          'SEMRESATTRS_AWS_LOG_STREAM_ARNS',
          () => iI,
          'SEMRESATTRS_AWS_LOG_STREAM_NAMES',
          () => iH,
          'SEMRESATTRS_CLOUD_ACCOUNT_ID',
          () => iu,
          'SEMRESATTRS_CLOUD_AVAILABILITY_ZONE',
          () => iw,
          'SEMRESATTRS_CLOUD_PLATFORM',
          () => ix,
          'SEMRESATTRS_CLOUD_PROVIDER',
          () => it,
          'SEMRESATTRS_CLOUD_REGION',
          () => iv,
          'SEMRESATTRS_CONTAINER_ID',
          () => iK,
          'SEMRESATTRS_CONTAINER_IMAGE_NAME',
          () => iM,
          'SEMRESATTRS_CONTAINER_IMAGE_TAG',
          () => iN,
          'SEMRESATTRS_CONTAINER_NAME',
          () => iJ,
          'SEMRESATTRS_CONTAINER_RUNTIME',
          () => iL,
          'SEMRESATTRS_DEPLOYMENT_ENVIRONMENT',
          () => iO,
          'SEMRESATTRS_DEVICE_ID',
          () => iP,
          'SEMRESATTRS_DEVICE_MODEL_IDENTIFIER',
          () => iQ,
          'SEMRESATTRS_DEVICE_MODEL_NAME',
          () => iR,
          'SEMRESATTRS_FAAS_ID',
          () => iT,
          'SEMRESATTRS_FAAS_INSTANCE',
          () => iV,
          'SEMRESATTRS_FAAS_MAX_MEMORY',
          () => iW,
          'SEMRESATTRS_FAAS_NAME',
          () => iS,
          'SEMRESATTRS_FAAS_VERSION',
          () => iU,
          'SEMRESATTRS_HOST_ARCH',
          () => i$,
          'SEMRESATTRS_HOST_ID',
          () => iX,
          'SEMRESATTRS_HOST_IMAGE_ID',
          () => i0,
          'SEMRESATTRS_HOST_IMAGE_NAME',
          () => i_,
          'SEMRESATTRS_HOST_IMAGE_VERSION',
          () => i1,
          'SEMRESATTRS_HOST_NAME',
          () => iY,
          'SEMRESATTRS_HOST_TYPE',
          () => iZ,
          'SEMRESATTRS_K8S_CLUSTER_NAME',
          () => i2,
          'SEMRESATTRS_K8S_CONTAINER_NAME',
          () => i8,
          'SEMRESATTRS_K8S_CRONJOB_NAME',
          () => jk,
          'SEMRESATTRS_K8S_CRONJOB_UID',
          () => jj,
          'SEMRESATTRS_K8S_DAEMONSET_NAME',
          () => jg,
          'SEMRESATTRS_K8S_DAEMONSET_UID',
          () => jf,
          'SEMRESATTRS_K8S_DEPLOYMENT_NAME',
          () => jc,
          'SEMRESATTRS_K8S_DEPLOYMENT_UID',
          () => jb,
          'SEMRESATTRS_K8S_JOB_NAME',
          () => ji,
          'SEMRESATTRS_K8S_JOB_UID',
          () => jh,
          'SEMRESATTRS_K8S_NAMESPACE_NAME',
          () => i5,
          'SEMRESATTRS_K8S_NODE_NAME',
          () => i3,
          'SEMRESATTRS_K8S_NODE_UID',
          () => i4,
          'SEMRESATTRS_K8S_POD_NAME',
          () => i7,
          'SEMRESATTRS_K8S_POD_UID',
          () => i6,
          'SEMRESATTRS_K8S_REPLICASET_NAME',
          () => ja,
          'SEMRESATTRS_K8S_REPLICASET_UID',
          () => i9,
          'SEMRESATTRS_K8S_STATEFULSET_NAME',
          () => je,
          'SEMRESATTRS_K8S_STATEFULSET_UID',
          () => jd,
          'SEMRESATTRS_OS_DESCRIPTION',
          () => jm,
          'SEMRESATTRS_OS_NAME',
          () => jn,
          'SEMRESATTRS_OS_TYPE',
          () => jl,
          'SEMRESATTRS_OS_VERSION',
          () => jo,
          'SEMRESATTRS_PROCESS_COMMAND',
          () => js,
          'SEMRESATTRS_PROCESS_COMMAND_ARGS',
          () => ju,
          'SEMRESATTRS_PROCESS_COMMAND_LINE',
          () => jt,
          'SEMRESATTRS_PROCESS_EXECUTABLE_NAME',
          () => jq,
          'SEMRESATTRS_PROCESS_EXECUTABLE_PATH',
          () => jr,
          'SEMRESATTRS_PROCESS_OWNER',
          () => jv,
          'SEMRESATTRS_PROCESS_PID',
          () => jp,
          'SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION',
          () => jy,
          'SEMRESATTRS_PROCESS_RUNTIME_NAME',
          () => jw,
          'SEMRESATTRS_PROCESS_RUNTIME_VERSION',
          () => jx,
          'SEMRESATTRS_SERVICE_INSTANCE_ID',
          () => jB,
          'SEMRESATTRS_SERVICE_NAME',
          () => jz,
          'SEMRESATTRS_SERVICE_NAMESPACE',
          () => jA,
          'SEMRESATTRS_SERVICE_VERSION',
          () => jC,
          'SEMRESATTRS_TELEMETRY_AUTO_VERSION',
          () => jG,
          'SEMRESATTRS_TELEMETRY_SDK_LANGUAGE',
          () => jE,
          'SEMRESATTRS_TELEMETRY_SDK_NAME',
          () => jD,
          'SEMRESATTRS_TELEMETRY_SDK_VERSION',
          () => jF,
          'SEMRESATTRS_WEBENGINE_DESCRIPTION',
          () => jJ,
          'SEMRESATTRS_WEBENGINE_NAME',
          () => jH,
          'SEMRESATTRS_WEBENGINE_VERSION',
          () => jI,
          'SemanticResourceAttributes',
          () => jK,
          'TELEMETRYSDKLANGUAGEVALUES_CPP',
          () => k8,
          'TELEMETRYSDKLANGUAGEVALUES_DOTNET',
          () => k9,
          'TELEMETRYSDKLANGUAGEVALUES_ERLANG',
          () => la,
          'TELEMETRYSDKLANGUAGEVALUES_GO',
          () => lb,
          'TELEMETRYSDKLANGUAGEVALUES_JAVA',
          () => lc,
          'TELEMETRYSDKLANGUAGEVALUES_NODEJS',
          () => ld,
          'TELEMETRYSDKLANGUAGEVALUES_PHP',
          () => le,
          'TELEMETRYSDKLANGUAGEVALUES_PYTHON',
          () => lf,
          'TELEMETRYSDKLANGUAGEVALUES_RUBY',
          () => lg,
          'TELEMETRYSDKLANGUAGEVALUES_WEBJS',
          () => lh,
          'TelemetrySdkLanguageValues',
          () => li,
        ],
        77106
      ));
    let ha = 'cloud.provider',
      hb = 'cloud.account.id',
      hc = 'cloud.region',
      hd = 'cloud.availability_zone',
      he = 'cloud.platform',
      hf = 'aws.ecs.container.arn',
      hg = 'aws.ecs.cluster.arn',
      hh = 'aws.ecs.launchtype',
      hi = 'aws.ecs.task.arn',
      hj = 'aws.ecs.task.family',
      hk = 'aws.ecs.task.revision',
      hl = 'aws.eks.cluster.arn',
      hm = 'aws.log.group.names',
      hn = 'aws.log.group.arns',
      ho = 'aws.log.stream.names',
      hp = 'aws.log.stream.arns',
      hq = 'container.name',
      hr = 'container.id',
      hs = 'container.runtime',
      ht = 'container.image.name',
      hu = 'container.image.tag',
      hv = 'deployment.environment',
      hw = 'device.id',
      hx = 'device.model.identifier',
      hy = 'device.model.name',
      hz = 'faas.name',
      hA = 'faas.id',
      hB = 'faas.version',
      hC = 'faas.instance',
      hD = 'faas.max_memory',
      hE = 'host.id',
      hF = 'host.name',
      hG = 'host.type',
      hH = 'host.arch',
      hI = 'host.image.name',
      hJ = 'host.image.id',
      hK = 'host.image.version',
      hL = 'k8s.cluster.name',
      hM = 'k8s.node.name',
      hN = 'k8s.node.uid',
      hO = 'k8s.namespace.name',
      hP = 'k8s.pod.uid',
      hQ = 'k8s.pod.name',
      hR = 'k8s.container.name',
      hS = 'k8s.replicaset.uid',
      hT = 'k8s.replicaset.name',
      hU = 'k8s.deployment.uid',
      hV = 'k8s.deployment.name',
      hW = 'k8s.statefulset.uid',
      hX = 'k8s.statefulset.name',
      hY = 'k8s.daemonset.uid',
      hZ = 'k8s.daemonset.name',
      h$ = 'k8s.job.uid',
      h_ = 'k8s.job.name',
      h0 = 'k8s.cronjob.uid',
      h1 = 'k8s.cronjob.name',
      h2 = 'os.type',
      h3 = 'os.description',
      h4 = 'os.name',
      h5 = 'os.version',
      h6 = 'process.pid',
      h7 = 'process.executable.name',
      h8 = 'process.executable.path',
      h9 = 'process.command',
      ia = 'process.command_line',
      ib = 'process.command_args',
      ic = 'process.owner',
      id = 'process.runtime.name',
      ie = 'process.runtime.version',
      ig = 'process.runtime.description',
      ih = 'service.name',
      ii = 'service.namespace',
      ij = 'service.instance.id',
      ik = 'service.version',
      il = 'telemetry.sdk.name',
      im = 'telemetry.sdk.language',
      io = 'telemetry.sdk.version',
      ip = 'telemetry.auto.version',
      iq = 'webengine.name',
      ir = 'webengine.version',
      is = 'webengine.description',
      it = ha,
      iu = hb,
      iv = hc,
      iw = hd,
      ix = he,
      iy = hf,
      iz = hg,
      iA = hh,
      iB = hi,
      iC = hj,
      iD = hk,
      iE = hl,
      iF = hm,
      iG = hn,
      iH = ho,
      iI = hp,
      iJ = hq,
      iK = hr,
      iL = hs,
      iM = ht,
      iN = hu,
      iO = hv,
      iP = hw,
      iQ = hx,
      iR = hy,
      iS = hz,
      iT = hA,
      iU = hB,
      iV = hC,
      iW = hD,
      iX = hE,
      iY = hF,
      iZ = hG,
      i$ = hH,
      i_ = hI,
      i0 = hJ,
      i1 = hK,
      i2 = hL,
      i3 = hM,
      i4 = hN,
      i5 = hO,
      i6 = hP,
      i7 = hQ,
      i8 = hR,
      i9 = hS,
      ja = hT,
      jb = hU,
      jc = hV,
      jd = hW,
      je = hX,
      jf = hY,
      jg = hZ,
      jh = h$,
      ji = h_,
      jj = h0,
      jk = h1,
      jl = h2,
      jm = h3,
      jn = h4,
      jo = h5,
      jp = h6,
      jq = h7,
      jr = h8,
      js = h9,
      jt = ia,
      ju = ib,
      jv = ic,
      jw = id,
      jx = ie,
      jy = ig,
      jz = ih,
      jA = ii,
      jB = ij,
      jC = ik,
      jD = il,
      jE = im,
      jF = io,
      jG = ip,
      jH = iq,
      jI = ir,
      jJ = is,
      jK = b([
        ha,
        hb,
        hc,
        hd,
        he,
        hf,
        hg,
        hh,
        hi,
        hj,
        hk,
        hl,
        hm,
        hn,
        ho,
        hp,
        hq,
        hr,
        hs,
        ht,
        hu,
        hv,
        hw,
        hx,
        hy,
        hz,
        hA,
        hB,
        hC,
        hD,
        hE,
        hF,
        hG,
        hH,
        hI,
        hJ,
        hK,
        hL,
        hM,
        hN,
        hO,
        hP,
        hQ,
        hR,
        hS,
        hT,
        hU,
        hV,
        hW,
        hX,
        hY,
        hZ,
        h$,
        h_,
        h0,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        h7,
        h8,
        h9,
        ia,
        ib,
        ic,
        id,
        ie,
        ig,
        ih,
        ii,
        ij,
        ik,
        il,
        im,
        io,
        ip,
        iq,
        ir,
        is,
      ]),
      jL = 'alibaba_cloud',
      jM = 'azure',
      jN = jL,
      jO = 'aws',
      jP = jM,
      jQ = 'gcp',
      jR = b([jL, 'aws', jM, 'gcp']),
      jS = 'alibaba_cloud_ecs',
      jT = 'alibaba_cloud_fc',
      jU = 'aws_ec2',
      jV = 'aws_ecs',
      jW = 'aws_eks',
      jX = 'aws_lambda',
      jY = 'aws_elastic_beanstalk',
      jZ = 'azure_vm',
      j$ = 'azure_container_instances',
      j_ = 'azure_aks',
      j0 = 'azure_functions',
      j1 = 'azure_app_service',
      j2 = 'gcp_compute_engine',
      j3 = 'gcp_cloud_run',
      j4 = 'gcp_kubernetes_engine',
      j5 = 'gcp_cloud_functions',
      j6 = 'gcp_app_engine',
      j7 = jS,
      j8 = jT,
      j9 = jU,
      ka = jV,
      kb = jW,
      kc = jX,
      kd = jY,
      ke = jZ,
      kf = j$,
      kg = j_,
      kh = j0,
      ki = j1,
      kj = j2,
      kk = j3,
      kl = j4,
      km = j5,
      kn = j6,
      ko = b([jS, jT, jU, jV, jW, jX, jY, jZ, j$, j_, j0, j1, j2, j3, j4, j5, j6]),
      kp = 'fargate',
      kq = 'ec2',
      kr = kp,
      ks = b(['ec2', kp]),
      kt = 'amd64',
      ku = 'arm32',
      kv = 'arm64',
      kw = 'ia64',
      kx = 'ppc32',
      ky = 'ppc64',
      kz = kt,
      kA = ku,
      kB = kv,
      kC = kw,
      kD = kx,
      kE = ky,
      kF = 'x86',
      kG = b([kt, ku, kv, kw, kx, ky, 'x86']),
      kH = 'windows',
      kI = 'linux',
      kJ = 'darwin',
      kK = 'freebsd',
      kL = 'netbsd',
      kM = 'openbsd',
      kN = 'dragonflybsd',
      kO = 'hpux',
      kP = 'solaris',
      kQ = 'z_os',
      kR = kH,
      kS = kI,
      kT = kJ,
      kU = kK,
      kV = kL,
      kW = kM,
      kX = kN,
      kY = kO,
      kZ = 'aix',
      k$ = kP,
      k_ = kQ,
      k0 = b([kH, kI, kJ, kK, kL, kM, kN, kO, 'aix', kP, kQ]),
      k1 = 'dotnet',
      k2 = 'erlang',
      k3 = 'java',
      k4 = 'nodejs',
      k5 = 'python',
      k6 = 'ruby',
      k7 = 'webjs',
      k8 = 'cpp',
      k9 = k1,
      la = k2,
      lb = 'go',
      lc = k3,
      ld = k4,
      le = 'php',
      lf = k5,
      lg = k6,
      lh = k7,
      li = b(['cpp', k1, k2, 'go', k3, k4, 'php', k5, k6, k7]);
    (a.i(77106), a.i(45336));
    var lj = a.i(79833);
    a.s(
      [
        'METRIC_ASPNETCORE_DIAGNOSTICS_EXCEPTIONS',
        () => lk,
        'METRIC_ASPNETCORE_RATE_LIMITING_ACTIVE_REQUEST_LEASES',
        () => ll,
        'METRIC_ASPNETCORE_RATE_LIMITING_QUEUED_REQUESTS',
        () => lm,
        'METRIC_ASPNETCORE_RATE_LIMITING_REQUESTS',
        () => lp,
        'METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_LEASE_DURATION',
        () => lo,
        'METRIC_ASPNETCORE_RATE_LIMITING_REQUEST_TIME_IN_QUEUE',
        () => ln,
        'METRIC_ASPNETCORE_ROUTING_MATCH_ATTEMPTS',
        () => lq,
        'METRIC_DB_CLIENT_OPERATION_DURATION',
        () => lr,
        'METRIC_DOTNET_ASSEMBLY_COUNT',
        () => ls,
        'METRIC_DOTNET_EXCEPTIONS',
        () => lt,
        'METRIC_DOTNET_GC_COLLECTIONS',
        () => lu,
        'METRIC_DOTNET_GC_HEAP_TOTAL_ALLOCATED',
        () => lv,
        'METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_FRAGMENTATION_SIZE',
        () => lw,
        'METRIC_DOTNET_GC_LAST_COLLECTION_HEAP_SIZE',
        () => lx,
        'METRIC_DOTNET_GC_LAST_COLLECTION_MEMORY_COMMITTED_SIZE',
        () => ly,
        'METRIC_DOTNET_GC_PAUSE_TIME',
        () => lz,
        'METRIC_DOTNET_JIT_COMPILATION_TIME',
        () => lA,
        'METRIC_DOTNET_JIT_COMPILED_IL_SIZE',
        () => lB,
        'METRIC_DOTNET_JIT_COMPILED_METHODS',
        () => lC,
        'METRIC_DOTNET_MONITOR_LOCK_CONTENTIONS',
        () => lD,
        'METRIC_DOTNET_PROCESS_CPU_COUNT',
        () => lE,
        'METRIC_DOTNET_PROCESS_CPU_TIME',
        () => lF,
        'METRIC_DOTNET_PROCESS_MEMORY_WORKING_SET',
        () => lG,
        'METRIC_DOTNET_THREAD_POOL_QUEUE_LENGTH',
        () => lH,
        'METRIC_DOTNET_THREAD_POOL_THREAD_COUNT',
        () => lI,
        'METRIC_DOTNET_THREAD_POOL_WORK_ITEM_COUNT',
        () => lJ,
        'METRIC_DOTNET_TIMER_COUNT',
        () => lK,
        'METRIC_HTTP_CLIENT_REQUEST_DURATION',
        () => lL,
        'METRIC_HTTP_SERVER_REQUEST_DURATION',
        () => lM,
        'METRIC_JVM_CLASS_COUNT',
        () => lN,
        'METRIC_JVM_CLASS_LOADED',
        () => lO,
        'METRIC_JVM_CLASS_UNLOADED',
        () => lP,
        'METRIC_JVM_CPU_COUNT',
        () => lQ,
        'METRIC_JVM_CPU_RECENT_UTILIZATION',
        () => lR,
        'METRIC_JVM_CPU_TIME',
        () => lS,
        'METRIC_JVM_GC_DURATION',
        () => lT,
        'METRIC_JVM_MEMORY_COMMITTED',
        () => lU,
        'METRIC_JVM_MEMORY_LIMIT',
        () => lV,
        'METRIC_JVM_MEMORY_USED',
        () => lW,
        'METRIC_JVM_MEMORY_USED_AFTER_LAST_GC',
        () => lX,
        'METRIC_JVM_THREAD_COUNT',
        () => lY,
        'METRIC_KESTREL_ACTIVE_CONNECTIONS',
        () => lZ,
        'METRIC_KESTREL_ACTIVE_TLS_HANDSHAKES',
        () => l$,
        'METRIC_KESTREL_CONNECTION_DURATION',
        () => l_,
        'METRIC_KESTREL_QUEUED_CONNECTIONS',
        () => l0,
        'METRIC_KESTREL_QUEUED_REQUESTS',
        () => l1,
        'METRIC_KESTREL_REJECTED_CONNECTIONS',
        () => l2,
        'METRIC_KESTREL_TLS_HANDSHAKE_DURATION',
        () => l3,
        'METRIC_KESTREL_UPGRADED_CONNECTIONS',
        () => l4,
        'METRIC_SIGNALR_SERVER_ACTIVE_CONNECTIONS',
        () => l5,
        'METRIC_SIGNALR_SERVER_CONNECTION_DURATION',
        () => l6,
      ],
      69061
    );
    let lk = 'aspnetcore.diagnostics.exceptions',
      ll = 'aspnetcore.rate_limiting.active_request_leases',
      lm = 'aspnetcore.rate_limiting.queued_requests',
      ln = 'aspnetcore.rate_limiting.request.time_in_queue',
      lo = 'aspnetcore.rate_limiting.request_lease.duration',
      lp = 'aspnetcore.rate_limiting.requests',
      lq = 'aspnetcore.routing.match_attempts',
      lr = 'db.client.operation.duration',
      ls = 'dotnet.assembly.count',
      lt = 'dotnet.exceptions',
      lu = 'dotnet.gc.collections',
      lv = 'dotnet.gc.heap.total_allocated',
      lw = 'dotnet.gc.last_collection.heap.fragmentation.size',
      lx = 'dotnet.gc.last_collection.heap.size',
      ly = 'dotnet.gc.last_collection.memory.committed_size',
      lz = 'dotnet.gc.pause.time',
      lA = 'dotnet.jit.compilation.time',
      lB = 'dotnet.jit.compiled_il.size',
      lC = 'dotnet.jit.compiled_methods',
      lD = 'dotnet.monitor.lock_contentions',
      lE = 'dotnet.process.cpu.count',
      lF = 'dotnet.process.cpu.time',
      lG = 'dotnet.process.memory.working_set',
      lH = 'dotnet.thread_pool.queue.length',
      lI = 'dotnet.thread_pool.thread.count',
      lJ = 'dotnet.thread_pool.work_item.count',
      lK = 'dotnet.timer.count',
      lL = 'http.client.request.duration',
      lM = 'http.server.request.duration',
      lN = 'jvm.class.count',
      lO = 'jvm.class.loaded',
      lP = 'jvm.class.unloaded',
      lQ = 'jvm.cpu.count',
      lR = 'jvm.cpu.recent_utilization',
      lS = 'jvm.cpu.time',
      lT = 'jvm.gc.duration',
      lU = 'jvm.memory.committed',
      lV = 'jvm.memory.limit',
      lW = 'jvm.memory.used',
      lX = 'jvm.memory.used_after_last_gc',
      lY = 'jvm.thread.count',
      lZ = 'kestrel.active_connections',
      l$ = 'kestrel.active_tls_handshakes',
      l_ = 'kestrel.connection.duration',
      l0 = 'kestrel.queued_connections',
      l1 = 'kestrel.queued_requests',
      l2 = 'kestrel.rejected_connections',
      l3 = 'kestrel.tls_handshake.duration',
      l4 = 'kestrel.upgraded_connections',
      l5 = 'signalr.server.active_connections',
      l6 = 'signalr.server.connection.duration';
    (a.i(69061), a.s(['EVENT_EXCEPTION', () => l7], 26557));
    let l7 = 'exception';
    a.i(26557);
  },
  52653,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.HTTP_FLAVOR_VALUE_HTTP_1_1 =
        c.NET_TRANSPORT_VALUE_IP_UDP =
        c.NET_TRANSPORT_VALUE_IP_TCP =
        c.ATTR_NET_TRANSPORT =
        c.ATTR_NET_PEER_PORT =
        c.ATTR_NET_PEER_NAME =
        c.ATTR_NET_PEER_IP =
        c.ATTR_NET_HOST_PORT =
        c.ATTR_NET_HOST_NAME =
        c.ATTR_NET_HOST_IP =
        c.ATTR_HTTP_USER_AGENT =
        c.ATTR_HTTP_URL =
        c.ATTR_HTTP_TARGET =
        c.ATTR_HTTP_STATUS_CODE =
        c.ATTR_HTTP_SERVER_NAME =
        c.ATTR_HTTP_SCHEME =
        c.ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED =
        c.ATTR_HTTP_RESPONSE_CONTENT_LENGTH =
        c.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED =
        c.ATTR_HTTP_REQUEST_CONTENT_LENGTH =
        c.ATTR_HTTP_METHOD =
        c.ATTR_HTTP_HOST =
        c.ATTR_HTTP_FLAVOR =
        c.ATTR_HTTP_CLIENT_IP =
        c.USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST =
        c.USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT =
        c.ATTR_USER_AGENT_SYNTHETIC_TYPE =
          void 0),
      (c.ATTR_USER_AGENT_SYNTHETIC_TYPE = 'user_agent.synthetic.type'),
      (c.USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT = 'bot'),
      (c.USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST = 'test'),
      (c.ATTR_HTTP_CLIENT_IP = 'http.client_ip'),
      (c.ATTR_HTTP_FLAVOR = 'http.flavor'),
      (c.ATTR_HTTP_HOST = 'http.host'),
      (c.ATTR_HTTP_METHOD = 'http.method'),
      (c.ATTR_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length'),
      (c.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED =
        'http.request_content_length_uncompressed'),
      (c.ATTR_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length'),
      (c.ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED =
        'http.response_content_length_uncompressed'),
      (c.ATTR_HTTP_SCHEME = 'http.scheme'),
      (c.ATTR_HTTP_SERVER_NAME = 'http.server_name'),
      (c.ATTR_HTTP_STATUS_CODE = 'http.status_code'),
      (c.ATTR_HTTP_TARGET = 'http.target'),
      (c.ATTR_HTTP_URL = 'http.url'),
      (c.ATTR_HTTP_USER_AGENT = 'http.user_agent'),
      (c.ATTR_NET_HOST_IP = 'net.host.ip'),
      (c.ATTR_NET_HOST_NAME = 'net.host.name'),
      (c.ATTR_NET_HOST_PORT = 'net.host.port'),
      (c.ATTR_NET_PEER_IP = 'net.peer.ip'),
      (c.ATTR_NET_PEER_NAME = 'net.peer.name'),
      (c.ATTR_NET_PEER_PORT = 'net.peer.port'),
      (c.ATTR_NET_TRANSPORT = 'net.transport'),
      (c.NET_TRANSPORT_VALUE_IP_TCP = 'ip_tcp'),
      (c.NET_TRANSPORT_VALUE_IP_UDP = 'ip_udp'),
      (c.HTTP_FLAVOR_VALUE_HTTP_1_1 = '1.1'));
  },
  13452,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = void 0),
      (function (a) {
        ((a.HTTP_ERROR_NAME = 'http.error_name'),
          (a.HTTP_ERROR_MESSAGE = 'http.error_message'),
          (a.HTTP_STATUS_TEXT = 'http.status_text'));
      })(c.AttributeNames || (c.AttributeNames = {})));
  },
  34264,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.SYNTHETIC_BOT_NAMES = c.SYNTHETIC_TEST_NAMES = void 0),
      (c.SYNTHETIC_TEST_NAMES = ['alwayson']),
      (c.SYNTHETIC_BOT_NAMES = ['googlebot', 'bingbot']));
  },
  76888,
  (a, b, c) => {
    'use strict';
    function d(a, b) {
      (Error.captureStackTrace(this, d),
        (this.name = this.constructor.name),
        (this.message = a),
        (this.input = b));
    }
    (a.r(24361).inherits(d, Error), (b.exports = d));
  },
  62936,
  (a, b, c) => {
    'use strict';
    b.exports = {
      isDelimiter: function (a) {
        return (
          34 === a ||
          40 === a ||
          41 === a ||
          44 === a ||
          47 === a ||
          (a >= 58 && a <= 64) ||
          (a >= 91 && a <= 93) ||
          123 === a ||
          125 === a
        );
      },
      isTokenChar: function (a) {
        return (
          33 === a ||
          (a >= 35 && a <= 39) ||
          42 === a ||
          43 === a ||
          45 === a ||
          46 === a ||
          (a >= 48 && a <= 57) ||
          (a >= 65 && a <= 90) ||
          (a >= 94 && a <= 122) ||
          124 === a ||
          126 === a
        );
      },
      isExtended: function (a) {
        return a >= 128 && a <= 255;
      },
      isPrint: function (a) {
        return a >= 32 && a <= 126;
      },
    };
  },
  46102,
  (a, b, c) => {
    'use strict';
    var d = a.r(24361),
      e = a.r(76888),
      f = a.r(62936),
      g = f.isDelimiter,
      h = f.isTokenChar,
      i = f.isExtended,
      j = f.isPrint;
    function k(a) {
      return a.replace(/\\(.)/g, '$1');
    }
    function l(a, b) {
      return d.format("Unexpected character '%s' at index %d", a.charAt(b), b);
    }
    b.exports = function (a) {
      for (
        var b, c, d = !1, f = !1, m = !1, n = {}, o = [], p = -1, q = -1, r = 0;
        r < a.length;
        r++
      )
        if (((c = a.charCodeAt(r)), void 0 === b)) {
          if (0 !== r && -1 === p && (32 === c || 9 === c)) continue;
          if (h(c)) -1 === p && (p = r);
          else if (61 === c && -1 !== p) ((b = a.slice(p, r).toLowerCase()), (p = -1));
          else throw new e(l(a, r), a);
        } else if (f && (9 === c || j(c) || i(c))) f = !1;
        else if (h(c)) {
          if (-1 !== q) throw new e(l(a, r), a);
          -1 === p && (p = r);
        } else if (g(c) || i(c))
          if (m)
            34 === c
              ? ((m = !1), (q = r))
              : 92 === c
                ? (-1 === p && (p = r), (f = d = !0))
                : -1 === p && (p = r);
          else if (34 === c && 61 === a.charCodeAt(r - 1)) m = !0;
          else if ((44 === c || 59 === c) && (-1 !== p || -1 !== q))
            (-1 !== p
              ? (-1 === q && (q = r), (n[b] = d ? k(a.slice(p, q)) : a.slice(p, q)))
              : (n[b] = ''),
              44 === c && (o.push(n), (n = {})),
              (b = void 0),
              (p = q = -1));
          else throw new e(l(a, r), a);
        else if (32 === c || 9 === c) {
          if (-1 !== q) continue;
          if (m) -1 === p && (p = r);
          else if (-1 !== p) q = r;
          else throw new e(l(a, r), a);
        } else throw new e(l(a, r), a);
      if (void 0 === b || m || (-1 === p && -1 === q) || 32 === c || 9 === c)
        throw new e('Unexpected end of input', a);
      return (
        -1 !== p
          ? (-1 === q && (q = r), (n[b] = d ? k(a.slice(p, q)) : a.slice(p, q)))
          : (n[b] = ''),
        o.push(n),
        o
      );
    };
  },
  62931,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.headerCapture =
        c.getIncomingStableRequestMetricAttributesOnResponse =
        c.getIncomingRequestMetricAttributesOnResponse =
        c.getIncomingRequestAttributesOnResponse =
        c.getIncomingRequestMetricAttributes =
        c.getIncomingRequestAttributes =
        c.getRemoteClientAddress =
        c.getOutgoingStableRequestMetricAttributesOnResponse =
        c.getOutgoingRequestMetricAttributesOnResponse =
        c.getOutgoingRequestAttributesOnResponse =
        c.setAttributesFromHttpKind =
        c.getOutgoingRequestMetricAttributes =
        c.getOutgoingRequestAttributes =
        c.extractHostnameAndPort =
        c.isValidOptionsType =
        c.getRequestInfo =
        c.isCompressed =
        c.setResponseContentLengthAttribute =
        c.setRequestContentLengthAttribute =
        c.setSpanWithError =
        c.satisfiesPattern =
        c.parseResponseStatus =
        c.getAbsoluteUrl =
          void 0));
    let d = a.r(77674),
      e = a.r(79154),
      f = a.r(52653),
      g = a.r(33369),
      h = a.r(38625),
      i = a.r(92509),
      j = a.r(13452),
      k = a.r(34264),
      l = a.r(46102);
    function m(a) {
      let b = a['content-length'];
      if (void 0 === b) return null;
      let c = parseInt(b, 10);
      return isNaN(c) ? null : c;
    }
    ((c.getAbsoluteUrl = (a, b, c = 'http:') => {
      let d = a || {},
        e = d.protocol || c,
        f = (d.port || '').toString(),
        g = d.path || '/',
        h = d.host || d.hostname || b.host || 'localhost';
      return (
        -1 === h.indexOf(':') && f && '80' !== f && '443' !== f && (h += `:${f}`),
        `${e}//${h}${g}`
      );
    }),
      (c.parseResponseStatus = (a, b) => {
        let c = a === d.SpanKind.CLIENT ? 400 : 500;
        return b && b >= 100 && b < c ? d.SpanStatusCode.UNSET : d.SpanStatusCode.ERROR;
      }),
      (c.satisfiesPattern = (a, b) => {
        if ('string' == typeof b) return b === a;
        if (b instanceof RegExp) return b.test(a);
        if ('function' == typeof b) return b(a);
        throw TypeError('Pattern is in unsupported datatype');
      }),
      (c.setSpanWithError = (a, b, c) => {
        let f = b.message;
        (c & h.SemconvStability.OLD &&
          (a.setAttribute(j.AttributeNames.HTTP_ERROR_NAME, b.name),
          a.setAttribute(j.AttributeNames.HTTP_ERROR_MESSAGE, f)),
          c & h.SemconvStability.STABLE && a.setAttribute(e.ATTR_ERROR_TYPE, b.name),
          a.setStatus({ code: d.SpanStatusCode.ERROR, message: f }),
          a.recordException(b));
      }),
      (c.setRequestContentLengthAttribute = (a, b) => {
        let d = m(a.headers);
        null !== d &&
          ((0, c.isCompressed)(a.headers)
            ? (b[f.ATTR_HTTP_REQUEST_CONTENT_LENGTH] = d)
            : (b[f.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED] = d));
      }),
      (c.setResponseContentLengthAttribute = (a, b) => {
        let d = m(a.headers);
        null !== d &&
          ((0, c.isCompressed)(a.headers)
            ? (b[f.ATTR_HTTP_RESPONSE_CONTENT_LENGTH] = d)
            : (b[f.ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED] = d));
      }),
      (c.isCompressed = (a) => {
        let b = a['content-encoding'];
        return !!b && 'identity' !== b;
      }),
      (c.getRequestInfo = (a, b, c) => {
        let d,
          e,
          f,
          g = !1;
        if ('string' == typeof b) {
          try {
            let a = (function (a) {
              let {
                  hostname: b,
                  pathname: c,
                  port: d,
                  username: e,
                  password: f,
                  search: g,
                  protocol: h,
                  hash: i,
                  href: j,
                  origin: k,
                  host: l,
                } = new URL(a),
                m = {
                  protocol: h,
                  hostname: b && '[' === b[0] ? b.slice(1, -1) : b,
                  hash: i,
                  search: g,
                  pathname: c,
                  path: `${c || ''}${g || ''}`,
                  href: j,
                  origin: k,
                  host: l,
                };
              return (
                '' !== d && (m.port = Number(d)),
                (e || f) && (m.auth = `${decodeURIComponent(e)}:${decodeURIComponent(f)}`),
                m
              );
            })(b);
            ((f = a), (d = a.pathname || '/'));
          } catch (c) {
            ((g = !0),
              a.verbose(
                'Unable to parse URL provided to HTTP request, using fallback to determine path. Original error:',
                c
              ),
              (d = (f = { path: b }).path || '/'));
          }
          ((e = `${f.protocol || 'http:'}//${f.host}`), void 0 !== c && Object.assign(f, c));
        } else if (b instanceof i.URL)
          ((f = {
            protocol: b.protocol,
            hostname:
              'string' == typeof b.hostname && b.hostname.startsWith('[')
                ? b.hostname.slice(1, -1)
                : b.hostname,
            path: `${b.pathname || ''}${b.search || ''}`,
          }),
            '' !== b.port && (f.port = Number(b.port)),
            (b.username || b.password) && (f.auth = `${b.username}:${b.password}`),
            (d = b.pathname),
            (e = b.origin),
            void 0 !== c && Object.assign(f, c));
        else {
          let a =
            (f = Object.assign({ protocol: b.host ? 'http:' : void 0 }, b)).host ||
            (null != f.port ? `${f.hostname}${f.port}` : f.hostname);
          if (((e = `${f.protocol || 'http:'}//${a}`), !(d = b.pathname) && f.path))
            try {
              d = new URL(f.path, e).pathname || '/';
            } catch {
              d = '/';
            }
        }
        return {
          origin: e,
          pathname: d,
          method: f.method ? f.method.toUpperCase() : 'GET',
          optionsParsed: f,
          invalidUrl: g,
        };
      }),
      (c.isValidOptionsType = (a) => {
        if (!a) return !1;
        let b = typeof a;
        return 'string' === b || ('object' === b && !Array.isArray(a));
      }),
      (c.extractHostnameAndPort = (a) => {
        if (a.hostname && a.port) return { hostname: a.hostname, port: a.port };
        let b = a.host?.match(/^([^:/ ]+)(:\d{1,5})?/) || null,
          c = a.hostname || (null === b ? 'localhost' : b[1]),
          d = a.port;
        return (
          d || (d = b && b[2] ? b[2].substring(1) : 'https:' === a.protocol ? '443' : '80'),
          { hostname: c, port: d }
        );
      }),
      (c.getOutgoingRequestAttributes = (a, b, d, g) => {
        let i = b.hostname,
          j = b.port,
          k = a.method ?? 'GET',
          l = r(k),
          m = a.headers || {},
          o = m['user-agent'],
          p = (0, c.getAbsoluteUrl)(a, m, `${b.component}:`),
          q = {
            [f.ATTR_HTTP_URL]: p,
            [f.ATTR_HTTP_METHOD]: k,
            [f.ATTR_HTTP_TARGET]: a.path || '/',
            [f.ATTR_NET_PEER_NAME]: i,
            [f.ATTR_HTTP_HOST]: m.host ?? `${i}:${j}`,
          },
          s = {
            [e.ATTR_HTTP_REQUEST_METHOD]: l,
            [e.ATTR_SERVER_ADDRESS]: i,
            [e.ATTR_SERVER_PORT]: Number(j),
            [e.ATTR_URL_FULL]: p,
            [e.ATTR_USER_AGENT_ORIGINAL]: o,
          };
        switch (
          (k !== l && (s[e.ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = k),
          g && o && (s[f.ATTR_USER_AGENT_SYNTHETIC_TYPE] = n(o)),
          void 0 !== o && (q[f.ATTR_HTTP_USER_AGENT] = o),
          d)
        ) {
          case h.SemconvStability.STABLE:
            return Object.assign(s, b.hookAttributes);
          case h.SemconvStability.OLD:
            return Object.assign(q, b.hookAttributes);
        }
        return Object.assign(q, s, b.hookAttributes);
      }),
      (c.getOutgoingRequestMetricAttributes = (a) => {
        let b = {};
        return (
          (b[f.ATTR_HTTP_METHOD] = a[f.ATTR_HTTP_METHOD]),
          (b[f.ATTR_NET_PEER_NAME] = a[f.ATTR_NET_PEER_NAME]),
          b
        );
      }),
      (c.setAttributesFromHttpKind = (a, b) => {
        a &&
          ((b[f.ATTR_HTTP_FLAVOR] = a),
          'QUIC' !== a.toUpperCase()
            ? (b[f.ATTR_NET_TRANSPORT] = f.NET_TRANSPORT_VALUE_IP_TCP)
            : (b[f.ATTR_NET_TRANSPORT] = f.NET_TRANSPORT_VALUE_IP_UDP));
      }));
    let n = (a) => {
      let b = String(a).toLowerCase();
      for (let a of k.SYNTHETIC_TEST_NAMES)
        if (b.includes(a)) return f.USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST;
      for (let a of k.SYNTHETIC_BOT_NAMES)
        if (b.includes(a)) return f.USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT;
    };
    function o(a, b) {
      let c = a.split(':');
      if (1 === c.length)
        return 'http' === b
          ? { host: c[0], port: '80' }
          : 'https' === b
            ? { host: c[0], port: '443' }
            : { host: c[0] };
      if (2 === c.length) return { host: c[0], port: c[1] };
      if (c[0].startsWith('[')) {
        if (c[c.length - 1].endsWith(']')) {
          if ('http' === b) return { host: a, port: '80' };
          if ('https' === b) return { host: a, port: '443' };
        } else if (c[c.length - 2].endsWith(']'))
          return { host: c.slice(0, -1).join(':'), port: c[c.length - 1] };
      }
      return { host: a };
    }
    function p(a) {
      let b = a.headers.forwarded;
      if (b) {
        for (let a of s(b)) if (a.for) return a.for;
      }
      let c = a.headers['x-forwarded-for'];
      if ('string' == typeof c) return c;
      if (Array.isArray(c)) return c[0];
      let d = a.socket.remoteAddress;
      return d || null;
    }
    ((c.getOutgoingRequestAttributesOnResponse = (a, b) => {
      let { statusCode: d, statusMessage: g, httpVersion: i, socket: k } = a,
        l = {},
        m = {};
      if ((null != d && (m[e.ATTR_HTTP_RESPONSE_STATUS_CODE] = d), k)) {
        let { remoteAddress: b, remotePort: c } = k;
        ((l[f.ATTR_NET_PEER_IP] = b),
          (l[f.ATTR_NET_PEER_PORT] = c),
          (m[e.ATTR_NETWORK_PEER_ADDRESS] = b),
          (m[e.ATTR_NETWORK_PEER_PORT] = c),
          (m[e.ATTR_NETWORK_PROTOCOL_VERSION] = a.httpVersion));
      }
      switch (
        ((0, c.setResponseContentLengthAttribute)(a, l),
        d &&
          ((l[f.ATTR_HTTP_STATUS_CODE] = d),
          (l[j.AttributeNames.HTTP_STATUS_TEXT] = (g || '').toUpperCase())),
        (0, c.setAttributesFromHttpKind)(i, l),
        b)
      ) {
        case h.SemconvStability.STABLE:
          return m;
        case h.SemconvStability.OLD:
          return l;
      }
      return Object.assign(l, m);
    }),
      (c.getOutgoingRequestMetricAttributesOnResponse = (a) => {
        let b = {};
        return (
          (b[f.ATTR_NET_PEER_PORT] = a[f.ATTR_NET_PEER_PORT]),
          (b[f.ATTR_HTTP_STATUS_CODE] = a[f.ATTR_HTTP_STATUS_CODE]),
          (b[f.ATTR_HTTP_FLAVOR] = a[f.ATTR_HTTP_FLAVOR]),
          b
        );
      }),
      (c.getOutgoingStableRequestMetricAttributesOnResponse = (a) => {
        let b = {};
        return (
          a[e.ATTR_NETWORK_PROTOCOL_VERSION] &&
            (b[e.ATTR_NETWORK_PROTOCOL_VERSION] = a[e.ATTR_NETWORK_PROTOCOL_VERSION]),
          a[e.ATTR_HTTP_RESPONSE_STATUS_CODE] &&
            (b[e.ATTR_HTTP_RESPONSE_STATUS_CODE] = a[e.ATTR_HTTP_RESPONSE_STATUS_CODE]),
          b
        );
      }),
      (c.getRemoteClientAddress = p),
      (c.getIncomingRequestAttributes = (a, b, d) => {
        let g = a.headers,
          i = g['user-agent'],
          j = g['x-forwarded-for'],
          k = a.httpVersion,
          l = g.host,
          m = l?.replace(/^(.*)(:[0-9]{1,5})/, '$1') || 'localhost',
          q = a.method,
          t = r(q),
          u = (function (a, b) {
            let c = a.headers.forwarded;
            if (c) {
              for (let a of s(c)) if (a.host) return o(a.host, a.proto);
            }
            let d = a.headers['x-forwarded-host'];
            if ('string' == typeof d)
              return 'string' == typeof a.headers['x-forwarded-proto']
                ? o(d, a.headers['x-forwarded-proto'])
                : Array.isArray(a.headers['x-forwarded-proto'])
                  ? o(d, a.headers['x-forwarded-proto'][0])
                  : o(d);
            if (Array.isArray(d) && 'string' == typeof d[0] && d[0].length > 0)
              return 'string' == typeof a.headers['x-forwarded-proto']
                ? o(d[0], a.headers['x-forwarded-proto'])
                : Array.isArray(a.headers['x-forwarded-proto'])
                  ? o(d[0], a.headers['x-forwarded-proto'][0])
                  : o(d[0]);
            let e = a.headers.host;
            return 'string' == typeof e && e.length > 0 ? o(e, b) : null;
          })(a, b.component),
          v = b.serverName,
          w = p(a),
          x = {
            [e.ATTR_HTTP_REQUEST_METHOD]: t,
            [e.ATTR_URL_SCHEME]: b.component,
            [e.ATTR_SERVER_ADDRESS]: u?.host,
            [e.ATTR_NETWORK_PEER_ADDRESS]: a.socket.remoteAddress,
            [e.ATTR_NETWORK_PEER_PORT]: a.socket.remotePort,
            [e.ATTR_NETWORK_PROTOCOL_VERSION]: a.httpVersion,
            [e.ATTR_USER_AGENT_ORIGINAL]: i,
          },
          y = (function (a, b, c) {
            try {
              if (b.headers.host) return new URL(b.url ?? '/', `${a}://${b.headers.host}`);
              {
                let c = new URL(b.url ?? '/', `${a}://localhost`);
                return {
                  pathname: c.pathname,
                  search: c.search,
                  toString: function () {
                    return c.pathname + c.search;
                  },
                };
              }
            } catch (a) {
              return (c.verbose('Unable to get URL from request', a), {});
            }
          })(b.component, a, d);
        (y?.pathname != null && (x[e.ATTR_URL_PATH] = y.pathname),
          y.search && (x[e.ATTR_URL_QUERY] = y.search.slice(1)),
          null != w && (x[e.ATTR_CLIENT_ADDRESS] = w.split(',')[0]),
          u?.port != null && (x[e.ATTR_SERVER_PORT] = Number(u.port)),
          q !== t && (x[e.ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = q),
          b.enableSyntheticSourceDetection && i && (x[f.ATTR_USER_AGENT_SYNTHETIC_TYPE] = n(i)));
        let z = {
          [f.ATTR_HTTP_URL]: y.toString(),
          [f.ATTR_HTTP_HOST]: l,
          [f.ATTR_NET_HOST_NAME]: m,
          [f.ATTR_HTTP_METHOD]: q,
          [f.ATTR_HTTP_SCHEME]: b.component,
        };
        switch (
          ('string' == typeof j && (z[f.ATTR_HTTP_CLIENT_IP] = j.split(',')[0]),
          'string' == typeof v && (z[f.ATTR_HTTP_SERVER_NAME] = v),
          y?.pathname && (z[f.ATTR_HTTP_TARGET] = y?.pathname + y?.search || '/'),
          void 0 !== i && (z[f.ATTR_HTTP_USER_AGENT] = i),
          (0, c.setRequestContentLengthAttribute)(a, z),
          (0, c.setAttributesFromHttpKind)(k, z),
          b.semconvStability)
        ) {
          case h.SemconvStability.STABLE:
            return Object.assign(x, b.hookAttributes);
          case h.SemconvStability.OLD:
            return Object.assign(z, b.hookAttributes);
        }
        return Object.assign(z, x, b.hookAttributes);
      }),
      (c.getIncomingRequestMetricAttributes = (a) => {
        let b = {};
        return (
          (b[f.ATTR_HTTP_SCHEME] = a[f.ATTR_HTTP_SCHEME]),
          (b[f.ATTR_HTTP_METHOD] = a[f.ATTR_HTTP_METHOD]),
          (b[f.ATTR_NET_HOST_NAME] = a[f.ATTR_NET_HOST_NAME]),
          (b[f.ATTR_HTTP_FLAVOR] = a[f.ATTR_HTTP_FLAVOR]),
          b
        );
      }),
      (c.getIncomingRequestAttributesOnResponse = (a, b, c) => {
        let { socket: i } = a,
          { statusCode: k, statusMessage: l } = b,
          m = { [e.ATTR_HTTP_RESPONSE_STATUS_CODE]: k },
          n = (0, g.getRPCMetadata)(d.context.active()),
          o = {};
        if (i) {
          let { localAddress: a, localPort: b, remoteAddress: c, remotePort: d } = i;
          ((o[f.ATTR_NET_HOST_IP] = a),
            (o[f.ATTR_NET_HOST_PORT] = b),
            (o[f.ATTR_NET_PEER_IP] = c),
            (o[f.ATTR_NET_PEER_PORT] = d));
        }
        switch (
          ((o[f.ATTR_HTTP_STATUS_CODE] = k),
          (o[j.AttributeNames.HTTP_STATUS_TEXT] = (l || '').toUpperCase()),
          n?.type === g.RPCType.HTTP &&
            void 0 !== n.route &&
            ((o[e.ATTR_HTTP_ROUTE] = n.route), (m[e.ATTR_HTTP_ROUTE] = n.route)),
          c)
        ) {
          case h.SemconvStability.STABLE:
            return m;
          case h.SemconvStability.OLD:
            return o;
        }
        return Object.assign(o, m);
      }),
      (c.getIncomingRequestMetricAttributesOnResponse = (a) => {
        let b = {};
        return (
          (b[f.ATTR_HTTP_STATUS_CODE] = a[f.ATTR_HTTP_STATUS_CODE]),
          (b[f.ATTR_NET_HOST_PORT] = a[f.ATTR_NET_HOST_PORT]),
          void 0 !== a[e.ATTR_HTTP_ROUTE] && (b[e.ATTR_HTTP_ROUTE] = a[e.ATTR_HTTP_ROUTE]),
          b
        );
      }),
      (c.getIncomingStableRequestMetricAttributesOnResponse = (a) => {
        let b = {};
        return (
          void 0 !== a[e.ATTR_HTTP_ROUTE] && (b[e.ATTR_HTTP_ROUTE] = a[e.ATTR_HTTP_ROUTE]),
          a[e.ATTR_HTTP_RESPONSE_STATUS_CODE] &&
            (b[e.ATTR_HTTP_RESPONSE_STATUS_CODE] = a[e.ATTR_HTTP_RESPONSE_STATUS_CODE]),
          b
        );
      }),
      (c.headerCapture = function (a, b) {
        let c = new Map();
        for (let a = 0, d = b.length; a < d; a++) {
          let d = b[a].toLowerCase();
          c.set(d, d.replace(/-/g, '_'));
        }
        return (b, d) => {
          for (let e of c.keys()) {
            let f = d(e);
            if (void 0 === f) continue;
            let g = c.get(e),
              h = `http.${a}.header.${g}`;
            'string' == typeof f
              ? b.setAttribute(h, [f])
              : Array.isArray(f)
                ? b.setAttribute(h, f)
                : b.setAttribute(h, [f]);
          }
        };
      }));
    let q = new Set([
      'GET',
      'HEAD',
      'POST',
      'PUT',
      'DELETE',
      'CONNECT',
      'OPTIONS',
      'TRACE',
      'PATCH',
    ]);
    function r(a) {
      if (null == a) return 'GET';
      let b = a.toUpperCase();
      return q.has(b) ? b : '_OTHER';
    }
    function s(a) {
      try {
        return l(a);
      } catch {
        return [];
      }
    }
  },
  29613,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.HttpInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(33369),
      f = a.r(92509),
      g = a.r(33732),
      h = a.r(38625),
      i = a.r(27699),
      j = a.r(79154),
      k = a.r(62931);
    class l extends h.InstrumentationBase {
      _spanNotEnded = new WeakSet();
      _headerCapture;
      _semconvStability = h.SemconvStability.OLD;
      constructor(a = {}) {
        (super('@opentelemetry/instrumentation-http', g.VERSION, a),
          (this._headerCapture = this._createHeaderCapture()),
          (this._semconvStability = (0, h.semconvStabilityFromStr)(
            'http',
            process.env.OTEL_SEMCONV_STABILITY_OPT_IN
          )));
      }
      _updateMetricInstruments() {
        ((this._oldHttpServerDurationHistogram = this.meter.createHistogram(
          'http.server.duration',
          {
            description: 'Measures the duration of inbound HTTP requests.',
            unit: 'ms',
            valueType: d.ValueType.DOUBLE,
          }
        )),
          (this._oldHttpClientDurationHistogram = this.meter.createHistogram(
            'http.client.duration',
            {
              description: 'Measures the duration of outbound HTTP requests.',
              unit: 'ms',
              valueType: d.ValueType.DOUBLE,
            }
          )),
          (this._stableHttpServerDurationHistogram = this.meter.createHistogram(
            j.METRIC_HTTP_SERVER_REQUEST_DURATION,
            {
              description: 'Duration of HTTP server requests.',
              unit: 's',
              valueType: d.ValueType.DOUBLE,
              advice: {
                explicitBucketBoundaries: [
                  0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5, 7.5, 10,
                ],
              },
            }
          )),
          (this._stableHttpClientDurationHistogram = this.meter.createHistogram(
            j.METRIC_HTTP_CLIENT_REQUEST_DURATION,
            {
              description: 'Duration of HTTP client requests.',
              unit: 's',
              valueType: d.ValueType.DOUBLE,
              advice: {
                explicitBucketBoundaries: [
                  0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5, 7.5, 10,
                ],
              },
            }
          )));
      }
      _recordServerDuration(a, b, c) {
        (this._semconvStability & h.SemconvStability.OLD &&
          this._oldHttpServerDurationHistogram.record(a, b),
          this._semconvStability & h.SemconvStability.STABLE &&
            this._stableHttpServerDurationHistogram.record(a / 1e3, c));
      }
      _recordClientDuration(a, b, c) {
        (this._semconvStability & h.SemconvStability.OLD &&
          this._oldHttpClientDurationHistogram.record(a, b),
          this._semconvStability & h.SemconvStability.STABLE &&
            this._stableHttpClientDurationHistogram.record(a / 1e3, c));
      }
      setConfig(a = {}) {
        (super.setConfig(a), (this._headerCapture = this._createHeaderCapture()));
      }
      init() {
        return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];
      }
      _getHttpInstrumentation() {
        return new h.InstrumentationNodeModuleDefinition(
          'http',
          ['*'],
          (a) => {
            let b = 'Module' === a[Symbol.toStringTag];
            if (!this.getConfig().disableOutgoingRequestInstrumentation) {
              let c = this._wrap(a, 'request', this._getPatchOutgoingRequestFunction('http')),
                d = this._wrap(a, 'get', this._getPatchOutgoingGetFunction(c));
              b && ((a.default.request = c), (a.default.get = d));
            }
            return (
              this.getConfig().disableIncomingRequestInstrumentation ||
                this._wrap(
                  a.Server.prototype,
                  'emit',
                  this._getPatchIncomingRequestFunction('http')
                ),
              a
            );
          },
          (a) => {
            void 0 !== a &&
              (this.getConfig().disableOutgoingRequestInstrumentation ||
                (this._unwrap(a, 'request'), this._unwrap(a, 'get')),
              this.getConfig().disableIncomingRequestInstrumentation ||
                this._unwrap(a.Server.prototype, 'emit'));
          }
        );
      }
      _getHttpsInstrumentation() {
        return new h.InstrumentationNodeModuleDefinition(
          'https',
          ['*'],
          (a) => {
            let b = 'Module' === a[Symbol.toStringTag];
            if (!this.getConfig().disableOutgoingRequestInstrumentation) {
              let c = this._wrap(a, 'request', this._getPatchHttpsOutgoingRequestFunction('https')),
                d = this._wrap(a, 'get', this._getPatchHttpsOutgoingGetFunction(c));
              b && ((a.default.request = c), (a.default.get = d));
            }
            return (
              this.getConfig().disableIncomingRequestInstrumentation ||
                this._wrap(
                  a.Server.prototype,
                  'emit',
                  this._getPatchIncomingRequestFunction('https')
                ),
              a
            );
          },
          (a) => {
            void 0 !== a &&
              (this.getConfig().disableOutgoingRequestInstrumentation ||
                (this._unwrap(a, 'request'), this._unwrap(a, 'get')),
              this.getConfig().disableIncomingRequestInstrumentation ||
                this._unwrap(a.Server.prototype, 'emit'));
          }
        );
      }
      _getPatchIncomingRequestFunction(a) {
        return (b) => this._incomingRequestFunction(a, b);
      }
      _getPatchOutgoingRequestFunction(a) {
        return (b) => this._outgoingRequestFunction(a, b);
      }
      _getPatchOutgoingGetFunction(a) {
        return (b) =>
          function (b, ...c) {
            let d = a(b, ...c);
            return (d.end(), d);
          };
      }
      _getPatchHttpsOutgoingRequestFunction(a) {
        return (b) => {
          let c = this;
          return function (d, ...e) {
            return (
              'https' === a &&
                'object' == typeof d &&
                d?.constructor?.name !== 'URL' &&
                ((d = Object.assign({}, d)), c._setDefaultOptions(d)),
              c._getPatchOutgoingRequestFunction(a)(b)(d, ...e)
            );
          };
        };
      }
      _setDefaultOptions(a) {
        ((a.protocol = a.protocol || 'https:'), (a.port = a.port || 443));
      }
      _getPatchHttpsOutgoingGetFunction(a) {
        return (b) => {
          let c = this;
          return function (d, ...e) {
            return c._getPatchOutgoingGetFunction(a)(b)(d, ...e);
          };
        };
      }
      _traceClientRequest(a, b, c, e, f) {
        this.getConfig().requestHook && this._callRequestHook(b, a);
        let g = !1;
        return (
          a.prependListener('response', (j) => {
            (this._diag.debug('outgoingRequest on response()'),
              1 >= a.listenerCount('response') && j.resume());
            let l = (0, k.getOutgoingRequestAttributesOnResponse)(j, this._semconvStability);
            (b.setAttributes(l),
              (e = Object.assign(e, (0, k.getOutgoingRequestMetricAttributesOnResponse)(l))),
              (f = Object.assign(f, (0, k.getOutgoingStableRequestMetricAttributesOnResponse)(l))),
              this.getConfig().responseHook && this._callResponseHook(b, j),
              this._headerCapture.client.captureRequestHeaders(b, (b) => a.getHeader(b)),
              this._headerCapture.client.captureResponseHeaders(b, (a) => j.headers[a]),
              d.context.bind(d.context.active(), j));
            let m = () => {
              let i;
              (this._diag.debug('outgoingRequest on end()'),
                g ||
                  ((g = !0),
                  (i =
                    j.aborted && !j.complete
                      ? { code: d.SpanStatusCode.ERROR }
                      : { code: (0, k.parseResponseStatus)(d.SpanKind.CLIENT, j.statusCode) }),
                  b.setStatus(i),
                  this.getConfig().applyCustomAttributesOnSpan &&
                    (0, h.safeExecuteInTheMiddle)(
                      () => this.getConfig().applyCustomAttributesOnSpan(b, a, j),
                      () => {},
                      !0
                    ),
                  this._closeHttpSpan(b, d.SpanKind.CLIENT, c, e, f)));
            };
            (j.on('end', m),
              j.on(i.errorMonitor, (a) => {
                (this._diag.debug('outgoingRequest on error()', a),
                  g ||
                    ((g = !0),
                    (0, k.setSpanWithError)(b, a, this._semconvStability),
                    b.setStatus({ code: d.SpanStatusCode.ERROR, message: a.message }),
                    this._closeHttpSpan(b, d.SpanKind.CLIENT, c, e, f)));
              }));
          }),
          a.on('close', () => {
            (this._diag.debug('outgoingRequest on request close()'),
              a.aborted || g || ((g = !0), this._closeHttpSpan(b, d.SpanKind.CLIENT, c, e, f)));
          }),
          a.on(i.errorMonitor, (a) => {
            (this._diag.debug('outgoingRequest on request error()', a),
              g ||
                ((g = !0),
                (0, k.setSpanWithError)(b, a, this._semconvStability),
                this._closeHttpSpan(b, d.SpanKind.CLIENT, c, e, f)));
          }),
          this._diag.debug('http.ClientRequest return request'),
          a
        );
      }
      _incomingRequestFunction(a, b) {
        let c = this;
        return function (f, ...g) {
          if ('request' !== f) return b.apply(this, [f, ...g]);
          let l = g[0],
            m = g[1],
            n = l.method || 'GET';
          if (
            (c._diag.debug(`${a} instrumentation incomingRequest`),
            (0, h.safeExecuteInTheMiddle)(
              () => c.getConfig().ignoreIncomingRequestHook?.(l),
              (a) => {
                null != a && c._diag.error('caught ignoreIncomingRequestHook error: ', a);
              },
              !0
            ))
          )
            return d.context.with(
              (0, e.suppressTracing)(d.context.active()),
              () => (
                d.context.bind(d.context.active(), l),
                d.context.bind(d.context.active(), m),
                b.apply(this, [f, ...g])
              )
            );
          let o = l.headers,
            p = (0, k.getIncomingRequestAttributes)(
              l,
              {
                component: a,
                serverName: c.getConfig().serverName,
                hookAttributes: c._callStartSpanHook(l, c.getConfig().startIncomingSpanHook),
                semconvStability: c._semconvStability,
                enableSyntheticSourceDetection: c.getConfig().enableSyntheticSourceDetection || !1,
              },
              c._diag
            ),
            q = { kind: d.SpanKind.SERVER, attributes: p },
            r = (0, e.hrTime)(),
            s = (0, k.getIncomingRequestMetricAttributes)(p),
            t = {
              [j.ATTR_HTTP_REQUEST_METHOD]: p[j.ATTR_HTTP_REQUEST_METHOD],
              [j.ATTR_URL_SCHEME]: p[j.ATTR_URL_SCHEME],
            };
          p[j.ATTR_NETWORK_PROTOCOL_VERSION] &&
            (t[j.ATTR_NETWORK_PROTOCOL_VERSION] = p[j.ATTR_NETWORK_PROTOCOL_VERSION]);
          let u = d.propagation.extract(d.ROOT_CONTEXT, o),
            v = c._startHttpSpan(n, q, u),
            w = { type: e.RPCType.HTTP, span: v };
          return d.context.with((0, e.setRPCMetadata)(d.trace.setSpan(u, v), w), () => {
            (d.context.bind(d.context.active(), l),
              d.context.bind(d.context.active(), m),
              c.getConfig().requestHook && c._callRequestHook(v, l),
              c.getConfig().responseHook && c._callResponseHook(v, m),
              c._headerCapture.server.captureRequestHeaders(v, (a) => l.headers[a]));
            let a = !1;
            return (
              m.on('close', () => {
                a || c._onServerResponseFinish(l, m, v, s, t, r);
              }),
              m.on(i.errorMonitor, (b) => {
                ((a = !0), c._onServerResponseError(v, s, t, r, b));
              }),
              (0, h.safeExecuteInTheMiddle)(
                () => b.apply(this, [f, ...g]),
                (a) => {
                  if (a)
                    throw (
                      (0, k.setSpanWithError)(v, a, c._semconvStability),
                      c._closeHttpSpan(v, d.SpanKind.SERVER, r, s, t),
                      a
                    );
                }
              )
            );
          });
        };
      }
      _outgoingRequestFunction(a, b) {
        let c = this;
        return function (g, ...i) {
          if (!(0, k.isValidOptionsType)(g)) return b.apply(this, [g, ...i]);
          let l =
              'object' == typeof i[0] && ('string' == typeof g || g instanceof f.URL)
                ? i.shift()
                : void 0,
            { method: m, invalidUrl: n, optionsParsed: o } = (0, k.getRequestInfo)(c._diag, g, l);
          if (
            (0, h.safeExecuteInTheMiddle)(
              () => c.getConfig().ignoreOutgoingRequestHook?.(o),
              (a) => {
                null != a && c._diag.error('caught ignoreOutgoingRequestHook error: ', a);
              },
              !0
            )
          )
            return b.apply(this, [o, ...i]);
          let { hostname: p, port: q } = (0, k.extractHostnameAndPort)(o),
            r = (0, k.getOutgoingRequestAttributes)(
              o,
              {
                component: a,
                port: q,
                hostname: p,
                hookAttributes: c._callStartSpanHook(o, c.getConfig().startOutgoingSpanHook),
              },
              c._semconvStability,
              c.getConfig().enableSyntheticSourceDetection || !1
            ),
            s = (0, e.hrTime)(),
            t = (0, k.getOutgoingRequestMetricAttributes)(r),
            u = {
              [j.ATTR_HTTP_REQUEST_METHOD]: r[j.ATTR_HTTP_REQUEST_METHOD],
              [j.ATTR_SERVER_ADDRESS]: r[j.ATTR_SERVER_ADDRESS],
              [j.ATTR_SERVER_PORT]: r[j.ATTR_SERVER_PORT],
            };
          (r[j.ATTR_HTTP_RESPONSE_STATUS_CODE] &&
            (u[j.ATTR_HTTP_RESPONSE_STATUS_CODE] = r[j.ATTR_HTTP_RESPONSE_STATUS_CODE]),
            r[j.ATTR_NETWORK_PROTOCOL_VERSION] &&
              (u[j.ATTR_NETWORK_PROTOCOL_VERSION] = r[j.ATTR_NETWORK_PROTOCOL_VERSION]));
          let v = { kind: d.SpanKind.CLIENT, attributes: r },
            w = c._startHttpSpan(m, v),
            x = d.context.active(),
            y = d.trace.setSpan(x, w);
          return (
            o.headers ? (o.headers = Object.assign({}, o.headers)) : (o.headers = {}),
            d.propagation.inject(y, o.headers),
            d.context.with(y, () => {
              let e = i[i.length - 1];
              'function' == typeof e && (i[i.length - 1] = d.context.bind(x, e));
              let f = (0, h.safeExecuteInTheMiddle)(
                () => (n ? b.apply(this, [g, ...i]) : b.apply(this, [o, ...i])),
                (a) => {
                  if (a)
                    throw (
                      (0, k.setSpanWithError)(w, a, c._semconvStability),
                      c._closeHttpSpan(w, d.SpanKind.CLIENT, s, t, u),
                      a
                    );
                }
              );
              return (
                c._diag.debug(`${a} instrumentation outgoingRequest`),
                d.context.bind(x, f),
                c._traceClientRequest(f, w, s, t, u)
              );
            })
          );
        };
      }
      _onServerResponseFinish(a, b, c, e, f, g) {
        let i = (0, k.getIncomingRequestAttributesOnResponse)(a, b, this._semconvStability);
        ((e = Object.assign(e, (0, k.getIncomingRequestMetricAttributesOnResponse)(i))),
          (f = Object.assign(f, (0, k.getIncomingStableRequestMetricAttributesOnResponse)(i))),
          this._headerCapture.server.captureResponseHeaders(c, (a) => b.getHeader(a)),
          c
            .setAttributes(i)
            .setStatus({ code: (0, k.parseResponseStatus)(d.SpanKind.SERVER, b.statusCode) }));
        let l = i[j.ATTR_HTTP_ROUTE];
        (l && c.updateName(`${a.method || 'GET'} ${l}`),
          this.getConfig().applyCustomAttributesOnSpan &&
            (0, h.safeExecuteInTheMiddle)(
              () => this.getConfig().applyCustomAttributesOnSpan(c, a, b),
              () => {},
              !0
            ),
          this._closeHttpSpan(c, d.SpanKind.SERVER, g, e, f));
      }
      _onServerResponseError(a, b, c, e, f) {
        ((0, k.setSpanWithError)(a, f, this._semconvStability),
          this._closeHttpSpan(a, d.SpanKind.SERVER, e, b, c));
      }
      _startHttpSpan(a, b, c = d.context.active()) {
        let e,
          f =
            b.kind === d.SpanKind.CLIENT
              ? this.getConfig().requireParentforOutgoingSpans
              : this.getConfig().requireParentforIncomingSpans,
          g = d.trace.getSpan(c);
        return (
          (e =
            !0 === f && void 0 === g
              ? d.trace.wrapSpanContext(d.INVALID_SPAN_CONTEXT)
              : !0 === f && g?.spanContext().isRemote
                ? g
                : this.tracer.startSpan(a, b, c)),
          this._spanNotEnded.add(e),
          e
        );
      }
      _closeHttpSpan(a, b, c, f, g) {
        if (!this._spanNotEnded.has(a)) return;
        (a.end(), this._spanNotEnded.delete(a));
        let h = (0, e.hrTimeToMilliseconds)((0, e.hrTimeDuration)(c, (0, e.hrTime)()));
        b === d.SpanKind.SERVER
          ? this._recordServerDuration(h, f, g)
          : b === d.SpanKind.CLIENT && this._recordClientDuration(h, f, g);
      }
      _callResponseHook(a, b) {
        (0, h.safeExecuteInTheMiddle)(
          () => this.getConfig().responseHook(a, b),
          () => {},
          !0
        );
      }
      _callRequestHook(a, b) {
        (0, h.safeExecuteInTheMiddle)(
          () => this.getConfig().requestHook(a, b),
          () => {},
          !0
        );
      }
      _callStartSpanHook(a, b) {
        if ('function' == typeof b)
          return (0, h.safeExecuteInTheMiddle)(
            () => b(a),
            () => {},
            !0
          );
      }
      _createHeaderCapture() {
        let a = this.getConfig();
        return {
          client: {
            captureRequestHeaders: (0, k.headerCapture)(
              'request',
              a.headersToSpanAttributes?.client?.requestHeaders ?? []
            ),
            captureResponseHeaders: (0, k.headerCapture)(
              'response',
              a.headersToSpanAttributes?.client?.responseHeaders ?? []
            ),
          },
          server: {
            captureRequestHeaders: (0, k.headerCapture)(
              'request',
              a.headersToSpanAttributes?.server?.requestHeaders ?? []
            ),
            captureResponseHeaders: (0, k.headerCapture)(
              'response',
              a.headersToSpanAttributes?.server?.responseHeaders ?? []
            ),
          },
        };
      }
    }
    c.HttpInstrumentation = l;
  },
  31687,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.HttpInstrumentation = void 0));
    var d = a.r(29613);
    Object.defineProperty(c, 'HttpInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.HttpInstrumentation;
      },
    });
  },
  89871,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(12057),
      e = a.r(32723);
    c.captureLog = function (a, ...b) {
      let [c, f, g] = b;
      if (Array.isArray(f)) {
        let b = { ...g };
        ((b['sentry.message.template'] = c),
          f.forEach((a, c) => {
            b[`sentry.message.parameter.${c}`] = a;
          }));
        let h = d.format(c, ...f);
        e._INTERNAL_captureLog({ level: a, message: h, attributes: b });
      } else e._INTERNAL_captureLog({ level: a, message: c, attributes: f });
    };
  },
  32920,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(89871);
    ((c.fmt = a.r(32723).fmt),
      (c.debug = function (...a) {
        d.captureLog('debug', ...a);
      }),
      (c.error = function (...a) {
        d.captureLog('error', ...a);
      }),
      (c.fatal = function (...a) {
        d.captureLog('fatal', ...a);
      }),
      (c.info = function (...a) {
        d.captureLog('info', ...a);
      }),
      (c.trace = function (...a) {
        d.captureLog('trace', ...a);
      }),
      (c.warn = function (...a) {
        d.captureLog('warn', ...a);
      }));
  },
  82087,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(38625),
      e = {};
    ((c.INSTRUMENTED = e),
      (c.generateInstrumentOnce = function (a, b, c) {
        var f, g, h, i, j;
        return c
          ? ((f = a),
            (g = b),
            (h = c),
            Object.assign(
              (a) => {
                let b = h(a),
                  c = e[f];
                if (c) return (c.setConfig(b), c);
                let i = new g(b);
                return ((e[f] = i), d.registerInstrumentations({ instrumentations: [i] }), i);
              },
              { id: f }
            ))
          : ((i = a),
            (j = b),
            Object.assign(
              (a) => {
                let b = e[i];
                if (b) return (a && b.setConfig(a), b);
                let c = j(a);
                return ((e[i] = c), d.registerInstrumentations({ instrumentations: [c] }), c);
              },
              { id: i }
            ));
      }),
      (c.instrumentWhenWrapped = function (a) {
        let b = !1,
          c = [];
        if ('function' == typeof a._wrap) {
          let d = a._wrap;
          a._wrap = (...a) => ((b = !0), c.forEach((a) => a()), (c = []), d(...a));
        } else b = !0;
        return (a) => {
          b ? a() : c.push(a);
        };
      }));
  },
  18977,
  15727,
  (a) => {
    'use strict';
    a.s(['SDK_INFO', () => c], 18977);
    var b = a.i(79833);
    let c = {
      [b.ATTR_TELEMETRY_SDK_NAME]: 'opentelemetry',
      'process.runtime.name': 'node',
      [b.ATTR_TELEMETRY_SDK_LANGUAGE]: b.TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS,
      [b.ATTR_TELEMETRY_SDK_VERSION]: '2.1.0',
    };
    a.s(
      [
        'getBooleanFromEnv',
        () => h,
        'getNumberFromEnv',
        () => f,
        'getStringFromEnv',
        () => g,
        'getStringListFromEnv',
        () => i,
      ],
      15727
    );
    var d = a.i(84151),
      e = a.i(24361);
    function f(a) {
      let b = process.env[a];
      if (null == b || '' === b.trim()) return;
      let c = Number(b);
      return isNaN(c)
        ? void d.diag.warn(
            `Unknown value ${(0, e.inspect)(b)} for ${a}, expected a number, using defaults`
          )
        : c;
    }
    function g(a) {
      let b = process.env[a];
      if (null != b && '' !== b.trim()) return b;
    }
    function h(a) {
      let b = process.env[a]?.trim().toLowerCase();
      return (
        null != b &&
        '' !== b &&
        ('true' === b ||
          ('false' !== b &&
            (d.diag.warn(
              `Unknown value ${(0, e.inspect)(b)} for ${a}, expected 'true' or 'false', falling back to 'false' (default)`
            ),
            !1)))
      );
    }
    function i(a) {
      return g(a)
        ?.split(',')
        .map((a) => a.trim())
        .filter((a) => '' !== a);
    }
  },
  51301,
  32125,
  93018,
  20186,
  83161,
  75410,
  18911,
  29169,
  79201,
  35097,
  22314,
  (a) => {
    'use strict';
    a.s(['internal', () => h], 51301);
    var b,
      c = a.i(734);
    a.s(
      ['isTracingSuppressed', () => g, 'suppressTracing', () => e, 'unsuppressTracing', () => f],
      32125
    );
    let d = (0, a.i(33871).createContextKey)('OpenTelemetry SDK Context Key SUPPRESS_TRACING');
    function e(a) {
      return a.setValue(d, !0);
    }
    function f(a) {
      return a.deleteValue(d);
    }
    function g(a) {
      return !0 === a.getValue(d);
    }
    let h = {
      _export: function (a, b) {
        return new Promise((d) => {
          c.context.with(e(c.context.active()), () => {
            a.export(b, (a) => {
              d(a);
            });
          });
        });
      },
    };
    a.s(['isAttributeValue', () => k, 'sanitizeAttributes', () => j], 93018);
    var i = a.i(84151);
    function j(a) {
      let b = {};
      if ('object' != typeof a || null == a) return b;
      for (let [d, e] of Object.entries(a)) {
        var c;
        if (!('string' == typeof (c = d) && c.length > 0)) {
          i.diag.warn(`Invalid attribute key: ${d}`);
          continue;
        }
        if (!k(e)) {
          i.diag.warn(`Invalid attribute value set for key: ${d}`);
          continue;
        }
        Array.isArray(e) ? (b[d] = e.slice()) : (b[d] = e);
      }
      return b;
    }
    function k(a) {
      return (
        null == a ||
        (Array.isArray(a)
          ? (function (a) {
              let b;
              for (let c of a)
                if (null != c) {
                  if (!b) {
                    if (l(c)) {
                      b = typeof c;
                      continue;
                    }
                    return !1;
                  }
                  if (typeof c !== b) return !1;
                }
              return !0;
            })(a)
          : l(a))
      );
    }
    function l(a) {
      switch (typeof a) {
        case 'number':
        case 'boolean':
        case 'string':
          return !0;
      }
      return !1;
    }
    function m() {
      return (a) => {
        var b;
        i.diag.error(
          'string' == typeof (b = a)
            ? b
            : JSON.stringify(
                (function (a) {
                  let b = {},
                    c = a;
                  for (; null !== c; )
                    (Object.getOwnPropertyNames(c).forEach((a) => {
                      if (b[a]) return;
                      let d = c[a];
                      d && (b[a] = String(d));
                    }),
                      (c = Object.getPrototypeOf(c)));
                  return b;
                })(b)
              )
        );
      };
    }
    (a.s(['globalErrorHandler', () => p, 'setGlobalErrorHandler', () => o], 83161),
      a.s(['loggingErrorHandler', () => m], 20186));
    let n = m();
    function o(a) {
      n = a;
    }
    function p(a) {
      try {
        n(a);
      } catch {}
    }
    (a.s(
      [
        'addHrTimes',
        () => C,
        'getTimeOrigin',
        () => s,
        'hrTime',
        () => t,
        'hrTimeDuration',
        () => v,
        'hrTimeToMicroseconds',
        () => z,
        'hrTimeToMilliseconds',
        () => y,
        'hrTimeToNanoseconds',
        () => x,
        'hrTimeToTimeStamp',
        () => w,
        'isTimeInput',
        () => B,
        'isTimeInputHrTime',
        () => A,
        'millisToHrTime',
        () => r,
        'timeInputToHrTime',
        () => u,
      ],
      18911
    ),
      a.s(['otperformance', () => q], 75410));
    let q = a.i(60438).performance;
    function r(a) {
      return [Math.trunc(a / 1e3), Math.round((a % 1e3) * 1e6)];
    }
    function s() {
      let a = q.timeOrigin;
      return ('number' != typeof a && (a = q.timing && q.timing.fetchStart), a);
    }
    function t(a) {
      return C(r(s()), r('number' == typeof a ? a : q.now()));
    }
    function u(a) {
      if (A(a)) return a;
      if ('number' == typeof a)
        if (a < s()) return t(a);
        else return r(a);
      if (a instanceof Date) return r(a.getTime());
      throw TypeError('Invalid input type');
    }
    function v(a, b) {
      let c = b[0] - a[0],
        d = b[1] - a[1];
      return (d < 0 && ((c -= 1), (d += 1e9)), [c, d]);
    }
    function w(a) {
      let b = `${'0'.repeat(9)}${a[1]}Z`,
        c = b.substring(b.length - 9 - 1);
      return new Date(1e3 * a[0]).toISOString().replace('000Z', c);
    }
    function x(a) {
      return 1e9 * a[0] + a[1];
    }
    function y(a) {
      return 1e3 * a[0] + a[1] / 1e6;
    }
    function z(a) {
      return 1e6 * a[0] + a[1] / 1e3;
    }
    function A(a) {
      return (
        Array.isArray(a) && 2 === a.length && 'number' == typeof a[0] && 'number' == typeof a[1]
      );
    }
    function B(a) {
      return A(a) || 'number' == typeof a || a instanceof Date;
    }
    function C(a, b) {
      let c = [a[0] + b[0], a[1] + b[1]];
      return (c[1] >= 1e9 && ((c[1] -= 1e9), (c[0] += 1)), c);
    }
    function D(a) {
      a.unref();
    }
    (a.s(['ExportResultCode', () => b], 29169),
      (function (a) {
        ((a[(a.SUCCESS = 0)] = 'SUCCESS'), (a[(a.FAILED = 1)] = 'FAILED'));
      })(b || (b = {})),
      a.s(['unrefTimer', () => D], 79201),
      a.s(['merge', () => M], 35097));
    let E = Function.prototype.toString,
      F = E.call(Object),
      G = Object.getPrototypeOf,
      H = Object.prototype,
      I = H.hasOwnProperty,
      J = Symbol ? Symbol.toStringTag : void 0,
      K = H.toString;
    function L(a) {
      var b, c, d;
      if (
        null == (b = a) ||
        'object' != typeof b ||
        '[object Object]' !==
          (null == (c = a)
            ? void 0 === c
              ? '[object Undefined]'
              : '[object Null]'
            : J && J in Object(c)
              ? (function (a) {
                  let b = I.call(a, J),
                    c = a[J],
                    d = !1;
                  try {
                    ((a[J] = void 0), (d = !0));
                  } catch {}
                  let e = K.call(a);
                  return (d && (b ? (a[J] = c) : delete a[J]), e);
                })(c)
              : ((d = c), K.call(d)))
      )
        return !1;
      let e = G(a);
      if (null === e) return !0;
      let f = I.call(e, 'constructor') && e.constructor;
      return 'function' == typeof f && f instanceof f && E.call(f) === F;
    }
    function M(...a) {
      let b = a.shift(),
        c = new WeakMap();
      for (; a.length > 0; )
        b = (function a(b, c, d = 0, e) {
          let f;
          if (!(d > 20)) {
            if ((d++, S(b) || S(c) || Q(c))) f = N(c);
            else if (P(b)) {
              if (((f = b.slice()), P(c)))
                for (let a = 0, b = c.length; a < b; a++) f.push(N(c[a]));
              else if (R(c)) {
                let a = Object.keys(c);
                for (let b = 0, d = a.length; b < d; b++) {
                  let d = a[b];
                  f[d] = N(c[d]);
                }
              }
            } else if (R(b))
              if (R(c)) {
                var g, h;
                if (((g = b), (h = c), !(L(g) && L(h)))) return c;
                f = Object.assign({}, b);
                let i = Object.keys(c);
                for (let g = 0, h = i.length; g < h; g++) {
                  let h = i[g],
                    j = c[h];
                  if (S(j)) void 0 === j ? delete f[h] : (f[h] = j);
                  else {
                    let g = f[h];
                    if (O(b, h, e) || O(c, h, e)) delete f[h];
                    else {
                      if (R(g) && R(j)) {
                        let a = e.get(g) || [],
                          d = e.get(j) || [];
                        (a.push({ obj: b, key: h }),
                          d.push({ obj: c, key: h }),
                          e.set(g, a),
                          e.set(j, d));
                      }
                      f[h] = a(f[h], j, d, e);
                    }
                  }
                }
              } else f = c;
            return f;
          }
        })(b, a.shift(), 0, c);
      return b;
    }
    function N(a) {
      return P(a) ? a.slice() : a;
    }
    function O(a, b, c) {
      let d = c.get(a[b]) || [];
      for (let c = 0, e = d.length; c < e; c++) {
        let e = d[c];
        if (e.key === b && e.obj === a) return !0;
      }
      return !1;
    }
    function P(a) {
      return Array.isArray(a);
    }
    function Q(a) {
      return 'function' == typeof a;
    }
    function R(a) {
      return !S(a) && !P(a) && !Q(a) && 'object' == typeof a;
    }
    function S(a) {
      return (
        'string' == typeof a ||
        'number' == typeof a ||
        'boolean' == typeof a ||
        void 0 === a ||
        a instanceof Date ||
        a instanceof RegExp ||
        null === a
      );
    }
    a.s(['BindOnceFuture', () => U], 22314);
    class T {
      _promise;
      _resolve;
      _reject;
      constructor() {
        this._promise = new Promise((a, b) => {
          ((this._resolve = a), (this._reject = b));
        });
      }
      get promise() {
        return this._promise;
      }
      resolve(a) {
        this._resolve(a);
      }
      reject(a) {
        this._reject(a);
      }
    }
    class U {
      _callback;
      _that;
      _isCalled = !1;
      _deferred = new T();
      constructor(a, b) {
        ((this._callback = a), (this._that = b));
      }
      get isCalled() {
        return this._isCalled;
      }
      get promise() {
        return this._deferred.promise;
      }
      call(...a) {
        if (!this._isCalled) {
          this._isCalled = !0;
          try {
            Promise.resolve(this._callback.call(this._that, ...a)).then(
              (a) => this._deferred.resolve(a),
              (a) => this._deferred.reject(a)
            );
          } catch (a) {
            this._deferred.reject(a);
          }
        }
        return this._deferred.promise;
      }
    }
  },
  98070,
  (a) => {
    'use strict';
    a.s(
      [
        'AnchoredClock',
        () => k,
        'BindOnceFuture',
        () => W.BindOnceFuture,
        'CompositePropagator',
        () => w,
        'ExportResultCode',
        () => p.ExportResultCode,
        'RPCType',
        () => b,
        'SDK_INFO',
        () => q.SDK_INFO,
        'TRACE_PARENT_HEADER',
        () => H,
        'TRACE_STATE_HEADER',
        () => I,
        'TimeoutError',
        () => S,
        'TraceState',
        () => G,
        'W3CBaggagePropagator',
        () => j,
        'W3CTraceContextPropagator',
        () => L,
        '_globalThis',
        () => r,
        'addHrTimes',
        () => o.addHrTimes,
        'callWithTimeout',
        () => T,
        'deleteRPCMetadata',
        () => O,
        'diagLogLevelFromString',
        () => Z,
        'getBooleanFromEnv',
        () => s.getBooleanFromEnv,
        'getNumberFromEnv',
        () => s.getNumberFromEnv,
        'getRPCMetadata',
        () => P,
        'getStringFromEnv',
        () => s.getStringFromEnv,
        'getStringListFromEnv',
        () => s.getStringListFromEnv,
        'getTimeOrigin',
        () => o.getTimeOrigin,
        'globalErrorHandler',
        () => m.globalErrorHandler,
        'hrTime',
        () => o.hrTime,
        'hrTimeDuration',
        () => o.hrTimeDuration,
        'hrTimeToMicroseconds',
        () => o.hrTimeToMicroseconds,
        'hrTimeToMilliseconds',
        () => o.hrTimeToMilliseconds,
        'hrTimeToNanoseconds',
        () => o.hrTimeToNanoseconds,
        'hrTimeToTimeStamp',
        () => o.hrTimeToTimeStamp,
        'internal',
        () => c.internal,
        'isAttributeValue',
        () => l.isAttributeValue,
        'isTimeInput',
        () => o.isTimeInput,
        'isTimeInputHrTime',
        () => o.isTimeInputHrTime,
        'isTracingSuppressed',
        () => Q.isTracingSuppressed,
        'isUrlIgnored',
        () => V,
        'loggingErrorHandler',
        () => n.loggingErrorHandler,
        'merge',
        () => R.merge,
        'millisToHrTime',
        () => o.millisToHrTime,
        'otperformance',
        () => t.otperformance,
        'parseKeyPairsIntoRecord',
        () => i,
        'parseTraceParent',
        () => K,
        'sanitizeAttributes',
        () => l.sanitizeAttributes,
        'setGlobalErrorHandler',
        () => m.setGlobalErrorHandler,
        'setRPCMetadata',
        () => N,
        'suppressTracing',
        () => Q.suppressTracing,
        'timeInputToHrTime',
        () => o.timeInputToHrTime,
        'unrefTimer',
        () => u.unrefTimer,
        'unsuppressTracing',
        () => Q.unsuppressTracing,
        'urlMatches',
        () => U,
      ],
      98070
    );
    var b,
      c = a.i(51301),
      d = a.i(2561),
      e = a.i(32125);
    let f = 'baggage';
    var g = a.i(34090);
    function h(a) {
      let b,
        c = a.split(';');
      if (c.length <= 0) return;
      let d = c.shift();
      if (!d) return;
      let e = d.indexOf('=');
      if (e <= 0) return;
      let f = decodeURIComponent(d.substring(0, e).trim()),
        h = decodeURIComponent(d.substring(e + 1).trim());
      return (
        c.length > 0 && (b = (0, g.baggageEntryMetadataFromString)(c.join(';'))),
        { key: f, value: h, metadata: b }
      );
    }
    function i(a) {
      let b = {};
      return (
        'string' == typeof a &&
          a.length > 0 &&
          a.split(',').forEach((a) => {
            let c = h(a);
            void 0 !== c && c.value.length > 0 && (b[c.key] = c.value);
          }),
        b
      );
    }
    class j {
      inject(a, b, c) {
        let g = d.propagation.getBaggage(a);
        if (!g || (0, e.isTracingSuppressed)(a)) return;
        let h = g
          .getAllEntries()
          .map(([a, b]) => {
            let c = `${encodeURIComponent(a)}=${encodeURIComponent(b.value)}`;
            return (void 0 !== b.metadata && (c += ';' + b.metadata.toString()), c);
          })
          .filter((a) => a.length <= 4096)
          .slice(0, 180)
          .reduce((a, b) => {
            let c = `${a}${'' !== a ? ',' : ''}${b}`;
            return c.length > 8192 ? a : c;
          }, '');
        h.length > 0 && c.set(b, f, h);
      }
      extract(a, b, c) {
        let e = c.get(b, f),
          g = Array.isArray(e) ? e.join(',') : e;
        if (!g) return a;
        let i = {};
        return 0 === g.length ||
          (g.split(',').forEach((a) => {
            let b = h(a);
            if (b) {
              let a = { value: b.value };
              (b.metadata && (a.metadata = b.metadata), (i[b.key] = a));
            }
          }),
          0 === Object.entries(i).length)
          ? a
          : d.propagation.setBaggage(a, d.propagation.createBaggage(i));
      }
      fields() {
        return [f];
      }
    }
    class k {
      _monotonicClock;
      _epochMillis;
      _performanceMillis;
      constructor(a, b) {
        ((this._monotonicClock = b),
          (this._epochMillis = a.now()),
          (this._performanceMillis = b.now()));
      }
      now() {
        let a = this._monotonicClock.now() - this._performanceMillis;
        return this._epochMillis + a;
      }
    }
    var l = a.i(93018),
      m = a.i(83161),
      n = a.i(20186),
      o = a.i(18911),
      p = a.i(29169),
      q = a.i(18977);
    let r = 'object' == typeof globalThis ? globalThis : a.g;
    var s = a.i(15727),
      t = a.i(75410),
      u = a.i(79201),
      v = a.i(84151);
    class w {
      _propagators;
      _fields;
      constructor(a = {}) {
        ((this._propagators = a.propagators ?? []),
          (this._fields = Array.from(
            new Set(
              this._propagators
                .map((a) => ('function' == typeof a.fields ? a.fields() : []))
                .reduce((a, b) => a.concat(b), [])
            )
          )));
      }
      inject(a, b, c) {
        for (let d of this._propagators)
          try {
            d.inject(a, b, c);
          } catch (a) {
            v.diag.warn(`Failed to inject with ${d.constructor.name}. Err: ${a.message}`);
          }
      }
      extract(a, b, c) {
        return this._propagators.reduce((a, d) => {
          try {
            return d.extract(a, b, c);
          } catch (a) {
            v.diag.warn(`Failed to extract with ${d.constructor.name}. Err: ${a.message}`);
          }
          return a;
        }, a);
      }
      fields() {
        return this._fields.slice();
      }
    }
    var x = a.i(32739),
      y = a.i(73609),
      z = a.i(26200);
    let A = '[_0-9a-z-*/]',
      B = `[a-z]${A}{0,255}`,
      C = `[a-z0-9]${A}{0,240}@[a-z]${A}{0,13}`,
      D = RegExp(`^(?:${B}|${C})$`),
      E = /^[ -~]{0,255}[!-~]$/,
      F = /,|=/;
    class G {
      _internalState = new Map();
      constructor(a) {
        a && this._parse(a);
      }
      set(a, b) {
        let c = this._clone();
        return (
          c._internalState.has(a) && c._internalState.delete(a),
          c._internalState.set(a, b),
          c
        );
      }
      unset(a) {
        let b = this._clone();
        return (b._internalState.delete(a), b);
      }
      get(a) {
        return this._internalState.get(a);
      }
      serialize() {
        return this._keys()
          .reduce((a, b) => (a.push(b + '=' + this.get(b)), a), [])
          .join(',');
      }
      _parse(a) {
        !(a.length > 512) &&
          ((this._internalState = a
            .split(',')
            .reverse()
            .reduce((a, b) => {
              let c = b.trim(),
                d = c.indexOf('=');
              if (-1 !== d) {
                let e = c.slice(0, d),
                  f = c.slice(d + 1, b.length);
                D.test(e) && E.test(f) && !F.test(f) && a.set(e, f);
              }
              return a;
            }, new Map())),
          this._internalState.size > 32 &&
            (this._internalState = new Map(
              Array.from(this._internalState.entries()).reverse().slice(0, 32)
            )));
      }
      _keys() {
        return Array.from(this._internalState.keys()).reverse();
      }
      _clone() {
        let a = new G();
        return ((a._internalState = new Map(this._internalState)), a);
      }
    }
    let H = 'traceparent',
      I = 'tracestate',
      J = RegExp(
        '^\\s?((?!ff)[\\da-f]{2})-((?![0]{32})[\\da-f]{32})-((?![0]{16})[\\da-f]{16})-([\\da-f]{2})(-.*)?\\s?$'
      );
    function K(a) {
      let b = J.exec(a);
      return !b || ('00' === b[1] && b[5])
        ? null
        : { traceId: b[2], spanId: b[3], traceFlags: parseInt(b[4], 16) };
    }
    class L {
      inject(a, b, c) {
        let d = y.trace.getSpanContext(a);
        if (!d || (0, e.isTracingSuppressed)(a) || !(0, x.isSpanContextValid)(d)) return;
        let f = `00-${d.traceId}-${d.spanId}-0${Number(d.traceFlags || z.TraceFlags.NONE).toString(16)}`;
        (c.set(b, H, f), d.traceState && c.set(b, I, d.traceState.serialize()));
      }
      extract(a, b, c) {
        let d = c.get(b, H);
        if (!d) return a;
        let e = Array.isArray(d) ? d[0] : d;
        if ('string' != typeof e) return a;
        let f = K(e);
        if (!f) return a;
        f.isRemote = !0;
        let g = c.get(b, I);
        if (g) {
          let a = Array.isArray(g) ? g.join(',') : g;
          f.traceState = new G('string' == typeof a ? a : void 0);
        }
        return y.trace.setSpanContext(a, f);
      }
      fields() {
        return [H, I];
      }
    }
    let M = (0, a.i(33871).createContextKey)('OpenTelemetry SDK Context Key RPC_METADATA');
    function N(a, b) {
      return a.setValue(M, b);
    }
    function O(a) {
      return a.deleteValue(M);
    }
    function P(a) {
      return a.getValue(M);
    }
    (b || (b = {})).HTTP = 'http';
    var Q = e,
      R = a.i(35097);
    class S extends Error {
      constructor(a) {
        (super(a), Object.setPrototypeOf(this, S.prototype));
      }
    }
    function T(a, b) {
      let c;
      return Promise.race([
        a,
        new Promise(function (a, d) {
          c = setTimeout(function () {
            d(new S('Operation timed out.'));
          }, b);
        }),
      ]).then(
        (a) => (clearTimeout(c), a),
        (a) => {
          throw (clearTimeout(c), a);
        }
      );
    }
    function U(a, b) {
      return 'string' == typeof b ? a === b : !!a.match(b);
    }
    function V(a, b) {
      if (!b) return !1;
      for (let c of b) if (U(a, c)) return !0;
      return !1;
    }
    var W = a.i(22314),
      X = a.i(35434);
    let Y = {
      ALL: X.DiagLogLevel.ALL,
      VERBOSE: X.DiagLogLevel.VERBOSE,
      DEBUG: X.DiagLogLevel.DEBUG,
      INFO: X.DiagLogLevel.INFO,
      WARN: X.DiagLogLevel.WARN,
      ERROR: X.DiagLogLevel.ERROR,
      NONE: X.DiagLogLevel.NONE,
    };
    function Z(a) {
      if (null == a) return;
      let b = Y[a.toUpperCase()];
      return null == b
        ? (v.diag.warn(
            `Unknown log level "${a}", expected one of ${Object.keys(Y)}, using default`
          ),
          X.DiagLogLevel.INFO)
        : b;
    }
  },
  66264,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.DEBUG_BUILD = 'undefined' == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__));
  },
  24847,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.getRequestUrl = function (a) {
        let b = a.protocol || '',
          c = a.hostname || a.host || '',
          d =
            !a.port || 80 === a.port || 443 === a.port || /^(.*):(\d+)$/.test(c)
              ? ''
              : `:${a.port}`,
          e = a.path ? a.path : '/';
        return `${b}//${c}${d}${e}`;
      }));
  },
  70932,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.INSTRUMENTATION_NAME = '@sentry/instrumentation-http'),
      (c.MAX_BODY_BYTE_LENGTH = 1048576));
  },
  16359,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(98070),
      f = a.r(79154),
      g = a.r(32723),
      h = a.r(27699),
      i = a.r(66264),
      j = a.r(70932),
      k = d.createContextKey('sentry_http_server_instrumented'),
      l = new Map(),
      m = new WeakSet();
    function n({ requestIsolationScope: a, response: b, sessionFlushingDelayMS: c }) {
      (a.setSDKProcessingMetadata({ requestSession: { status: 'ok' } }),
        b.once('close', () => {
          let b = g.getClient(),
            d = a.getScopeData().sdkProcessingMetadata.requestSession;
          if (b && d) {
            i.DEBUG_BUILD && g.debug.log(`Recorded request session with status: ${d.status}`);
            let a = new Date();
            a.setSeconds(0, 0);
            let e = a.toISOString(),
              f = l.get(b),
              h = f?.[e] || { exited: 0, crashed: 0, errored: 0 };
            if ((h[{ ok: 'exited', crashed: 'crashed', errored: 'errored' }[d.status]]++, f))
              f[e] = h;
            else {
              i.DEBUG_BUILD && g.debug.log('Opened new request session aggregate.');
              let a = { [e]: h };
              l.set(b, a);
              let d = () => {
                  (clearTimeout(j), f(), l.delete(b));
                  let c = Object.entries(a).map(([a, b]) => ({
                    started: a,
                    exited: b.exited,
                    errored: b.errored,
                    crashed: b.crashed,
                  }));
                  b.sendSession({ aggregates: c });
                },
                f = b.on('flush', () => {
                  (i.DEBUG_BUILD &&
                    g.debug.log('Sending request session aggregate due to client flush'),
                    d());
                }),
                j = setTimeout(() => {
                  (i.DEBUG_BUILD &&
                    g.debug.log('Sending request session aggregate due to flushing schedule'),
                    d());
                }, c).unref();
            }
          }
        }));
    }
    function o(a) {
      let b = g.stripUrlQueryAndFragment(a);
      return !!(
        b.match(/\.(ico|png|jpg|jpeg|gif|svg|css|js|woff|woff2|ttf|eot|webp|avif)$/) ||
        b.match(/^\/(robots\.txt|sitemap\.xml|manifest\.json|browserconfig\.xml)$/)
      );
    }
    ((c.instrumentServer = function (
      a,
      {
        ignoreIncomingRequestBody: b,
        ignoreSpansForIncomingRequests: c,
        maxIncomingRequestBodySize: l = 'medium',
        trackIncomingRequestsAsSessions: p = !0,
        spans: q,
        ignoreStaticAssets: r = !0,
        sessionFlushingDelayMS: s,
        instrumentation: t,
        incomingRequestSpanHook: u,
      }
    ) {
      let v = a.emit;
      if (m.has(v)) {
        i.DEBUG_BUILD &&
          g.debug.log(
            j.INSTRUMENTATION_NAME,
            'Incoming requests already instrumented, not instrumenting again...'
          );
        return;
      }
      let { requestHook: w, responseHook: x, applyCustomAttributesOnSpan: y } = t ?? {},
        z = new Proxy(v, {
          apply(a, m, t) {
            if ('request' !== t[0] || d.context.active().getValue(k)) return a.apply(m, t);
            i.DEBUG_BUILD && g.debug.log(j.INSTRUMENTATION_NAME, 'Handling incoming request');
            let v = g.getClient(),
              z = g.getIsolationScope().clone(),
              A = t[1],
              B = t[2],
              C = g.httpRequestToRequestData(A),
              D = A.ip || A.socket?.remoteAddress,
              E = A.url || '/';
            ('none' === l ||
              b?.(E, A) ||
              (function (a, b, c) {
                let d = 0,
                  e = [];
                i.DEBUG_BUILD && g.debug.log(j.INSTRUMENTATION_NAME, 'Patching request.on');
                let f = new WeakMap(),
                  h = 'small' === c ? 1e3 : 'medium' === c ? 1e4 : j.MAX_BODY_BYTE_LENGTH;
                try {
                  ((a.on = new Proxy(a.on, {
                    apply: (a, b, c) => {
                      let [k, l, ...m] = c;
                      if ('data' === k) {
                        i.DEBUG_BUILD &&
                          g.debug.log(
                            j.INSTRUMENTATION_NAME,
                            `Handling request.on("data") with maximum body size of ${h}b`
                          );
                        let c = new Proxy(l, {
                          apply: (a, b, c) => {
                            try {
                              let a = c[0],
                                b = Buffer.from(a);
                              d < h
                                ? (e.push(b), (d += b.byteLength))
                                : i.DEBUG_BUILD &&
                                  g.debug.log(
                                    j.INSTRUMENTATION_NAME,
                                    `Dropping request body chunk because maximum body length of ${h}b is exceeded.`
                                  );
                            } catch (a) {
                              i.DEBUG_BUILD &&
                                g.debug.error(
                                  j.INSTRUMENTATION_NAME,
                                  'Encountered error while storing body chunk.'
                                );
                            }
                            return Reflect.apply(a, b, c);
                          },
                        });
                        return (f.set(l, c), Reflect.apply(a, b, [k, c, ...m]));
                      }
                      return Reflect.apply(a, b, c);
                    },
                  })),
                    (a.off = new Proxy(a.off, {
                      apply: (a, b, c) => {
                        let [, d] = c,
                          e = f.get(d);
                        if (e) {
                          f.delete(d);
                          let g = c.slice();
                          return ((g[1] = e), Reflect.apply(a, b, g));
                        }
                        return Reflect.apply(a, b, c);
                      },
                    })),
                    a.on('end', () => {
                      try {
                        let a = Buffer.concat(e).toString('utf-8');
                        if (a) {
                          let c =
                            Buffer.byteLength(a, 'utf-8') > h
                              ? `${Buffer.from(a)
                                  .subarray(0, h - 3)
                                  .toString('utf-8')}...`
                              : a;
                          b.setSDKProcessingMetadata({ normalizedRequest: { data: c } });
                        }
                      } catch (a) {
                        i.DEBUG_BUILD &&
                          g.debug.error(
                            j.INSTRUMENTATION_NAME,
                            'Error building captured request body',
                            a
                          );
                      }
                    }));
                } catch (a) {
                  i.DEBUG_BUILD &&
                    g.debug.error(
                      j.INSTRUMENTATION_NAME,
                      'Error patching request to capture body',
                      a
                    );
                }
              })(A, z, l),
              z.setSDKProcessingMetadata({ normalizedRequest: C, ipAddress: D }));
            let F = (A.method || 'GET').toUpperCase(),
              G = g.stripUrlQueryAndFragment(E),
              H = `${F} ${G}`;
            return (
              z.setTransactionName(H),
              !1 !== p &&
                n({ requestIsolationScope: z, response: B, sessionFlushingDelayMS: s ?? 6e4 }),
              g.withIsolationScope(z, () => {
                g.getCurrentScope().getPropagationContext().propagationSpanId = g.generateSpanId();
                let b = d.propagation.extract(d.context.active(), C.headers).setValue(k, !0);
                return d.context.with(b, () => {
                  if (
                    ('undefined' != typeof __SENTRY_TRACING__ && !__SENTRY_TRACING__) ||
                    !q ||
                    !v ||
                    (function (a, { ignoreStaticAssets: b, ignoreSpansForIncomingRequests: c }) {
                      if (e.isTracingSuppressed(d.context.active())) return !0;
                      let f = a.url,
                        g = a.method?.toUpperCase();
                      return !!(
                        'OPTIONS' === g ||
                        'HEAD' === g ||
                        !f ||
                        (b && 'GET' === g && o(f)) ||
                        c?.(f, a)
                      );
                    })(A, { ignoreStaticAssets: r, ignoreSpansForIncomingRequests: c })
                  )
                    return (
                      i.DEBUG_BUILD &&
                        g.debug.log(
                          j.INSTRUMENTATION_NAME,
                          'Skipping span creation for incoming request'
                        ),
                      a.apply(m, t)
                    );
                  let b = C.url || E,
                    k = g.parseStringToURLObject(b),
                    l = A.headers,
                    n = l['user-agent'],
                    p = l['x-forwarded-for'],
                    s = A.httpVersion,
                    z = l.host,
                    D = z?.replace(/^(.*)(:[0-9]{1,5})/, '$1') || 'localhost',
                    I = v.tracer,
                    J = b.startsWith('https') ? 'https' : 'http',
                    K = I.startSpan(H, {
                      kind: d.SpanKind.SERVER,
                      attributes: {
                        [g.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.server',
                        [g.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.http',
                        'sentry.http.prefetch': '1' === A.headers['next-router-prefetch'] || void 0,
                        'http.url': b,
                        'http.method': F,
                        'http.target': k ? `${k.pathname}${k.search}` : G,
                        'http.host': z,
                        'net.host.name': D,
                        'http.client_ip': 'string' == typeof p ? p.split(',')[0] : void 0,
                        'http.user_agent': n,
                        'http.scheme': J,
                        'http.flavor': s,
                        'net.transport': s?.toUpperCase() === 'QUIC' ? 'ip_udp' : 'ip_tcp',
                        ...(function (a) {
                          let b = (function (a) {
                            let b = a['content-length'];
                            if (void 0 === b) return null;
                            let c = parseInt(b, 10);
                            return isNaN(c) ? null : c;
                          })(a.headers);
                          return null == b
                            ? {}
                            : !(function (a) {
                                  let b = a['content-encoding'];
                                  return !!b && 'identity' !== b;
                                })(a.headers)
                              ? { 'http.request_content_length_uncompressed': b }
                              : { 'http.request_content_length': b };
                        })(A),
                      },
                    });
                  (w?.(K, A), x?.(K, B), y?.(K, A, B), u?.(K, A, B));
                  let L = { type: e.RPCType.HTTP, span: K };
                  d.context.with(
                    e.setRPCMetadata(d.trace.setSpan(d.context.active(), K), L),
                    () => {
                      (d.context.bind(d.context.active(), A),
                        d.context.bind(d.context.active(), B));
                      let b = !1;
                      function c(a) {
                        if (b) return;
                        b = !0;
                        let c = (function (a, b) {
                          let { socket: c } = a,
                            { statusCode: g, statusMessage: h } = b,
                            i = {
                              [f.ATTR_HTTP_RESPONSE_STATUS_CODE]: g,
                              [f.SEMATTRS_HTTP_STATUS_CODE]: g,
                              'http.status_text': h?.toUpperCase(),
                            },
                            j = e.getRPCMetadata(d.context.active());
                          if (c) {
                            let {
                              localAddress: a,
                              localPort: b,
                              remoteAddress: d,
                              remotePort: e,
                            } = c;
                            ((i[f.SEMATTRS_NET_HOST_IP] = a),
                              (i[f.SEMATTRS_NET_HOST_PORT] = b),
                              (i[f.SEMATTRS_NET_PEER_IP] = d),
                              (i['net.peer.port'] = e));
                          }
                          if (
                            ((i[f.SEMATTRS_HTTP_STATUS_CODE] = g),
                            (i['http.status_text'] = (h || '').toUpperCase()),
                            j?.type === e.RPCType.HTTP && void 0 !== j.route)
                          ) {
                            let a = j.route;
                            i[f.ATTR_HTTP_ROUTE] = a;
                          }
                          return i;
                        })(A, B);
                        (K.setAttributes(c), K.setStatus(a), K.end());
                        let h = c['http.route'];
                        h &&
                          g
                            .getIsolationScope()
                            .setTransactionName(`${A.method?.toUpperCase() || 'GET'} ${h}`);
                      }
                      return (
                        B.on('close', () => {
                          c(g.getSpanStatusFromHttpCode(B.statusCode));
                        }),
                        B.on(h.errorMonitor, () => {
                          let a = g.getSpanStatusFromHttpCode(B.statusCode);
                          c(a.code === g.SPAN_STATUS_ERROR ? a : { code: g.SPAN_STATUS_ERROR });
                        }),
                        a.apply(m, t)
                      );
                    }
                  );
                });
              })
            );
          },
        });
      (m.add(z), (a.emit = z));
    }),
      (c.isStaticAssetRequest = o),
      (c.recordRequestSession = n));
  },
  12116,
  11733,
  (a) => {
    'use strict';
    a.s(
      [
        'defaultResource',
        () => k,
        'emptyResource',
        () => j,
        'resourceFromAttributes',
        () => h,
        'resourceFromDetectedResource',
        () => i,
      ],
      12116
    );
    var b = a.i(84151),
      c = a.i(18977),
      d = a.i(79833);
    function e() {
      return `unknown_service:${process.argv0}`;
    }
    a.s(['defaultServiceName', () => e], 11733);
    let f = (a) => null !== a && 'object' == typeof a && 'function' == typeof a.then;
    class g {
      _rawAttributes;
      _asyncAttributesPending = !1;
      _schemaUrl;
      _memoizedAttributes;
      static FromAttributeList(a, b) {
        let c = new g({}, b);
        return (
          (c._rawAttributes = l(a)),
          (c._asyncAttributesPending = a.filter(([a, b]) => f(b)).length > 0),
          c
        );
      }
      constructor(a, c) {
        let d = a.attributes ?? {};
        ((this._rawAttributes = Object.entries(d).map(
          ([a, b]) => (f(b) && (this._asyncAttributesPending = !0), [a, b])
        )),
          (this._rawAttributes = l(this._rawAttributes)),
          (this._schemaUrl = (function (a) {
            if ('string' == typeof a || void 0 === a) return a;
            b.diag.warn(
              'Schema URL must be string or undefined, got %s. Schema URL will be ignored.',
              a
            );
          })(c?.schemaUrl)));
      }
      get asyncAttributesPending() {
        return this._asyncAttributesPending;
      }
      async waitForAsyncAttributes() {
        if (this.asyncAttributesPending) {
          for (let a = 0; a < this._rawAttributes.length; a++) {
            let [b, c] = this._rawAttributes[a];
            this._rawAttributes[a] = [b, f(c) ? await c : c];
          }
          this._asyncAttributesPending = !1;
        }
      }
      get attributes() {
        if (
          (this.asyncAttributesPending &&
            b.diag.error('Accessing resource attributes before async attributes settled'),
          this._memoizedAttributes)
        )
          return this._memoizedAttributes;
        let a = {};
        for (let [c, d] of this._rawAttributes) {
          if (f(d)) {
            b.diag.debug(`Unsettled resource attribute ${c} skipped`);
            continue;
          }
          null != d && (a[c] ??= d);
        }
        return (this._asyncAttributesPending || (this._memoizedAttributes = a), a);
      }
      getRawAttributes() {
        return this._rawAttributes;
      }
      get schemaUrl() {
        return this._schemaUrl;
      }
      merge(a) {
        if (null == a) return this;
        let c = (function (a, c) {
          let d = a?.schemaUrl,
            e = c?.schemaUrl,
            f = void 0 === e || '' === e;
          return void 0 === d || '' === d
            ? e
            : f || d === e
              ? d
              : void b.diag.warn(
                  'Schema URL merge conflict: old resource has "%s", updating resource has "%s". Resulting resource will have undefined Schema URL.',
                  d,
                  e
                );
        })(this, a);
        return g.FromAttributeList(
          [...a.getRawAttributes(), ...this.getRawAttributes()],
          c ? { schemaUrl: c } : void 0
        );
      }
    }
    function h(a, b) {
      return g.FromAttributeList(Object.entries(a), b);
    }
    function i(a, b) {
      return new g(a, b);
    }
    function j() {
      return h({});
    }
    function k() {
      return h({
        [d.ATTR_SERVICE_NAME]: e(),
        [d.ATTR_TELEMETRY_SDK_LANGUAGE]: c.SDK_INFO[d.ATTR_TELEMETRY_SDK_LANGUAGE],
        [d.ATTR_TELEMETRY_SDK_NAME]: c.SDK_INFO[d.ATTR_TELEMETRY_SDK_NAME],
        [d.ATTR_TELEMETRY_SDK_VERSION]: c.SDK_INFO[d.ATTR_TELEMETRY_SDK_VERSION],
      });
    }
    function l(a) {
      return a.map(([a, c]) =>
        f(c)
          ? [
              a,
              c.catch((c) => {
                b.diag.debug('promise rejection for resource attribute: %s - %s', a, c);
              }),
            ]
          : [a, c]
      );
    }
  },
  51606,
  (a) => {
    'use strict';
    (a.s(
      [
        'AlwaysOffSampler',
        () => v,
        'AlwaysOnSampler',
        () => w,
        'BasicTracerProvider',
        () => K,
        'BatchSpanProcessor',
        () => P,
        'ConsoleSpanExporter',
        () => Q,
        'InMemorySpanExporter',
        () => R,
        'NoopSpanProcessor',
        () => U,
        'ParentBasedSampler',
        () => z,
        'RandomIdGenerator',
        () => F,
        'SamplingDecision',
        () => b,
        'SimpleSpanProcessor',
        () => T,
        'TraceIdRatioBasedSampler',
        () => A,
      ],
      51606
    ),
      a.s([], 77598),
      a.i(77598));
    var b,
      c,
      d,
      e = a.i(35097),
      f = a.i(12116),
      g = a.i(734),
      h = a.i(73609),
      i = a.i(38998),
      j = a.i(79616),
      k = a.i(26200),
      l = a.i(84151),
      m = a.i(1879),
      n = a.i(93018),
      o = a.i(32125),
      p = a.i(23216),
      q = a.i(18911),
      r = a.i(75410),
      s = a.i(79833);
    class t {
      _spanContext;
      kind;
      parentSpanContext;
      attributes = {};
      links = [];
      events = [];
      startTime;
      resource;
      instrumentationScope;
      _droppedAttributesCount = 0;
      _droppedEventsCount = 0;
      _droppedLinksCount = 0;
      name;
      status = { code: p.SpanStatusCode.UNSET };
      endTime = [0, 0];
      _ended = !1;
      _duration = [-1, -1];
      _spanProcessor;
      _spanLimits;
      _attributeValueLengthLimit;
      _performanceStartTime;
      _performanceOffset;
      _startTimeProvided;
      constructor(a) {
        let b = Date.now();
        ((this._spanContext = a.spanContext),
          (this._performanceStartTime = r.otperformance.now()),
          (this._performanceOffset = b - (this._performanceStartTime + (0, q.getTimeOrigin)())),
          (this._startTimeProvided = null != a.startTime),
          (this._spanLimits = a.spanLimits),
          (this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0),
          (this._spanProcessor = a.spanProcessor),
          (this.name = a.name),
          (this.parentSpanContext = a.parentSpanContext),
          (this.kind = a.kind),
          (this.links = a.links || []),
          (this.startTime = this._getTime(a.startTime ?? b)),
          (this.resource = a.resource),
          (this.instrumentationScope = a.scope),
          null != a.attributes && this.setAttributes(a.attributes),
          this._spanProcessor.onStart(this, a.context));
      }
      spanContext() {
        return this._spanContext;
      }
      setAttribute(a, b) {
        if (null == b || this._isSpanEnded()) return this;
        if (0 === a.length) return (l.diag.warn(`Invalid attribute key: ${a}`), this);
        if (!(0, n.isAttributeValue)(b))
          return (l.diag.warn(`Invalid attribute value set for key: ${a}`), this);
        let { attributeCountLimit: c } = this._spanLimits;
        return (
          void 0 !== c &&
          Object.keys(this.attributes).length >= c &&
          !Object.prototype.hasOwnProperty.call(this.attributes, a)
            ? this._droppedAttributesCount++
            : (this.attributes[a] = this._truncateToSize(b)),
          this
        );
      }
      setAttributes(a) {
        for (let [b, c] of Object.entries(a)) this.setAttribute(b, c);
        return this;
      }
      addEvent(a, b, c) {
        if (this._isSpanEnded()) return this;
        let { eventCountLimit: d } = this._spanLimits;
        if (0 === d) return (l.diag.warn('No events allowed.'), this._droppedEventsCount++, this);
        (void 0 !== d &&
          this.events.length >= d &&
          (0 === this._droppedEventsCount && l.diag.debug('Dropping extra events.'),
          this.events.shift(),
          this._droppedEventsCount++),
          (0, q.isTimeInput)(b) && ((0, q.isTimeInput)(c) || (c = b), (b = void 0)));
        let e = (0, n.sanitizeAttributes)(b);
        return (
          this.events.push({
            name: a,
            attributes: e,
            time: this._getTime(c),
            droppedAttributesCount: 0,
          }),
          this
        );
      }
      addLink(a) {
        return (this.links.push(a), this);
      }
      addLinks(a) {
        return (this.links.push(...a), this);
      }
      setStatus(a) {
        return (
          this._isSpanEnded() ||
            ((this.status = { ...a }),
            null != this.status.message &&
              'string' != typeof a.message &&
              (l.diag.warn(
                `Dropping invalid status.message of type '${typeof a.message}', expected 'string'`
              ),
              delete this.status.message)),
          this
        );
      }
      updateName(a) {
        return (this._isSpanEnded() || (this.name = a), this);
      }
      end(a) {
        if (this._isSpanEnded())
          return void l.diag.error(
            `${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`
          );
        ((this._ended = !0),
          (this.endTime = this._getTime(a)),
          (this._duration = (0, q.hrTimeDuration)(this.startTime, this.endTime)),
          this._duration[0] < 0 &&
            (l.diag.warn(
              'Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.',
              this.startTime,
              this.endTime
            ),
            (this.endTime = this.startTime.slice()),
            (this._duration = [0, 0])),
          this._droppedEventsCount > 0 &&
            l.diag.warn(
              `Dropped ${this._droppedEventsCount} events because eventCountLimit reached`
            ),
          this._spanProcessor.onEnd(this));
      }
      _getTime(a) {
        if ('number' == typeof a && a <= r.otperformance.now())
          return (0, q.hrTime)(a + this._performanceOffset);
        if ('number' == typeof a) return (0, q.millisToHrTime)(a);
        if (a instanceof Date) return (0, q.millisToHrTime)(a.getTime());
        if ((0, q.isTimeInputHrTime)(a)) return a;
        if (this._startTimeProvided) return (0, q.millisToHrTime)(Date.now());
        let b = r.otperformance.now() - this._performanceStartTime;
        return (0, q.addHrTimes)(this.startTime, (0, q.millisToHrTime)(b));
      }
      isRecording() {
        return !1 === this._ended;
      }
      recordException(a, b) {
        let c = {};
        ('string' == typeof a
          ? (c[s.ATTR_EXCEPTION_MESSAGE] = a)
          : a &&
            (a.code
              ? (c[s.ATTR_EXCEPTION_TYPE] = a.code.toString())
              : a.name && (c[s.ATTR_EXCEPTION_TYPE] = a.name),
            a.message && (c[s.ATTR_EXCEPTION_MESSAGE] = a.message),
            a.stack && (c[s.ATTR_EXCEPTION_STACKTRACE] = a.stack)),
          c[s.ATTR_EXCEPTION_TYPE] || c[s.ATTR_EXCEPTION_MESSAGE]
            ? this.addEvent('exception', c, b)
            : l.diag.warn(`Failed to record an exception ${a}`));
      }
      get duration() {
        return this._duration;
      }
      get ended() {
        return this._ended;
      }
      get droppedAttributesCount() {
        return this._droppedAttributesCount;
      }
      get droppedEventsCount() {
        return this._droppedEventsCount;
      }
      get droppedLinksCount() {
        return this._droppedLinksCount;
      }
      _isSpanEnded() {
        if (this._ended) {
          let a = Error(
            `Operation attempted on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`
          );
          l.diag.warn(
            `Cannot execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`,
            a
          );
        }
        return this._ended;
      }
      _truncateToLimitUtil(a, b) {
        return a.length <= b ? a : a.substring(0, b);
      }
      _truncateToSize(a) {
        let b = this._attributeValueLengthLimit;
        return b <= 0
          ? (l.diag.warn(`Attribute value limit must be positive, got ${b}`), a)
          : 'string' == typeof a
            ? this._truncateToLimitUtil(a, b)
            : Array.isArray(a)
              ? a.map((a) => ('string' == typeof a ? this._truncateToLimitUtil(a, b) : a))
              : a;
      }
    }
    var u = a.i(15727);
    !(function (a) {
      ((a[(a.NOT_RECORD = 0)] = 'NOT_RECORD'),
        (a[(a.RECORD = 1)] = 'RECORD'),
        (a[(a.RECORD_AND_SAMPLED = 2)] = 'RECORD_AND_SAMPLED'));
    })(b || (b = {}));
    class v {
      shouldSample() {
        return { decision: b.NOT_RECORD };
      }
      toString() {
        return 'AlwaysOffSampler';
      }
    }
    class w {
      shouldSample() {
        return { decision: b.RECORD_AND_SAMPLED };
      }
      toString() {
        return 'AlwaysOnSampler';
      }
    }
    var x = a.i(32739),
      y = a.i(83161);
    class z {
      _root;
      _remoteParentSampled;
      _remoteParentNotSampled;
      _localParentSampled;
      _localParentNotSampled;
      constructor(a) {
        ((this._root = a.root),
          this._root ||
            ((0, y.globalErrorHandler)(
              Error('ParentBasedSampler must have a root sampler configured')
            ),
            (this._root = new w())),
          (this._remoteParentSampled = a.remoteParentSampled ?? new w()),
          (this._remoteParentNotSampled = a.remoteParentNotSampled ?? new v()),
          (this._localParentSampled = a.localParentSampled ?? new w()),
          (this._localParentNotSampled = a.localParentNotSampled ?? new v()));
      }
      shouldSample(a, b, c, d, e, f) {
        let g = h.trace.getSpanContext(a);
        return g && (0, x.isSpanContextValid)(g)
          ? g.isRemote
            ? g.traceFlags & k.TraceFlags.SAMPLED
              ? this._remoteParentSampled.shouldSample(a, b, c, d, e, f)
              : this._remoteParentNotSampled.shouldSample(a, b, c, d, e, f)
            : g.traceFlags & k.TraceFlags.SAMPLED
              ? this._localParentSampled.shouldSample(a, b, c, d, e, f)
              : this._localParentNotSampled.shouldSample(a, b, c, d, e, f)
          : this._root.shouldSample(a, b, c, d, e, f);
      }
      toString() {
        return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;
      }
    }
    class A {
      _ratio;
      _upperBound;
      constructor(a = 0) {
        ((this._ratio = a),
          (this._ratio = this._normalize(a)),
          (this._upperBound = Math.floor(0xffffffff * this._ratio)));
      }
      shouldSample(a, c) {
        return {
          decision:
            (0, x.isValidTraceId)(c) && this._accumulate(c) < this._upperBound
              ? b.RECORD_AND_SAMPLED
              : b.NOT_RECORD,
        };
      }
      toString() {
        return `TraceIdRatioBased{${this._ratio}}`;
      }
      _normalize(a) {
        return 'number' != typeof a || isNaN(a) ? 0 : a >= 1 ? 1 : a <= 0 ? 0 : a;
      }
      _accumulate(a) {
        let b = 0;
        for (let c = 0; c < a.length / 8; c++) {
          let d = 8 * c;
          b = (b ^ parseInt(a.slice(d, d + 8), 16)) >>> 0;
        }
        return b;
      }
    }
    function B() {
      return {
        sampler: C(),
        forceFlushTimeoutMillis: 3e4,
        generalLimits: {
          attributeValueLengthLimit:
            (0, u.getNumberFromEnv)('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? 1 / 0,
          attributeCountLimit: (0, u.getNumberFromEnv)('OTEL_ATTRIBUTE_COUNT_LIMIT') ?? 128,
        },
        spanLimits: {
          attributeValueLengthLimit:
            (0, u.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? 1 / 0,
          attributeCountLimit: (0, u.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ?? 128,
          linkCountLimit: (0, u.getNumberFromEnv)('OTEL_SPAN_LINK_COUNT_LIMIT') ?? 128,
          eventCountLimit: (0, u.getNumberFromEnv)('OTEL_SPAN_EVENT_COUNT_LIMIT') ?? 128,
          attributePerEventCountLimit:
            (0, u.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT') ?? 128,
          attributePerLinkCountLimit:
            (0, u.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT') ?? 128,
        },
      };
    }
    function C() {
      let a = (0, u.getStringFromEnv)('OTEL_TRACES_SAMPLER') ?? c.ParentBasedAlwaysOn;
      switch (a) {
        case c.AlwaysOn:
          return new w();
        case c.AlwaysOff:
          return new v();
        case c.ParentBasedAlwaysOn:
          return new z({ root: new w() });
        case c.ParentBasedAlwaysOff:
          return new z({ root: new v() });
        case c.TraceIdRatio:
          return new A(D());
        case c.ParentBasedTraceIdRatio:
          return new z({ root: new A(D()) });
        default:
          return (
            l.diag.error(
              `OTEL_TRACES_SAMPLER value "${a}" invalid, defaulting to "${c.ParentBasedAlwaysOn}".`
            ),
            new z({ root: new w() })
          );
      }
    }
    function D() {
      let a = (0, u.getNumberFromEnv)('OTEL_TRACES_SAMPLER_ARG');
      return null == a
        ? (l.diag.error('OTEL_TRACES_SAMPLER_ARG is blank, defaulting to 1.'), 1)
        : a < 0 || a > 1
          ? (l.diag.error(
              `OTEL_TRACES_SAMPLER_ARG=${a} was given, but it is out of range ([0..1]), defaulting to 1.`
            ),
            1)
          : a;
    }
    !(function (a) {
      ((a.AlwaysOff = 'always_off'),
        (a.AlwaysOn = 'always_on'),
        (a.ParentBasedAlwaysOff = 'parentbased_always_off'),
        (a.ParentBasedAlwaysOn = 'parentbased_always_on'),
        (a.ParentBasedTraceIdRatio = 'parentbased_traceidratio'),
        (a.TraceIdRatio = 'traceidratio'));
    })(c || (c = {}));
    let E = 1 / 0;
    class F {
      generateTraceId = H(16);
      generateSpanId = H(8);
    }
    let G = Buffer.allocUnsafe(16);
    function H(a) {
      return function () {
        for (let b = 0; b < a / 4; b++) G.writeUInt32BE((0x100000000 * Math.random()) >>> 0, 4 * b);
        for (let b = 0; b < a; b++)
          if (G[b] > 0) break;
          else b === a - 1 && (G[a - 1] = 1);
        return G.toString('hex', 0, a);
      };
    }
    class I {
      _sampler;
      _generalLimits;
      _spanLimits;
      _idGenerator;
      instrumentationScope;
      _resource;
      _spanProcessor;
      constructor(a, b, c, d) {
        let e = (function (a) {
          let b = { sampler: C() },
            c = B(),
            d = Object.assign({}, c, b, a);
          return (
            (d.generalLimits = Object.assign({}, c.generalLimits, a.generalLimits || {})),
            (d.spanLimits = Object.assign({}, c.spanLimits, a.spanLimits || {})),
            d
          );
        })(b);
        ((this._sampler = e.sampler),
          (this._generalLimits = e.generalLimits),
          (this._spanLimits = e.spanLimits),
          (this._idGenerator = b.idGenerator || new F()),
          (this._resource = c),
          (this._spanProcessor = d),
          (this.instrumentationScope = a));
      }
      startSpan(a, b = {}, c = g.context.active()) {
        let d, e, f;
        b.root && (c = h.trace.deleteSpan(c));
        let p = h.trace.getSpan(c);
        if ((0, o.isTracingSuppressed)(c))
          return (
            l.diag.debug('Instrumentation suppressed, returning Noop Span'),
            h.trace.wrapSpanContext(m.INVALID_SPAN_CONTEXT)
          );
        let q = p?.spanContext(),
          r = this._idGenerator.generateSpanId();
        q && h.trace.isSpanContextValid(q)
          ? ((e = q.traceId), (f = q.traceState), (d = q))
          : (e = this._idGenerator.generateTraceId());
        let s = b.kind ?? i.SpanKind.INTERNAL,
          u = (b.links ?? []).map((a) => ({
            context: a.context,
            attributes: (0, n.sanitizeAttributes)(a.attributes),
          })),
          v = (0, n.sanitizeAttributes)(b.attributes),
          w = this._sampler.shouldSample(c, e, a, s, v, u);
        f = w.traceState ?? f;
        let x = {
          traceId: e,
          spanId: r,
          traceFlags:
            w.decision === j.SamplingDecision.RECORD_AND_SAMPLED
              ? k.TraceFlags.SAMPLED
              : k.TraceFlags.NONE,
          traceState: f,
        };
        if (w.decision === j.SamplingDecision.NOT_RECORD)
          return (
            l.diag.debug('Recording is off, propagating context in a non-recording span'),
            h.trace.wrapSpanContext(x)
          );
        let y = (0, n.sanitizeAttributes)(Object.assign(v, w.attributes));
        return new t({
          resource: this._resource,
          scope: this.instrumentationScope,
          context: c,
          spanContext: x,
          name: a,
          kind: s,
          links: u,
          parentSpanContext: d,
          attributes: y,
          startTime: b.startTime,
          spanProcessor: this._spanProcessor,
          spanLimits: this._spanLimits,
        });
      }
      startActiveSpan(a, b, c, d) {
        let e, f, i;
        if (arguments.length < 2) return;
        2 == arguments.length
          ? (i = b)
          : 3 == arguments.length
            ? ((e = b), (i = c))
            : ((e = b), (f = c), (i = d));
        let j = f ?? g.context.active(),
          k = this.startSpan(a, e, j),
          l = h.trace.setSpan(j, k);
        return g.context.with(l, i, void 0, k);
      }
      getGeneralLimits() {
        return this._generalLimits;
      }
      getSpanLimits() {
        return this._spanLimits;
      }
    }
    class J {
      _spanProcessors;
      constructor(a) {
        this._spanProcessors = a;
      }
      forceFlush() {
        let a = [];
        for (let b of this._spanProcessors) a.push(b.forceFlush());
        return new Promise((b) => {
          Promise.all(a)
            .then(() => {
              b();
            })
            .catch((a) => {
              ((0, y.globalErrorHandler)(a || Error('MultiSpanProcessor: forceFlush failed')), b());
            });
        });
      }
      onStart(a, b) {
        for (let c of this._spanProcessors) c.onStart(a, b);
      }
      onEnd(a) {
        for (let b of this._spanProcessors) b.onEnd(a);
      }
      shutdown() {
        let a = [];
        for (let b of this._spanProcessors) a.push(b.shutdown());
        return new Promise((b, c) => {
          Promise.all(a).then(() => {
            b();
          }, c);
        });
      }
    }
    !(function (a) {
      ((a[(a.resolved = 0)] = 'resolved'),
        (a[(a.timeout = 1)] = 'timeout'),
        (a[(a.error = 2)] = 'error'),
        (a[(a.unresolved = 3)] = 'unresolved'));
    })(d || (d = {}));
    class K {
      _config;
      _tracers = new Map();
      _resource;
      _activeSpanProcessor;
      constructor(a = {}) {
        let b = (0, e.merge)(
          {},
          B(),
          (function (a) {
            let b = Object.assign({}, a.spanLimits);
            return (
              (b.attributeCountLimit =
                a.spanLimits?.attributeCountLimit ??
                a.generalLimits?.attributeCountLimit ??
                (0, u.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ??
                (0, u.getNumberFromEnv)('OTEL_ATTRIBUTE_COUNT_LIMIT') ??
                128),
              (b.attributeValueLengthLimit =
                a.spanLimits?.attributeValueLengthLimit ??
                a.generalLimits?.attributeValueLengthLimit ??
                (0, u.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??
                (0, u.getNumberFromEnv)('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??
                E),
              Object.assign({}, a, { spanLimits: b })
            );
          })(a)
        );
        ((this._resource = b.resource ?? (0, f.defaultResource)()),
          (this._config = Object.assign({}, b, { resource: this._resource })));
        let c = [];
        (a.spanProcessors?.length && c.push(...a.spanProcessors),
          (this._activeSpanProcessor = new J(c)));
      }
      getTracer(a, b, c) {
        let d = `${a}@${b || ''}:${c?.schemaUrl || ''}`;
        return (
          this._tracers.has(d) ||
            this._tracers.set(
              d,
              new I(
                { name: a, version: b, schemaUrl: c?.schemaUrl },
                this._config,
                this._resource,
                this._activeSpanProcessor
              )
            ),
          this._tracers.get(d)
        );
      }
      forceFlush() {
        let a = this._config.forceFlushTimeoutMillis,
          b = this._activeSpanProcessor._spanProcessors.map(
            (b) =>
              new Promise((c) => {
                let e,
                  f = setTimeout(() => {
                    (c(Error(`Span processor did not completed within timeout period of ${a} ms`)),
                      (e = d.timeout));
                  }, a);
                b.forceFlush()
                  .then(() => {
                    (clearTimeout(f), e !== d.timeout && c((e = d.resolved)));
                  })
                  .catch((a) => {
                    (clearTimeout(f), (e = d.error), c(a));
                  });
              })
          );
        return new Promise((a, c) => {
          Promise.all(b)
            .then((b) => {
              let e = b.filter((a) => a !== d.resolved);
              e.length > 0 ? c(e) : a();
            })
            .catch((a) => c([a]));
        });
      }
      shutdown() {
        return this._activeSpanProcessor.shutdown();
      }
    }
    var L = a.i(22314),
      M = a.i(29169),
      N = a.i(79201);
    class O {
      _exporter;
      _maxExportBatchSize;
      _maxQueueSize;
      _scheduledDelayMillis;
      _exportTimeoutMillis;
      _isExporting = !1;
      _finishedSpans = [];
      _timer;
      _shutdownOnce;
      _droppedSpansCount = 0;
      constructor(a, b) {
        ((this._exporter = a),
          (this._maxExportBatchSize =
            'number' == typeof b?.maxExportBatchSize
              ? b.maxExportBatchSize
              : ((0, u.getNumberFromEnv)('OTEL_BSP_MAX_EXPORT_BATCH_SIZE') ?? 512)),
          (this._maxQueueSize =
            'number' == typeof b?.maxQueueSize
              ? b.maxQueueSize
              : ((0, u.getNumberFromEnv)('OTEL_BSP_MAX_QUEUE_SIZE') ?? 2048)),
          (this._scheduledDelayMillis =
            'number' == typeof b?.scheduledDelayMillis
              ? b.scheduledDelayMillis
              : ((0, u.getNumberFromEnv)('OTEL_BSP_SCHEDULE_DELAY') ?? 5e3)),
          (this._exportTimeoutMillis =
            'number' == typeof b?.exportTimeoutMillis
              ? b.exportTimeoutMillis
              : ((0, u.getNumberFromEnv)('OTEL_BSP_EXPORT_TIMEOUT') ?? 3e4)),
          (this._shutdownOnce = new L.BindOnceFuture(this._shutdown, this)),
          this._maxExportBatchSize > this._maxQueueSize &&
            (l.diag.warn(
              'BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize'
            ),
            (this._maxExportBatchSize = this._maxQueueSize)));
      }
      forceFlush() {
        return this._shutdownOnce.isCalled ? this._shutdownOnce.promise : this._flushAll();
      }
      onStart(a, b) {}
      onEnd(a) {
        this._shutdownOnce.isCalled ||
          ((a.spanContext().traceFlags & k.TraceFlags.SAMPLED) != 0 && this._addToBuffer(a));
      }
      shutdown() {
        return this._shutdownOnce.call();
      }
      _shutdown() {
        return Promise.resolve()
          .then(() => this.onShutdown())
          .then(() => this._flushAll())
          .then(() => this._exporter.shutdown());
      }
      _addToBuffer(a) {
        if (this._finishedSpans.length >= this._maxQueueSize) {
          (0 === this._droppedSpansCount && l.diag.debug('maxQueueSize reached, dropping spans'),
            this._droppedSpansCount++);
          return;
        }
        (this._droppedSpansCount > 0 &&
          (l.diag.warn(`Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`),
          (this._droppedSpansCount = 0)),
          this._finishedSpans.push(a),
          this._maybeStartTimer());
      }
      _flushAll() {
        return new Promise((a, b) => {
          let c = [],
            d = Math.ceil(this._finishedSpans.length / this._maxExportBatchSize);
          for (let a = 0; a < d; a++) c.push(this._flushOneBatch());
          Promise.all(c)
            .then(() => {
              a();
            })
            .catch(b);
        });
      }
      _flushOneBatch() {
        return (this._clearTimer(), 0 === this._finishedSpans.length)
          ? Promise.resolve()
          : new Promise((a, b) => {
              let c = setTimeout(() => {
                b(Error('Timeout'));
              }, this._exportTimeoutMillis);
              g.context.with((0, o.suppressTracing)(g.context.active()), () => {
                let d;
                this._finishedSpans.length <= this._maxExportBatchSize
                  ? ((d = this._finishedSpans), (this._finishedSpans = []))
                  : (d = this._finishedSpans.splice(0, this._maxExportBatchSize));
                let e = () =>
                    this._exporter.export(d, (d) => {
                      (clearTimeout(c),
                        d.code === M.ExportResultCode.SUCCESS
                          ? a()
                          : b(d.error ?? Error('BatchSpanProcessor: span export failed')));
                    }),
                  f = null;
                for (let a = 0, b = d.length; a < b; a++) {
                  let b = d[a];
                  b.resource.asyncAttributesPending &&
                    b.resource.waitForAsyncAttributes &&
                    (f ??= []).push(b.resource.waitForAsyncAttributes());
                }
                null === f
                  ? e()
                  : Promise.all(f).then(e, (a) => {
                      ((0, y.globalErrorHandler)(a), b(a));
                    });
              });
            });
      }
      _maybeStartTimer() {
        if (this._isExporting) return;
        let a = () => {
          ((this._isExporting = !0),
            this._flushOneBatch()
              .finally(() => {
                ((this._isExporting = !1),
                  this._finishedSpans.length > 0 && (this._clearTimer(), this._maybeStartTimer()));
              })
              .catch((a) => {
                ((this._isExporting = !1), (0, y.globalErrorHandler)(a));
              }));
        };
        if (this._finishedSpans.length >= this._maxExportBatchSize) return a();
        void 0 === this._timer &&
          ((this._timer = setTimeout(() => a(), this._scheduledDelayMillis)),
          (0, N.unrefTimer)(this._timer));
      }
      _clearTimer() {
        void 0 !== this._timer && (clearTimeout(this._timer), (this._timer = void 0));
      }
    }
    class P extends O {
      onShutdown() {}
    }
    class Q {
      export(a, b) {
        return this._sendSpans(a, b);
      }
      shutdown() {
        return (this._sendSpans([]), this.forceFlush());
      }
      forceFlush() {
        return Promise.resolve();
      }
      _exportInfo(a) {
        return {
          resource: { attributes: a.resource.attributes },
          instrumentationScope: a.instrumentationScope,
          traceId: a.spanContext().traceId,
          parentSpanContext: a.parentSpanContext,
          traceState: a.spanContext().traceState?.serialize(),
          name: a.name,
          id: a.spanContext().spanId,
          kind: a.kind,
          timestamp: (0, q.hrTimeToMicroseconds)(a.startTime),
          duration: (0, q.hrTimeToMicroseconds)(a.duration),
          attributes: a.attributes,
          status: a.status,
          events: a.events,
          links: a.links,
        };
      }
      _sendSpans(a, b) {
        for (let b of a) console.dir(this._exportInfo(b), { depth: 3 });
        if (b) return b({ code: M.ExportResultCode.SUCCESS });
      }
    }
    class R {
      _finishedSpans = [];
      _stopped = !1;
      export(a, b) {
        if (this._stopped)
          return b({ code: M.ExportResultCode.FAILED, error: Error('Exporter has been stopped') });
        (this._finishedSpans.push(...a),
          setTimeout(() => b({ code: M.ExportResultCode.SUCCESS }), 0));
      }
      shutdown() {
        return ((this._stopped = !0), (this._finishedSpans = []), this.forceFlush());
      }
      forceFlush() {
        return Promise.resolve();
      }
      reset() {
        this._finishedSpans = [];
      }
      getFinishedSpans() {
        return this._finishedSpans;
      }
    }
    var S = a.i(51301);
    class T {
      _exporter;
      _shutdownOnce;
      _pendingExports;
      constructor(a) {
        ((this._exporter = a),
          (this._shutdownOnce = new L.BindOnceFuture(this._shutdown, this)),
          (this._pendingExports = new Set()));
      }
      async forceFlush() {
        (await Promise.all(Array.from(this._pendingExports)),
          this._exporter.forceFlush && (await this._exporter.forceFlush()));
      }
      onStart(a, b) {}
      onEnd(a) {
        if (this._shutdownOnce.isCalled || (a.spanContext().traceFlags & k.TraceFlags.SAMPLED) == 0)
          return;
        let b = this._doExport(a).catch((a) => (0, y.globalErrorHandler)(a));
        (this._pendingExports.add(b), b.finally(() => this._pendingExports.delete(b)));
      }
      async _doExport(a) {
        a.resource.asyncAttributesPending && (await a.resource.waitForAsyncAttributes?.());
        let b = await S.internal._export(this._exporter, [a]);
        if (b.code !== M.ExportResultCode.SUCCESS)
          throw b.error ?? Error(`SimpleSpanProcessor: span export failed (status ${b})`);
      }
      shutdown() {
        return this._shutdownOnce.call();
      }
      _shutdown() {
        return this._exporter.shutdown();
      }
    }
    class U {
      onStart(a, b) {}
      onEnd(a) {}
      shutdown() {
        return Promise.resolve();
      }
      forceFlush() {
        return Promise.resolve();
      }
    }
  },
  39786,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(79154),
      e = a.r(32723),
      f = a.r(77674),
      g = a.r(98070),
      h = a.r(51606),
      i = 'sentry.parentIsRemote',
      j = 'sentry.graphql.operation';
    function k(a) {
      return 'parentSpanId' in a
        ? a.parentSpanId
        : 'parentSpanContext' in a
          ? a.parentSpanContext?.spanId
          : void 0;
    }
    function l(a) {
      return !!a.attributes && 'object' == typeof a.attributes;
    }
    function m(a) {
      return 'number' == typeof a.kind;
    }
    function n(a) {
      return !!a.status;
    }
    function o(a) {
      return !!a.name;
    }
    function p(a) {
      if (!l(a)) return {};
      let b = a.attributes[d.ATTR_URL_FULL] || a.attributes[d.SEMATTRS_HTTP_URL],
        c = {
          url: b,
          'http.method':
            a.attributes[d.ATTR_HTTP_REQUEST_METHOD] || a.attributes[d.SEMATTRS_HTTP_METHOD],
        };
      !c['http.method'] && c.url && (c['http.method'] = 'GET');
      try {
        if ('string' == typeof b) {
          let a = e.parseUrl(b);
          ((c.url = e.getSanitizedUrlString(a)),
            a.search && (c['http.query'] = a.search),
            a.hash && (c['http.fragment'] = a.hash));
        }
      } catch {}
      return c;
    }
    function q(a) {
      return m(a) ? a.kind : f.SpanKind.INTERNAL;
    }
    let r = 'sentry-trace',
      s = 'baggage',
      t = 'sentry.dsc',
      u = 'sentry.sampled_not_recording',
      v = 'sentry.url',
      w = f.createContextKey('sentry_scopes'),
      x = f.createContextKey('sentry_fork_isolation_scope'),
      y = f.createContextKey('sentry_fork_set_scope'),
      z = f.createContextKey('sentry_fork_set_isolation_scope'),
      A = '_scopeContext';
    function B(a) {
      return a.getValue(w);
    }
    function C(a, b) {
      return a.setValue(w, b);
    }
    function D(a) {
      let { traceFlags: b, traceState: c } = a,
        d = !!c && '1' === c.get(u);
      if (b === f.TraceFlags.SAMPLED) return !0;
      if (d) return !1;
      let g = c ? c.get(t) : void 0,
        h = g ? e.baggageHeaderToDynamicSamplingContext(g) : void 0;
      return h?.sampled === 'true' || (h?.sampled !== 'false' && void 0);
    }
    function E(a, b, c) {
      let g = b[d.ATTR_HTTP_REQUEST_METHOD] || b[d.SEMATTRS_HTTP_METHOD];
      if (g)
        return (function ({ name: a, kind: b, attributes: c }, g) {
          let h = ['http'];
          switch (b) {
            case f.SpanKind.CLIENT:
              h.push('client');
              break;
            case f.SpanKind.SERVER:
              h.push('server');
          }
          c['sentry.http.prefetch'] && h.push('prefetch');
          let {
            urlPath: i,
            url: k,
            query: l,
            fragment: m,
            hasRoute: n,
          } = (function (a, b) {
            let c = a[d.SEMATTRS_HTTP_TARGET],
              g = a[d.SEMATTRS_HTTP_URL] || a[d.ATTR_URL_FULL],
              h = a[d.ATTR_HTTP_ROUTE],
              i = 'string' == typeof g ? e.parseUrl(g) : void 0,
              j = i ? e.getSanitizedUrlString(i) : void 0,
              k = i?.search || void 0,
              l = i?.hash || void 0;
            return 'string' == typeof h
              ? { urlPath: h, url: j, query: k, fragment: l, hasRoute: !0 }
              : b === f.SpanKind.SERVER && 'string' == typeof c
                ? {
                    urlPath: e.stripUrlQueryAndFragment(c),
                    url: j,
                    query: k,
                    fragment: l,
                    hasRoute: !1,
                  }
                : i
                  ? { urlPath: j, url: j, query: k, fragment: l, hasRoute: !1 }
                  : 'string' == typeof c
                    ? {
                        urlPath: e.stripUrlQueryAndFragment(c),
                        url: j,
                        query: k,
                        fragment: l,
                        hasRoute: !1,
                      }
                    : { urlPath: void 0, url: j, query: k, fragment: l, hasRoute: !1 };
          })(c, b);
          if (!i) return { ...G(a, c), op: h.join('.') };
          let o = c[j],
            p = `${g} ${i}`,
            q = o
              ? `${p} (${(function (a) {
                  if (Array.isArray(a)) {
                    let b = a.slice().sort();
                    return b.length <= 5
                      ? b.join(', ')
                      : `${b.slice(0, 5).join(', ')}, +${b.length - 5}`;
                  }
                  return `${a}`;
                })(o)})`
              : p,
            r = {};
          (k && (r.url = k), l && (r['http.query'] = l), m && (r['http.fragment'] = m));
          let s = b === f.SpanKind.CLIENT || b === f.SpanKind.SERVER,
            t = c[e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual',
            u = !`${t}`.startsWith('auto'),
            v = 'custom' === c[e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE],
            w = c[e.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME],
            { description: x, source: y } =
              v || null != w || (!s && u)
                ? G(a, c)
                : { description: q, source: n || '/' === i ? 'route' : 'url' };
          return { op: h.join('.'), description: x, source: y, data: r };
        })({ attributes: b, name: a, kind: c }, g);
      let h = b[d.SEMATTRS_DB_SYSTEM],
        i =
          'string' == typeof b[e.SEMANTIC_ATTRIBUTE_SENTRY_OP] &&
          b[e.SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');
      if (h && !i)
        return (function ({ attributes: a, name: b }) {
          let c = a[e.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];
          if ('string' == typeof c)
            return {
              op: 'db',
              description: c,
              source: a[e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] || 'custom',
            };
          if ('custom' === a[e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE])
            return { op: 'db', description: b, source: 'custom' };
          let f = a[d.SEMATTRS_DB_STATEMENT];
          return { op: 'db', description: f ? f.toString() : b, source: 'task' };
        })({ attributes: b, name: a });
      let k = 'custom' === b[e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ? 'custom' : 'route';
      if (b[d.SEMATTRS_RPC_SERVICE]) return { ...G(a, b, 'route'), op: 'rpc' };
      if (b[d.SEMATTRS_MESSAGING_SYSTEM]) return { ...G(a, b, k), op: 'message' };
      let l = b[d.SEMATTRS_FAAS_TRIGGER];
      return l
        ? { ...G(a, b, k), op: l.toString() }
        : { op: void 0, description: a, source: 'custom' };
    }
    function F(a) {
      let b = l(a) ? a.attributes : {};
      return E(o(a) ? a.name : '<unknown>', b, q(a));
    }
    function G(a, b, c = 'custom') {
      let d = b[e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] || c,
        f = b[e.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];
      return f && 'string' == typeof f
        ? { description: f, source: d }
        : { description: a, source: d };
    }
    function H() {
      return f.trace.getActiveSpan();
    }
    let I = 'undefined' == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__;
    function J({ dsc: a, sampled: b }) {
      let c = a ? e.dynamicSamplingContextToSentryBaggageHeader(a) : void 0,
        d = new g.TraceState(),
        f = c ? d.set(t, c) : d;
      return !1 === b ? f.set(u, '1') : f;
    }
    let K = new Set();
    function L(a) {
      K.add(a);
    }
    class M extends g.W3CBaggagePropagator {
      constructor() {
        (super(), L('SentryPropagator'), (this._urlMatchesTargetsMap = new e.LRUMap(100)));
      }
      inject(a, b, c) {
        if (g.isTracingSuppressed(a)) {
          I &&
            e.debug.log(
              '[Tracing] Not injecting trace data for url because tracing is suppressed.'
            );
          return;
        }
        let h = f.trace.getSpan(a),
          i =
            h &&
            (function (a) {
              let b = e.spanToJSON(a).data,
                c = b[d.SEMATTRS_HTTP_URL] || b[d.ATTR_URL_FULL];
              if ('string' == typeof c) return c;
              let f = a.spanContext().traceState?.get(v);
              if (f) return f;
            })(h);
        if (
          !O(i, e.getClient()?.getOptions()?.tracePropagationTargets, this._urlMatchesTargetsMap)
        ) {
          I &&
            e.debug.log(
              '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:',
              i
            );
          return;
        }
        let j = (function (a) {
            try {
              let b = a[s];
              return Array.isArray(b) ? b.join(',') : b;
            } catch {
              return;
            }
          })(b),
          k = f.propagation.getBaggage(a) || f.propagation.createBaggage({}),
          { dynamicSamplingContext: l, traceId: m, spanId: n, sampled: o } = P(a);
        if (j) {
          let a = e.parseBaggageHeader(j);
          a &&
            Object.entries(a).forEach(([a, b]) => {
              k = k.setEntry(a, { value: b });
            });
        }
        (l &&
          (k = Object.entries(l).reduce(
            (a, [b, c]) => (c ? a.setEntry(`${e.SENTRY_BAGGAGE_KEY_PREFIX}${b}`, { value: c }) : a),
            k
          )),
          m && m !== f.INVALID_TRACEID && c.set(b, r, e.generateSentryTraceHeader(m, n, o)),
          super.inject(f.propagation.setBaggage(a, k), b, c));
      }
      extract(a, b, c) {
        let d = c.get(b, r),
          e = c.get(b, s);
        return R(Q(a, { sentryTrace: d ? (Array.isArray(d) ? d[0] : d) : void 0, baggage: e }));
      }
      fields() {
        return [r, s];
      }
    }
    let N =
      '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:';
    function O(a, b, c) {
      if ('string' != typeof a || !b) return !0;
      let d = c?.get(a);
      if (void 0 !== d) return (I && !d && e.debug.log(N, a), d);
      let f = e.stringMatchesSomePattern(a, b);
      return (c?.set(a, f), I && !f && e.debug.log(N, a), f);
    }
    function P(a, b = {}) {
      let c = f.trace.getSpan(a);
      if (c?.spanContext().isRemote) {
        let a = c.spanContext();
        return {
          dynamicSamplingContext: e.getDynamicSamplingContextFromSpan(c),
          traceId: a.traceId,
          spanId: void 0,
          sampled: D(a),
        };
      }
      if (c) {
        let a = c.spanContext();
        return {
          dynamicSamplingContext: e.getDynamicSamplingContextFromSpan(c),
          traceId: a.traceId,
          spanId: a.spanId,
          sampled: D(a),
        };
      }
      let d = b.scope || B(a)?.scope || e.getCurrentScope(),
        g = b.client || e.getClient(),
        h = d.getPropagationContext();
      return {
        dynamicSamplingContext: g ? e.getDynamicSamplingContextFromScope(g, d) : void 0,
        traceId: h.traceId,
        spanId: h.propagationSpanId,
        sampled: h.sampled,
      };
    }
    function Q(a, { sentryTrace: b, baggage: c }) {
      let {
          traceId: d,
          parentSpanId: g,
          sampled: h,
          dsc: i,
        } = e.propagationContextFromHeaders(b, c),
        j = e.getClient(),
        k = e.baggageHeaderToDynamicSamplingContext(c);
      if (!g || (j && !e.shouldContinueTrace(j, k?.org_id))) return a;
      let l = (function ({ spanId: a, traceId: b, sampled: c, dsc: d }) {
        let e = J({ dsc: d, sampled: c });
        return {
          traceId: b,
          spanId: a,
          isRemote: !0,
          traceFlags: c ? f.TraceFlags.SAMPLED : f.TraceFlags.NONE,
          traceState: e,
        };
      })({ traceId: d, spanId: g, sampled: h, dsc: i });
      return f.trace.setSpanContext(a, l);
    }
    function R(a) {
      let b = B(a);
      return C(a, {
        scope: b ? b.scope : e.getCurrentScope().clone(),
        isolationScope: b ? b.isolationScope : e.getIsolationScope(),
      });
    }
    function S(a, b) {
      let c = W(),
        { name: d, parentSpan: h } = a;
      return $(h)(() => {
        let h = Y(a.scope, a.forceTransaction),
          i = a.onlyIfParent && !f.trace.getSpan(h) ? g.suppressTracing(h) : h,
          j = X(a);
        return c.startActiveSpan(d, j, i, (a) =>
          e.handleCallbackErrors(
            () => b(a),
            () => {
              void 0 === e.spanToJSON(a).status && a.setStatus({ code: f.SpanStatusCode.ERROR });
            },
            () => a.end()
          )
        );
      });
    }
    function T(a, b) {
      let c = W(),
        { name: d, parentSpan: h } = a;
      return $(h)(() => {
        let h = Y(a.scope, a.forceTransaction),
          i = a.onlyIfParent && !f.trace.getSpan(h) ? g.suppressTracing(h) : h,
          j = X(a);
        return c.startActiveSpan(d, j, i, (a) =>
          e.handleCallbackErrors(
            () => b(a, () => a.end()),
            () => {
              void 0 === e.spanToJSON(a).status && a.setStatus({ code: f.SpanStatusCode.ERROR });
            }
          )
        );
      });
    }
    function U(a) {
      let b = W(),
        { name: c, parentSpan: d } = a;
      return $(d)(() => {
        let d = Y(a.scope, a.forceTransaction),
          e = a.onlyIfParent && !f.trace.getSpan(d) ? g.suppressTracing(d) : d,
          h = X(a);
        return b.startSpan(c, h, e);
      });
    }
    function V(a, b) {
      let c = a ? f.trace.setSpan(f.context.active(), a) : f.trace.deleteSpan(f.context.active());
      return f.context.with(c, () => b(e.getCurrentScope()));
    }
    function W() {
      let a = e.getClient();
      return a?.tracer || f.trace.getTracer('@sentry/opentelemetry', e.SDK_VERSION);
    }
    function X(a) {
      var b;
      let { startTime: c, attributes: d, kind: f, op: g, links: h } = a,
        i = 'number' == typeof c ? ((b = c) < 0x2540be3ff ? 1e3 * b : b) : c;
      return {
        attributes: g ? { [e.SEMANTIC_ATTRIBUTE_SENTRY_OP]: g, ...d } : d,
        kind: f,
        links: h,
        startTime: i,
      };
    }
    function Y(a, b) {
      let c = (function (a) {
          if (a) {
            let b = a[A];
            if (b) return b;
          }
          return f.context.active();
        })(a),
        d = f.trace.getSpan(c);
      if (!d || !b) return c;
      let g = f.trace.deleteSpan(c),
        { spanId: h, traceId: i } = d.spanContext(),
        j = D(d.spanContext()),
        k = e.getRootSpan(d),
        l = J({ dsc: e.getDynamicSamplingContextFromSpan(k), sampled: j }),
        m = {
          traceId: i,
          spanId: h,
          isRemote: !0,
          traceFlags: j ? f.TraceFlags.SAMPLED : f.TraceFlags.NONE,
          traceState: l,
        };
      return f.trace.setSpanContext(g, m);
    }
    function Z(a, b) {
      let c = R(Q(f.context.active(), a));
      return f.context.with(c, b);
    }
    function $(a) {
      return void 0 !== a ? (b) => V(a, b) : (a) => a();
    }
    function _(a) {
      let b = g.suppressTracing(f.context.active());
      return f.context.with(b, a);
    }
    function aa({ span: a, scope: b, client: c } = {}) {
      let d = (b && b[A]) ?? f.context.active();
      if (a) {
        let { scope: b } = e.getCapturedScopesOnSpan(a);
        d = (b && b[A]) || f.trace.setSpan(f.context.active(), a);
      }
      let {
        traceId: g,
        spanId: h,
        sampled: i,
        dynamicSamplingContext: j,
      } = P(d, { scope: b, client: c });
      return {
        'sentry-trace': e.generateSentryTraceHeader(g, h, i),
        baggage: e.dynamicSamplingContextToSentryBaggageHeader(j),
      };
    }
    function ab(a) {
      return !0 === a.attributes[i] ? void 0 : k(a);
    }
    function ac(a, b) {
      let c = a.get(b.id);
      return c?.span
        ? c
        : c && !c.span
          ? ((c.span = b.span), (c.parentNode = b.parentNode), c)
          : (a.set(b.id, b), b);
    }
    let ad = {
      1: 'cancelled',
      2: 'unknown_error',
      3: 'invalid_argument',
      4: 'deadline_exceeded',
      5: 'not_found',
      6: 'already_exists',
      7: 'permission_denied',
      8: 'resource_exhausted',
      9: 'failed_precondition',
      10: 'aborted',
      11: 'out_of_range',
      12: 'unimplemented',
      13: 'internal_error',
      14: 'unavailable',
      15: 'data_loss',
      16: 'unauthenticated',
    };
    function ae(a) {
      let b = l(a) ? a.attributes : {},
        c = n(a) ? a.status : void 0;
      if (c) {
        if (c.code === f.SpanStatusCode.OK) return { code: e.SPAN_STATUS_OK };
        else if (c.code === f.SpanStatusCode.ERROR) {
          let a;
          if (void 0 === c.message) {
            let a = af(b);
            if (a) return a;
          }
          return c.message && ((a = c.message), Object.values(ad).includes(a))
            ? { code: e.SPAN_STATUS_ERROR, message: c.message }
            : { code: e.SPAN_STATUS_ERROR, message: 'unknown_error' };
        }
      }
      let d = af(b);
      return (
        d ||
        (c?.code === f.SpanStatusCode.UNSET
          ? { code: e.SPAN_STATUS_OK }
          : { code: e.SPAN_STATUS_ERROR, message: 'unknown_error' })
      );
    }
    function af(a) {
      let b = a[d.ATTR_HTTP_RESPONSE_STATUS_CODE] || a[d.SEMATTRS_HTTP_STATUS_CODE],
        c = a[d.SEMATTRS_RPC_GRPC_STATUS_CODE],
        f = 'number' == typeof b ? b : 'string' == typeof b ? parseInt(b) : void 0;
      return 'number' == typeof f
        ? e.getSpanStatusFromHttpCode(f)
        : 'string' == typeof c
          ? { code: e.SPAN_STATUS_ERROR, message: ad[c] || 'unknown_error' }
          : void 0;
    }
    class ag {
      constructor(a) {
        ((this._finishedSpanBucketSize = a?.timeout || 300),
          (this._finishedSpanBuckets = Array(this._finishedSpanBucketSize).fill(void 0)),
          (this._lastCleanupTimestampInS = Math.floor(Date.now() / 1e3)),
          (this._spansToBucketEntry = new WeakMap()),
          (this._sentSpans = new Map()),
          (this._debouncedFlush = e.debounce(this.flush.bind(this), 1, { maxWait: 100 })));
      }
      export(a) {
        let b = Math.floor(Date.now() / 1e3);
        if (this._lastCleanupTimestampInS !== b) {
          let a = 0;
          (this._finishedSpanBuckets.forEach((c, d) => {
            c &&
              c.timestampInS <= b - this._finishedSpanBucketSize &&
              ((a += c.spans.size), (this._finishedSpanBuckets[d] = void 0));
          }),
            a > 0 &&
              I &&
              e.debug.log(
                `SpanExporter dropped ${a} spans because they were pending for more than ${this._finishedSpanBucketSize} seconds.`
              ),
            (this._lastCleanupTimestampInS = b));
        }
        let c = b % this._finishedSpanBucketSize,
          d = this._finishedSpanBuckets[c] || { timestampInS: b, spans: new Set() };
        ((this._finishedSpanBuckets[c] = d), d.spans.add(a), this._spansToBucketEntry.set(a, d));
        let f = ab(a);
        (!f || this._sentSpans.has(f)) && this._debouncedFlush();
      }
      flush() {
        let a = this._finishedSpanBuckets.flatMap((a) => (a ? Array.from(a.spans) : []));
        this._flushSentSpanCache();
        let b = this._maybeSend(a),
          c = b.size,
          d = a.length - c;
        I &&
          e.debug.log(
            `SpanExporter exported ${c} spans, ${d} spans are waiting for their parent spans to finish`
          );
        let f = Date.now() + 3e5;
        for (let a of b) {
          this._sentSpans.set(a.spanContext().spanId, f);
          let b = this._spansToBucketEntry.get(a);
          b && b.spans.delete(a);
        }
        this._debouncedFlush.cancel();
      }
      clear() {
        ((this._finishedSpanBuckets = this._finishedSpanBuckets.fill(void 0)),
          this._sentSpans.clear(),
          this._debouncedFlush.cancel());
      }
      _maybeSend(a) {
        let b = (function (a) {
            let b = new Map();
            for (let c of a)
              !(function (a, b) {
                let c = b.spanContext().spanId,
                  d = ab(b);
                if (!d) return ac(a, { id: c, span: b, children: [] });
                let e = (function (a, b) {
                    let c = a.get(b);
                    return c || ac(a, { id: b, children: [] });
                  })(a, d),
                  f = ac(a, { id: c, span: b, parentNode: e, children: [] });
                e.children.push(f);
              })(b, c);
            return Array.from(b, function ([a, b]) {
              return b;
            });
          })(a),
          c = new Set();
        for (let a of this._getCompletedRootNodes(b)) {
          let b = a.span;
          c.add(b);
          let f = (function (a) {
            let { op: b, description: c, data: f, origin: g = 'manual', source: h } = ah(a),
              i = e.getCapturedScopesOnSpan(a),
              j = a.attributes[e.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE],
              l = {
                [e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: h,
                [e.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: j,
                [e.SEMANTIC_ATTRIBUTE_SENTRY_OP]: b,
                [e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: g,
                ...f,
                ...ai(a.attributes),
              },
              { links: m } = a,
              { traceId: n, spanId: o } = a.spanContext(),
              p = k(a),
              q = ae(a),
              r = {
                parent_span_id: p,
                span_id: o,
                trace_id: n,
                data: l,
                origin: g,
                op: b,
                status: e.getStatusMessage(q),
                links: e.convertSpanLinksForEnvelope(m),
              },
              s = l[d.ATTR_HTTP_RESPONSE_STATUS_CODE];
            return {
              contexts: {
                trace: r,
                otel: { resource: a.resource.attributes },
                ...('number' == typeof s ? { response: { status_code: s } } : void 0),
              },
              spans: [],
              start_timestamp: e.spanTimeInputToSeconds(a.startTime),
              timestamp: e.spanTimeInputToSeconds(a.endTime),
              transaction: c,
              type: 'transaction',
              sdkProcessingMetadata: {
                capturedSpanScope: i.scope,
                capturedSpanIsolationScope: i.isolationScope,
                sampleRate: j,
                dynamicSamplingContext: e.getDynamicSamplingContextFromSpan(a),
              },
              ...(h && { transaction_info: { source: h } }),
            };
          })(b);
          if (a.parentNode && this._sentSpans.has(a.parentNode.id)) {
            let a = f.contexts?.trace?.data;
            a && (a['sentry.parent_span_already_sent'] = !0);
          }
          let g = f.spans || [];
          for (let b of a.children)
            !(function a(b, c, d) {
              let f = b.span;
              if ((f && d.add(f), !f))
                return void b.children.forEach((b) => {
                  a(b, c, d);
                });
              let g = f.spanContext().spanId,
                h = f.spanContext().traceId,
                i = k(f),
                { attributes: j, startTime: l, endTime: m, links: n } = f,
                { op: o, description: p, data: q, origin: r = 'manual' } = ah(f),
                s = {
                  [e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: r,
                  [e.SEMANTIC_ATTRIBUTE_SENTRY_OP]: o,
                  ...ai(j),
                  ...q,
                },
                t = ae(f),
                u = {
                  span_id: g,
                  trace_id: h,
                  data: s,
                  description: p,
                  parent_span_id: i,
                  start_timestamp: e.spanTimeInputToSeconds(l),
                  timestamp: e.spanTimeInputToSeconds(m) || void 0,
                  status: e.getStatusMessage(t),
                  op: o,
                  origin: r,
                  measurements: e.timedEventsToMeasurements(f.events),
                  links: e.convertSpanLinksForEnvelope(n),
                };
              (c.push(u),
                b.children.forEach((b) => {
                  a(b, c, d);
                }));
            })(b, g, c);
          f.spans =
            g.length > 1e3
              ? g.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, 1e3)
              : g;
          let h = e.timedEventsToMeasurements(b.events);
          (h && (f.measurements = h), e.captureEvent(f));
        }
        return c;
      }
      _flushSentSpanCache() {
        let a = Date.now();
        for (let [b, c] of this._sentSpans.entries()) c <= a && this._sentSpans.delete(b);
      }
      _nodeIsCompletedRootNodeOrHasSentParent(a) {
        return !!a.span && (!a.parentNode || this._sentSpans.has(a.parentNode.id));
      }
      _getCompletedRootNodes(a) {
        return a.filter((a) => this._nodeIsCompletedRootNodeOrHasSentParent(a));
      }
    }
    function ah(a) {
      let {
          op: b,
          source: c,
          origin: g,
        } = (function (a) {
          let b = a.attributes,
            c = b[e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN];
          return {
            origin: c,
            op: b[e.SEMANTIC_ATTRIBUTE_SENTRY_OP],
            source: b[e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE],
          };
        })(a),
        { op: h, description: i, source: j, data: k } = F(a);
      return {
        op: b || h,
        description: i,
        source: c || j,
        origin: g,
        data: {
          ...k,
          ...(function (a) {
            let b = a.attributes,
              c = {};
            a.kind !== f.SpanKind.INTERNAL && (c['otel.kind'] = f.SpanKind[a.kind]);
            let e = b[d.SEMATTRS_HTTP_STATUS_CODE];
            e && (c[d.ATTR_HTTP_RESPONSE_STATUS_CODE] = e);
            let g = p(a);
            return (
              g.url && (c.url = g.url),
              g['http.query'] && (c['http.query'] = g['http.query'].slice(1)),
              g['http.fragment'] && (c['http.fragment'] = g['http.fragment'].slice(1)),
              c
            );
          })(a),
        },
      };
    }
    function ai(a) {
      let b = { ...a };
      return (
        delete b[e.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE],
        delete b[i],
        delete b[e.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME],
        b
      );
    }
    function aj({
      decision: a,
      context: b,
      spanAttributes: c,
      sampleRand: e,
      downstreamTraceSampleRate: i,
    }) {
      let j = (function (a, b) {
        let c = f.trace.getSpan(a),
          e = c?.spanContext(),
          h = e?.traceState || new g.TraceState(),
          i = b[d.SEMATTRS_HTTP_URL] || b[d.ATTR_URL_FULL];
        return (i && 'string' == typeof i && (h = h.set(v, i)), h);
      })(b, c);
      return (void 0 !== i && (j = j.set('sentry.sample_rate', `${i}`)),
      void 0 !== e && (j = j.set('sentry.sample_rand', `${e}`)),
      void 0 == a)
        ? { decision: h.SamplingDecision.NOT_RECORD, traceState: j }
        : a === h.SamplingDecision.NOT_RECORD
          ? { decision: a, traceState: j.set(u, '1') }
          : { decision: a, traceState: j };
    }
    ((c.getClient = e.getClient),
      (c.getDynamicSamplingContextFromSpan = e.getDynamicSamplingContextFromSpan),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = j),
      (c.SentryPropagator = M),
      (c.SentrySampler = class {
        constructor(a) {
          ((this._client = a), L('SentrySampler'));
        }
        shouldSample(a, b, c, g, i, j) {
          let k = this._client.getOptions(),
            l = (function (a) {
              let b = f.trace.getSpan(a);
              return b && f.isSpanContextValid(b.spanContext()) ? b : void 0;
            })(a),
            m = l?.spanContext();
          if (!e.hasSpansEnabled(k)) return aj({ decision: void 0, context: a, spanAttributes: i });
          let n = i[d.SEMATTRS_HTTP_METHOD] || i[d.ATTR_HTTP_REQUEST_METHOD];
          if (g === f.SpanKind.CLIENT && n && (!l || m?.isRemote))
            return aj({ decision: void 0, context: a, spanAttributes: i });
          let o = l
            ? (function (a, b, c) {
                let d = a.spanContext();
                if (f.isSpanContextValid(d) && d.traceId === b) {
                  if (d.isRemote) {
                    let b = D(a.spanContext());
                    return (
                      I &&
                        e.debug.log(
                          `[Tracing] Inheriting remote parent's sampled decision for ${c}: ${b}`
                        ),
                      b
                    );
                  }
                  let b = D(d);
                  return (
                    I &&
                      e.debug.log(`[Tracing] Inheriting parent's sampled decision for ${c}: ${b}`),
                    b
                  );
                }
              })(l, b, c)
            : void 0;
          if (!(!l || m?.isRemote))
            return aj({
              decision: o ? h.SamplingDecision.RECORD_AND_SAMPLED : h.SamplingDecision.NOT_RECORD,
              context: a,
              spanAttributes: i,
            });
          let { description: p, data: q, op: r } = E(c, i, g),
            s = { ...q, ...i };
          r && (s[e.SEMANTIC_ATTRIBUTE_SENTRY_OP] = r);
          let u = { decision: !0 };
          if (
            (this._client.emit(
              'beforeSampling',
              { spanAttributes: s, spanName: p, parentSampled: o, parentContext: m },
              u
            ),
            !u.decision)
          )
            return aj({ decision: void 0, context: a, spanAttributes: i });
          let { isolationScope: v } = B(a) ?? {},
            w = m?.traceState ? m.traceState.get(t) : void 0,
            x = w ? e.baggageHeaderToDynamicSamplingContext(w) : void 0,
            y = e.parseSampleRate(x?.sample_rand) ?? Math.random(),
            [z, A, C] = e.sampleSpan(
              k,
              {
                name: p,
                attributes: s,
                normalizedRequest: v?.getScopeData().sdkProcessingMetadata.normalizedRequest,
                parentSampled: o,
                parentSampleRate: e.parseSampleRate(x?.sample_rate),
              },
              y
            ),
            F = `${n}`.toUpperCase();
          return 'OPTIONS' === F || 'HEAD' === F
            ? (I &&
                e.debug.log(`[Tracing] Not sampling span because HTTP method is '${F}' for ${c}`),
              aj({
                decision: h.SamplingDecision.NOT_RECORD,
                context: a,
                spanAttributes: i,
                sampleRand: y,
                downstreamTraceSampleRate: 0,
              }))
            : (z ||
                void 0 !== o ||
                (I &&
                  e.debug.log(
                    '[Tracing] Discarding root span because its trace was not chosen to be sampled.'
                  ),
                this._client.recordDroppedEvent('sample_rate', 'transaction')),
              {
                ...aj({
                  decision: z
                    ? h.SamplingDecision.RECORD_AND_SAMPLED
                    : h.SamplingDecision.NOT_RECORD,
                  context: a,
                  spanAttributes: i,
                  sampleRand: y,
                  downstreamTraceSampleRate: C ? A : void 0,
                }),
                attributes: { [e.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: C ? A : void 0 },
              });
        }
        toString() {
          return 'SentrySampler';
        }
      }),
      (c.SentrySpanProcessor = class {
        constructor(a) {
          (L('SentrySpanProcessor'), (this._exporter = new ag(a)));
        }
        async forceFlush() {
          this._exporter.flush();
        }
        async shutdown() {
          this._exporter.clear();
        }
        onStart(a, b) {
          let c = f.trace.getSpan(b),
            d = B(b);
          (c && !c.spanContext().isRemote && e.addChildSpanToSpan(c, a),
            c?.spanContext().isRemote && a.setAttribute(i, !0),
            b === f.ROOT_CONTEXT &&
              (d = {
                scope: e.getDefaultCurrentScope(),
                isolationScope: e.getDefaultIsolationScope(),
              }),
            d && e.setCapturedScopesOnSpan(a, d.scope, d.isolationScope),
            e.logSpanStart(a));
          let g = e.getClient();
          g?.emit('spanStart', a);
        }
        onEnd(a) {
          e.logSpanEnd(a);
          let b = e.getClient();
          (b?.emit('spanEnd', a), this._exporter.export(a));
        }
      }),
      (c.continueTrace = Z),
      (c.enhanceDscWithOpenTelemetryRootSpanName = function (a) {
        a.on('createDsc', (a, b) => {
          if (!b) return;
          let c = e.spanToJSON(b).data[e.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE],
            { description: d } = o(b) ? F(b) : { description: void 0 };
          if (('url' !== c && d && (a.transaction = d), e.hasSpansEnabled())) {
            let c = D(b.spanContext());
            a.sampled = void 0 == c ? void 0 : String(c);
          }
        });
      }),
      (c.getActiveSpan = H),
      (c.getRequestSpanData = p),
      (c.getScopesFromContext = B),
      (c.getSpanKind = q),
      (c.getTraceContextForScope = function (a, b) {
        let c = b[A],
          d = c && f.trace.getSpan(c),
          g = d ? e.spanToTraceContext(d) : e.getTraceContextFromScope(b);
        return [
          d ? e.getDynamicSamplingContextFromSpan(d) : e.getDynamicSamplingContextFromScope(a, b),
          g,
        ];
      }),
      (c.isSentryRequestSpan = function (a) {
        if (!l(a)) return !1;
        let { attributes: b } = a,
          c = b[d.SEMATTRS_HTTP_URL] || b[d.ATTR_URL_FULL];
        return !!c && e.isSentryRequestUrl(c.toString(), e.getClient());
      }),
      (c.openTelemetrySetupCheck = function () {
        return Array.from(K);
      }),
      (c.setOpenTelemetryContextAsyncContextStrategy = function () {
        function a() {
          let a = B(f.context.active());
          return (
            a || { scope: e.getDefaultCurrentScope(), isolationScope: e.getDefaultIsolationScope() }
          );
        }
        function b() {
          return a().scope;
        }
        function c() {
          return a().isolationScope;
        }
        e.setAsyncContextStrategy({
          withScope: function (a) {
            let c = f.context.active();
            return f.context.with(c, () => a(b()));
          },
          withSetScope: function (a, b) {
            let c = a[A] || f.context.active();
            return f.context.with(c.setValue(y, a), () => b(a));
          },
          withSetIsolationScope: function (a, b) {
            let d = f.context.active();
            return f.context.with(d.setValue(z, a), () => b(c()));
          },
          withIsolationScope: function (a) {
            let b = f.context.active();
            return f.context.with(b.setValue(x, !0), () => a(c()));
          },
          getCurrentScope: b,
          getIsolationScope: c,
          startSpan: S,
          startSpanManual: T,
          startInactiveSpan: U,
          getActiveSpan: H,
          suppressTracing: _,
          getTraceData: aa,
          continueTrace: Z,
          withActiveSpan: V,
        });
      }),
      (c.setupEventContextTrace = function (a) {
        a.on('preprocessEvent', (a) => {
          let b = H();
          if (!b || 'transaction' === a.type) return;
          a.contexts = { trace: e.spanToTraceContext(b), ...a.contexts };
          let c = e.getRootSpan(b);
          return (
            (a.sdkProcessingMetadata = {
              dynamicSamplingContext: e.getDynamicSamplingContextFromSpan(c),
              ...a.sdkProcessingMetadata,
            }),
            a
          );
        });
      }),
      (c.shouldPropagateTraceForUrl = O),
      (c.spanHasAttributes = l),
      (c.spanHasEvents = function (a) {
        return Array.isArray(a.events);
      }),
      (c.spanHasKind = m),
      (c.spanHasName = o),
      (c.spanHasParentId = function (a) {
        return !!k(a);
      }),
      (c.spanHasStatus = n),
      (c.startInactiveSpan = U),
      (c.startSpan = S),
      (c.startSpanManual = T),
      (c.suppressTracing = _),
      (c.withActiveSpan = V),
      (c.wrapClientClass = function (a) {
        return class extends a {
          constructor(...a) {
            super(...a);
          }
          get tracer() {
            if (this._tracer) return this._tracer;
            let a = e.SDK_VERSION,
              b = f.trace.getTracer('@sentry/opentelemetry', a);
            return ((this._tracer = b), b);
          }
          async flush(a) {
            let b = this.traceProvider;
            return (await b?.forceFlush(), super.flush(a));
          }
        };
      }),
      (c.wrapContextManagerClass = function (a) {
        return class extends a {
          constructor(...a) {
            (super(...a), L('SentryContextManager'));
          }
          with(a, b, c, ...d) {
            let f = B(a),
              g = f?.scope || e.getCurrentScope(),
              h = f?.isolationScope || e.getIsolationScope(),
              i = !0 === a.getValue(x),
              j = a.getValue(y),
              k = a.getValue(z),
              l = j || g.clone(),
              m = C(a, { scope: l, isolationScope: k || (i ? h.clone() : h) })
                .deleteValue(x)
                .deleteValue(y)
                .deleteValue(z);
            return (e.addNonEnumerableProperty(l, A, m), super.with(m, b, c, ...d));
          }
        };
      }),
      (c.wrapSamplingDecision = aj));
  },
  56413,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723);
    c.mergeBaggageHeaders = function (a, b) {
      if (!a) return b;
      let c = d.parseBaggageHeader(a),
        e = d.parseBaggageHeader(b);
      if (!e) return a;
      let f = { ...c };
      return (
        Object.entries(e).forEach(([a, b]) => {
          f[a] || (f[a] = b);
        }),
        d.objectToBaggageHeader(f)
      );
    };
  },
  8888,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(39786),
      f = a.r(66264),
      g = a.r(56413),
      h = a.r(70932);
    ((c.addRequestBreadcrumb = function (a, b) {
      let c = (function (a) {
          try {
            let b = a.getHeader('host') || a.host,
              c = new URL(a.path, `${a.protocol}//${b}`),
              e = d.parseUrl(c.toString()),
              f = { url: d.getSanitizedUrlString(e), 'http.method': a.method || 'GET' };
            return (
              e.search && (f['http.query'] = e.search),
              e.hash && (f['http.fragment'] = e.hash),
              f
            );
          } catch {
            return {};
          }
        })(a),
        e = b?.statusCode,
        f = d.getBreadcrumbLogLevelFromHttpStatusCode(e);
      d.addBreadcrumb(
        { category: 'http', data: { status_code: e, ...c }, type: 'http', level: f },
        { event: 'response', request: a, response: b }
      );
    }),
      (c.addTracePropagationHeadersToOutgoingRequest = function (a, b) {
        let c = (function (a) {
            let b = a.getHeader('host') || a.host,
              c = a.protocol,
              d = a.path;
            return `${c}//${b}${d}`;
          })(a),
          i = d.getClient()?.getOptions().tracePropagationTargets,
          j = e.shouldPropagateTraceForUrl(c, i, b) ? d.getTraceData() : void 0;
        if (!j) return;
        let { 'sentry-trace': k, baggage: l } = j;
        if (k && !a.getHeader('sentry-trace'))
          try {
            (a.setHeader('sentry-trace', k),
              f.DEBUG_BUILD &&
                d.debug.log(
                  h.INSTRUMENTATION_NAME,
                  'Added sentry-trace header to outgoing request'
                ));
          } catch (a) {
            f.DEBUG_BUILD &&
              d.debug.error(
                h.INSTRUMENTATION_NAME,
                'Failed to add sentry-trace header to outgoing request:',
                d.isError(a) ? a.message : 'Unknown error'
              );
          }
        if (l) {
          let b = g.mergeBaggageHeaders(a.getHeader('baggage'), l);
          if (b)
            try {
              (a.setHeader('baggage', b),
                f.DEBUG_BUILD &&
                  d.debug.log(h.INSTRUMENTATION_NAME, 'Added baggage header to outgoing request'));
            } catch (a) {
              f.DEBUG_BUILD &&
                d.debug.error(
                  h.INSTRUMENTATION_NAME,
                  'Failed to add baggage header to outgoing request:',
                  d.isError(a) ? a.message : 'Unknown error'
                );
            }
        }
      }),
      (c.getRequestOptions = function (a) {
        return {
          method: a.method,
          protocol: a.protocol,
          host: a.host,
          hostname: a.host,
          path: a.path,
          headers: a.getHeaders(),
        };
      }));
  },
  53491,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77652),
      e = a.r(77674),
      f = a.r(98070),
      g = a.r(38625),
      h = a.r(32723),
      i = a.r(66264),
      j = a.r(24847),
      k = a.r(70932),
      l = a.r(16359),
      m = a.r(8888);
    class n extends g.InstrumentationBase {
      constructor(a = {}) {
        (super(k.INSTRUMENTATION_NAME, h.SDK_VERSION, a),
          (this._propagationDecisionMap = new h.LRUMap(100)),
          (this._ignoreOutgoingRequestsMap = new WeakMap()));
      }
      init() {
        let a = !1,
          b = this.getConfig().spans ?? !0,
          c = (a) => {
            l.instrumentServer(a.server, {
              instrumentation: this.getConfig().instrumentation,
              ignoreIncomingRequestBody: this.getConfig().ignoreIncomingRequestBody,
              ignoreSpansForIncomingRequests: this.getConfig().ignoreSpansForIncomingRequests,
              incomingRequestSpanHook: this.getConfig().incomingRequestSpanHook,
              maxIncomingRequestBodySize: this.getConfig().maxIncomingRequestBodySize,
              trackIncomingRequestsAsSessions: this.getConfig().trackIncomingRequestsAsSessions,
              sessionFlushingDelayMS: this.getConfig().sessionFlushingDelayMS ?? 6e4,
              ignoreStaticAssets: this.getConfig().ignoreStaticAssets,
              spans: b && !this.getConfig().disableIncomingRequestSpans,
            });
          },
          e = (a) => {
            this._onOutgoingRequestFinish(a.request, a.response);
          },
          f = (a) => {
            this._onOutgoingRequestFinish(a.request, void 0);
          },
          h = (a) => {
            this._onOutgoingRequestCreated(a.request);
          },
          i = (b) => (
            a ||
              ((a = !0),
              d.subscribe('http.server.request.start', c),
              d.subscribe('http.client.response.finish', e),
              d.subscribe('http.client.request.error', f),
              this.getConfig().propagateTraceInOutgoingRequests &&
                d.subscribe('http.client.request.created', h)),
            b
          ),
          j = () => {
            (d.unsubscribe('http.server.request.start', c),
              d.unsubscribe('http.client.response.finish', e),
              d.unsubscribe('http.client.request.error', f),
              d.unsubscribe('http.client.request.created', h));
          };
        return [
          new g.InstrumentationNodeModuleDefinition('http', ['*'], i, j),
          new g.InstrumentationNodeModuleDefinition('https', ['*'], i, j),
        ];
      }
      _onOutgoingRequestFinish(a, b) {
        i.DEBUG_BUILD && h.debug.log(k.INSTRUMENTATION_NAME, 'Handling finished outgoing request');
        let c = this.getConfig().breadcrumbs,
          d = this._ignoreOutgoingRequestsMap.get(a) ?? this._shouldIgnoreOutgoingRequest(a);
        (this._ignoreOutgoingRequestsMap.set(a, d),
          (void 0 === c || c) && !d && m.addRequestBreadcrumb(a, b));
      }
      _onOutgoingRequestCreated(a) {
        let b = this._ignoreOutgoingRequestsMap.get(a) ?? this._shouldIgnoreOutgoingRequest(a);
        (this._ignoreOutgoingRequestsMap.set(a, b),
          b || m.addTracePropagationHeadersToOutgoingRequest(a, this._propagationDecisionMap));
      }
      _shouldIgnoreOutgoingRequest(a) {
        if (f.isTracingSuppressed(e.context.active())) return !0;
        let b = this.getConfig().ignoreOutgoingRequests;
        if (!b) return !1;
        let c = m.getRequestOptions(a);
        return b(j.getRequestUrl(a), c);
      }
    }
    c.SentryHttpInstrumentation = n;
  },
  9397,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(82087),
      f = a.r(53491),
      g = 'Http',
      h = e.generateInstrumentOnce(`${g}.sentry`, (a) => new f.SentryHttpInstrumentation(a));
    ((c.httpIntegration = d.defineIntegration((a = {}) => {
      let b = a.dropSpansForIncomingRequestStatusCodes ?? [
        [401, 404],
        [300, 399],
      ];
      return {
        name: g,
        setupOnce() {
          h({
            ...a,
            ignoreSpansForIncomingRequests: a.ignoreIncomingRequests,
            disableIncomingRequestSpans: !0,
            propagateTraceInOutgoingRequests: !0,
          });
        },
        processEvent(a) {
          if ('transaction' === a.type) {
            let c = a.contexts?.trace?.data?.['http.response.status_code'];
            if (
              'number' == typeof c &&
              b.some((a) => {
                if ('number' == typeof a) return a === c;
                let [b, d] = a;
                return c >= b && c <= d;
              })
            )
              return null;
          }
          return a;
        },
      };
    })),
      (c.instrumentSentryHttp = h));
  },
  83281,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723).parseSemver(process.versions.node),
      e = d.major,
      f = d.minor;
    ((c.NODE_MAJOR = e), (c.NODE_MINOR = f), (c.NODE_VERSION = d));
  },
  12437,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(98070),
      f = a.r(38625),
      g = a.r(32723),
      h = a.r(39786),
      i = a.r(54993),
      j = a.r(83281),
      k = a.r(56413),
      l = 'sentry-trace',
      m = 'baggage',
      n = /baggage: (.*)\r\n/;
    class o extends f.InstrumentationBase {
      constructor(a = {}) {
        (super('@sentry/instrumentation-node-fetch', g.SDK_VERSION, a),
          (this._channelSubs = []),
          (this._propagationDecisionMap = new g.LRUMap(100)),
          (this._ignoreOutgoingRequestsMap = new WeakMap()));
      }
      init() {}
      disable() {
        (super.disable(),
          this._channelSubs.forEach((a) => a.unsubscribe()),
          (this._channelSubs = []));
      }
      enable() {
        (super.enable(),
          (this._channelSubs = this._channelSubs || []),
          this._channelSubs.length > 0 ||
            (this._subscribeToChannel('undici:request:create', this._onRequestCreated.bind(this)),
            this._subscribeToChannel(
              'undici:request:headers',
              this._onResponseHeaders.bind(this)
            )));
      }
      _onRequestCreated({ request: a }) {
        if (!1 === this.getConfig().enabled) return;
        let b = this._shouldIgnoreOutgoingRequest(a);
        if ((this._ignoreOutgoingRequestsMap.set(a, b), b)) return;
        let c = p(a.origin, a.path),
          d = g.getClient()?.getOptions().tracePropagationTargets,
          e = h.shouldPropagateTraceForUrl(c, d, this._propagationDecisionMap)
            ? g.getTraceData()
            : void 0;
        if (!e) return;
        let { 'sentry-trace': f, baggage: i } = e;
        if (Array.isArray(a.headers)) {
          let b = a.headers;
          f && !b.includes(l) && b.push(l, f);
          let c = b.findIndex((a) => a === m);
          if (i && -1 === c) b.push(m, i);
          else if (i) {
            let a = b[c + 1],
              d = k.mergeBaggageHeaders(a, i);
            d && (b[c + 1] = d);
          }
        } else {
          let b = a.headers;
          f &&
            !b.includes(`${l}:`) &&
            (a.headers += `${l}: ${f}\r
`);
          let c = a.headers.match(n)?.[1];
          if (i && !c)
            a.headers += `${m}: ${i}\r
`;
          else if (i) {
            let b = k.mergeBaggageHeaders(c, i);
            b &&
              (a.headers = a.headers.replace(
                n,
                `baggage: ${b}\r
`
              ));
          }
        }
      }
      _onResponseHeaders({ request: a, response: b }) {
        let c = this.getConfig();
        if (!1 === c.enabled) return;
        let d = c.breadcrumbs,
          e = this._ignoreOutgoingRequestsMap.get(a);
        (void 0 === d || d) &&
          !e &&
          (function (a, b) {
            let c = (function (a) {
                try {
                  let b = p(a.origin, a.path),
                    c = g.parseUrl(b),
                    d = { url: g.getSanitizedUrlString(c), 'http.method': a.method || 'GET' };
                  return (
                    c.search && (d['http.query'] = c.search),
                    c.hash && (d['http.fragment'] = c.hash),
                    d
                  );
                } catch {
                  return {};
                }
              })(a),
              d = b.statusCode,
              e = g.getBreadcrumbLogLevelFromHttpStatusCode(d);
            g.addBreadcrumb(
              { category: 'http', data: { status_code: d, ...c }, type: 'http', level: e },
              { event: 'response', request: a, response: b }
            );
          })(a, b);
      }
      _subscribeToChannel(a, b) {
        let c;
        if (j.NODE_MAJOR > 18 || (18 === j.NODE_MAJOR && j.NODE_MINOR >= 19))
          (i.subscribe?.(a, b), (c = () => i.unsubscribe?.(a, b)));
        else {
          let d = i.channel(a);
          (d.subscribe(b), (c = () => d.unsubscribe(b)));
        }
        this._channelSubs.push({ name: a, unsubscribe: c });
      }
      _shouldIgnoreOutgoingRequest(a) {
        if (e.isTracingSuppressed(d.context.active())) return !0;
        let b = p(a.origin, a.path),
          c = this.getConfig().ignoreOutgoingRequests;
        return 'function' == typeof c && !!b && c(b);
      }
    }
    function p(a, b = '/') {
      try {
        return new URL(b, a).toString();
      } catch {
        let c = `${a}`;
        if (c.endsWith('/') && b.startsWith('/')) return `${c}${b.slice(1)}`;
        if (!c.endsWith('/') && !b.startsWith('/')) return `${c}/${b.slice(1)}`;
        return `${c}${b}`;
      }
    }
    c.SentryNodeFetchInstrumentation = o;
  },
  73174,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(82087),
      f = a.r(12437),
      g = e.generateInstrumentOnce('NodeFetch.sentry', f.SentryNodeFetchInstrumentation, (a) => a);
    c.nativeNodeFetchIntegration = d.defineIntegration((a = {}) => ({
      name: 'NodeFetch',
      setupOnce() {
        g(a);
      },
    }));
  },
  96789,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(74533),
      e = a.r(2157),
      f = a.r(60526),
      g = a.r(50227),
      h = a.r(12057),
      i = a.r(32723),
      j = h.promisify(e.readFile),
      k = h.promisify(e.readdir),
      l = i.defineIntegration((a = {}) => {
        let b,
          c = { app: !0, os: !0, device: !0, culture: !0, cloudResource: !0, ...a };
        async function d(a) {
          void 0 === b && (b = e());
          let c = (function (a) {
            if (
              (a.app?.app_memory && (a.app.app_memory = process.memoryUsage().rss),
              a.app?.free_memory && 'function' == typeof process.availableMemory)
            ) {
              let b = process.availableMemory?.();
              null != b && (a.app.free_memory = b);
            }
            return (a.device?.free_memory && (a.device.free_memory = f.freemem()), a);
          })(await b);
          return (
            (a.contexts = {
              ...a.contexts,
              app: { ...c.app, ...a.contexts?.app },
              os: { ...c.os, ...a.contexts?.os },
              device: { ...c.device, ...a.contexts?.device },
              culture: { ...c.culture, ...a.contexts?.culture },
              cloud_resource: { ...c.cloud_resource, ...a.contexts?.cloud_resource },
            }),
            a
          );
        }
        async function e() {
          let a = {};
          if (
            (c.os && (a.os = await m()),
            c.app && (a.app = n()),
            c.device && (a.device = o(c.device)),
            c.culture)
          ) {
            let b = (function () {
              try {
                if ('string' != typeof process.versions.icu) return;
                let a = new Date(9e8),
                  b = new Intl.DateTimeFormat('es', { month: 'long' });
                if ('enero' === b.format(a)) {
                  let a = Intl.DateTimeFormat().resolvedOptions();
                  return { locale: a.locale, timezone: a.timeZone };
                }
              } catch {}
            })();
            b && (a.culture = b);
          }
          return (
            c.cloudResource &&
              (a.cloud_resource = (function () {
                if (process.env.VERCEL)
                  return { 'cloud.provider': 'vercel', 'cloud.region': process.env.VERCEL_REGION };
                if (process.env.AWS_REGION)
                  return {
                    'cloud.provider': 'aws',
                    'cloud.region': process.env.AWS_REGION,
                    'cloud.platform': process.env.AWS_EXECUTION_ENV,
                  };
                if (process.env.GCP_PROJECT) return { 'cloud.provider': 'gcp' };
                if (process.env.ALIYUN_REGION_ID)
                  return {
                    'cloud.provider': 'alibaba_cloud',
                    'cloud.region': process.env.ALIYUN_REGION_ID,
                  };
                if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME)
                  return { 'cloud.provider': 'azure', 'cloud.region': process.env.REGION_NAME };
                else if (process.env.IBM_CLOUD_REGION)
                  return {
                    'cloud.provider': 'ibm_cloud',
                    'cloud.region': process.env.IBM_CLOUD_REGION,
                  };
                else if (process.env.TENCENTCLOUD_REGION)
                  return {
                    'cloud.provider': 'tencent_cloud',
                    'cloud.region': process.env.TENCENTCLOUD_REGION,
                    'cloud.account.id': process.env.TENCENTCLOUD_APPID,
                    'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,
                  };
                else if (process.env.NETLIFY) return { 'cloud.provider': 'netlify' };
                else if (process.env.FLY_REGION)
                  return { 'cloud.provider': 'fly.io', 'cloud.region': process.env.FLY_REGION };
                else if (process.env.DYNO) return { 'cloud.provider': 'heroku' };
                else return;
              })()),
            a
          );
        }
        return { name: 'Context', processEvent: (a) => d(a) };
      });
    async function m() {
      let a = f.platform();
      switch (a) {
        case 'darwin':
          return t();
        case 'linux':
          return v();
        default:
          return { name: p[a] || a, version: f.release() };
      }
    }
    function n() {
      let a = process.memoryUsage().rss,
        b = {
          app_start_time: new Date(Date.now() - 1e3 * process.uptime()).toISOString(),
          app_memory: a,
        };
      if ('function' == typeof process.availableMemory) {
        let a = process.availableMemory?.();
        null != a && (b.free_memory = a);
      }
      return b;
    }
    function o(a) {
      let b,
        c = {};
      try {
        b = f.uptime();
      } catch {}
      if (
        ('number' == typeof b && (c.boot_time = new Date(Date.now() - 1e3 * b).toISOString()),
        (c.arch = f.arch()),
        (!0 === a || a.memory) && ((c.memory_size = f.totalmem()), (c.free_memory = f.freemem())),
        !0 === a || a.cpu)
      ) {
        let a = f.cpus(),
          b = a?.[0];
        b &&
          ((c.processor_count = a.length),
          (c.cpu_description = b.model),
          (c.processor_frequency = b.speed));
      }
      return c;
    }
    let p = {
        aix: 'IBM AIX',
        freebsd: 'FreeBSD',
        openbsd: 'OpenBSD',
        sunos: 'SunOS',
        win32: 'Windows',
      },
      q = [
        { name: 'fedora-release', distros: ['Fedora'] },
        { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },
        { name: 'redhat_version', distros: ['Red Hat Linux'] },
        { name: 'SuSE-release', distros: ['SUSE Linux'] },
        { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },
        { name: 'debian_version', distros: ['Debian'] },
        { name: 'debian_release', distros: ['Debian'] },
        { name: 'arch-release', distros: ['Arch Linux'] },
        { name: 'gentoo-release', distros: ['Gentoo Linux'] },
        { name: 'novell-release', distros: ['SUSE Linux'] },
        { name: 'alpine-release', distros: ['Alpine Linux'] },
      ],
      r = {
        alpine: (a) => a,
        arch: (a) => s(/distrib_release=(.*)/, a),
        centos: (a) => s(/release ([^ ]+)/, a),
        debian: (a) => a,
        fedora: (a) => s(/release (..)/, a),
        mint: (a) => s(/distrib_release=(.*)/, a),
        red: (a) => s(/release ([^ ]+)/, a),
        suse: (a) => s(/VERSION = (.*)\n/, a),
        ubuntu: (a) => s(/distrib_release=(.*)/, a),
      };
    function s(a, b) {
      let c = a.exec(b);
      return c ? c[1] : void 0;
    }
    async function t() {
      let a = {
        kernel_version: f.release(),
        name: 'Mac OS X',
        version: `10.${Number(f.release().split('.')[0]) - 4}`,
      };
      try {
        let b = await new Promise((a, b) => {
          d.execFile('/usr/bin/sw_vers', (c, d) => {
            if (c) return void b(c);
            a(d);
          });
        });
        ((a.name = s(/^ProductName:\s+(.*)$/m, b)),
          (a.version = s(/^ProductVersion:\s+(.*)$/m, b)),
          (a.build = s(/^BuildVersion:\s+(.*)$/m, b)));
      } catch {}
      return a;
    }
    function u(a) {
      return a.split(' ')[0].toLowerCase();
    }
    async function v() {
      let a = { kernel_version: f.release(), name: 'Linux' };
      try {
        let b = await k('/etc'),
          c = q.find((a) => b.includes(a.name));
        if (!c) return a;
        let d = g.join('/etc', c.name),
          e = (await j(d, { encoding: 'utf-8' })).toLowerCase(),
          { distros: f } = c;
        a.name = f.find((a) => e.indexOf(u(a)) >= 0) || f[0];
        let h = u(a.name);
        a.version = r[h]?.(e);
      } catch {}
      return a;
    }
    ((c.getAppContext = n),
      (c.getDeviceContext = o),
      (c.nodeContextIntegration = l),
      (c.readDirAsync = k),
      (c.readFileAsync = j));
  },
  57863,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(2157),
      e = a.r(1457),
      f = a.r(32723),
      g = a.r(66264),
      h = new f.LRUMap(10),
      i = new f.LRUMap(20);
    async function j(a, b) {
      let c = {};
      if (b > 0 && a.exception?.values) {
        for (let b of a.exception.values)
          if (b.stacktrace?.frames?.length)
            for (let a = b.stacktrace.frames.length - 1; a >= 0; a--) {
              let d = b.stacktrace.frames[a],
                e = d?.filename;
              !d ||
                'string' != typeof e ||
                'number' != typeof d.lineno ||
                e.startsWith('node:') ||
                e.endsWith('.min.js') ||
                e.endsWith('.min.cjs') ||
                e.endsWith('.min.mjs') ||
                e.startsWith('data:') ||
                (void 0 !== d.lineno && d.lineno > 1e4) ||
                (void 0 !== d.colno && d.colno > 1e3) ||
                (c[e] || (c[e] = []), c[e].push(d.lineno));
            }
      }
      let j = Object.keys(c);
      if (0 == j.length) return a;
      let k = [];
      for (let a of j) {
        if (i.get(a)) continue;
        let j = c[a];
        if (!j) continue;
        j.sort((a, b) => a - b);
        let l = (function (a, b) {
          if (!a.length) return [];
          let c = 0,
            d = a[0];
          if ('number' != typeof d) return [];
          let e = (function (a, b) {
              return [m(a, b), a + b];
            })(d, b),
            f = [];
          for (;;) {
            if (c === a.length - 1) {
              f.push(e);
              break;
            }
            let d = a[c + 1];
            if ('number' != typeof d) break;
            (d <= e[1]
              ? (e[1] = d + b)
              : (f.push(e),
                (e = (function (a, b) {
                  return [m(a, b), a + b];
                })(d, b))),
              c++);
          }
          return f;
        })(j, b);
        if (
          l.every((b) =>
            (function (a, b) {
              let c = h.get(a);
              if (void 0 === c) return !1;
              for (let a = b[0]; a <= b[1]; a++) if (void 0 === c[a]) return !1;
              return !0;
            })(a, b)
          )
        )
          continue;
        let n = (function (a, b, c) {
          let d = a.get(b);
          return void 0 === d ? (a.set(b, c), c) : d;
        })(h, a, {});
        k.push(
          (function (a, b, c) {
            return new Promise((h, j) => {
              let k = d.createReadStream(a),
                l = e.createInterface({ input: k });
              function m() {
                (k.destroy(), h());
              }
              let n = 0,
                o = 0,
                p = b[0];
              if (void 0 === p) return void m();
              let q = p[0],
                r = p[1];
              function s(b) {
                (i.set(a, 1),
                  g.DEBUG_BUILD && f.debug.error(`Failed to read file: ${a}. Error: ${b}`),
                  l.close(),
                  l.removeAllListeners(),
                  m());
              }
              (k.on('error', s),
                l.on('error', s),
                l.on('close', m),
                l.on('line', (a) => {
                  if (!(++n < q) && ((c[n] = f.snipLine(a, 0)), n >= r)) {
                    if (o === b.length - 1) {
                      (l.close(), l.removeAllListeners());
                      return;
                    }
                    let a = b[++o];
                    if (void 0 === a) {
                      (l.close(), l.removeAllListeners());
                      return;
                    }
                    ((q = a[0]), (r = a[1]));
                  }
                }));
            });
          })(a, l, n)
        );
      }
      if (
        (await Promise.all(k).catch(() => {
          g.DEBUG_BUILD &&
            f.debug.log('Failed to read one or more source files and resolve context lines');
        }),
        b > 0 && a.exception?.values)
      )
        for (let c of a.exception.values)
          c.stacktrace?.frames &&
            c.stacktrace.frames.length > 0 &&
            (function (a, b, c) {
              for (let d of a)
                if (d.filename && void 0 === d.context_line && 'number' == typeof d.lineno) {
                  let a = c.get(d.filename);
                  if (void 0 === a) continue;
                  l(d.lineno, d, b, a);
                }
            })(c.stacktrace.frames, b, h);
      return a;
    }
    function k(a) {
      (delete a.pre_context, delete a.context_line, delete a.post_context);
    }
    function l(a, b, c, d) {
      if (void 0 === b.lineno || void 0 === d) {
        g.DEBUG_BUILD &&
          f.debug.error('Cannot resolve context for frame with no lineno or file contents');
        return;
      }
      b.pre_context = [];
      for (let e = m(a, c); e < a; e++) {
        let a = d[e];
        if (void 0 === a) {
          (k(b), g.DEBUG_BUILD && f.debug.error(`Could not find line ${e} in file ${b.filename}`));
          return;
        }
        b.pre_context.push(a);
      }
      if (void 0 === d[a]) {
        (k(b), g.DEBUG_BUILD && f.debug.error(`Could not find line ${a} in file ${b.filename}`));
        return;
      }
      b.context_line = d[a];
      let e = a + c;
      b.post_context = [];
      for (let c = a + 1; c <= e; c++) {
        let a = d[c];
        if (void 0 === a) break;
        b.post_context.push(a);
      }
    }
    function m(a, b) {
      return Math.max(1, a - b);
    }
    let n = (a = {}) => {
        let b = void 0 !== a.frameContextLines ? a.frameContextLines : 7;
        return { name: 'ContextLines', processEvent: (a) => j(a, b) };
      },
      o = f.defineIntegration(n);
    ((c.MAX_CONTEXTLINES_COLNO = 1e3),
      (c.MAX_CONTEXTLINES_LINENO = 1e4),
      (c._contextLinesIntegration = n),
      (c.addContextToFrame = l),
      (c.contextLinesIntegration = o));
  },
  91155,
  (a, b, c) => {
    let d;
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.isDebuggerEnabled = async function () {
        if (void 0 === d)
          try {
            d = !!(await a.A(34177)).url();
          } catch {
            d = !1;
          }
        return d;
      }));
  },
  42944,
  (a, b, c) => {
    function d(a) {
      return void 0 !== a && (0 === a.length || '?' === a || '<anonymous>' === a);
    }
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__'),
      (c.createRateLimiter = function (a, b, c) {
        let d = 0,
          e = 5,
          f = 0;
        return (
          setInterval(() => {
            (0 === f
              ? d > a && (c((e *= 2)), e > 86400 && (e = 86400), (f = e))
              : 0 == (f -= 1) && b(),
              (d = 0));
          }, 1e3).unref(),
          () => {
            d += 1;
          }
        );
      }),
      (c.functionNamesMatch = function (a, b) {
        return a === b || `Object.${a}` === b || a === `Object.${b}` || (d(a) && d(b));
      }),
      (c.isAnonymous = d));
  },
  10848,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(25127),
      e = a.r(32723),
      f = a.r(91155),
      g = a.r(42944),
      h =
        'LyohIEBzZW50cnkvbm9kZS1jb3JlIDEwLjEwLjAgKDYwYmFlOGEpIHwgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdCAqLwppbXBvcnR7U2Vzc2lvbiBhcyBlfWZyb20ibm9kZTppbnNwZWN0b3IvcHJvbWlzZXMiO2ltcG9ydHt3b3JrZXJEYXRhIGFzIHR9ZnJvbSJub2RlOndvcmtlcl90aHJlYWRzIjtjb25zdCBuPWdsb2JhbFRoaXMsaT17fTtjb25zdCBvPSJfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyI7Y29uc3QgYT10O2Z1bmN0aW9uIHMoLi4uZSl7YS5kZWJ1ZyYmZnVuY3Rpb24oZSl7aWYoISgiY29uc29sZSJpbiBuKSlyZXR1cm4gZSgpO2NvbnN0IHQ9bi5jb25zb2xlLG89e30sYT1PYmplY3Qua2V5cyhpKTthLmZvckVhY2goZT0+e2NvbnN0IG49aVtlXTtvW2VdPXRbZV0sdFtlXT1ufSk7dHJ5e3JldHVybiBlKCl9ZmluYWxseXthLmZvckVhY2goZT0+e3RbZV09b1tlXX0pfX0oKCk9PmNvbnNvbGUubG9nKCJbTG9jYWxWYXJpYWJsZXMgV29ya2VyXSIsLi4uZSkpfWFzeW5jIGZ1bmN0aW9uIGMoZSx0LG4saSl7Y29uc3Qgbz1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuZ2V0UHJvcGVydGllcyIse29iamVjdElkOnQsb3duUHJvcGVydGllczohMH0pO2lbbl09by5yZXN1bHQuZmlsdGVyKGU9PiJsZW5ndGgiIT09ZS5uYW1lJiYhaXNOYU4ocGFyc2VJbnQoZS5uYW1lLDEwKSkpLnNvcnQoKGUsdCk9PnBhcnNlSW50KGUubmFtZSwxMCktcGFyc2VJbnQodC5uYW1lLDEwKSkubWFwKGU9PmUudmFsdWU/LnZhbHVlKX1hc3luYyBmdW5jdGlvbiByKGUsdCxuLGkpe2NvbnN0IG89YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDp0LG93blByb3BlcnRpZXM6ITB9KTtpW25dPW8ucmVzdWx0Lm1hcChlPT5bZS5uYW1lLGUudmFsdWU/LnZhbHVlXSkucmVkdWNlKChlLFt0LG5dKT0+KGVbdF09bixlKSx7fSl9ZnVuY3Rpb24gdShlLHQpe2UudmFsdWUmJigidmFsdWUiaW4gZS52YWx1ZT92b2lkIDA9PT1lLnZhbHVlLnZhbHVlfHxudWxsPT09ZS52YWx1ZS52YWx1ZT90W2UubmFtZV09YDwke2UudmFsdWUudmFsdWV9PmA6dFtlLm5hbWVdPWUudmFsdWUudmFsdWU6ImRlc2NyaXB0aW9uImluIGUudmFsdWUmJiJmdW5jdGlvbiIhPT1lLnZhbHVlLnR5cGU/dFtlLm5hbWVdPWA8JHtlLnZhbHVlLmRlc2NyaXB0aW9ufT5gOiJ1bmRlZmluZWQiPT09ZS52YWx1ZS50eXBlJiYodFtlLm5hbWVdPSI8dW5kZWZpbmVkPiIpKX1hc3luYyBmdW5jdGlvbiBsKGUsdCl7Y29uc3Qgbj1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuZ2V0UHJvcGVydGllcyIse29iamVjdElkOnQsb3duUHJvcGVydGllczohMH0pLGk9e307Zm9yKGNvbnN0IHQgb2Ygbi5yZXN1bHQpaWYodC52YWx1ZT8ub2JqZWN0SWQmJiJBcnJheSI9PT10LnZhbHVlLmNsYXNzTmFtZSl7Y29uc3Qgbj10LnZhbHVlLm9iamVjdElkO2F3YWl0IGMoZSxuLHQubmFtZSxpKX1lbHNlIGlmKHQudmFsdWU/Lm9iamVjdElkJiYiT2JqZWN0Ij09PXQudmFsdWUuY2xhc3NOYW1lKXtjb25zdCBuPXQudmFsdWUub2JqZWN0SWQ7YXdhaXQgcihlLG4sdC5uYW1lLGkpfWVsc2UgdC52YWx1ZSYmdSh0LGkpO3JldHVybiBpfWxldCBmOyhhc3luYyBmdW5jdGlvbigpe2NvbnN0IHQ9bmV3IGU7dC5jb25uZWN0VG9NYWluVGhyZWFkKCkscygiQ29ubmVjdGVkIHRvIG1haW4gdGhyZWFkIik7bGV0IG49ITE7dC5vbigiRGVidWdnZXIucmVzdW1lZCIsKCk9PntuPSExfSksdC5vbigiRGVidWdnZXIucGF1c2VkIixlPT57bj0hMCxhc3luYyBmdW5jdGlvbihlLHtyZWFzb246dCxkYXRhOntvYmplY3RJZDpufSxjYWxsRnJhbWVzOml9KXtpZigiZXhjZXB0aW9uIiE9PXQmJiJwcm9taXNlUmVqZWN0aW9uIiE9PXQpcmV0dXJuO2lmKGY/LigpLG51bGw9PW4pcmV0dXJuO2NvbnN0IGE9W107Zm9yKGxldCB0PTA7dDxpLmxlbmd0aDt0Kyspe2NvbnN0e3Njb3BlQ2hhaW46bixmdW5jdGlvbk5hbWU6byx0aGlzOnN9PWlbdF0sYz1uLmZpbmQoZT0+ImxvY2FsIj09PWUudHlwZSkscj0iZ2xvYmFsIiE9PXMuY2xhc3NOYW1lJiZzLmNsYXNzTmFtZT9gJHtzLmNsYXNzTmFtZX0uJHtvfWA6bztpZih2b2lkIDA9PT1jPy5vYmplY3Qub2JqZWN0SWQpYVt0XT17ZnVuY3Rpb246cn07ZWxzZXtjb25zdCBuPWF3YWl0IGwoZSxjLm9iamVjdC5vYmplY3RJZCk7YVt0XT17ZnVuY3Rpb246cix2YXJzOm59fX1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuY2FsbEZ1bmN0aW9uT24iLHtmdW5jdGlvbkRlY2xhcmF0aW9uOmBmdW5jdGlvbigpIHsgdGhpcy4ke299ID0gdGhpcy4ke299IHx8ICR7SlNPTi5zdHJpbmdpZnkoYSl9OyB9YCxzaWxlbnQ6ITAsb2JqZWN0SWQ6bn0pLGF3YWl0IGUucG9zdCgiUnVudGltZS5yZWxlYXNlT2JqZWN0Iix7b2JqZWN0SWQ6bn0pfSh0LGUucGFyYW1zKS50aGVuKGFzeW5jKCk9PntuJiZhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnJlc3VtZSIpfSxhc3luYyBlPT57biYmYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5yZXN1bWUiKX0pfSksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5lbmFibGUiKTtjb25zdCBpPSExIT09YS5jYXB0dXJlQWxsRXhjZXB0aW9ucztpZihhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6aT8iYWxsIjoidW5jYXVnaHQifSksaSl7Y29uc3QgZT1hLm1heEV4Y2VwdGlvbnNQZXJTZWNvbmR8fDUwO2Y9ZnVuY3Rpb24oZSx0LG4pe2xldCBpPTAsbz01LGE9MDtyZXR1cm4gc2V0SW50ZXJ2YWwoKCk9PnswPT09YT9pPmUmJihvKj0yLG4obyksbz44NjQwMCYmKG89ODY0MDApLGE9byk6KGEtPTEsMD09PWEmJnQoKSksaT0wfSwxZTMpLnVucmVmKCksKCk9PntpKz0xfX0oZSxhc3luYygpPT57cygiUmF0ZS1saW1pdCBsaWZ0ZWQuIiksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJhbGwifSl9LGFzeW5jIGU9PntzKGBSYXRlLWxpbWl0IGV4Y2VlZGVkLiBEaXNhYmxpbmcgY2FwdHVyaW5nIG9mIGNhdWdodCBleGNlcHRpb25zIGZvciAke2V9IHNlY29uZHMuYCksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJ1bmNhdWdodCJ9KX0pfX0pKCkuY2F0Y2goZT0+e3MoIkZhaWxlZCB0byBzdGFydCBkZWJ1Z2dlciIsZSl9KSxzZXRJbnRlcnZhbCgoKT0+e30sMWU0KTs=';
    function i(...a) {
      e.debug.log('[LocalVariables]', ...a);
    }
    let j = e.defineIntegration((b = {}) => {
      async function c() {
        let b = await a.A(34177);
        b.url() || b.open(0);
      }
      return {
        name: 'LocalVariablesAsync',
        async setup(a) {
          if (!a.getOptions().includeLocalVariables) return;
          if (await f.isDebuggerEnabled())
            return void e.debug.warn(
              'Local variables capture has been disabled because the debugger was already enabled'
            );
          let g = { ...b, debug: e.debug.isEnabled() };
          c().then(
            () => {
              try {
                let a = new d.Worker(new URL(`data:application/javascript;base64,${h}`), {
                  workerData: g,
                  execArgv: [],
                  env: { ...process.env, NODE_OPTIONS: void 0 },
                });
                (process.on('exit', () => {
                  a.terminate();
                }),
                  a.once('error', (a) => {
                    i('Worker error', a);
                  }),
                  a.once('exit', (a) => {
                    i('Worker exit', a);
                  }),
                  a.unref());
              } catch (a) {
                e.debug.error('Failed to start worker', a);
              }
            },
            (a) => {
              e.debug.error('Failed to start inspector', a);
            }
          );
        },
        processEvent: (a, b) =>
          (function (a, b) {
            if (
              b.originalException &&
              'object' == typeof b.originalException &&
              g.LOCAL_VARIABLES_KEY in b.originalException &&
              Array.isArray(b.originalException[g.LOCAL_VARIABLES_KEY])
            ) {
              for (let c of a.exception?.values || [])
                !(function (a, b) {
                  let c = (a.stacktrace?.frames || []).filter((a) => 'new Promise' !== a.function);
                  for (let a = 0; a < c.length; a++) {
                    let d = c.length - a - 1,
                      e = b[a],
                      f = c[d];
                    if (!f || !e) break;
                    void 0 !== e.vars &&
                      !1 !== f.in_app &&
                      g.functionNamesMatch(f.function, e.function) &&
                      (f.vars = e.vars);
                  }
                })(c, b.originalException[g.LOCAL_VARIABLES_KEY]);
              b.originalException[g.LOCAL_VARIABLES_KEY] = void 0;
            }
            return a;
          })(a, b),
      };
    });
    ((c.base64WorkerScript = h), (c.localVariablesAsyncIntegration = j));
  },
  95494,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(83281),
      f = a.r(91155),
      g = a.r(42944);
    function h(a) {
      if (void 0 !== a)
        return a.slice(-10).reduce((a, b) => `${a},${b.function},${b.lineno},${b.colno}`, '');
    }
    function i(a, b) {
      if (void 0 !== b) return h(a(b, 1));
    }
    function j(a) {
      let b = [],
        c = !1;
      function d(d) {
        ((b = []), c || ((c = !0), a(d)));
      }
      return (
        b.push(d),
        {
          add: function (a) {
            b.push(a);
          },
          next: function (a) {
            let c = b.pop() || d;
            try {
              c(a);
            } catch {
              d(a);
            }
          },
        }
      );
    }
    class k {
      constructor(a) {
        this._session = a;
      }
      static async create(b) {
        return b || new k(new (await a.A(34177)).Session());
      }
      configureAndConnect(a, b) {
        (this._session.connect(),
          this._session.on('Debugger.paused', (b) => {
            a(b, () => {
              this._session.post('Debugger.resume');
            });
          }),
          this._session.post('Debugger.enable'),
          this._session.post('Debugger.setPauseOnExceptions', { state: b ? 'all' : 'uncaught' }));
      }
      setPauseOnExceptions(a) {
        this._session.post('Debugger.setPauseOnExceptions', { state: a ? 'all' : 'uncaught' });
      }
      getLocalVariables(a, b) {
        this._getProperties(a, (a) => {
          let { add: c, next: d } = j(b);
          for (let b of a)
            if (b.value?.objectId && 'Array' === b.value.className) {
              let a = b.value.objectId;
              c((c) => this._unrollArray(a, b.name, c, d));
            } else if (b.value?.objectId && 'Object' === b.value.className) {
              let a = b.value.objectId;
              c((c) => this._unrollObject(a, b.name, c, d));
            } else b.value && c((a) => this._unrollOther(b, a, d));
          d({});
        });
      }
      _getProperties(a, b) {
        this._session.post('Runtime.getProperties', { objectId: a, ownProperties: !0 }, (a, c) => {
          a ? b([]) : b(c.result);
        });
      }
      _unrollArray(a, b, c, d) {
        this._getProperties(a, (a) => {
          ((c[b] = a
            .filter((a) => 'length' !== a.name && !isNaN(parseInt(a.name, 10)))
            .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))
            .map((a) => a.value?.value)),
            d(c));
        });
      }
      _unrollObject(a, b, c, d) {
        this._getProperties(a, (a) => {
          ((c[b] = a
            .map((a) => [a.name, a.value?.value])
            .reduce((a, [b, c]) => ((a[b] = c), a), {})),
            d(c));
        });
      }
      _unrollOther(a, b, c) {
        (a.value &&
          ('value' in a.value
            ? void 0 === a.value.value || null === a.value.value
              ? (b[a.name] = `<${a.value.value}>`)
              : (b[a.name] = a.value.value)
            : 'description' in a.value && 'function' !== a.value.type
              ? (b[a.name] = `<${a.value.description}>`)
              : 'undefined' === a.value.type && (b[a.name] = '<undefined>')),
          c(b));
      }
    }
    let l = d.defineIntegration((a = {}, b) => {
      let c,
        l = new d.LRUMap(20),
        m = !1;
      return {
        name: 'LocalVariables',
        async setupOnce() {
          let h = d.getClient(),
            n = h?.getOptions();
          return n?.includeLocalVariables
            ? e.NODE_MAJOR < 18
              ? void d.debug.log(
                  'The `LocalVariables` integration is only supported on Node >= v18.'
                )
              : (await f.isDebuggerEnabled())
                ? void d.debug.warn(
                    'Local variables capture has been disabled because the debugger was already enabled'
                  )
                : void k.create(b).then(
                    (b) => {
                      let e = !1 !== a.captureAllExceptions;
                      if (
                        (b.configureAndConnect(
                          (a, d) =>
                            (function (a, { params: { reason: d, data: e, callFrames: f } }, g) {
                              if ('exception' !== d && 'promiseRejection' !== d) return void g();
                              c?.();
                              let h = i(a, e.description);
                              if (void 0 == h) return void g();
                              let { add: k, next: m } = j((a) => {
                                (l.set(h, a), g());
                              });
                              for (let a = 0; a < Math.min(f.length, 5); a++) {
                                let { scopeChain: c, functionName: d, this: e } = f[a],
                                  g = c.find((a) => 'local' === a.type),
                                  h =
                                    'global' !== e.className && e.className
                                      ? `${e.className}.${d}`
                                      : d;
                                if (g?.object.objectId === void 0)
                                  k((b) => {
                                    ((b[a] = { function: h }), m(b));
                                  });
                                else {
                                  let c = g.object.objectId;
                                  k((d) =>
                                    b.getLocalVariables(c, (b) => {
                                      ((d[a] = { function: h, vars: b }), m(d));
                                    })
                                  );
                                }
                              }
                              m([]);
                            })(n.stackParser, a, d),
                          e
                        ),
                        e)
                      ) {
                        let e = a.maxExceptionsPerSecond || 50;
                        c = g.createRateLimiter(
                          e,
                          () => {
                            (d.debug.log('Local variables rate-limit lifted.'),
                              b.setPauseOnExceptions(!0));
                          },
                          (a) => {
                            (d.debug.log(
                              `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${a} seconds.`
                            ),
                              b.setPauseOnExceptions(!1));
                          }
                        );
                      }
                      m = !0;
                    },
                    (a) => {
                      d.debug.log('The `LocalVariables` integration failed to start.', a);
                    }
                  )
            : void 0;
        },
        processEvent(a) {
          if (m) {
            for (let b of a.exception?.values || [])
              !(function (a) {
                let b = h(a.stacktrace?.frames);
                if (void 0 === b) return;
                let c = l.remove(b);
                if (void 0 === c) return;
                let d = (a.stacktrace?.frames || []).filter((a) => 'new Promise' !== a.function);
                for (let a = 0; a < d.length; a++) {
                  let b = d.length - a - 1,
                    e = c[a],
                    f = d[b];
                  if (!f || !e) break;
                  void 0 !== e.vars &&
                    !1 !== f.in_app &&
                    g.functionNamesMatch(f.function, e.function) &&
                    (f.vars = e.vars);
                }
              })(b);
          }
          return a;
        },
        _getCachedFramesCount: () => l.size,
        _getFirstCachedFrame: () => l.values()[0],
      };
    });
    ((c.createCallbackList = j),
      (c.hashFrames = h),
      (c.hashFromStack = i),
      (c.localVariablesSyncIntegration = l));
  },
  10032,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(83281),
      e = a.r(10848),
      f = a.r(95494);
    c.localVariablesIntegration = (a = {}) =>
      d.NODE_VERSION.major < 19
        ? f.localVariablesSyncIntegration(a)
        : e.localVariablesAsyncIntegration(a);
  },
  32185,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.isCjs = function () {
        try {
          return void 0 !== b.exports;
        } catch {
          return !1;
        }
      }));
  },
  61749,
  (a, b, c) => {
    let d;
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let e = a.r(2157),
      f = a.r(50227),
      g = a.r(32185),
      h = 'undefined' == typeof __SENTRY_SERVER_MODULES__ ? {} : __SENTRY_SERVER_MODULES__;
    function i() {
      return (
        d ||
          (d = {
            ...h,
            ...(function () {
              let a = (function () {
                try {
                  let a = f.join(process.cwd(), 'package.json');
                  return JSON.parse(e.readFileSync(a, 'utf8'));
                } catch {
                  return {};
                }
              })();
              return { ...a.dependencies, ...a.devDependencies };
            })(),
            ...(g.isCjs()
              ? (function () {
                  let b = a.t.main?.paths || [],
                    c = (function () {
                      try {
                        return Object.keys(a.c);
                      } catch {
                        return [];
                      }
                    })(),
                    d = {},
                    g = new Set();
                  return (
                    c.forEach((a) => {
                      let c = a,
                        h = () => {
                          let a = c;
                          if (!(c = f.dirname(a)) || a === c || g.has(a)) return;
                          if (0 > b.indexOf(c)) return h();
                          let i = f.join(a, 'package.json');
                          if ((g.add(a), !e.existsSync(i))) return h();
                          try {
                            let a = JSON.parse(e.readFileSync(i, 'utf8'));
                            d[a.name] = a.version;
                          } catch {}
                        };
                      h();
                    }),
                    d
                  );
                })()
              : {}),
          }),
        d
      );
    }
    c.modulesIntegration = () => ({
      name: 'Modules',
      processEvent: (a) => ((a.modules = { ...a.modules, ...i() }), a),
      getModules: i,
    });
  },
  83712,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(66264);
    c.logAndExitProcess = function (b) {
      d.consoleSandbox(() => {
        console.error(b);
      });
      let c = d.getClient();
      if (void 0 === c) {
        (e.DEBUG_BUILD &&
          d.debug.warn('No NodeClient was defined, we are exiting the process now.'),
          a.g.process.exit(1));
        return;
      }
      let f = c.getOptions(),
        g = f?.shutdownTimeout && f.shutdownTimeout > 0 ? f.shutdownTimeout : 2e3;
      c.close(g).then(
        (b) => {
          (!b &&
            e.DEBUG_BUILD &&
            d.debug.warn(
              'We reached the timeout for emptying the request buffer, still exiting now!'
            ),
            a.g.process.exit(1));
        },
        (a) => {
          e.DEBUG_BUILD && d.debug.error(a);
        }
      );
    };
  },
  91245,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(66264),
      f = a.r(83712),
      g = d.defineIntegration((b = {}) => {
        let c = { exitEvenIfOtherHandlersAreRegistered: !1, ...b };
        return {
          name: 'OnUncaughtException',
          setup(b) {
            a.g.process.on('uncaughtException', h(b, c));
          },
        };
      });
    function h(b, c) {
      let g,
        h = !1,
        i = !1,
        j = !1,
        k = b.getOptions();
      return Object.assign(
        (l) => {
          let m = f.logAndExitProcess;
          c.onFatalError ? (m = c.onFatalError) : k.onFatalError && (m = k.onFatalError);
          let n = a.g.process
              .listeners('uncaughtException')
              .filter(
                (a) =>
                  'domainUncaughtExceptionClear' !== a.name &&
                  'sentry_tracingErrorCallback' !== a.tag &&
                  !0 !== a._errorHandler
              ).length,
            o = c.exitEvenIfOtherHandlersAreRegistered || 0 === n;
          h
            ? o &&
              (j
                ? (e.DEBUG_BUILD &&
                    d.debug.warn(
                      'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown'
                    ),
                  f.logAndExitProcess(l))
                : i ||
                  ((i = !0),
                  setTimeout(() => {
                    j || ((j = !0), m(g, l));
                  }, 2e3)))
            : ((g = l),
              (h = !0),
              d.getClient() === b &&
                d.captureException(l, {
                  originalException: l,
                  captureContext: { level: 'fatal' },
                  mechanism: { handled: !1, type: 'onuncaughtexception' },
                }),
              !j && o && ((j = !0), m(l)));
        },
        { _errorHandler: !0 }
      );
    }
    ((c.makeErrorHandler = h), (c.onUncaughtExceptionIntegration = g));
  },
  76585,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(83712),
      f = d.defineIntegration((b = {}) => {
        let c = { mode: 'warn', ...b };
        return {
          name: 'OnUnhandledRejection',
          setup(b) {
            a.g.process.on('unhandledRejection', g(b, c));
          },
        };
      });
    function g(a, b) {
      return function (c, f) {
        if (d.getClient() !== a) return;
        let g = 'strict' === b.mode ? 'fatal' : 'error',
          h = c && 'object' == typeof c ? c._sentry_active_span : void 0;
        ((h ? (a) => d.withActiveSpan(h, a) : (a) => a())(() => {
          d.captureException(c, {
            originalException: f,
            captureContext: { extra: { unhandledPromiseRejection: !0 }, level: g },
            mechanism: { handled: !1, type: 'onunhandledrejection' },
          });
        }),
          (function (a, b) {
            let c =
              'This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). The promise rejected with the reason:';
            'warn' === b
              ? d.consoleSandbox(() => {
                  (console.warn(c),
                    console.error(a && 'object' == typeof a && 'stack' in a ? a.stack : a));
                })
              : 'strict' === b &&
                (d.consoleSandbox(() => {
                  console.warn(c);
                }),
                e.logAndExitProcess(a));
          })(c, b.mode));
      };
    }
    ((c.makeUnhandledPromiseHandler = g), (c.onUnhandledRejectionIntegration = f));
  },
  298,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(12057),
      e = a.r(25127),
      f = a.r(32723),
      g = a.r(83281),
      h = a.r(91155),
      { isPromise: i } = d.types,
      j =
        '';
    function k(a, ...b) {
      f.debug.log(`[ANR] ${a}`, ...b);
    }
    function l() {
      let a = f.getGlobalScope().getScopeData();
      return (
        f.mergeScopeData(a, f.getIsolationScope().getScopeData()),
        f.mergeScopeData(a, f.getCurrentScope().getScopeData()),
        (a.attachments = []),
        (a.eventProcessors = []),
        a
      );
    }
    async function m(a) {
      let b = { message: 'ANR' },
        c = {};
      for (let d of a.getEventProcessors()) {
        if (null === b) break;
        b = await d(b, c);
      }
      return b?.contexts || {};
    }
    async function n(b, c) {
      let d = b.getDsn();
      if (!d) return () => {};
      let g = await m(b);
      (delete g.app?.app_memory, delete g.device?.free_memory);
      let h = b.getOptions(),
        i = b.getSdkMetadata() || {};
      i.sdk && (i.sdk.integrations = h.integrations.map((a) => a.name));
      let l = {
        debug: f.debug.isEnabled(),
        dsn: d,
        tunnel: h.tunnel,
        environment: h.environment || 'production',
        release: h.release,
        dist: h.dist,
        sdkMetadata: i,
        appRootPath: c.appRootPath,
        pollInterval: c.pollInterval || 50,
        anrThreshold: c.anrThreshold || 5e3,
        captureStackTrace: !!c.captureStackTrace,
        maxAnrEvents: c.maxAnrEvents || 1,
        staticTags: c.staticTags || {},
        contexts: g,
      };
      if (l.captureStackTrace) {
        let b = await a.A(34177);
        b.url() || b.open(0);
      }
      let n = new e.Worker(new URL(`data:application/javascript;base64,${j}`), {
        workerData: l,
        execArgv: [],
        env: { ...process.env, NODE_OPTIONS: void 0 },
      });
      process.on('exit', () => {
        n.terminate();
      });
      let o = setInterval(() => {
        try {
          let a = f.getIsolationScope().getSession(),
            b = a ? { ...a, toJSON: void 0 } : void 0;
          n.postMessage({ session: b, debugImages: f.getFilenameToDebugIdMap(h.stackParser) });
        } catch {}
      }, l.pollInterval);
      return (
        o.unref(),
        n.on('message', (a) => {
          'session-ended' === a &&
            (k('ANR event sent from ANR worker. Clearing session in this thread.'),
            f.getIsolationScope().setSession(void 0));
        }),
        n.once('error', (a) => {
          (clearInterval(o), k('ANR worker error', a));
        }),
        n.once('exit', (a) => {
          (clearInterval(o), k('ANR worker exit', a));
        }),
        n.unref(),
        () => {
          (n.terminate(), clearInterval(o));
        }
      );
    }
    ((c.anrIntegration = f.defineIntegration((a = {}) => {
      let b, c;
      if (g.NODE_VERSION.major < 16 || (16 === g.NODE_VERSION.major && g.NODE_VERSION.minor < 17))
        throw Error('ANR detection requires Node 16.17.0 or later');
      return (
        (f.GLOBAL_OBJ.__SENTRY_GET_SCOPES__ = l),
        {
          name: 'Anr',
          startWorker: () => {
            !b && c && (b = n(c, a));
          },
          stopWorker: () => {
            b &&
              b.then((a) => {
                (a(), (b = void 0));
              });
          },
          async setup(b) {
            ((c = b),
              a.captureStackTrace &&
                (await h.isDebuggerEnabled()) &&
                (f.debug.warn(
                  'ANR captureStackTrace has been disabled because the debugger was already enabled'
                ),
                (a.captureStackTrace = !1)),
              setImmediate(() => this.startWorker()));
          },
        }
      );
    })),
      (c.base64WorkerScript = j),
      (c.disableAnrDetectionForCallback = function (a) {
        let b = f.getClient()?.getIntegrationByName('Anr');
        if (!b) return a();
        b.stopWorker();
        let c = a();
        return i(c) ? c.finally(() => b.startWorker()) : (b.startWorker(), c);
      }));
  },
  93440,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(47299),
      e = a.r(32723),
      f = 'Spotlight',
      g = e.defineIntegration((a = {}) => {
        let b = { sidecarUrl: a.sidecarUrl || 'http://localhost:8969/stream' };
        return {
          name: f,
          setup(a) {
            try {
              e.debug.warn(
                "[Spotlight] It seems you're not in dev mode. Do you really want to have Spotlight enabled?"
              );
            } catch {}
            !(function (a, b) {
              let c = (function (a) {
                try {
                  return new URL(`${a}`);
                } catch {
                  e.debug.warn(`[Spotlight] Invalid sidecar URL: ${a}`);
                  return;
                }
              })(b.sidecarUrl);
              if (!c) return;
              let f = 0;
              a.on('beforeEnvelope', (a) => {
                if (f > 3)
                  return void e.debug.warn(
                    '[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests'
                  );
                let b = e.serializeEnvelope(a);
                e.suppressTracing(() => {
                  let a = d.request(
                    {
                      method: 'POST',
                      path: c.pathname,
                      hostname: c.hostname,
                      port: c.port,
                      headers: { 'Content-Type': 'application/x-sentry-envelope' },
                    },
                    (a) => {
                      (a.statusCode && a.statusCode >= 200 && a.statusCode < 400 && (f = 0),
                        a.on('data', () => {}),
                        a.on('end', () => {}),
                        a.setEncoding('utf8'));
                    }
                  );
                  (a.on('error', () => {
                    (f++, e.debug.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar'));
                  }),
                    a.write(b),
                    a.end());
                });
              });
            })(a, b);
          },
        };
      });
    ((c.INTEGRATION_NAME = f), (c.spotlightIntegration = g));
  },
  99504,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(12057);
    c.systemErrorIntegration = a.r(32723).defineIntegration((a = {}) => ({
      name: 'NodeSystemError',
      processEvent: (b, c, e) => {
        if (
          !(function (a) {
            return (
              a instanceof Error &&
              'errno' in a &&
              'number' == typeof a.errno &&
              d.getSystemErrorMap().has(a.errno)
            );
          })(c.originalException)
        )
          return b;
        let f = c.originalException,
          g = { ...f };
        for (let c of (e.getOptions().sendDefaultPii ||
          !0 === a.includePaths ||
          (delete g.path, delete g.dest),
        (b.contexts = { ...b.contexts, node_system_error: g }),
        b.exception?.values || []))
          c.value &&
            (f.path &&
              c.value.includes(f.path) &&
              (c.value = c.value.replace(`'${f.path}'`, '').trim()),
            f.dest &&
              c.value.includes(f.dest) &&
              (c.value = c.value.replace(`'${f.dest}'`, '').trim()));
        return b;
      },
    }));
  },
  23093,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77652),
      e = a.r(32723);
    c.childProcessIntegration = e.defineIntegration((a = {}) => ({
      name: 'ChildProcess',
      setup() {
        (d.channel('child_process').subscribe((b) => {
          var c, d;
          let f, g;
          b &&
            'object' == typeof b &&
            'process' in b &&
            ((c = b.process),
            (d = a),
            (g = !1),
            c
              .on('spawn', () => {
                if ('/usr/bin/sw_vers' === c.spawnfile) {
                  g = !0;
                  return;
                }
                ((f = { spawnfile: c.spawnfile }),
                  d.includeChildProcessArgs && (f.spawnargs = c.spawnargs));
              })
              .on('exit', (a) => {
                g ||
                  ((g = !0),
                  null !== a &&
                    0 !== a &&
                    e.addBreadcrumb({
                      category: 'child_process',
                      message: `Child process exited with code '${a}'`,
                      level: 0 === a ? 'info' : 'warning',
                      data: f,
                    }));
              })
              .on('error', (a) => {
                g ||
                  ((g = !0),
                  e.addBreadcrumb({
                    category: 'child_process',
                    message: `Child process errored with '${a.message}'`,
                    level: 'error',
                    data: f,
                  }));
              }));
        }),
          d.channel('worker_threads').subscribe((b) => {
            var c, d;
            let f;
            b &&
              'object' == typeof b &&
              'worker' in b &&
              ((c = b.worker),
              (d = a),
              c
                .on('online', () => {
                  f = c.threadId;
                })
                .on('error', (a) => {
                  !1 !== d.captureWorkerErrors
                    ? e.captureException(a, {
                        mechanism: {
                          type: 'instrument',
                          handled: !1,
                          data: { threadId: String(f) },
                        },
                      })
                    : e.addBreadcrumb({
                        category: 'worker_thread',
                        message: `Worker thread errored with '${a.message}'`,
                        level: 'error',
                        data: { threadId: f },
                      });
                }));
          }));
      },
    }));
  },
  31980,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(89871),
      e = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'],
      f = Symbol.for('level'),
      g = Symbol.for('message'),
      h = Symbol.for('splat'),
      i = {
        silly: 'trace',
        debug: 'debug',
        verbose: 'debug',
        http: 'debug',
        info: 'info',
        notice: 'info',
        warn: 'warn',
        warning: 'warn',
        error: 'error',
        emerg: 'fatal',
        alert: 'fatal',
        crit: 'fatal',
      };
    c.createSentryWinstonTransport = function (a, b) {
      return class extends a {
        constructor(a) {
          (super(a), (this._levels = new Set(b?.levels ?? e)));
        }
        log(a, b) {
          try {
            var c;
            if (
              (setImmediate(() => {
                this.emit('logged', a);
              }),
              (c = a),
              'object' != typeof c || null == c)
            )
              return;
            let b = a[f],
              { level: e, message: j, timestamp: k, ...l } = a;
            ((l[f] = void 0), (l[g] = void 0), (l[h] = void 0));
            let m = i[b] ?? 'info';
            this._levels.has(m) &&
              d.captureLog(m, j, { ...l, 'sentry.origin': 'auto.logging.winston' });
          } catch {}
          b && b();
        }
      };
    };
  },
  63804,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AbstractAsyncHooksContextManager = void 0));
    let d = a.r(27699),
      e = ['addListener', 'on', 'once', 'prependListener', 'prependOnceListener'];
    class f {
      bind(a, b) {
        return b instanceof d.EventEmitter
          ? this._bindEventEmitter(a, b)
          : 'function' == typeof b
            ? this._bindFunction(a, b)
            : b;
      }
      _bindFunction(a, b) {
        let c = this,
          d = function (...d) {
            return c.with(a, () => b.apply(this, d));
          };
        return (
          Object.defineProperty(d, 'length', {
            enumerable: !1,
            configurable: !0,
            writable: !1,
            value: b.length,
          }),
          d
        );
      }
      _bindEventEmitter(a, b) {
        return (
          void 0 !== this._getPatchMap(b) ||
            (this._createPatchMap(b),
            e.forEach((c) => {
              void 0 !== b[c] && (b[c] = this._patchAddListener(b, b[c], a));
            }),
            'function' == typeof b.removeListener &&
              (b.removeListener = this._patchRemoveListener(b, b.removeListener)),
            'function' == typeof b.off && (b.off = this._patchRemoveListener(b, b.off)),
            'function' == typeof b.removeAllListeners &&
              (b.removeAllListeners = this._patchRemoveAllListeners(b, b.removeAllListeners))),
          b
        );
      }
      _patchRemoveListener(a, b) {
        let c = this;
        return function (d, e) {
          let f = c._getPatchMap(a)?.[d];
          if (void 0 === f) return b.call(this, d, e);
          let g = f.get(e);
          return b.call(this, d, g || e);
        };
      }
      _patchRemoveAllListeners(a, b) {
        let c = this;
        return function (d) {
          let e = c._getPatchMap(a);
          return (
            void 0 !== e &&
              (0 == arguments.length ? c._createPatchMap(a) : void 0 !== e[d] && delete e[d]),
            b.apply(this, arguments)
          );
        };
      }
      _patchAddListener(a, b, c) {
        let d = this;
        return function (e, f) {
          if (d._wrapped) return b.call(this, e, f);
          let g = d._getPatchMap(a);
          void 0 === g && (g = d._createPatchMap(a));
          let h = g[e];
          void 0 === h && ((h = new WeakMap()), (g[e] = h));
          let i = d.bind(c, f);
          (h.set(f, i), (d._wrapped = !0));
          try {
            return b.call(this, e, i);
          } finally {
            d._wrapped = !1;
          }
        };
      }
      _createPatchMap(a) {
        let b = Object.create(null);
        return ((a[this._kOtListeners] = b), b);
      }
      _getPatchMap(a) {
        return a[this._kOtListeners];
      }
      _kOtListeners = Symbol('OtListeners');
      _wrapped = !1;
    }
    c.AbstractAsyncHooksContextManager = f;
  },
  57274,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.AsyncHooksContextManager = void 0));
    let d = a.r(77674),
      e = a.r(10430),
      f = a.r(63804);
    class g extends f.AbstractAsyncHooksContextManager {
      _asyncHook;
      _contexts = new Map();
      _stack = [];
      constructor() {
        (super(),
          (this._asyncHook = e.createHook({
            init: this._init.bind(this),
            before: this._before.bind(this),
            after: this._after.bind(this),
            destroy: this._destroy.bind(this),
            promiseResolve: this._destroy.bind(this),
          })));
      }
      active() {
        return this._stack[this._stack.length - 1] ?? d.ROOT_CONTEXT;
      }
      with(a, b, c, ...d) {
        this._enterContext(a);
        try {
          return b.call(c, ...d);
        } finally {
          this._exitContext();
        }
      }
      enable() {
        return (this._asyncHook.enable(), this);
      }
      disable() {
        return (this._asyncHook.disable(), this._contexts.clear(), (this._stack = []), this);
      }
      _init(a, b) {
        if ('TIMERWRAP' === b) return;
        let c = this._stack[this._stack.length - 1];
        void 0 !== c && this._contexts.set(a, c);
      }
      _destroy(a) {
        this._contexts.delete(a);
      }
      _before(a) {
        let b = this._contexts.get(a);
        void 0 !== b && this._enterContext(b);
      }
      _after() {
        this._exitContext();
      }
      _enterContext(a) {
        this._stack.push(a);
      }
      _exitContext() {
        this._stack.pop();
      }
    }
    c.AsyncHooksContextManager = g;
  },
  8932,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AsyncLocalStorageContextManager = void 0));
    let d = a.r(77674),
      e = a.r(10430),
      f = a.r(63804);
    class g extends f.AbstractAsyncHooksContextManager {
      _asyncLocalStorage;
      constructor() {
        (super(), (this._asyncLocalStorage = new e.AsyncLocalStorage()));
      }
      active() {
        return this._asyncLocalStorage.getStore() ?? d.ROOT_CONTEXT;
      }
      with(a, b, c, ...d) {
        let e = null == c ? b : b.bind(c);
        return this._asyncLocalStorage.run(a, e, ...d);
      }
      enable() {
        return this;
      }
      disable() {
        return (this._asyncLocalStorage.disable(), this);
      }
    }
    c.AsyncLocalStorageContextManager = g;
  },
  51486,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AsyncLocalStorageContextManager = c.AsyncHooksContextManager = void 0));
    var d = a.r(57274);
    Object.defineProperty(c, 'AsyncHooksContextManager', {
      enumerable: !0,
      get: function () {
        return d.AsyncHooksContextManager;
      },
    });
    var e = a.r(8932);
    Object.defineProperty(c, 'AsyncLocalStorageContextManager', {
      enumerable: !0,
      get: function () {
        return e.AsyncLocalStorageContextManager;
      },
    });
  },
  31307,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(51486);
    c.SentryContextManager = a.r(39786).wrapContextManagerClass(d.AsyncLocalStorageContextManager);
  },
  2840,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(32723);
    c.setupOpenTelemetryLogger = function () {
      (d.diag.disable(),
        d.diag.setLogger(
          {
            error: e.debug.error,
            warn: e.debug.warn,
            info: e.debug.log,
            debug: e.debug.log,
            verbose: e.debug.log,
          },
          d.DiagLogLevel.DEBUG
        ));
    };
  },
  40126,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723);
    c.processSessionIntegration = d.defineIntegration(() => ({
      name: 'ProcessSession',
      setupOnce() {
        (d.startSession(),
          process.on('beforeExit', () => {
            let a = d.getIsolationScope().getSession();
            a?.status !== 'ok' && d.endSession();
          }));
      },
    }));
  },
  73716,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(47299);
    a.r(43698);
    let e = Symbol('AgentBaseInternalState');
    class f extends d.Agent {
      constructor(a) {
        (super(a), (this[e] = {}));
      }
      isSecureEndpoint(a) {
        if (a) {
          if ('boolean' == typeof a.secureEndpoint) return a.secureEndpoint;
          if ('string' == typeof a.protocol) return 'https:' === a.protocol;
        }
        let { stack: b } = Error();
        return (
          'string' == typeof b &&
          b
            .split('\n')
            .some((a) => -1 !== a.indexOf('(https.js:') || -1 !== a.indexOf('node:https:'))
        );
      }
      createSocket(a, b, c) {
        let f = { ...b, secureEndpoint: this.isSecureEndpoint(b) };
        Promise.resolve()
          .then(() => this.connect(a, f))
          .then((g) => {
            if (g instanceof d.Agent) return g.addRequest(a, f);
            ((this[e].currentSocket = g), super.createSocket(a, b, c));
          }, c);
      }
      createConnection() {
        let a = this[e].currentSocket;
        if (((this[e].currentSocket = void 0), !a))
          throw Error('No socket was returned in the `connect()` function');
        return a;
      }
      get defaultPort() {
        return this[e].defaultPort ?? ('https:' === this.protocol ? 443 : 80);
      }
      set defaultPort(a) {
        this[e] && (this[e].defaultPort = a);
      }
      get protocol() {
        return this[e].protocol ?? (this.isSecureEndpoint() ? 'https:' : 'http:');
      }
      set protocol(a) {
        this[e] && (this[e].protocol = a);
      }
    }
    c.Agent = f;
  },
  56500,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723);
    function e(...a) {
      d.debug.log('[https-proxy-agent:parse-proxy-response]', ...a);
    }
    c.parseProxyResponse = function (a) {
      return new Promise((b, c) => {
        let d = 0,
          f = [];
        function g() {
          let i = a.read();
          i
            ? (function (i) {
                (f.push(i), (d += i.length));
                let j = Buffer.concat(f, d),
                  k = j.indexOf('\r\n\r\n');
                if (-1 === k) {
                  (e('have not received end of HTTP headers yet...'), g());
                  return;
                }
                let l = j.subarray(0, k).toString('ascii').split('\r\n'),
                  m = l.shift();
                if (!m)
                  return (a.destroy(), c(Error('No header received from proxy CONNECT response')));
                let n = m.split(' '),
                  o = +(n[1] || 0),
                  p = n.slice(2).join(' '),
                  q = {};
                for (let b of l) {
                  if (!b) continue;
                  let d = b.indexOf(':');
                  if (-1 === d)
                    return (
                      a.destroy(),
                      c(Error(`Invalid header from proxy CONNECT response: "${b}"`))
                    );
                  let e = b.slice(0, d).toLowerCase(),
                    f = b.slice(d + 1).trimStart(),
                    g = q[e];
                  'string' == typeof g
                    ? (q[e] = [g, f])
                    : Array.isArray(g)
                      ? g.push(f)
                      : (q[e] = f);
                }
                (e('got proxy server response: %o %o', m, q),
                  h(),
                  b({ connect: { statusCode: o, statusText: p, headers: q }, buffered: j }));
              })(i)
            : a.once('readable', g);
        }
        function h() {
          (a.removeListener('end', i),
            a.removeListener('error', j),
            a.removeListener('readable', g));
        }
        function i() {
          (h(), e('onend'), c(Error('Proxy connection ended before receiving CONNECT response')));
        }
        function j(a) {
          (h(), e('onerror %o', a), c(a));
        }
        (a.on('error', j), a.on('end', i), g());
      });
    };
  },
  23970,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(61095),
      e = a.r(85560),
      f = a.r(32723),
      g = a.r(73716),
      h = a.r(56500);
    function i(...a) {
      f.debug.log('[https-proxy-agent]', ...a);
    }
    class j extends g.Agent {
      static __initStatic() {
        this.protocols = ['http', 'https'];
      }
      constructor(a, b) {
        (super(b),
          (this.options = {}),
          (this.proxy = 'string' == typeof a ? new URL(a) : a),
          (this.proxyHeaders = b?.headers ?? {}),
          i('Creating new HttpsProxyAgent instance: %o', this.proxy.href));
        let c = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, ''),
          d = this.proxy.port
            ? parseInt(this.proxy.port, 10)
            : 'https:' === this.proxy.protocol
              ? 443
              : 80;
        this.connectOpts = {
          ALPNProtocols: ['http/1.1'],
          ...(b ? l(b, 'headers') : null),
          host: c,
          port: d,
        };
      }
      async connect(a, b) {
        let c,
          { proxy: f } = this;
        if (!b.host) throw TypeError('No "host" provided');
        if ('https:' === f.protocol) {
          i('Creating `tls.Socket`: %o', this.connectOpts);
          let a = this.connectOpts.servername || this.connectOpts.host;
          c = e.connect({ ...this.connectOpts, servername: a && d.isIP(a) ? void 0 : a });
        } else
          (i('Creating `net.Socket`: %o', this.connectOpts), (c = d.connect(this.connectOpts)));
        let g =
            'function' == typeof this.proxyHeaders ? this.proxyHeaders() : { ...this.proxyHeaders },
          j = d.isIPv6(b.host) ? `[${b.host}]` : b.host,
          m = `CONNECT ${j}:${b.port} HTTP/1.1\r
`;
        if (f.username || f.password) {
          let a = `${decodeURIComponent(f.username)}:${decodeURIComponent(f.password)}`;
          g['Proxy-Authorization'] = `Basic ${Buffer.from(a).toString('base64')}`;
        }
        for (let a of ((g.Host = `${j}:${b.port}`),
        g['Proxy-Connection'] || (g['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close'),
        Object.keys(g)))
          m += `${a}: ${g[a]}\r
`;
        let n = h.parseProxyResponse(c);
        c.write(`${m}\r
`);
        let { connect: o, buffered: p } = await n;
        if ((a.emit('proxyConnect', o), this.emit('proxyConnect', o, a), 200 === o.statusCode)) {
          if ((a.once('socket', k), b.secureEndpoint)) {
            i('Upgrading socket connection to TLS');
            let a = b.servername || b.host;
            return e.connect({
              ...l(b, 'host', 'path', 'port'),
              socket: c,
              servername: d.isIP(a) ? void 0 : a,
            });
          }
          return c;
        }
        c.destroy();
        let q = new d.Socket({ writable: !1 });
        return (
          (q.readable = !0),
          a.once('socket', (a) => {
            (i('Replaying proxy buffer for failed request'), a.push(p), a.push(null));
          }),
          q
        );
      }
    }
    function k(a) {
      a.resume();
    }
    function l(a, ...b) {
      let c,
        d = {};
      for (c in a) b.includes(c) || (d[c] = a[c]);
      return d;
    }
    (j.__initStatic(), (c.HttpsProxyAgent = j));
  },
  49252,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(47299),
      e = a.r(43698),
      f = a.r(81111),
      g = a.r(27028),
      h = a.r(32723),
      i = a.r(23970);
    c.makeNodeTransport = function (a) {
      let b;
      try {
        b = new URL(a.url);
      } catch (b) {
        return (
          h.consoleSandbox(() => {
            console.warn(
              '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.'
            );
          }),
          h.createTransport(a, () => Promise.resolve({}))
        );
      }
      let c = 'https:' === b.protocol,
        j = (function (a, b) {
          let { no_proxy: c } = process.env;
          if (!c?.split(',').some((b) => a.host.endsWith(b) || a.hostname.endsWith(b))) return b;
        })(b, a.proxy || (c ? process.env.https_proxy : void 0) || process.env.http_proxy),
        k = c ? e : d,
        l = void 0 !== a.keepAlive && a.keepAlive,
        m = j
          ? new i.HttpsProxyAgent(j)
          : new k.Agent({ keepAlive: l, maxSockets: 30, timeout: 2e3 }),
        n = (function (a, b, c) {
          let { hostname: d, pathname: e, port: i, protocol: j, search: k } = new URL(a.url);
          return function (l) {
            return new Promise((m, n) => {
              h.suppressTracing(() => {
                var h;
                let o =
                    ((h = l.body),
                    new f.Readable({
                      read() {
                        (this.push(h), this.push(null));
                      },
                    })),
                  p = { ...a.headers };
                l.body.length > 32768 &&
                  ((p['content-encoding'] = 'gzip'), (o = o.pipe(g.createGzip())));
                let q = b.request(
                  {
                    method: 'POST',
                    agent: c,
                    headers: p,
                    hostname: d,
                    path: `${e}${k}`,
                    port: i,
                    protocol: j,
                    ca: a.caCerts,
                  },
                  (a) => {
                    (a.on('data', () => {}), a.on('end', () => {}), a.setEncoding('utf8'));
                    let b = a.headers['retry-after'] ?? null,
                      c = a.headers['x-sentry-rate-limits'] ?? null;
                    m({
                      statusCode: a.statusCode,
                      headers: {
                        'retry-after': b,
                        'x-sentry-rate-limits': Array.isArray(c) ? c[0] || null : c,
                      },
                    });
                  }
                );
                (q.on('error', n), o.pipe(q));
              });
            });
          };
        })(a, a.httpModule ?? k, m);
      return h.createTransport(a, n);
    };
  },
  38571,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = new Set(['false', 'f', 'n', 'no', 'off', '0']),
      e = new Set(['true', 't', 'y', 'yes', 'on', '1']);
    ((c.FALSY_ENV_VALUES = d),
      (c.TRUTHY_ENV_VALUES = e),
      (c.envToBool = function (a, b) {
        let c = String(a).toLowerCase();
        return !d.has(c) && (!!e.has(c) || (b?.strict ? null : !!a));
      }));
  },
  373,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(50227),
      e = a.r(32723);
    function f(a) {
      return a.replace(/^[A-Z]:/, '').replace(/\\/g, '/');
    }
    c.createGetModuleFromFilename = function (
      a = process.argv[1] ? e.dirname(process.argv[1]) : process.cwd(),
      b = '\\' === d.sep
    ) {
      let c = b ? f(a) : a;
      return (a) => {
        if (!a) return;
        let e = b ? f(a) : a,
          { dir: g, base: h, ext: i } = d.posix.parse(e);
        ('.js' === i || '.mjs' === i || '.cjs' === i) && (h = h.slice(0, -1 * i.length));
        let j = decodeURIComponent(h);
        g || (g = '.');
        let k = g.lastIndexOf('/node_modules');
        if (k > -1) return `${g.slice(k + 14).replace(/\//g, '.')}:${j}`;
        if (g.startsWith(c)) {
          let a = g.slice(c.length + 1).replace(/\//g, '.');
          return a ? `${a}:${j}` : j;
        }
        return j;
      };
    };
  },
  70338,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(373);
    ((c.defaultStackParser = d.createStackParser(
      d.nodeStackLineParser(e.createGetModuleFromFilename())
    )),
      (c.getSentryRelease = function (a) {
        if (process.env.SENTRY_RELEASE) return process.env.SENTRY_RELEASE;
        if (d.GLOBAL_OBJ.SENTRY_RELEASE?.id) return d.GLOBAL_OBJ.SENTRY_RELEASE.id;
        let b =
            process.env.GITHUB_SHA ||
            process.env.CI_MERGE_REQUEST_SOURCE_BRANCH_SHA ||
            process.env.CI_BUILD_REF ||
            process.env.CI_COMMIT_SHA ||
            process.env.BITBUCKET_COMMIT,
          c =
            process.env.APPVEYOR_PULL_REQUEST_HEAD_COMMIT ||
            process.env.APPVEYOR_REPO_COMMIT ||
            process.env.CODEBUILD_RESOLVED_SOURCE_VERSION ||
            process.env.AWS_COMMIT_ID ||
            process.env.BUILD_SOURCEVERSION ||
            process.env.GIT_CLONE_COMMIT_HASH ||
            process.env.BUDDY_EXECUTION_REVISION ||
            process.env.BUILDKITE_COMMIT ||
            process.env.CIRCLE_SHA1 ||
            process.env.CIRRUS_CHANGE_IN_REPO ||
            process.env.CF_REVISION ||
            process.env.CM_COMMIT ||
            process.env.CF_PAGES_COMMIT_SHA ||
            process.env.DRONE_COMMIT_SHA ||
            process.env.FC_GIT_COMMIT_SHA ||
            process.env.HEROKU_TEST_RUN_COMMIT_VERSION ||
            process.env.HEROKU_SLUG_COMMIT ||
            process.env.RAILWAY_GIT_COMMIT_SHA ||
            process.env.RENDER_GIT_COMMIT ||
            process.env.SEMAPHORE_GIT_SHA ||
            process.env.TRAVIS_PULL_REQUEST_SHA ||
            process.env.VERCEL_GIT_COMMIT_SHA ||
            process.env.VERCEL_GITHUB_COMMIT_SHA ||
            process.env.VERCEL_GITLAB_COMMIT_SHA ||
            process.env.VERCEL_BITBUCKET_COMMIT_SHA ||
            process.env.ZEIT_GITHUB_COMMIT_SHA ||
            process.env.ZEIT_GITLAB_COMMIT_SHA ||
            process.env.ZEIT_BITBUCKET_COMMIT_SHA,
          e =
            process.env.CI_COMMIT_ID ||
            process.env.SOURCE_COMMIT ||
            process.env.SOURCE_VERSION ||
            process.env.GIT_COMMIT ||
            process.env.COMMIT_REF ||
            process.env.BUILD_VCS_NUMBER ||
            process.env.CI_COMMIT_SHA;
        return b || c || e || a;
      }));
  },
  72838,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(60526),
      e = a.r(77674),
      f = a.r(38625),
      g = a.r(32723),
      h = a.r(39786),
      i = a.r(37702),
      j = a.r(66264);
    class k extends g.ServerRuntimeClient {
      constructor(b) {
        let c =
            !1 === b.includeServerName
              ? void 0
              : b.serverName || a.g.process.env.SENTRY_NAME || d.hostname(),
          e = {
            ...b,
            platform: 'node',
            runtime: { name: 'node', version: a.g.process.version },
            serverName: c,
          };
        (b.openTelemetryInstrumentations &&
          f.registerInstrumentations({ instrumentations: b.openTelemetryInstrumentations }),
          g.applySdkMetadata(e, 'node'),
          g.debug.log(
            `Initializing Sentry: process: ${process.pid}, thread: ${i.isMainThread ? 'main' : `worker-${i.threadId}`}.`
          ),
          super(e),
          this.getOptions().enableLogs &&
            ((this._logOnExitFlushListener = () => {
              g._INTERNAL_flushLogsBuffer(this);
            }),
            c &&
              this.on('beforeCaptureLog', (a) => {
                a.attributes = { ...a.attributes, 'server.address': c };
              }),
            process.on('beforeExit', this._logOnExitFlushListener)));
      }
      get tracer() {
        if (this._tracer) return this._tracer;
        let a = g.SDK_VERSION,
          b = e.trace.getTracer('@sentry/node', a);
        return ((this._tracer = b), b);
      }
      async flush(a) {
        return (
          await this.traceProvider?.forceFlush(),
          this.getOptions().sendClientReports && this._flushOutcomes(),
          super.flush(a)
        );
      }
      close(a) {
        return (
          this._clientReportInterval && clearInterval(this._clientReportInterval),
          this._clientReportOnExitFlushListener &&
            process.off('beforeExit', this._clientReportOnExitFlushListener),
          this._logOnExitFlushListener && process.off('beforeExit', this._logOnExitFlushListener),
          super
            .close(a)
            .then((a) => (this.traceProvider ? this.traceProvider.shutdown().then(() => a) : a))
        );
      }
      startClientReportTracking() {
        let a = this.getOptions();
        a.sendClientReports &&
          ((this._clientReportOnExitFlushListener = () => {
            this._flushOutcomes();
          }),
          (this._clientReportInterval = setInterval(() => {
            (j.DEBUG_BUILD && g.debug.log('Flushing client reports based on interval.'),
              this._flushOutcomes());
          }, a.clientReportFlushInterval ?? 6e4).unref()),
          process.on('beforeExit', this._clientReportOnExitFlushListener));
      }
      _getTraceInfoFromScope(a) {
        return a ? h.getTraceContextForScope(this, a) : [void 0, void 0];
      }
    }
    c.NodeClient = k;
  },
  45516,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(85397),
      f = a.r(62562);
    var g = 'undefined' != typeof document ? document.currentScript : null;
    c.maybeInitializeEsmLoader = function () {
      let [b = 0, c = 0] = process.versions.node.split('.').map(Number);
      if (b >= 21 || (20 === b && c >= 6) || (18 === b && c >= 19)) {
        if (!d.GLOBAL_OBJ._sentryEsmLoaderHookRegistered)
          try {
            let { addHookMessagePort: b } = e.createAddHookMessageChannel();
            f.default.register(
              'import-in-the-middle/hook.mjs',
              'undefined' == typeof document
                ? a
                    .r(92509)
                    .pathToFileURL(
                      '/ROOT/node_modules/.pnpm/@sentry+node-core@10.10.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2_613ea5654a336b5ff6f1308c87dcead1/node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js'
                    ).href
                : (g && 'SCRIPT' === g.tagName.toUpperCase() && g.src) ||
                    new URL('sdk/esmLoader.js', document.baseURI).href,
              { data: { addHookMessagePort: b, include: [] }, transferList: [b] }
            );
          } catch (a) {
            d.debug.warn('Failed to register ESM hook', a);
          }
      } else
        d.consoleSandbox(() => {
          console.warn(
            `[Sentry] You are using Node.js v${process.versions.node} in ESM mode ("import syntax"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS ("require() syntax"), or upgrade your Node.js version.`
          );
        });
    };
  },
  35671,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(39786),
      f = a.r(66264),
      g = a.r(23093),
      h = a.r(96789),
      i = a.r(57863),
      j = a.r(9397),
      k = a.r(10032),
      l = a.r(61749),
      m = a.r(73174),
      n = a.r(91245),
      o = a.r(76585),
      p = a.r(40126),
      q = a.r(93440),
      r = a.r(99504),
      s = a.r(49252),
      t = a.r(32185),
      u = a.r(38571),
      v = a.r(70338),
      w = a.r(72838),
      x = a.r(45516);
    function y() {
      return [
        d.inboundFiltersIntegration(),
        d.functionToStringIntegration(),
        d.linkedErrorsIntegration(),
        d.requestDataIntegration(),
        r.systemErrorIntegration(),
        d.consoleIntegration(),
        j.httpIntegration(),
        m.nativeNodeFetchIntegration(),
        n.onUncaughtExceptionIntegration(),
        o.onUnhandledRejectionIntegration(),
        i.contextLinesIntegration(),
        k.localVariablesIntegration(),
        h.nodeContextIntegration(),
        g.childProcessIntegration(),
        p.processSessionIntegration(),
        l.modulesIntegration(),
      ];
    }
    function z(a = {}, b) {
      let c = (function (a, b) {
        let c = (function (a) {
            if (void 0 !== a) return a;
            let b = v.getSentryRelease();
            if (void 0 !== b) return b;
          })(a.release),
          e =
            a.spotlight ??
            u.envToBool(process.env.SENTRY_SPOTLIGHT, { strict: !0 }) ??
            process.env.SENTRY_SPOTLIGHT,
          f = (function (a) {
            if (void 0 !== a) return a;
            let b = process.env.SENTRY_TRACES_SAMPLE_RATE;
            if (!b) return;
            let c = parseFloat(b);
            return isFinite(c) ? c : void 0;
          })(a.tracesSampleRate),
          g = {
            ...a,
            dsn: a.dsn ?? process.env.SENTRY_DSN,
            environment: a.environment ?? process.env.SENTRY_ENVIRONMENT,
            sendClientReports: a.sendClientReports ?? !0,
            transport: a.transport ?? s.makeNodeTransport,
            stackParser: d.stackParserFromStackParserOptions(a.stackParser || v.defaultStackParser),
            release: c,
            tracesSampleRate: f,
            spotlight: e,
            debug: u.envToBool(a.debug ?? process.env.SENTRY_DEBUG),
          },
          h = a.integrations,
          i = a.defaultIntegrations ?? b(g);
        return {
          ...g,
          integrations: d.getIntegrationsToSetup({ defaultIntegrations: i, integrations: h }),
        };
      })(a, b);
      (!0 === c.debug &&
        (f.DEBUG_BUILD
          ? d.debug.enable()
          : d.consoleSandbox(() => {
              console.warn(
                '[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.'
              );
            })),
        t.isCjs() || !1 === c.registerEsmLoaderHooks || x.maybeInitializeEsmLoader(),
        e.setOpenTelemetryContextAsyncContextStrategy(),
        d.getCurrentScope().update(c.initialScope),
        c.spotlight &&
          !c.integrations.some(({ name: a }) => a === q.INTEGRATION_NAME) &&
          c.integrations.push(
            q.spotlightIntegration({
              sidecarUrl: 'string' == typeof c.spotlight ? c.spotlight : void 0,
            })
          ),
        d.applySdkMetadata(c, 'node-core'));
      let g = new w.NodeClient(c);
      return (
        d.getCurrentScope().setClient(g),
        g.init(),
        d.debug.log(`Running in ${t.isCjs() ? 'CommonJS' : 'ESM'} mode.`),
        g.startClientReportTracking(),
        (function () {
          if (!1 !== u.envToBool(process.env.SENTRY_USE_ENVIRONMENT)) {
            let a = process.env.SENTRY_TRACE,
              b = process.env.SENTRY_BAGGAGE,
              c = d.propagationContextFromHeaders(a, b);
            d.getCurrentScope().setPropagationContext(c);
          }
        })(),
        e.enhanceDscWithOpenTelemetryRootSpanName(g),
        e.setupEventContextTrace(g),
        g
      );
    }
    ((c.getDefaultIntegrations = y),
      (c.init = function (a = {}) {
        return z(a, y);
      }),
      (c.initWithoutDefaultIntegrations = function (a = {}) {
        return z(a, () => []);
      }),
      (c.validateOpenTelemetrySetup = function () {
        if (!f.DEBUG_BUILD) return;
        let a = e.openTelemetrySetupCheck(),
          b = ['SentryContextManager', 'SentryPropagator'];
        for (let c of (d.hasSpansEnabled() && b.push('SentrySpanProcessor'), b))
          a.includes(c) ||
            d.debug.error(
              `You have to set up the ${c}. Without this, the OpenTelemetry & Sentry integration will not work properly.`
            );
        a.includes('SentrySampler') ||
          d.debug.warn(
            'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.'
          );
      }));
  },
  96839,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(39786);
    c.setIsolationScope = function (a) {
      let b = e.getScopesFromContext(d.context.active());
      b && (b.isolationScope = a);
    };
  },
  66067,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723);
    c.addOriginToSpan = function (a, b) {
      a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, b);
    };
  },
  85753,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32185);
    c.createMissingInstrumentationContext = (a) => ({ package: a, 'javascript.is_cjs': d.isCjs() });
  },
  10029,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(38625),
      e = a.r(32723),
      f = a.r(32185),
      g = a.r(85753);
    c.ensureIsWrapped = function (a, b) {
      let c = e.getClient()?.getOptions();
      !c?.disableInstrumentationWarnings &&
        !d.isWrapped(a) &&
        e.isEnabled() &&
        e.hasSpansEnabled(c) &&
        (e.consoleSandbox(() => {
          f.isCjs()
            ? console.warn(
                `[Sentry] ${b} is not instrumented. This is likely because you required/imported ${b} before calling \`Sentry.init()\`.`
              )
            : console.warn(
                `[Sentry] ${b} is not instrumented. Please make sure to initialize Sentry in a separate file that you \`--import\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${b}/install/esm/.`
              );
        }),
        e
          .getGlobalScope()
          .setContext('missing_instrumentation', g.createMissingInstrumentationContext(b)));
    };
  },
  95043,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = [
      ['january', '1'],
      ['february', '2'],
      ['march', '3'],
      ['april', '4'],
      ['may', '5'],
      ['june', '6'],
      ['july', '7'],
      ['august', '8'],
      ['september', '9'],
      ['october', '10'],
      ['november', '11'],
      ['december', '12'],
      ['jan', '1'],
      ['feb', '2'],
      ['mar', '3'],
      ['apr', '4'],
      ['may', '5'],
      ['jun', '6'],
      ['jul', '7'],
      ['aug', '8'],
      ['sep', '9'],
      ['oct', '10'],
      ['nov', '11'],
      ['dec', '12'],
      ['sunday', '0'],
      ['monday', '1'],
      ['tuesday', '2'],
      ['wednesday', '3'],
      ['thursday', '4'],
      ['friday', '5'],
      ['saturday', '6'],
      ['sun', '0'],
      ['mon', '1'],
      ['tue', '2'],
      ['wed', '3'],
      ['thu', '4'],
      ['fri', '5'],
      ['sat', '6'],
    ];
    c.replaceCronNames = function (a) {
      return d.reduce((a, [b, c]) => a.replace(RegExp(b, 'gi'), c), a);
    };
  },
  36507,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(95043),
      f = 'Automatic instrumentation of CronJob only supports crontab string';
    c.instrumentCron = function (a, b) {
      let c = !1;
      return new Proxy(a, {
        construct(a, g) {
          let [h, i, j, k, l, ...m] = g;
          if ('string' != typeof h) throw Error(f);
          if (c) throw Error(`A job named '${b}' has already been scheduled`);
          c = !0;
          let n = e.replaceCronNames(h);
          return new a(
            h,
            async function (a, c) {
              return d.withMonitor(
                b,
                async () => {
                  try {
                    await i(a, c);
                  } catch (a) {
                    throw (d.captureException(a), a);
                  }
                },
                { schedule: { type: 'crontab', value: n }, timezone: l || void 0 }
              );
            },
            j,
            k,
            l,
            ...m
          );
        },
        get: (a, g) =>
          'from' === g
            ? (g) => {
                let { cronTime: h, onTick: i, timeZone: j } = g;
                if ('string' != typeof h) throw Error(f);
                if (c) throw Error(`A job named '${b}' has already been scheduled`);
                c = !0;
                let k = e.replaceCronNames(h);
                return (
                  (g.onTick = async (a, c) =>
                    d.withMonitor(
                      b,
                      async () => {
                        try {
                          await i(a, c);
                        } catch (a) {
                          throw (d.captureException(a), a);
                        }
                      },
                      { schedule: { type: 'crontab', value: k }, timezone: j || void 0 }
                    )),
                  a.from(g)
                );
              }
            : a[g],
      });
    };
  },
  10211,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(95043);
    c.instrumentNodeCron = function (a) {
      return new Proxy(a, {
        get: (a, b) =>
          'schedule' === b && a.schedule
            ? new Proxy(a.schedule, {
                apply(a, b, c) {
                  let [f, g, h] = c,
                    i = h?.name,
                    j = h?.timezone;
                  if (!i)
                    throw Error(
                      'Missing "name" for scheduled job. A name is required for Sentry check-in monitoring.'
                    );
                  let k = async () =>
                    d.withMonitor(
                      i,
                      async () => {
                        try {
                          return await g();
                        } catch (a) {
                          throw (d.captureException(a), a);
                        }
                      },
                      { schedule: { type: 'crontab', value: e.replaceCronNames(f) }, timezone: j }
                    );
                  return a.apply(b, [f, k, h]);
                },
              })
            : a[b],
      });
    };
  },
  13567,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(95043);
    c.instrumentNodeSchedule = function (a) {
      return new Proxy(a, {
        get: (a, b) =>
          'scheduleJob' === b
            ? new Proxy(a.scheduleJob, {
                apply(a, b, c) {
                  let [f, g, h] = c;
                  if ('string' != typeof f || 'string' != typeof g || 'function' != typeof h)
                    throw Error(
                      "Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string"
                    );
                  async function i() {
                    return d.withMonitor(
                      f,
                      async () => {
                        await h?.();
                      },
                      { schedule: { type: 'crontab', value: e.replaceCronNames(g) } }
                    );
                  }
                  return a.apply(b, [f, g, i]);
                },
              })
            : a[b],
      });
    };
  },
  94614,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(36507),
      e = a.r(10211),
      f = a.r(13567);
    c.cron = {
      instrumentCron: d.instrumentCron,
      instrumentNodeCron: e.instrumentNodeCron,
      instrumentNodeSchedule: f.instrumentNodeSchedule,
    };
  },
  28063,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32920),
      e = a.r(9397),
      f = a.r(53491),
      g = a.r(73174),
      h = a.r(12437),
      i = a.r(96789),
      j = a.r(57863),
      k = a.r(10032),
      l = a.r(61749),
      m = a.r(91245),
      n = a.r(76585),
      o = a.r(298),
      p = a.r(93440),
      q = a.r(99504),
      r = a.r(23093),
      s = a.r(31980),
      t = a.r(31307),
      u = a.r(2840),
      v = a.r(82087),
      w = a.r(35671),
      x = a.r(96839),
      y = a.r(70338),
      z = a.r(373),
      A = a.r(66067),
      B = a.r(24847),
      C = a.r(32185),
      D = a.r(10029),
      E = a.r(85753),
      F = a.r(38571),
      G = a.r(49252),
      H = a.r(72838),
      I = a.r(94614),
      J = a.r(83281),
      K = a.r(39786),
      L = a.r(32723);
    ((c.logger = d),
      (c.httpIntegration = e.httpIntegration),
      (c.SentryHttpInstrumentation = f.SentryHttpInstrumentation),
      (c.nativeNodeFetchIntegration = g.nativeNodeFetchIntegration),
      (c.SentryNodeFetchInstrumentation = h.SentryNodeFetchInstrumentation),
      (c.nodeContextIntegration = i.nodeContextIntegration),
      (c.contextLinesIntegration = j.contextLinesIntegration),
      (c.localVariablesIntegration = k.localVariablesIntegration),
      (c.modulesIntegration = l.modulesIntegration),
      (c.onUncaughtExceptionIntegration = m.onUncaughtExceptionIntegration),
      (c.onUnhandledRejectionIntegration = n.onUnhandledRejectionIntegration),
      (c.anrIntegration = o.anrIntegration),
      (c.disableAnrDetectionForCallback = o.disableAnrDetectionForCallback),
      (c.spotlightIntegration = p.spotlightIntegration),
      (c.systemErrorIntegration = q.systemErrorIntegration),
      (c.childProcessIntegration = r.childProcessIntegration),
      (c.createSentryWinstonTransport = s.createSentryWinstonTransport),
      (c.SentryContextManager = t.SentryContextManager),
      (c.setupOpenTelemetryLogger = u.setupOpenTelemetryLogger),
      (c.INSTRUMENTED = v.INSTRUMENTED),
      (c.generateInstrumentOnce = v.generateInstrumentOnce),
      (c.instrumentWhenWrapped = v.instrumentWhenWrapped),
      (c.getDefaultIntegrations = w.getDefaultIntegrations),
      (c.init = w.init),
      (c.initWithoutDefaultIntegrations = w.initWithoutDefaultIntegrations),
      (c.validateOpenTelemetrySetup = w.validateOpenTelemetrySetup),
      (c.setIsolationScope = x.setIsolationScope),
      (c.defaultStackParser = y.defaultStackParser),
      (c.getSentryRelease = y.getSentryRelease),
      (c.createGetModuleFromFilename = z.createGetModuleFromFilename),
      (c.addOriginToSpan = A.addOriginToSpan),
      (c.getRequestUrl = B.getRequestUrl),
      (c.isCjs = C.isCjs),
      (c.ensureIsWrapped = D.ensureIsWrapped),
      (c.createMissingInstrumentationContext = E.createMissingInstrumentationContext),
      (c.envToBool = F.envToBool),
      (c.makeNodeTransport = G.makeNodeTransport),
      (c.NodeClient = H.NodeClient),
      (c.cron = I.cron),
      (c.NODE_VERSION = J.NODE_VERSION),
      (c.setNodeAsyncContextStrategy = K.setOpenTelemetryContextAsyncContextStrategy),
      (c.SDK_VERSION = L.SDK_VERSION),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_OP = L.SEMANTIC_ATTRIBUTE_SENTRY_OP),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = L.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = L.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = L.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE),
      (c.Scope = L.Scope),
      (c.addBreadcrumb = L.addBreadcrumb),
      (c.addEventProcessor = L.addEventProcessor),
      (c.addIntegration = L.addIntegration),
      (c.captureCheckIn = L.captureCheckIn),
      (c.captureConsoleIntegration = L.captureConsoleIntegration),
      (c.captureEvent = L.captureEvent),
      (c.captureException = L.captureException),
      (c.captureFeedback = L.captureFeedback),
      (c.captureMessage = L.captureMessage),
      (c.captureSession = L.captureSession),
      (c.close = L.close),
      (c.consoleIntegration = L.consoleIntegration),
      (c.consoleLoggingIntegration = L.consoleLoggingIntegration),
      (c.continueTrace = L.continueTrace),
      (c.createTransport = L.createTransport),
      (c.dedupeIntegration = L.dedupeIntegration),
      (c.endSession = L.endSession),
      (c.eventFiltersIntegration = L.eventFiltersIntegration),
      (c.extraErrorDataIntegration = L.extraErrorDataIntegration),
      (c.featureFlagsIntegration = L.featureFlagsIntegration),
      (c.flush = L.flush),
      (c.functionToStringIntegration = L.functionToStringIntegration),
      (c.getActiveSpan = L.getActiveSpan),
      (c.getClient = L.getClient),
      (c.getCurrentScope = L.getCurrentScope),
      (c.getGlobalScope = L.getGlobalScope),
      (c.getIsolationScope = L.getIsolationScope),
      (c.getRootSpan = L.getRootSpan),
      (c.getSpanDescendants = L.getSpanDescendants),
      (c.getSpanStatusFromHttpCode = L.getSpanStatusFromHttpCode),
      (c.getTraceData = L.getTraceData),
      (c.getTraceMetaTags = L.getTraceMetaTags),
      (c.inboundFiltersIntegration = L.inboundFiltersIntegration),
      (c.instrumentSupabaseClient = L.instrumentSupabaseClient),
      (c.isEnabled = L.isEnabled),
      (c.isInitialized = L.isInitialized),
      (c.lastEventId = L.lastEventId),
      (c.linkedErrorsIntegration = L.linkedErrorsIntegration),
      (c.parameterize = L.parameterize),
      (c.profiler = L.profiler),
      (c.requestDataIntegration = L.requestDataIntegration),
      (c.rewriteFramesIntegration = L.rewriteFramesIntegration),
      (c.setContext = L.setContext),
      (c.setCurrentClient = L.setCurrentClient),
      (c.setExtra = L.setExtra),
      (c.setExtras = L.setExtras),
      (c.setHttpStatus = L.setHttpStatus),
      (c.setMeasurement = L.setMeasurement),
      (c.setTag = L.setTag),
      (c.setTags = L.setTags),
      (c.setUser = L.setUser),
      (c.spanToBaggageHeader = L.spanToBaggageHeader),
      (c.spanToJSON = L.spanToJSON),
      (c.spanToTraceHeader = L.spanToTraceHeader),
      (c.startInactiveSpan = L.startInactiveSpan),
      (c.startNewTrace = L.startNewTrace),
      (c.startSession = L.startSession),
      (c.startSpan = L.startSpan),
      (c.startSpanManual = L.startSpanManual),
      (c.supabaseIntegration = L.supabaseIntegration),
      (c.suppressTracing = L.suppressTracing),
      (c.trpcMiddleware = L.trpcMiddleware),
      (c.updateSpanName = L.updateSpanName),
      (c.withActiveSpan = L.withActiveSpan),
      (c.withIsolationScope = L.withIsolationScope),
      (c.withMonitor = L.withMonitor),
      (c.withScope = L.withScope),
      (c.wrapMcpServerWithSentry = L.wrapMcpServerWithSentry),
      (c.zodErrorsIntegration = L.zodErrorsIntegration));
  },
  66900,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(31687),
      f = a.r(32723),
      g = a.r(28063),
      h = 'Http',
      i = '@opentelemetry_sentry-patched/instrumentation-http',
      j = g.generateInstrumentOnce(`${h}.sentry`, (a) => new g.SentryHttpInstrumentation(a)),
      k = g.generateInstrumentOnce(h, (a) => {
        let b = new e.HttpInstrumentation({ ...a, disableIncomingRequestInstrumentation: !0 });
        try {
          ((b._diag = d.diag.createComponentLogger({ namespace: i })), (b.instrumentationName = i));
        } catch {}
        return b;
      });
    function l(a, b = {}) {
      return 'boolean' == typeof a.spans
        ? a.spans
        : !b.skipOpenTelemetrySetup && (!!f.hasSpansEnabled(b) || !(g.NODE_VERSION.major >= 22));
    }
    let m = f.defineIntegration((a = {}) => {
      let b = a.dropSpansForIncomingRequestStatusCodes ?? [
        [401, 404],
        [300, 399],
      ];
      return {
        name: h,
        setupOnce() {
          let b = f.getClient()?.getOptions() || {},
            c = l(a, b),
            d = a.disableIncomingRequestSpans ?? !f.hasSpansEnabled(b);
          (j({
            ...a,
            disableIncomingRequestSpans: d,
            ignoreSpansForIncomingRequests: a.ignoreIncomingRequests,
            propagateTraceInOutgoingRequests: !c,
          }),
            c &&
              k(
                (function (a = {}) {
                  return {
                    ignoreOutgoingRequestHook: (b) => {
                      let c = g.getRequestUrl(b);
                      if (!c) return !1;
                      let d = a.ignoreOutgoingRequests;
                      return !!d?.(c, b);
                    },
                    requireParentforOutgoingSpans: !1,
                    requestHook: (b, c) => {
                      (g.addOriginToSpan(b, 'auto.http.otel.http'),
                        a.instrumentation?.requestHook?.(b, c));
                    },
                    responseHook: (b, c) => {
                      a.instrumentation?.responseHook?.(b, c);
                    },
                    applyCustomAttributesOnSpan: (b, c, d) => {
                      a.instrumentation?.applyCustomAttributesOnSpan?.(b, c, d);
                    },
                  };
                })(a)
              ));
        },
        processEvent(a) {
          if ('transaction' === a.type) {
            let c = a.contexts?.trace?.data?.['http.response.status_code'];
            if (
              'number' == typeof c &&
              b.some((a) => {
                if ('number' == typeof a) return a === c;
                let [b, d] = a;
                return c >= b && c <= d;
              })
            )
              return null;
          }
          return a;
        },
      };
    });
    ((c._shouldUseOtelHttpInstrumentation = l),
      (c.httpIntegration = m),
      (c.instrumentOtelHttp = k),
      (c.instrumentSentryHttp = j));
  },
  6190,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.14.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-undici'));
  },
  29057,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.SemanticAttributes = void 0),
      (c.SemanticAttributes = {
        HTTP_CONNECTION_STATE: 'http.connection.state',
        ERROR_TYPE: 'error.type',
        HTTP_REQUEST_BODY_SIZE: 'http.request.body.size',
        HTTP_REQUEST_METHOD: 'http.request.method',
        HTTP_REQUEST_METHOD_ORIGINAL: 'http.request.method_original',
        HTTP_REQUEST_RESEND_COUNT: 'http.request.resend_count',
        HTTP_RESPONSE_BODY_SIZE: 'http.response.body.size',
        HTTP_RESPONSE_STATUS_CODE: 'http.response.status_code',
        HTTP_ROUTE: 'http.route',
        NETWORK_PEER_ADDRESS: 'network.peer.address',
        NETWORK_PEER_PORT: 'network.peer.port',
        NETWORK_PROTOCOL_NAME: 'network.protocol.name',
        NETWORK_PROTOCOL_VERSION: 'network.protocol.version',
        SERVER_ADDRESS: 'server.address',
        SERVER_PORT: 'server.port',
        URL_FULL: 'url.full',
        URL_PATH: 'url.path',
        URL_QUERY: 'url.query',
        URL_SCHEME: 'url.scheme',
        USER_AGENT_ORIGINAL: 'user_agent.original',
      }));
  },
  32743,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.UndiciInstrumentation = void 0));
    let d = a.r(54993),
      e = a.r(92509),
      f = a.r(38625),
      g = a.r(77674),
      h = a.r(6190),
      i = a.r(29057),
      j = a.r(98070);
    class k extends f.InstrumentationBase {
      _recordFromReq = new WeakMap();
      constructor(a = {}) {
        super(h.PACKAGE_NAME, h.PACKAGE_VERSION, a);
      }
      init() {}
      disable() {
        (super.disable(),
          this._channelSubs.forEach((a) => a.unsubscribe()),
          (this._channelSubs.length = 0));
      }
      enable() {
        (super.enable(),
          (this._channelSubs = this._channelSubs || []),
          this._channelSubs.length > 0 ||
            (this.subscribeToChannel('undici:request:create', this.onRequestCreated.bind(this)),
            this.subscribeToChannel('undici:client:sendHeaders', this.onRequestHeaders.bind(this)),
            this.subscribeToChannel('undici:request:headers', this.onResponseHeaders.bind(this)),
            this.subscribeToChannel('undici:request:trailers', this.onDone.bind(this)),
            this.subscribeToChannel('undici:request:error', this.onError.bind(this))));
      }
      _updateMetricInstruments() {
        this._httpClientDurationHistogram = this.meter.createHistogram(
          'http.client.request.duration',
          {
            description: 'Measures the duration of outbound HTTP requests.',
            unit: 's',
            valueType: g.ValueType.DOUBLE,
            advice: {
              explicitBucketBoundaries: [
                0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5, 7.5, 10,
              ],
            },
          }
        );
      }
      subscribeToChannel(a, b) {
        let c,
          [e, f] = process.version
            .replace('v', '')
            .split('.')
            .map((a) => Number(a));
        if (e > 18 || (18 === e && f >= 19))
          (d.subscribe?.(a, b), (c = () => d.unsubscribe?.(a, b)));
        else {
          let e = d.channel(a);
          (e.subscribe(b), (c = () => e.unsubscribe(b)));
        }
        this._channelSubs.push({ name: a, unsubscribe: c });
      }
      parseRequestHeaders(a) {
        let b = new Map();
        if (Array.isArray(a.headers))
          for (let c = 0; c < a.headers.length; c += 2) {
            let d = a.headers[c],
              e = a.headers[c + 1];
            'string' == typeof d && b.set(d.toLowerCase(), e);
          }
        else if ('string' == typeof a.headers)
          for (let c of a.headers.split('\r\n')) {
            if (!c) continue;
            let a = c.indexOf(':');
            if (-1 === a) continue;
            let d = c.substring(0, a).toLowerCase(),
              e = c.substring(a + 1).trim(),
              f = b.get(d);
            f && Array.isArray(f) ? f.push(e) : f ? b.set(d, [f, e]) : b.set(d, e);
          }
        return b;
      }
      onRequestCreated({ request: a }) {
        let b,
          c,
          d = this.getConfig(),
          h = !1 !== d.enabled;
        if (
          (0, f.safeExecuteInTheMiddle)(
            () => !h || 'CONNECT' === a.method || d.ignoreRequestHook?.(a),
            (a) => a && this._diag.error('caught ignoreRequestHook error: ', a),
            !0
          )
        )
          return;
        let k = (0, j.hrTime)();
        try {
          b = new e.URL(a.path, a.origin);
        } catch (a) {
          this._diag.warn('could not determine url.full:', a);
          return;
        }
        let l = b.protocol.replace(':', ''),
          m = this.getRequestMethod(a.method),
          n = {
            [i.SemanticAttributes.HTTP_REQUEST_METHOD]: m,
            [i.SemanticAttributes.HTTP_REQUEST_METHOD_ORIGINAL]: a.method,
            [i.SemanticAttributes.URL_FULL]: b.toString(),
            [i.SemanticAttributes.URL_PATH]: b.pathname,
            [i.SemanticAttributes.URL_QUERY]: b.search,
            [i.SemanticAttributes.URL_SCHEME]: l,
          },
          o = b.hostname,
          p = b.port || { https: '443', http: '80' }[l];
        ((n[i.SemanticAttributes.SERVER_ADDRESS] = o),
          p && !isNaN(Number(p)) && (n[i.SemanticAttributes.SERVER_PORT] = Number(p)));
        let q = this.parseRequestHeaders(a).get('user-agent');
        if (q) {
          let a = Array.isArray(q) ? q[q.length - 1] : q;
          n[i.SemanticAttributes.USER_AGENT_ORIGINAL] = a;
        }
        let r = (0, f.safeExecuteInTheMiddle)(
          () => d.startSpanHook?.(a),
          (a) => a && this._diag.error('caught startSpanHook error: ', a),
          !0
        );
        r &&
          Object.entries(r).forEach(([a, b]) => {
            n[a] = b;
          });
        let s = g.context.active(),
          t = g.trace.getSpan(s);
        ((c =
          !d.requireParentforSpans || (t && g.trace.isSpanContextValid(t.spanContext()))
            ? this.tracer.startSpan(
                '_OTHER' === m ? 'HTTP' : m,
                { kind: g.SpanKind.CLIENT, attributes: n },
                s
              )
            : g.trace.wrapSpanContext(g.INVALID_SPAN_CONTEXT)),
          (0, f.safeExecuteInTheMiddle)(
            () => d.requestHook?.(c, a),
            (a) => a && this._diag.error('caught requestHook error: ', a),
            !0
          ));
        let u = g.trace.setSpan(g.context.active(), c),
          v = {};
        g.propagation.inject(u, v);
        let w = Object.entries(v);
        for (let b = 0; b < w.length; b++) {
          let [c, d] = w[b];
          'function' == typeof a.addHeader
            ? a.addHeader(c, d)
            : 'string' == typeof a.headers
              ? (a.headers += `${c}: ${d}\r
`)
              : Array.isArray(a.headers) && a.headers.push(c, d);
        }
        this._recordFromReq.set(a, { span: c, attributes: n, startTime: k });
      }
      onRequestHeaders({ request: a, socket: b }) {
        let c = this._recordFromReq.get(a);
        if (!c) return;
        let d = this.getConfig(),
          { span: e } = c,
          { remoteAddress: f, remotePort: g } = b,
          h = {
            [i.SemanticAttributes.NETWORK_PEER_ADDRESS]: f,
            [i.SemanticAttributes.NETWORK_PEER_PORT]: g,
          };
        if (d.headersToSpanAttributes?.requestHeaders) {
          let b = new Set(d.headersToSpanAttributes.requestHeaders.map((a) => a.toLowerCase()));
          for (let [c, d] of this.parseRequestHeaders(a).entries())
            if (b.has(c)) {
              let a = Array.isArray(d) ? d.join(', ') : d;
              h[`http.request.header.${c}`] = a;
            }
        }
        e.setAttributes(h);
      }
      onResponseHeaders({ request: a, response: b }) {
        let c = this._recordFromReq.get(a);
        if (!c) return;
        let { span: d, attributes: e } = c,
          h = { [i.SemanticAttributes.HTTP_RESPONSE_STATUS_CODE]: b.statusCode },
          j = this.getConfig();
        (0, f.safeExecuteInTheMiddle)(
          () => j.responseHook?.(d, { request: a, response: b }),
          (a) => a && this._diag.error('caught responseHook error: ', a),
          !0
        );
        let k = new Set();
        j.headersToSpanAttributes?.responseHeaders &&
          j.headersToSpanAttributes?.responseHeaders.forEach((a) => k.add(a.toLowerCase()));
        for (let a = 0; a < b.headers.length; a += 2) {
          let c = b.headers[a].toString().toLowerCase(),
            d = b.headers[a + 1];
          if (
            (k.has(c) && (h[`http.response.header.${c}`] = d.toString()), 'content-length' === c)
          ) {
            let a = Number(d.toString());
            isNaN(a) || (h['http.response.header.content-length'] = a);
          }
        }
        (d.setAttributes(h),
          d.setStatus({
            code: b.statusCode >= 400 ? g.SpanStatusCode.ERROR : g.SpanStatusCode.UNSET,
          }),
          (c.attributes = Object.assign(e, h)));
      }
      onDone({ request: a }) {
        let b = this._recordFromReq.get(a);
        if (!b) return;
        let { span: c, attributes: d, startTime: e } = b;
        (c.end(), this._recordFromReq.delete(a), this.recordRequestDuration(d, e));
      }
      onError({ request: a, error: b }) {
        let c = this._recordFromReq.get(a);
        if (!c) return;
        let { span: d, attributes: e, startTime: f } = c;
        (d.recordException(b),
          d.setStatus({ code: g.SpanStatusCode.ERROR, message: b.message }),
          d.end(),
          this._recordFromReq.delete(a),
          (e[i.SemanticAttributes.ERROR_TYPE] = b.message),
          this.recordRequestDuration(e, f));
      }
      recordRequestDuration(a, b) {
        let c = {};
        [
          i.SemanticAttributes.HTTP_RESPONSE_STATUS_CODE,
          i.SemanticAttributes.HTTP_REQUEST_METHOD,
          i.SemanticAttributes.SERVER_ADDRESS,
          i.SemanticAttributes.SERVER_PORT,
          i.SemanticAttributes.URL_SCHEME,
          i.SemanticAttributes.ERROR_TYPE,
        ].forEach((b) => {
          b in a && (c[b] = a[b]);
        });
        let d = (0, j.hrTimeToMilliseconds)((0, j.hrTimeDuration)(b, (0, j.hrTime)())) / 1e3;
        this._httpClientDurationHistogram.record(d, c);
      }
      getRequestMethod(a) {
        return a.toUpperCase() in
          {
            CONNECT: !0,
            OPTIONS: !0,
            HEAD: !0,
            GET: !0,
            POST: !0,
            PUT: !0,
            PATCH: !0,
            DELETE: !0,
            TRACE: !0,
          }
          ? a.toUpperCase()
          : '_OTHER';
      }
    }
    c.UndiciInstrumentation = k;
  },
  10462,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.UndiciInstrumentation = void 0));
    var d = a.r(32743);
    Object.defineProperty(c, 'UndiciInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.UndiciInstrumentation;
      },
    });
  },
  52502,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(10462),
      e = a.r(32723),
      f = a.r(28063),
      g = 'NodeFetch',
      h = f.generateInstrumentOnce(g, d.UndiciInstrumentation, (a) =>
        (function (a = {}) {
          return {
            requireParentforSpans: !1,
            ignoreRequestHook: (b) => {
              let c = (function (a, b = '/') {
                  let c = `${a}`;
                  return c.endsWith('/') && b.startsWith('/')
                    ? `${c}${b.slice(1)}`
                    : c.endsWith('/') || b.startsWith('/')
                      ? `${c}${b}`
                      : `${c}/${b.slice(1)}`;
                })(b.origin, b.path),
                d = a.ignoreOutgoingRequests;
              return !!(d && c && d(c));
            },
            startSpanHook: () => ({
              [e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',
            }),
          };
        })(a)
      ),
      i = f.generateInstrumentOnce(`${g}.sentry`, f.SentryNodeFetchInstrumentation, (a) => a);
    c.nativeNodeFetchIntegration = e.defineIntegration((a = {}) => ({
      name: 'NodeFetch',
      setupOnce() {
        ((function (a, b = {}) {
          return 'boolean' == typeof a.spans
            ? a.spans
            : !b.skipOpenTelemetrySetup && e.hasSpansEnabled(b);
        })(a, e.getClient()?.getOptions()) && h(a),
          i(a));
      },
    }));
  },
  42675,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.23.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-fs'));
  },
  79389,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.SYNC_FUNCTIONS = c.CALLBACK_FUNCTIONS = c.PROMISE_FUNCTIONS = void 0),
      (c.PROMISE_FUNCTIONS = [
        'access',
        'appendFile',
        'chmod',
        'chown',
        'copyFile',
        'cp',
        'lchown',
        'link',
        'lstat',
        'lutimes',
        'mkdir',
        'mkdtemp',
        'open',
        'opendir',
        'readdir',
        'readFile',
        'readlink',
        'realpath',
        'rename',
        'rm',
        'rmdir',
        'stat',
        'symlink',
        'truncate',
        'unlink',
        'utimes',
        'writeFile',
      ]),
      (c.CALLBACK_FUNCTIONS = [
        'access',
        'appendFile',
        'chmod',
        'chown',
        'copyFile',
        'cp',
        'exists',
        'lchown',
        'link',
        'lstat',
        'lutimes',
        'mkdir',
        'mkdtemp',
        'open',
        'opendir',
        'readdir',
        'readFile',
        'readlink',
        'realpath',
        'realpath.native',
        'rename',
        'rm',
        'rmdir',
        'stat',
        'symlink',
        'truncate',
        'unlink',
        'utimes',
        'writeFile',
      ]),
      (c.SYNC_FUNCTIONS = [
        'accessSync',
        'appendFileSync',
        'chmodSync',
        'chownSync',
        'copyFileSync',
        'cpSync',
        'existsSync',
        'lchownSync',
        'linkSync',
        'lstatSync',
        'lutimesSync',
        'mkdirSync',
        'mkdtempSync',
        'opendirSync',
        'openSync',
        'readdirSync',
        'readFileSync',
        'readlinkSync',
        'realpathSync',
        'realpathSync.native',
        'renameSync',
        'rmdirSync',
        'rmSync',
        'statSync',
        'symlinkSync',
        'truncateSync',
        'unlinkSync',
        'utimesSync',
        'writeFileSync',
      ]));
  },
  10625,
  (a, b, c) => {
    'use strict';
    function d(a) {
      let b = a.split('.');
      if (!(b.length > 1)) return [a];
      if (2 !== b.length) throw Error(`Invalid member function name ${a}`);
      return b;
    }
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.indexFs = c.splitTwoLevels = void 0),
      (c.splitTwoLevels = d),
      (c.indexFs = function (a, b) {
        if (!b) throw Error(JSON.stringify({ member: b }));
        let [c, e] = d(b);
        return e
          ? { objectToPatch: a[c], functionNameToPatch: e }
          : { objectToPatch: a, functionNameToPatch: c };
      }));
  },
  66099,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.FsInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(98070),
      f = a.r(38625),
      g = a.r(42675),
      h = a.r(79389),
      i = a.r(24361),
      j = a.r(10625);
    function k(a, b) {
      return Object.assign(a, b);
    }
    class l extends f.InstrumentationBase {
      constructor(a = {}) {
        super(g.PACKAGE_NAME, g.PACKAGE_VERSION, a);
      }
      init() {
        return [
          new f.InstrumentationNodeModuleDefinition(
            'fs',
            ['*'],
            (a) => {
              for (let b of h.SYNC_FUNCTIONS) {
                let { objectToPatch: c, functionNameToPatch: d } = (0, j.indexFs)(a, b);
                ((0, f.isWrapped)(c[d]) && this._unwrap(c, d),
                  this._wrap(c, d, this._patchSyncFunction.bind(this, b)));
              }
              for (let b of h.CALLBACK_FUNCTIONS) {
                let { objectToPatch: c, functionNameToPatch: d } = (0, j.indexFs)(a, b);
                if (((0, f.isWrapped)(c[d]) && this._unwrap(c, d), 'exists' === b)) {
                  this._wrap(c, d, this._patchExistsCallbackFunction.bind(this, b));
                  continue;
                }
                this._wrap(c, d, this._patchCallbackFunction.bind(this, b));
              }
              for (let b of h.PROMISE_FUNCTIONS)
                ((0, f.isWrapped)(a.promises[b]) && this._unwrap(a.promises, b),
                  this._wrap(a.promises, b, this._patchPromiseFunction.bind(this, b)));
              return a;
            },
            (a) => {
              if (void 0 !== a) {
                for (let b of h.SYNC_FUNCTIONS) {
                  let { objectToPatch: c, functionNameToPatch: d } = (0, j.indexFs)(a, b);
                  (0, f.isWrapped)(c[d]) && this._unwrap(c, d);
                }
                for (let b of h.CALLBACK_FUNCTIONS) {
                  let { objectToPatch: c, functionNameToPatch: d } = (0, j.indexFs)(a, b);
                  (0, f.isWrapped)(c[d]) && this._unwrap(c, d);
                }
                for (let b of h.PROMISE_FUNCTIONS)
                  (0, f.isWrapped)(a.promises[b]) && this._unwrap(a.promises, b);
              }
            }
          ),
          new f.InstrumentationNodeModuleDefinition(
            'fs/promises',
            ['*'],
            (a) => {
              for (let b of h.PROMISE_FUNCTIONS)
                ((0, f.isWrapped)(a[b]) && this._unwrap(a, b),
                  this._wrap(a, b, this._patchPromiseFunction.bind(this, b)));
              return a;
            },
            (a) => {
              if (void 0 !== a)
                for (let b of h.PROMISE_FUNCTIONS) (0, f.isWrapped)(a[b]) && this._unwrap(a, b);
            }
          ),
        ];
      }
      _patchSyncFunction(a, b) {
        let c = this;
        return k(function (...f) {
          let g = d.context.active();
          if (!c._shouldTrace(g)) return b.apply(this, f);
          if (!1 === c._runCreateHook(a, { args: f }))
            return d.context.with((0, e.suppressTracing)(g), b, this, ...f);
          let h = c.tracer.startSpan(`fs ${a}`);
          try {
            let i = d.context.with((0, e.suppressTracing)(d.trace.setSpan(g, h)), b, this, ...f);
            return (c._runEndHook(a, { args: f, span: h }), i);
          } catch (b) {
            throw (
              h.recordException(b),
              h.setStatus({ message: b.message, code: d.SpanStatusCode.ERROR }),
              c._runEndHook(a, { args: f, span: h, error: b }),
              b
            );
          } finally {
            h.end();
          }
        }, b);
      }
      _patchCallbackFunction(a, b) {
        let c = this;
        return k(function (...f) {
          let g = d.context.active();
          if (!c._shouldTrace(g)) return b.apply(this, f);
          if (!1 === c._runCreateHook(a, { args: f }))
            return d.context.with((0, e.suppressTracing)(g), b, this, ...f);
          let h = f.length - 1,
            i = f[h];
          if ('function' != typeof i) return b.apply(this, f);
          {
            let j = c.tracer.startSpan(`fs ${a}`);
            f[h] = d.context.bind(g, function (b) {
              return (
                b &&
                  (j.recordException(b),
                  j.setStatus({ message: b.message, code: d.SpanStatusCode.ERROR })),
                c._runEndHook(a, { args: f, span: j, error: b }),
                j.end(),
                i.apply(this, arguments)
              );
            });
            try {
              return d.context.with((0, e.suppressTracing)(d.trace.setSpan(g, j)), b, this, ...f);
            } catch (b) {
              throw (
                j.recordException(b),
                j.setStatus({ message: b.message, code: d.SpanStatusCode.ERROR }),
                c._runEndHook(a, { args: f, span: j, error: b }),
                j.end(),
                b
              );
            }
          }
        }, b);
      }
      _patchExistsCallbackFunction(a, b) {
        let c = this,
          f = k(function (...f) {
            let g = d.context.active();
            if (!c._shouldTrace(g)) return b.apply(this, f);
            if (!1 === c._runCreateHook(a, { args: f }))
              return d.context.with((0, e.suppressTracing)(g), b, this, ...f);
            let h = f.length - 1,
              i = f[h];
            if ('function' != typeof i) return b.apply(this, f);
            {
              let j = c.tracer.startSpan(`fs ${a}`);
              f[h] = d.context.bind(g, function () {
                return (c._runEndHook(a, { args: f, span: j }), j.end(), i.apply(this, arguments));
              });
              try {
                return d.context.with((0, e.suppressTracing)(d.trace.setSpan(g, j)), b, this, ...f);
              } catch (b) {
                throw (
                  j.recordException(b),
                  j.setStatus({ message: b.message, code: d.SpanStatusCode.ERROR }),
                  c._runEndHook(a, { args: f, span: j, error: b }),
                  j.end(),
                  b
                );
              }
            }
          }, b),
          g = function (a) {
            return new Promise((b) => f(a, b));
          };
        return (
          Object.defineProperty(g, 'name', { value: a }),
          Object.defineProperty(f, i.promisify.custom, { value: g }),
          f
        );
      }
      _patchPromiseFunction(a, b) {
        let c = this;
        return k(async function (...f) {
          let g = d.context.active();
          if (!c._shouldTrace(g)) return b.apply(this, f);
          if (!1 === c._runCreateHook(a, { args: f }))
            return d.context.with((0, e.suppressTracing)(g), b, this, ...f);
          let h = c.tracer.startSpan(`fs ${a}`);
          try {
            let i = await d.context.with(
              (0, e.suppressTracing)(d.trace.setSpan(g, h)),
              b,
              this,
              ...f
            );
            return (c._runEndHook(a, { args: f, span: h }), i);
          } catch (b) {
            throw (
              h.recordException(b),
              h.setStatus({ message: b.message, code: d.SpanStatusCode.ERROR }),
              c._runEndHook(a, { args: f, span: h, error: b }),
              b
            );
          } finally {
            h.end();
          }
        }, b);
      }
      _runCreateHook(...a) {
        let { createHook: b } = this.getConfig();
        if ('function' == typeof b)
          try {
            return b(...a);
          } catch (a) {
            this._diag.error('caught createHook error', a);
          }
        return !0;
      }
      _runEndHook(...a) {
        let { endHook: b } = this.getConfig();
        if ('function' == typeof b)
          try {
            b(...a);
          } catch (a) {
            this._diag.error('caught endHook error', a);
          }
      }
      _shouldTrace(a) {
        if ((0, e.isTracingSuppressed)(a)) return !1;
        let { requireParentSpan: b } = this.getConfig();
        return (!b || null != d.trace.getSpan(a)) && !0;
      }
    }
    c.FsInstrumentation = l;
  },
  40803,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.FsInstrumentation = void 0));
    var d = a.r(66099);
    Object.defineProperty(c, 'FsInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.FsInstrumentation;
      },
    });
  },
  75287,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(40803),
      e = a.r(32723),
      f = a.r(28063),
      g = 'FileSystem',
      h = e.defineIntegration((a = {}) => ({
        name: g,
        setupOnce() {
          f.generateInstrumentOnce(
            g,
            () =>
              new d.FsInstrumentation({
                requireParentSpan: !0,
                endHook(b, { args: c, span: d, error: f }) {
                  (d.updateName(`fs.${b}`),
                    d.setAttributes({
                      [e.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',
                      [e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',
                    }),
                    a.recordErrorMessagesAsSpanAttributes &&
                      ('string' == typeof c[0] && n.includes(b)
                        ? d.setAttribute('path_argument', c[0])
                        : 'string' == typeof c[0] && 'string' == typeof c[1] && m.includes(b)
                          ? (d.setAttribute('target_argument', c[0]),
                            d.setAttribute('path_argument', c[1]))
                          : 'string' == typeof c[0] && l.includes(b)
                            ? d.setAttribute('prefix_argument', c[0])
                            : 'string' == typeof c[0] && 'string' == typeof c[1] && k.includes(b)
                              ? (d.setAttribute('existing_path_argument', c[0]),
                                d.setAttribute('new_path_argument', c[1]))
                              : 'string' == typeof c[0] && 'string' == typeof c[1] && j.includes(b)
                                ? (d.setAttribute('src_argument', c[0]),
                                  d.setAttribute('dest_argument', c[1]))
                                : 'string' == typeof c[0] &&
                                  'string' == typeof c[1] &&
                                  i.includes(b) &&
                                  (d.setAttribute('old_path_argument', c[0]),
                                  d.setAttribute('new_path_argument', c[1]))),
                    f &&
                      a.recordErrorMessagesAsSpanAttributes &&
                      d.setAttribute('fs_error', f.message));
                },
              })
          )();
        },
      })),
      i = ['rename', 'renameSync'],
      j = ['copyFile', 'cp', 'copyFileSync', 'cpSync'],
      k = ['link', 'linkSync'],
      l = ['mkdtemp', 'mkdtempSync'],
      m = ['symlink', 'symlinkSync'],
      n = [
        'access',
        'appendFile',
        'chmod',
        'chown',
        'exists',
        'mkdir',
        'lchown',
        'lstat',
        'lutimes',
        'open',
        'opendir',
        'readdir',
        'readFile',
        'readlink',
        'realpath',
        'realpath.native',
        'rm',
        'rmdir',
        'stat',
        'truncate',
        'unlink',
        'utimes',
        'writeFile',
        'accessSync',
        'appendFileSync',
        'chmodSync',
        'chownSync',
        'existsSync',
        'lchownSync',
        'lstatSync',
        'lutimesSync',
        'opendirSync',
        'mkdirSync',
        'openSync',
        'readdirSync',
        'readFileSync',
        'readlinkSync',
        'realpathSync',
        'realpathSync.native',
        'rmdirSync',
        'rmSync',
        'statSync',
        'truncateSync',
        'unlinkSync',
        'utimesSync',
        'writeFileSync',
      ];
    c.fsIntegration = h;
  },
  76288,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.ExpressLayerType = void 0),
      (function (a) {
        ((a.ROUTER = 'router'),
          (a.MIDDLEWARE = 'middleware'),
          (a.REQUEST_HANDLER = 'request_handler'));
      })(c.ExpressLayerType || (c.ExpressLayerType = {})));
  },
  99981,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = void 0),
      (function (a) {
        ((a.EXPRESS_TYPE = 'express.type'), (a.EXPRESS_NAME = 'express.name'));
      })(c.AttributeNames || (c.AttributeNames = {})));
  },
  28806,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c._LAYERS_STORE_PROPERTY = c.kLayerPatched = void 0),
      (c.kLayerPatched = Symbol('express-layer-patched')),
      (c._LAYERS_STORE_PROPERTY = '__ot_middlewares'));
  },
  6822,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.getActualMatchedRoute =
        c.getConstructedRoute =
        c.getLayerPath =
        c.asErrorAndMessage =
        c.isLayerIgnored =
        c.getLayerMetadata =
        c.getRouterPath =
        c.storeLayerPath =
          void 0));
    let d = a.r(76288),
      e = a.r(99981),
      f = a.r(28806);
    ((c.storeLayerPath = (a, b) =>
      (!1 === Array.isArray(a[f._LAYERS_STORE_PROPERTY]) &&
        Object.defineProperty(a, f._LAYERS_STORE_PROPERTY, { enumerable: !1, value: [] }),
      void 0 === b)
        ? { isLayerPathStored: !1 }
        : (a[f._LAYERS_STORE_PROPERTY].push(b), { isLayerPathStored: !0 })),
      (c.getRouterPath = (a, b) => {
        let d = b.handle?.stack?.[0];
        return d?.route?.path
          ? `${a}${d.route.path}`
          : d?.handle?.stack
            ? (0, c.getRouterPath)(a, d)
            : a;
      }),
      (c.getLayerMetadata = (a, b, f) => {
        if ('router' === b.name) {
          let g = (0, c.getRouterPath)('', b) || f || a || '/';
          return {
            attributes: {
              [e.AttributeNames.EXPRESS_NAME]: g,
              [e.AttributeNames.EXPRESS_TYPE]: d.ExpressLayerType.ROUTER,
            },
            name: `router - ${g}`,
          };
        }
        return 'bound dispatch' === b.name || 'handle' === b.name
          ? {
              attributes: {
                [e.AttributeNames.EXPRESS_NAME]: (a || f) ?? 'request handler',
                [e.AttributeNames.EXPRESS_TYPE]: d.ExpressLayerType.REQUEST_HANDLER,
              },
              name: `request handler${b.path ? ` - ${a || f}` : ''}`,
            }
          : {
              attributes: {
                [e.AttributeNames.EXPRESS_NAME]: b.name,
                [e.AttributeNames.EXPRESS_TYPE]: d.ExpressLayerType.MIDDLEWARE,
              },
              name: `middleware - ${b.name}`,
            };
      }));
    let g = (a, b) => {
      if ('string' == typeof b) return b === a;
      if (b instanceof RegExp) return b.test(a);
      if ('function' == typeof b) return b(a);
      throw TypeError('Pattern is in unsupported datatype');
    };
    ((c.isLayerIgnored = (a, b, c) => {
      if (Array.isArray(c?.ignoreLayersType) && c?.ignoreLayersType?.includes(b)) return !0;
      if (!1 === Array.isArray(c?.ignoreLayers)) return !1;
      try {
        for (let b of c.ignoreLayers) if (g(a, b)) return !0;
      } catch (a) {}
      return !1;
    }),
      (c.asErrorAndMessage = (a) => (a instanceof Error ? [a, a.message] : [String(a), String(a)])),
      (c.getLayerPath = (a) => {
        let b = a[0];
        return Array.isArray(b) ? b.map((a) => h(a) || '').join(',') : h(b);
      }));
    let h = (a) =>
      'string' == typeof a
        ? a
        : a instanceof RegExp || 'number' == typeof a
          ? a.toString()
          : void 0;
    function i(a) {
      let b = (
        Array.isArray(a[f._LAYERS_STORE_PROPERTY]) ? a[f._LAYERS_STORE_PROPERTY] : []
      ).filter((a) => '/' !== a && '/*' !== a);
      return 1 === b.length && '*' === b[0] ? '*' : b.join('').replace(/\/{2,}/g, '/');
    }
    ((c.getConstructedRoute = i),
      (c.getActualMatchedRoute = function (a) {
        var b;
        let c = Array.isArray(a[f._LAYERS_STORE_PROPERTY]) ? a[f._LAYERS_STORE_PROPERTY] : [];
        if (0 === c.length) return;
        if (c.every((a) => '/' === a)) return '/' === a.originalUrl ? '/' : void 0;
        let d = i(a);
        if (
          '*' === d ||
          (d.includes('/') &&
            (d.includes(',') || d.includes('\\') || d.includes('*') || d.includes('[')))
        )
          return d;
        let e = d.startsWith('/') ? d : `/${d}`;
        return e.length > 0 &&
          (a.originalUrl === e ||
            a.originalUrl.startsWith(e) ||
            (b = e).includes(':') ||
            b.includes('*'))
          ? e
          : void 0;
      }));
  },
  96586,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.52.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-express'));
  },
  88279,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.ExpressInstrumentation = void 0));
    let d = a.r(98070),
      e = a.r(77674),
      f = a.r(76288),
      g = a.r(99981),
      h = a.r(6822),
      i = a.r(96586),
      j = a.r(38625),
      k = a.r(79154),
      l = a.r(28806);
    class m extends j.InstrumentationBase {
      constructor(a = {}) {
        super(i.PACKAGE_NAME, i.PACKAGE_VERSION, a);
      }
      init() {
        return [
          new j.InstrumentationNodeModuleDefinition(
            'express',
            ['>=4.0.0 <6'],
            (a) => {
              let b = 'function' == typeof a?.Router?.prototype?.route,
                c = b ? a.Router.prototype : a.Router;
              return (
                (0, j.isWrapped)(c.route) && this._unwrap(c, 'route'),
                this._wrap(c, 'route', this._getRoutePatch()),
                (0, j.isWrapped)(c.use) && this._unwrap(c, 'use'),
                this._wrap(c, 'use', this._getRouterUsePatch()),
                (0, j.isWrapped)(a.application.use) && this._unwrap(a.application, 'use'),
                this._wrap(a.application, 'use', this._getAppUsePatch(b)),
                a
              );
            },
            (a) => {
              if (void 0 === a) return;
              let b =
                'function' == typeof a?.Router?.prototype?.route ? a.Router.prototype : a.Router;
              (this._unwrap(b, 'route'),
                this._unwrap(b, 'use'),
                this._unwrap(a.application, 'use'));
            }
          ),
        ];
      }
      _getRoutePatch() {
        let a = this;
        return function (b) {
          return function (...c) {
            let d = b.apply(this, c),
              e = this.stack[this.stack.length - 1];
            return (a._applyPatch(e, (0, h.getLayerPath)(c)), d);
          };
        };
      }
      _getRouterUsePatch() {
        let a = this;
        return function (b) {
          return function (...c) {
            let d = b.apply(this, c),
              e = this.stack[this.stack.length - 1];
            return (a._applyPatch(e, (0, h.getLayerPath)(c)), d);
          };
        };
      }
      _getAppUsePatch(a) {
        let b = this;
        return function (c) {
          return function (...d) {
            let e = a ? this.router : this._router,
              f = c.apply(this, d);
            if (e) {
              let a = e.stack[e.stack.length - 1];
              b._applyPatch(a, (0, h.getLayerPath)(d));
            }
            return f;
          };
        };
      }
      _applyPatch(a, b) {
        let c = this;
        !0 !== a[l.kLayerPatched] &&
          ((a[l.kLayerPatched] = !0),
          this._wrap(a, 'handle', (i) => {
            if (4 === i.length) return i;
            let m = function (m, n) {
              let { isLayerPathStored: o } = (0, h.storeLayerPath)(m, b),
                p = (0, h.getConstructedRoute)(m),
                q = (0, h.getActualMatchedRoute)(m),
                r = { [k.ATTR_HTTP_ROUTE]: q },
                s = (0, h.getLayerMetadata)(p, a, b),
                t = s.attributes[g.AttributeNames.EXPRESS_TYPE],
                u = (0, d.getRPCMetadata)(e.context.active());
              if (
                (u?.type === d.RPCType.HTTP && (u.route = q),
                (0, h.isLayerIgnored)(s.name, t, c.getConfig()))
              )
                return (
                  t === f.ExpressLayerType.MIDDLEWARE && m[l._LAYERS_STORE_PROPERTY].pop(),
                  i.apply(this, arguments)
                );
              if (void 0 === e.trace.getSpan(e.context.active())) return i.apply(this, arguments);
              let v = c._getSpanName({ request: m, layerType: t, route: p }, s.name),
                w = c.tracer.startSpan(v, { attributes: Object.assign(r, s.attributes) }),
                x = e.context.active(),
                y = e.trace.setSpan(x, w),
                { requestHook: z } = c.getConfig();
              z &&
                (0, j.safeExecuteInTheMiddle)(
                  () => z(w, { request: m, layerType: t, route: p }),
                  (a) => {
                    a && e.diag.error('express instrumentation: request hook failed', a);
                  },
                  !0
                );
              let A = !1;
              s.attributes[g.AttributeNames.EXPRESS_TYPE] === f.ExpressLayerType.ROUTER &&
                (w.end(), (A = !0), (y = x));
              let B = () => {
                  !1 === A && ((A = !0), w.end());
                },
                C = Array.from(arguments),
                D = C.findIndex((a) => 'function' == typeof a);
              D >= 0 &&
                (arguments[D] = function () {
                  let a = arguments[0],
                    b = ![void 0, null, 'route', 'router'].includes(a);
                  if (!A && b) {
                    let [b, c] = (0, h.asErrorAndMessage)(a);
                    (w.recordException(b),
                      w.setStatus({ code: e.SpanStatusCode.ERROR, message: c }));
                  }
                  (!1 === A && ((A = !0), m.res?.removeListener('finish', B), w.end()),
                    !(m.route && b) && o && m[l._LAYERS_STORE_PROPERTY].pop());
                  let c = C[D];
                  return e.context.bind(x, c).apply(this, arguments);
                });
              try {
                return e.context.bind(y, i).apply(this, arguments);
              } catch (c) {
                let [a, b] = (0, h.asErrorAndMessage)(c);
                throw (
                  w.recordException(a),
                  w.setStatus({ code: e.SpanStatusCode.ERROR, message: b }),
                  c
                );
              } finally {
                A || n.once('finish', B);
              }
            };
            for (let a in i)
              Object.defineProperty(m, a, {
                get: () => i[a],
                set(b) {
                  i[a] = b;
                },
              });
            return m;
          }));
      }
      _getSpanName(a, b) {
        let { spanNameHook: c } = this.getConfig();
        if (!(c instanceof Function)) return b;
        try {
          return c(a, b) ?? b;
        } catch (a) {
          return (
            e.diag.error('express instrumentation: error calling span name rewrite hook', a),
            b
          );
        }
      }
    }
    c.ExpressInstrumentation = m;
  },
  35473,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = c.ExpressLayerType = c.ExpressInstrumentation = void 0));
    var d = a.r(88279);
    Object.defineProperty(c, 'ExpressInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.ExpressInstrumentation;
      },
    });
    var e = a.r(76288);
    Object.defineProperty(c, 'ExpressLayerType', {
      enumerable: !0,
      get: function () {
        return e.ExpressLayerType;
      },
    });
    var f = a.r(99981);
    Object.defineProperty(c, 'AttributeNames', {
      enumerable: !0,
      get: function () {
        return f.AttributeNames;
      },
    });
  },
  60418,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.DEBUG_BUILD = 'undefined' == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__));
  },
  82685,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(35473),
      e = a.r(32723),
      f = a.r(28063),
      g = a.r(60418),
      h = 'Express',
      i = f.generateInstrumentOnce(
        h,
        () =>
          new d.ExpressInstrumentation({
            requestHook: (a) =>
              (function (a) {
                f.addOriginToSpan(a, 'auto.http.otel.express');
                let b = e.spanToJSON(a).data,
                  c = b['express.type'];
                c && a.setAttribute(e.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${c}.express`);
                let d = b['express.name'];
                'string' == typeof d && a.updateName(d);
              })(a),
            spanNameHook: (a, b) =>
              (function (a, b) {
                if (e.getIsolationScope() === e.getDefaultIsolationScope())
                  return (
                    g.DEBUG_BUILD &&
                      e.debug.warn(
                        'Isolation scope is still default isolation scope - skipping setting transactionName'
                      ),
                    b
                  );
                if ('request_handler' === a.layerType) {
                  let b = a.request,
                    c = b.method ? b.method.toUpperCase() : 'GET';
                  e.getIsolationScope().setTransactionName(`${c} ${a.route}`);
                }
                return b;
              })(a, b),
          })
      ),
      j = e.defineIntegration(() => ({
        name: h,
        setupOnce() {
          i();
        },
      }));
    function k(a) {
      return function (b, c, d, f) {
        let g = e.httpRequestToRequestData(c);
        (e.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest: g }),
          (
            a?.shouldHandleError ||
            function (a) {
              return (
                (function (a) {
                  let b = a.status || a.statusCode || a.status_code || a.output?.statusCode;
                  return b ? parseInt(b, 10) : 500;
                })(a) >= 500
              );
            }
          )(b) &&
            (d.sentry = e.captureException(b, { mechanism: { type: 'middleware', handled: !1 } })),
          f(b));
      };
    }
    ((c.expressErrorHandler = k),
      (c.expressIntegration = j),
      (c.instrumentExpress = i),
      (c.setupExpressErrorHandler = function (a, b) {
        (a.use(function (a, b, c) {
          let d = e.httpRequestToRequestData(a);
          (e.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest: d }), c());
        }),
          a.use(k(b)),
          f.ensureIsWrapped(a.use, 'express'));
      }));
  },
  50716,
  (a, b, c) => {
    'use strict';
    function d(a, b, c) {
      (a instanceof RegExp && (a = e(a, c)), b instanceof RegExp && (b = e(b, c)));
      var d = f(a, b, c);
      return (
        d && {
          start: d[0],
          end: d[1],
          pre: c.slice(0, d[0]),
          body: c.slice(d[0] + a.length, d[1]),
          post: c.slice(d[1] + b.length),
        }
      );
    }
    function e(a, b) {
      var c = b.match(a);
      return c ? c[0] : null;
    }
    function f(a, b, c) {
      var d,
        e,
        f,
        g,
        h,
        i = c.indexOf(a),
        j = c.indexOf(b, i + 1),
        k = i;
      if (i >= 0 && j > 0) {
        if (a === b) return [i, j];
        for (d = [], f = c.length; k >= 0 && !h; )
          (k == i
            ? (d.push(k), (i = c.indexOf(a, k + 1)))
            : 1 == d.length
              ? (h = [d.pop(), j])
              : ((e = d.pop()) < f && ((f = e), (g = j)), (j = c.indexOf(b, k + 1))),
            (k = i < j && i >= 0 ? i : j));
        d.length && (h = [f, g]);
      }
      return h;
    }
    ((b.exports = d), (d.range = f));
  },
  17430,
  (a, b, c) => {
    var d = a.r(50716);
    b.exports = function (a) {
      return a
        ? ('{}' === a.substr(0, 2) && (a = '\\{\\}' + a.substr(2)),
          (function a(b, c) {
            var e = [],
              f = d('{', '}', b);
            if (!f) return [b];
            var h = f.pre,
              i = f.post.length ? a(f.post, !1) : [''];
            if (/\$$/.test(f.pre))
              for (var k = 0; k < i.length; k++) {
                var p = h + '{' + f.body + '}' + i[k];
                e.push(p);
              }
            else {
              var q = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(f.body),
                r = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(f.body),
                s = q || r,
                t = f.body.indexOf(',') >= 0;
              if (!s && !t)
                return f.post.match(/,(?!,).*\}/)
                  ? a((b = f.pre + '{' + f.body + g + f.post))
                  : [b];
              if (s) u = f.body.split(/\.\./);
              else if (
                1 ===
                  (u = (function a(b) {
                    if (!b) return [''];
                    var c = [],
                      e = d('{', '}', b);
                    if (!e) return b.split(',');
                    var f = e.pre,
                      g = e.body,
                      h = e.post,
                      i = f.split(',');
                    i[i.length - 1] += '{' + g + '}';
                    var j = a(h);
                    return (
                      h.length && ((i[i.length - 1] += j.shift()), i.push.apply(i, j)),
                      c.push.apply(c, i),
                      c
                    );
                  })(f.body)).length &&
                1 === (u = a(u[0], !1).map(l)).length
              )
                return i.map(function (a) {
                  return f.pre + u[0] + a;
                });
              if (s) {
                var u,
                  v,
                  w,
                  x = j(u[0]),
                  y = j(u[1]),
                  z = Math.max(u[0].length, u[1].length),
                  A = 3 == u.length ? Math.abs(j(u[2])) : 1,
                  B = n;
                y < x && ((A *= -1), (B = o));
                var C = u.some(m);
                v = [];
                for (var D = x; B(D, y); D += A) {
                  if (r) '\\' === (w = String.fromCharCode(D)) && (w = '');
                  else if (((w = String(D)), C)) {
                    var E = z - w.length;
                    if (E > 0) {
                      var F = Array(E + 1).join('0');
                      w = D < 0 ? '-' + F + w.slice(1) : F + w;
                    }
                  }
                  v.push(w);
                }
              } else {
                v = [];
                for (var G = 0; G < u.length; G++) v.push.apply(v, a(u[G], !1));
              }
              for (var G = 0; G < v.length; G++)
                for (var k = 0; k < i.length; k++) {
                  var p = h + v[G] + i[k];
                  (!c || s || p) && e.push(p);
                }
            }
            return e;
          })(
            a
              .split('\\\\')
              .join(e)
              .split('\\{')
              .join(f)
              .split('\\}')
              .join(g)
              .split('\\,')
              .join(h)
              .split('\\.')
              .join(i),
            !0
          ).map(k))
        : [];
    };
    var e = '\0SLASH' + Math.random() + '\0',
      f = '\0OPEN' + Math.random() + '\0',
      g = '\0CLOSE' + Math.random() + '\0',
      h = '\0COMMA' + Math.random() + '\0',
      i = '\0PERIOD' + Math.random() + '\0';
    function j(a) {
      return parseInt(a, 10) == a ? parseInt(a, 10) : a.charCodeAt(0);
    }
    function k(a) {
      return a
        .split(e)
        .join('\\')
        .split(f)
        .join('{')
        .split(g)
        .join('}')
        .split(h)
        .join(',')
        .split(i)
        .join('.');
    }
    function l(a) {
      return '{' + a + '}';
    }
    function m(a) {
      return /^-?0\d/.test(a);
    }
    function n(a, b) {
      return a <= b;
    }
    function o(a, b) {
      return a >= b;
    }
  },
  16069,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.assertValidPattern = void 0),
      (c.assertValidPattern = (a) => {
        if ('string' != typeof a) throw TypeError('invalid pattern');
        if (a.length > 65536) throw TypeError('pattern is too long');
      }));
  },
  37858,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.parseClass = void 0));
    let d = {
        '[:alnum:]': ['\\p{L}\\p{Nl}\\p{Nd}', !0],
        '[:alpha:]': ['\\p{L}\\p{Nl}', !0],
        '[:ascii:]': ['\\x00-\\x7f', !1],
        '[:blank:]': ['\\p{Zs}\\t', !0],
        '[:cntrl:]': ['\\p{Cc}', !0],
        '[:digit:]': ['\\p{Nd}', !0],
        '[:graph:]': ['\\p{Z}\\p{C}', !0, !0],
        '[:lower:]': ['\\p{Ll}', !0],
        '[:print:]': ['\\p{C}', !0],
        '[:punct:]': ['\\p{P}', !0],
        '[:space:]': ['\\p{Z}\\t\\r\\n\\v\\f', !0],
        '[:upper:]': ['\\p{Lu}', !0],
        '[:word:]': ['\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}', !0],
        '[:xdigit:]': ['A-Fa-f0-9', !1],
      },
      e = (a) => a.replace(/[[\]\\-]/g, '\\$&'),
      f = (a) => a.join('');
    c.parseClass = (a, b) => {
      if ('[' !== a.charAt(b)) throw Error('not in a brace expression');
      let c = [],
        g = [],
        h = b + 1,
        i = !1,
        j = !1,
        k = !1,
        l = !1,
        m = b,
        n = '';
      a: for (; h < a.length; ) {
        let f = a.charAt(h);
        if (('!' === f || '^' === f) && h === b + 1) {
          ((l = !0), h++);
          continue;
        }
        if (']' === f && i && !k) {
          m = h + 1;
          break;
        }
        if (((i = !0), '\\' === f && !k)) {
          ((k = !0), h++);
          continue;
        }
        if ('[' === f && !k) {
          for (let [e, [f, i, k]] of Object.entries(d))
            if (a.startsWith(e, h)) {
              if (n) return ['$.', !1, a.length - b, !0];
              ((h += e.length), k ? g.push(f) : c.push(f), (j = j || i));
              continue a;
            }
        }
        if (((k = !1), n)) {
          (f > n ? c.push(e(n) + '-' + e(f)) : f === n && c.push(e(f)), (n = ''), h++);
          continue;
        }
        if (a.startsWith('-]', h + 1)) {
          (c.push(e(f + '-')), (h += 2));
          continue;
        }
        if (a.startsWith('-', h + 1)) {
          ((n = f), (h += 2));
          continue;
        }
        (c.push(e(f)), h++);
      }
      if (m < h) return ['', !1, 0, !1];
      if (!c.length && !g.length) return ['$.', !1, a.length - b, !0];
      if (0 === g.length && 1 === c.length && /^\\?.$/.test(c[0]) && !l)
        return [
          (2 === c[0].length ? c[0].slice(-1) : c[0]).replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&'),
          !1,
          m - b,
          !1,
        ];
      let o = '[' + (l ? '^' : '') + f(c) + ']',
        p = '[' + (l ? '' : '^') + f(g) + ']';
      return [c.length && g.length ? '(' + o + '|' + p + ')' : c.length ? o : p, j, m - b, !0];
    };
  },
  53165,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.unescape = void 0),
      (c.unescape = (a, { windowsPathsNoEscape: b = !1 } = {}) =>
        b
          ? a.replace(/\[([^\/\\])\]/g, '$1')
          : a.replace(/((?!\\).|^)\[([^\/\\])\]/g, '$1$2').replace(/\\([^\/])/g, '$1')));
  },
  32647,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.AST = void 0));
    let d = a.r(37858),
      e = a.r(53165),
      f = new Set(['!', '?', '+', '*', '@']),
      g = (a) => f.has(a),
      h = '(?!\\.)',
      i = new Set(['[', '.']),
      j = new Set(['..', '.']),
      k = new Set('().*{}+?[]^$\\!'),
      l = (a) => a.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&'),
      m = '[^/]',
      n = m + '*?',
      o = m + '+?';
    class p {
      type;
      #a;
      #b;
      #c = !1;
      #d = [];
      #e;
      #f;
      #g;
      #h = !1;
      #i;
      #j;
      #k = !1;
      constructor(a, b, c = {}) {
        ((this.type = a),
          a && (this.#b = !0),
          (this.#e = b),
          (this.#a = this.#e ? this.#e.#a : this),
          (this.#i = this.#a === this ? c : this.#a.#i),
          (this.#g = this.#a === this ? [] : this.#a.#g),
          '!' !== a || this.#a.#h || this.#g.push(this),
          (this.#f = this.#e ? this.#e.#d.length : 0));
      }
      get hasMagic() {
        if (void 0 !== this.#b) return this.#b;
        for (let a of this.#d)
          if ('string' != typeof a && (a.type || a.hasMagic)) return (this.#b = !0);
        return this.#b;
      }
      toString() {
        return void 0 !== this.#j
          ? this.#j
          : this.type
            ? (this.#j = this.type + '(' + this.#d.map((a) => String(a)).join('|') + ')')
            : (this.#j = this.#d.map((a) => String(a)).join(''));
      }
      #l() {
        let a;
        if (this !== this.#a) throw Error('should only call on root');
        if (this.#h) return this;
        for (this.toString(), this.#h = !0; (a = this.#g.pop()); ) {
          if ('!' !== a.type) continue;
          let b = a,
            c = b.#e;
          for (; c; ) {
            for (let d = b.#f + 1; !c.type && d < c.#d.length; d++)
              for (let b of a.#d) {
                if ('string' == typeof b) throw Error('string part in extglob AST??');
                b.copyIn(c.#d[d]);
              }
            c = (b = c).#e;
          }
        }
        return this;
      }
      push(...a) {
        for (let b of a)
          if ('' !== b) {
            if ('string' != typeof b && !(b instanceof p && b.#e === this))
              throw Error('invalid part: ' + b);
            this.#d.push(b);
          }
      }
      toJSON() {
        let a =
          null === this.type
            ? this.#d.slice().map((a) => ('string' == typeof a ? a : a.toJSON()))
            : [this.type, ...this.#d.map((a) => a.toJSON())];
        return (
          this.isStart() && !this.type && a.unshift([]),
          this.isEnd() && (this === this.#a || (this.#a.#h && this.#e?.type === '!')) && a.push({}),
          a
        );
      }
      isStart() {
        if (this.#a === this) return !0;
        if (!this.#e?.isStart()) return !1;
        if (0 === this.#f) return !0;
        let a = this.#e;
        for (let b = 0; b < this.#f; b++) {
          let c = a.#d[b];
          if (!(c instanceof p && '!' === c.type)) return !1;
        }
        return !0;
      }
      isEnd() {
        if (this.#a === this || this.#e?.type === '!') return !0;
        if (!this.#e?.isEnd()) return !1;
        if (!this.type) return this.#e?.isEnd();
        let a = this.#e ? this.#e.#d.length : 0;
        return this.#f === a - 1;
      }
      copyIn(a) {
        'string' == typeof a ? this.push(a) : this.push(a.clone(this));
      }
      clone(a) {
        let b = new p(this.type, a);
        for (let a of this.#d) b.copyIn(a);
        return b;
      }
      static #m(a, b, c, d) {
        let e = !1,
          f = !1,
          h = -1,
          i = !1;
        if (null === b.type) {
          let j = c,
            k = '';
          for (; j < a.length; ) {
            let c = a.charAt(j++);
            if (e || '\\' === c) {
              ((e = !e), (k += c));
              continue;
            }
            if (f) {
              (j === h + 1
                ? ('^' === c || '!' === c) && (i = !0)
                : ']' !== c || (j === h + 2 && i) || (f = !1),
                (k += c));
              continue;
            }
            if ('[' === c) {
              ((f = !0), (h = j), (i = !1), (k += c));
              continue;
            }
            if (!d.noext && g(c) && '(' === a.charAt(j)) {
              (b.push(k), (k = ''));
              let e = new p(c, b);
              ((j = p.#m(a, e, j, d)), b.push(e));
              continue;
            }
            k += c;
          }
          return (b.push(k), j);
        }
        let j = c + 1,
          k = new p(null, b),
          l = [],
          m = '';
        for (; j < a.length; ) {
          let c = a.charAt(j++);
          if (e || '\\' === c) {
            ((e = !e), (m += c));
            continue;
          }
          if (f) {
            (j === h + 1
              ? ('^' === c || '!' === c) && (i = !0)
              : ']' !== c || (j === h + 2 && i) || (f = !1),
              (m += c));
            continue;
          }
          if ('[' === c) {
            ((f = !0), (h = j), (i = !1), (m += c));
            continue;
          }
          if (g(c) && '(' === a.charAt(j)) {
            (k.push(m), (m = ''));
            let b = new p(c, k);
            (k.push(b), (j = p.#m(a, b, j, d)));
            continue;
          }
          if ('|' === c) {
            (k.push(m), (m = ''), l.push(k), (k = new p(null, b)));
            continue;
          }
          if (')' === c)
            return (
              '' === m && 0 === b.#d.length && (b.#k = !0),
              k.push(m),
              (m = ''),
              b.push(...l, k),
              j
            );
          m += c;
        }
        return ((b.type = null), (b.#b = void 0), (b.#d = [a.substring(c - 1)]), j);
      }
      static fromGlob(a, b = {}) {
        let c = new p(null, void 0, b);
        return (p.#m(a, c, 0, b), c);
      }
      toMMPattern() {
        if (this !== this.#a) return this.#a.toMMPattern();
        let a = this.toString(),
          [b, c, d, e] = this.toRegExpSource();
        return d ||
          this.#b ||
          (this.#i.nocase && !this.#i.nocaseMagicOnly && a.toUpperCase() !== a.toLowerCase())
          ? Object.assign(RegExp(`^${b}$`, (this.#i.nocase ? 'i' : '') + (e ? 'u' : '')), {
              _src: b,
              _glob: a,
            })
          : c;
      }
      get options() {
        return this.#i;
      }
      toRegExpSource(a) {
        let b = a ?? !!this.#i.dot;
        if ((this.#a === this && this.#l(), !this.type)) {
          let c = this.isStart() && this.isEnd(),
            d = this.#d
              .map((b) => {
                let [d, e, f, g] = 'string' == typeof b ? p.#n(b, this.#b, c) : b.toRegExpSource(a);
                return ((this.#b = this.#b || f), (this.#c = this.#c || g), d);
              })
              .join(''),
            f = '';
          if (
            this.isStart() &&
            'string' == typeof this.#d[0] &&
            !(1 === this.#d.length && j.has(this.#d[0]))
          ) {
            let c =
                (b && i.has(d.charAt(0))) ||
                (d.startsWith('\\.') && i.has(d.charAt(2))) ||
                (d.startsWith('\\.\\.') && i.has(d.charAt(4))),
              e = !b && !a && i.has(d.charAt(0));
            f = c ? '(?!(?:^|/)\\.\\.?(?:$|/))' : e ? h : '';
          }
          let g = '';
          return (
            this.isEnd() && this.#a.#h && this.#e?.type === '!' && (g = '(?:$|\\/)'),
            [f + d + g, (0, e.unescape)(d), (this.#b = !!this.#b), this.#c]
          );
        }
        let c = '*' === this.type || '+' === this.type,
          d = '!' === this.type ? '(?:(?!(?:' : '(?:',
          f = this.#o(b);
        if (this.isStart() && this.isEnd() && !f && '!' !== this.type) {
          let a = this.toString();
          return (
            (this.#d = [a]),
            (this.type = null),
            (this.#b = void 0),
            [a, (0, e.unescape)(this.toString()), !1, !1]
          );
        }
        let g = !c || a || b || !h ? '' : this.#o(!0);
        (g === f && (g = ''), g && (f = `(?:${f})(?:${g})*?`));
        return [
          '!' === this.type && this.#k
            ? (this.isStart() && !b ? h : '') + o
            : d +
              f +
              ('!' === this.type
                ? '))' + (!this.isStart() || b || a ? '' : h) + n + ')'
                : '@' === this.type
                  ? ')'
                  : '?' === this.type
                    ? ')?'
                    : '+' === this.type && g
                      ? ')'
                      : '*' === this.type && g
                        ? ')?'
                        : `)${this.type}`),
          (0, e.unescape)(f),
          (this.#b = !!this.#b),
          this.#c,
        ];
      }
      #o(a) {
        return this.#d
          .map((b) => {
            if ('string' == typeof b) throw Error('string type in extglob ast??');
            let [c, d, e, f] = b.toRegExpSource(a);
            return ((this.#c = this.#c || f), c);
          })
          .filter((a) => !(this.isStart() && this.isEnd()) || !!a)
          .join('|');
      }
      static #n(a, b, c = !1) {
        let f = !1,
          g = '',
          h = !1;
        for (let e = 0; e < a.length; e++) {
          let i = a.charAt(e);
          if (f) {
            ((f = !1), (g += (k.has(i) ? '\\' : '') + i));
            continue;
          }
          if ('\\' === i) {
            e === a.length - 1 ? (g += '\\\\') : (f = !0);
            continue;
          }
          if ('[' === i) {
            let [c, f, i, j] = (0, d.parseClass)(a, e);
            if (i) {
              ((g += c), (h = h || f), (e += i - 1), (b = b || j));
              continue;
            }
          }
          if ('*' === i) {
            (c && '*' === a ? (g += o) : (g += n), (b = !0));
            continue;
          }
          if ('?' === i) {
            ((g += m), (b = !0));
            continue;
          }
          g += l(i);
        }
        return [g, (0, e.unescape)(a), !!b, h];
      }
    }
    c.AST = p;
  },
  75079,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.escape = void 0),
      (c.escape = (a, { windowsPathsNoEscape: b = !1 } = {}) =>
        b ? a.replace(/[?*()[\]]/g, '[$&]') : a.replace(/[?*()[\]\\]/g, '\\$&')));
  },
  23464,
  (a, b, c) => {
    'use strict';
    var d =
      (a.e && a.e.__importDefault) ||
      function (a) {
        return a && a.__esModule ? a : { default: a };
      };
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.unescape =
        c.escape =
        c.AST =
        c.Minimatch =
        c.match =
        c.makeRe =
        c.braceExpand =
        c.defaults =
        c.filter =
        c.GLOBSTAR =
        c.sep =
        c.minimatch =
          void 0));
    let e = d(a.r(17430)),
      f = a.r(16069),
      g = a.r(32647),
      h = a.r(75079),
      i = a.r(53165);
    c.minimatch = (a, b, c = {}) => (
      (0, f.assertValidPattern)(b),
      (!!c.nocomment || '#' !== b.charAt(0)) && new z(b, c).match(a)
    );
    let j = /^\*+([^+@!?\*\[\(]*)$/,
      k = /^\*+\.\*+$/,
      l = (a) => !a.startsWith('.') && a.includes('.'),
      m = (a) => '.' !== a && '..' !== a && a.includes('.'),
      n = /^\.\*+$/,
      o = (a) => '.' !== a && '..' !== a && a.startsWith('.'),
      p = /^\*+$/,
      q = (a) => 0 !== a.length && !a.startsWith('.'),
      r = (a) => 0 !== a.length && '.' !== a && '..' !== a,
      s = /^\?+([^+@!?\*\[\(]*)?$/,
      t = ([a]) => {
        let b = a.length;
        return (a) => a.length === b && !a.startsWith('.');
      },
      u = ([a]) => {
        let b = a.length;
        return (a) => a.length === b && '.' !== a && '..' !== a;
      },
      v =
        'object' == typeof process && process
          ? ('object' == typeof process.env &&
              process.env &&
              process.env.__MINIMATCH_TESTING_PLATFORM__) ||
            process.platform
          : 'posix',
      w = { win32: { sep: '\\' }, posix: { sep: '/' } };
    ((c.sep = 'win32' === v ? w.win32.sep : w.posix.sep),
      (c.minimatch.sep = c.sep),
      (c.GLOBSTAR = Symbol('globstar **')),
      (c.minimatch.GLOBSTAR = c.GLOBSTAR));
    ((c.filter =
      (a, b = {}) =>
      (d) =>
        (0, c.minimatch)(d, a, b)),
      (c.minimatch.filter = c.filter));
    let x = (a, b = {}) => Object.assign({}, a, b);
    ((c.defaults = (a) => {
      if (!a || 'object' != typeof a || !Object.keys(a).length) return c.minimatch;
      let b = c.minimatch;
      return Object.assign((c, d, e = {}) => b(c, d, x(a, e)), {
        Minimatch: class extends b.Minimatch {
          constructor(b, c = {}) {
            super(b, x(a, c));
          }
          static defaults(c) {
            return b.defaults(x(a, c)).Minimatch;
          }
        },
        AST: class extends b.AST {
          constructor(b, c, d = {}) {
            super(b, c, x(a, d));
          }
          static fromGlob(c, d = {}) {
            return b.AST.fromGlob(c, x(a, d));
          }
        },
        unescape: (c, d = {}) => b.unescape(c, x(a, d)),
        escape: (c, d = {}) => b.escape(c, x(a, d)),
        filter: (c, d = {}) => b.filter(c, x(a, d)),
        defaults: (c) => b.defaults(x(a, c)),
        makeRe: (c, d = {}) => b.makeRe(c, x(a, d)),
        braceExpand: (c, d = {}) => b.braceExpand(c, x(a, d)),
        match: (c, d, e = {}) => b.match(c, d, x(a, e)),
        sep: b.sep,
        GLOBSTAR: c.GLOBSTAR,
      });
    }),
      (c.minimatch.defaults = c.defaults),
      (c.braceExpand = (a, b = {}) =>
        ((0, f.assertValidPattern)(a), b.nobrace || !/\{(?:(?!\{).)*\}/.test(a))
          ? [a]
          : (0, e.default)(a)),
      (c.minimatch.braceExpand = c.braceExpand),
      (c.makeRe = (a, b = {}) => new z(a, b).makeRe()),
      (c.minimatch.makeRe = c.makeRe),
      (c.match = (a, b, c = {}) => {
        let d = new z(b, c);
        return ((a = a.filter((a) => d.match(a))), d.options.nonull && !a.length && a.push(b), a);
      }),
      (c.minimatch.match = c.match));
    let y = /[?*]|[+@!]\(.*?\)|\[|\]/;
    class z {
      options;
      set;
      pattern;
      windowsPathsNoEscape;
      nonegate;
      negate;
      comment;
      empty;
      preserveMultipleSlashes;
      partial;
      globSet;
      globParts;
      nocase;
      isWindows;
      platform;
      windowsNoMagicRoot;
      regexp;
      constructor(a, b = {}) {
        ((0, f.assertValidPattern)(a),
          (b = b || {}),
          (this.options = b),
          (this.pattern = a),
          (this.platform = b.platform || v),
          (this.isWindows = 'win32' === this.platform),
          (this.windowsPathsNoEscape = !!b.windowsPathsNoEscape || !1 === b.allowWindowsEscape),
          this.windowsPathsNoEscape && (this.pattern = this.pattern.replace(/\\/g, '/')),
          (this.preserveMultipleSlashes = !!b.preserveMultipleSlashes),
          (this.regexp = null),
          (this.negate = !1),
          (this.nonegate = !!b.nonegate),
          (this.comment = !1),
          (this.empty = !1),
          (this.partial = !!b.partial),
          (this.nocase = !!this.options.nocase),
          (this.windowsNoMagicRoot =
            void 0 !== b.windowsNoMagicRoot
              ? b.windowsNoMagicRoot
              : !!(this.isWindows && this.nocase)),
          (this.globSet = []),
          (this.globParts = []),
          (this.set = []),
          this.make());
      }
      hasMagic() {
        if (this.options.magicalBraces && this.set.length > 1) return !0;
        for (let a of this.set) for (let b of a) if ('string' != typeof b) return !0;
        return !1;
      }
      debug() {}
      make() {
        let a = this.pattern,
          b = this.options;
        if (!b.nocomment && '#' === a.charAt(0)) {
          this.comment = !0;
          return;
        }
        if (!a) {
          this.empty = !0;
          return;
        }
        (this.parseNegate(),
          (this.globSet = [...new Set(this.braceExpand())]),
          b.debug && (this.debug = (...a) => console.error(...a)),
          this.debug(this.pattern, this.globSet));
        let c = this.globSet.map((a) => this.slashSplit(a));
        ((this.globParts = this.preprocess(c)), this.debug(this.pattern, this.globParts));
        let d = this.globParts.map((a, b, c) => {
          if (this.isWindows && this.windowsNoMagicRoot) {
            let b = '' === a[0] && '' === a[1] && ('?' === a[2] || !y.test(a[2])) && !y.test(a[3]),
              c = /^[a-z]:/i.test(a[0]);
            if (b) return [...a.slice(0, 4), ...a.slice(4).map((a) => this.parse(a))];
            if (c) return [a[0], ...a.slice(1).map((a) => this.parse(a))];
          }
          return a.map((a) => this.parse(a));
        });
        if (
          (this.debug(this.pattern, d),
          (this.set = d.filter((a) => -1 === a.indexOf(!1))),
          this.isWindows)
        )
          for (let a = 0; a < this.set.length; a++) {
            let b = this.set[a];
            '' === b[0] &&
              '' === b[1] &&
              '?' === this.globParts[a][2] &&
              'string' == typeof b[3] &&
              /^[a-z]:$/i.test(b[3]) &&
              (b[2] = '?');
          }
        this.debug(this.pattern, this.set);
      }
      preprocess(a) {
        if (this.options.noglobstar)
          for (let b = 0; b < a.length; b++)
            for (let c = 0; c < a[b].length; c++) '**' === a[b][c] && (a[b][c] = '*');
        let { optimizationLevel: b = 1 } = this.options;
        return (
          b >= 2
            ? ((a = this.firstPhasePreProcess(a)), (a = this.secondPhasePreProcess(a)))
            : (a = b >= 1 ? this.levelOneOptimize(a) : this.adjascentGlobstarOptimize(a)),
          a
        );
      }
      adjascentGlobstarOptimize(a) {
        return a.map((a) => {
          let b = -1;
          for (; -1 !== (b = a.indexOf('**', b + 1)); ) {
            let c = b;
            for (; '**' === a[c + 1]; ) c++;
            c !== b && a.splice(b, c - b);
          }
          return a;
        });
      }
      levelOneOptimize(a) {
        return a.map((a) =>
          0 ===
          (a = a.reduce((a, b) => {
            let c = a[a.length - 1];
            return (
              ('**' === b && '**' === c) ||
                ('..' === b && c && '..' !== c && '.' !== c && '**' !== c ? a.pop() : a.push(b)),
              a
            );
          }, [])).length
            ? ['']
            : a
        );
      }
      levelTwoFileOptimize(a) {
        Array.isArray(a) || (a = this.slashSplit(a));
        let b = !1;
        do {
          if (((b = !1), !this.preserveMultipleSlashes)) {
            for (let c = 1; c < a.length - 1; c++) {
              let d = a[c];
              (1 !== c || '' !== d || '' !== a[0]) &&
                ('.' === d || '' === d) &&
                ((b = !0), a.splice(c, 1), c--);
            }
            '.' === a[0] && 2 === a.length && ('.' === a[1] || '' === a[1]) && ((b = !0), a.pop());
          }
          let c = 0;
          for (; -1 !== (c = a.indexOf('..', c + 1)); ) {
            let d = a[c - 1];
            d && '.' !== d && '..' !== d && '**' !== d && ((b = !0), a.splice(c - 1, 2), (c -= 2));
          }
        } while (b);
        return 0 === a.length ? [''] : a;
      }
      firstPhasePreProcess(a) {
        let b = !1;
        do
          for (let c of ((b = !1), a)) {
            let d = -1;
            for (; -1 !== (d = c.indexOf('**', d + 1)); ) {
              let e = d;
              for (; '**' === c[e + 1]; ) e++;
              e > d && c.splice(d + 1, e - d);
              let f = c[d + 1],
                g = c[d + 2],
                h = c[d + 3];
              if ('..' !== f || !g || '.' === g || '..' === g || !h || '.' === h || '..' === h)
                continue;
              ((b = !0), c.splice(d, 1));
              let i = c.slice(0);
              ((i[d] = '**'), a.push(i), d--);
            }
            if (!this.preserveMultipleSlashes) {
              for (let a = 1; a < c.length - 1; a++) {
                let d = c[a];
                (1 !== a || '' !== d || '' !== c[0]) &&
                  ('.' === d || '' === d) &&
                  ((b = !0), c.splice(a, 1), a--);
              }
              '.' === c[0] &&
                2 === c.length &&
                ('.' === c[1] || '' === c[1]) &&
                ((b = !0), c.pop());
            }
            let e = 0;
            for (; -1 !== (e = c.indexOf('..', e + 1)); ) {
              let a = c[e - 1];
              if (a && '.' !== a && '..' !== a && '**' !== a) {
                b = !0;
                let a = 1 === e && '**' === c[e + 1] ? ['.'] : [];
                (c.splice(e - 1, 2, ...a), 0 === c.length && c.push(''), (e -= 2));
              }
            }
          }
        while (b);
        return a;
      }
      secondPhasePreProcess(a) {
        for (let b = 0; b < a.length - 1; b++)
          for (let c = b + 1; c < a.length; c++) {
            let d = this.partsMatch(a[b], a[c], !this.preserveMultipleSlashes);
            if (d) {
              ((a[b] = []), (a[c] = d));
              break;
            }
          }
        return a.filter((a) => a.length);
      }
      partsMatch(a, b, c = !1) {
        let d = 0,
          e = 0,
          f = [],
          g = '';
        for (; d < a.length && e < b.length; )
          if (a[d] === b[e]) (f.push('b' === g ? b[e] : a[d]), d++, e++);
          else if (c && '**' === a[d] && b[e] === a[d + 1]) (f.push(a[d]), d++);
          else if (c && '**' === b[e] && a[d] === b[e + 1]) (f.push(b[e]), e++);
          else if (
            '*' === a[d] &&
            b[e] &&
            (this.options.dot || !b[e].startsWith('.')) &&
            '**' !== b[e]
          ) {
            if ('b' === g) return !1;
            ((g = 'a'), f.push(a[d]), d++, e++);
          } else {
            if (
              '*' !== b[e] ||
              !a[d] ||
              (!this.options.dot && a[d].startsWith('.')) ||
              '**' === a[d] ||
              'a' === g
            )
              return !1;
            ((g = 'b'), f.push(b[e]), d++, e++);
          }
        return a.length === b.length && f;
      }
      parseNegate() {
        if (this.nonegate) return;
        let a = this.pattern,
          b = !1,
          c = 0;
        for (let d = 0; d < a.length && '!' === a.charAt(d); d++) ((b = !b), c++);
        (c && (this.pattern = a.slice(c)), (this.negate = b));
      }
      matchOne(a, b, d = !1) {
        let e = this.options;
        if (this.isWindows) {
          let c = 'string' == typeof a[0] && /^[a-z]:$/i.test(a[0]),
            d = !c && '' === a[0] && '' === a[1] && '?' === a[2] && /^[a-z]:$/i.test(a[3]),
            e = 'string' == typeof b[0] && /^[a-z]:$/i.test(b[0]),
            f =
              !e &&
              '' === b[0] &&
              '' === b[1] &&
              '?' === b[2] &&
              'string' == typeof b[3] &&
              /^[a-z]:$/i.test(b[3]),
            g = d ? 3 : c ? 0 : void 0,
            h = f ? 3 : e ? 0 : void 0;
          if ('number' == typeof g && 'number' == typeof h) {
            let [c, d] = [a[g], b[h]];
            c.toLowerCase() === d.toLowerCase() &&
              ((b[h] = c), h > g ? (b = b.slice(h)) : g > h && (a = a.slice(g)));
          }
        }
        let { optimizationLevel: f = 1 } = this.options;
        (f >= 2 && (a = this.levelTwoFileOptimize(a)),
          this.debug('matchOne', this, { file: a, pattern: b }),
          this.debug('matchOne', a.length, b.length));
        for (var g = 0, h = 0, i = a.length, j = b.length; g < i && h < j; g++, h++) {
          let f;
          this.debug('matchOne loop');
          var k = b[h],
            l = a[g];
          if ((this.debug(b, k, l), !1 === k)) return !1;
          if (k === c.GLOBSTAR) {
            this.debug('GLOBSTAR', [b, k, l]);
            var m = g,
              n = h + 1;
            if (n === j) {
              for (this.debug('** at the end'); g < i; g++)
                if ('.' === a[g] || '..' === a[g] || (!e.dot && '.' === a[g].charAt(0))) return !1;
              return !0;
            }
            for (; m < i; ) {
              var o = a[m];
              if (
                (this.debug('\nglobstar while', a, m, b, n, o),
                this.matchOne(a.slice(m), b.slice(n), d))
              )
                return (this.debug('globstar found match!', m, i, o), !0);
              if ('.' === o || '..' === o || (!e.dot && '.' === o.charAt(0))) {
                this.debug('dot detected!', a, m, b, n);
                break;
              }
              (this.debug('globstar swallow a segment, and continue'), m++);
            }
            if (d && (this.debug('\n>>> no match, partial?', a, m, b, n), m === i)) return !0;
            return !1;
          }
          if (
            ('string' == typeof k
              ? ((f = l === k), this.debug('string match', k, l, f))
              : ((f = k.test(l)), this.debug('pattern match', k, l, f)),
            !f)
          )
            return !1;
        }
        if (g === i && h === j) return !0;
        if (g === i) return d;
        if (h === j) return g === i - 1 && '' === a[g];
        throw Error('wtf?');
      }
      braceExpand() {
        return (0, c.braceExpand)(this.pattern, this.options);
      }
      parse(a) {
        let b;
        (0, f.assertValidPattern)(a);
        let d = this.options;
        if ('**' === a) return c.GLOBSTAR;
        if ('' === a) return '';
        let e = null;
        (b = a.match(p))
          ? (e = d.dot ? r : q)
          : (b = a.match(j))
            ? (e = (
                d.nocase
                  ? d.dot
                    ? (a) => ((a = a.toLowerCase()), (b) => b.toLowerCase().endsWith(a))
                    : (a) => (
                        (a = a.toLowerCase()),
                        (b) => !b.startsWith('.') && b.toLowerCase().endsWith(a)
                      )
                  : d.dot
                    ? (a) => (b) => b.endsWith(a)
                    : (a) => (b) => !b.startsWith('.') && b.endsWith(a)
              )(b[1]))
            : (b = a.match(s))
              ? (e = (
                  d.nocase
                    ? d.dot
                      ? ([a, b = '']) => {
                          let c = u([a]);
                          return b
                            ? ((b = b.toLowerCase()), (a) => c(a) && a.toLowerCase().endsWith(b))
                            : c;
                        }
                      : ([a, b = '']) => {
                          let c = t([a]);
                          return b
                            ? ((b = b.toLowerCase()), (a) => c(a) && a.toLowerCase().endsWith(b))
                            : c;
                        }
                    : d.dot
                      ? ([a, b = '']) => {
                          let c = u([a]);
                          return b ? (a) => c(a) && a.endsWith(b) : c;
                        }
                      : ([a, b = '']) => {
                          let c = t([a]);
                          return b ? (a) => c(a) && a.endsWith(b) : c;
                        }
                )(b))
              : (b = a.match(k))
                ? (e = d.dot ? m : l)
                : (b = a.match(n)) && (e = o);
        let h = g.AST.fromGlob(a, this.options).toMMPattern();
        return (e && 'object' == typeof h && Reflect.defineProperty(h, 'test', { value: e }), h);
      }
      makeRe() {
        if (this.regexp || !1 === this.regexp) return this.regexp;
        let a = this.set;
        if (!a.length) return ((this.regexp = !1), this.regexp);
        let b = this.options,
          d = b.noglobstar
            ? '[^/]*?'
            : b.dot
              ? '(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?'
              : '(?:(?!(?:\\/|^)\\.).)*?',
          e = new Set(b.nocase ? ['i'] : []),
          f = a
            .map((a) => {
              let b = a.map((a) => {
                if (a instanceof RegExp) for (let b of a.flags.split('')) e.add(b);
                return 'string' == typeof a
                  ? a.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
                  : a === c.GLOBSTAR
                    ? c.GLOBSTAR
                    : a._src;
              });
              return (
                b.forEach((a, e) => {
                  let f = b[e + 1],
                    g = b[e - 1];
                  a === c.GLOBSTAR &&
                    g !== c.GLOBSTAR &&
                    (void 0 === g
                      ? void 0 !== f && f !== c.GLOBSTAR
                        ? (b[e + 1] = '(?:\\/|' + d + '\\/)?' + f)
                        : (b[e] = d)
                      : void 0 === f
                        ? (b[e - 1] = g + '(?:\\/|' + d + ')?')
                        : f !== c.GLOBSTAR &&
                          ((b[e - 1] = g + '(?:\\/|\\/' + d + '\\/)' + f),
                          (b[e + 1] = c.GLOBSTAR)));
                }),
                b.filter((a) => a !== c.GLOBSTAR).join('/')
              );
            })
            .join('|'),
          [g, h] = a.length > 1 ? ['(?:', ')'] : ['', ''];
        ((f = '^' + g + f + h + '$'), this.negate && (f = '^(?!' + f + ').+$'));
        try {
          this.regexp = new RegExp(f, [...e].join(''));
        } catch (a) {
          this.regexp = !1;
        }
        return this.regexp;
      }
      slashSplit(a) {
        return this.preserveMultipleSlashes
          ? a.split('/')
          : this.isWindows && /^\/\/[^\/]+/.test(a)
            ? ['', ...a.split(/\/+/)]
            : a.split(/\/+/);
      }
      match(a, b = this.partial) {
        if ((this.debug('match', a, this.pattern), this.comment)) return !1;
        if (this.empty) return '' === a;
        if ('/' === a && b) return !0;
        let c = this.options;
        this.isWindows && (a = a.split('\\').join('/'));
        let d = this.slashSplit(a);
        this.debug(this.pattern, 'split', d);
        let e = this.set;
        this.debug(this.pattern, 'set', e);
        let f = d[d.length - 1];
        if (!f) for (let a = d.length - 2; !f && a >= 0; a--) f = d[a];
        for (let a = 0; a < e.length; a++) {
          let g = e[a],
            h = d;
          if ((c.matchBase && 1 === g.length && (h = [f]), this.matchOne(h, g, b))) {
            if (c.flipNegate) return !0;
            return !this.negate;
          }
        }
        return !c.flipNegate && this.negate;
      }
      static defaults(a) {
        return c.minimatch.defaults(a).Minimatch;
      }
    }
    c.Minimatch = z;
    var A = a.r(32647);
    Object.defineProperty(c, 'AST', {
      enumerable: !0,
      get: function () {
        return A.AST;
      },
    });
    var B = a.r(75079);
    Object.defineProperty(c, 'escape', {
      enumerable: !0,
      get: function () {
        return B.escape;
      },
    });
    var C = a.r(53165);
    (Object.defineProperty(c, 'unescape', {
      enumerable: !0,
      get: function () {
        return C.unescape;
      },
    }),
      (c.minimatch.AST = g.AST),
      (c.minimatch.Minimatch = z),
      (c.minimatch.escape = h.escape),
      (c.minimatch.unescape = i.unescape));
  },
  91237,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77652),
      e = a.r(77674),
      f = a.r(98070),
      g = a.r(38625),
      h = a.r(79154),
      i = a.r(23464),
      j = '@fastify/otel',
      k = [
        'onRequest',
        'preParsing',
        'preValidation',
        'preHandler',
        'preSerialization',
        'onSend',
        'onResponse',
        'onError',
      ],
      l = {
        HOOK_NAME: 'hook.name',
        FASTIFY_TYPE: 'fastify.type',
        HOOK_CALLBACK_NAME: 'hook.callback.name',
        ROOT: 'fastify.root',
      },
      m = { ROUTE: 'route-hook', INSTANCE: 'hook', HANDLER: 'request-handler' },
      n = 'anonymous',
      o = Symbol('fastify otel instance'),
      p = Symbol('fastify otel request spans'),
      q = Symbol('fastify otel request context'),
      r = Symbol('fastify otel addhook original'),
      s = Symbol('fastify otel setnotfound original'),
      t = Symbol('fastify otel ignore path');
    class u extends g.InstrumentationBase {
      constructor(a) {
        if (
          (super(j, '0.8.0', a),
          (this.servername = a?.servername ?? process.env.OTEL_SERVICE_NAME ?? 'fastify'),
          (this[t] = null),
          (this._logger = e.diag.createComponentLogger({ namespace: j })),
          a?.ignorePaths != null || null != process.env.OTEL_FASTIFY_IGNORE_PATHS)
        ) {
          let b = a?.ignorePaths ?? process.env.OTEL_FASTIFY_IGNORE_PATHS;
          if (('string' != typeof b || 0 === b.length) && 'function' != typeof b)
            throw TypeError('ignorePaths must be a string or a function');
          let c = i.minimatch;
          this[t] = (a) => ('function' == typeof b ? b(a) : c(a.url, b));
        }
      }
      enable() {
        if (void 0 === this._handleInitialization && this.getConfig().registerOnInitialization) {
          let a = this.plugin();
          ((this._handleInitialization = (b) => {
            b.fastify.register(a);
          }),
            d.default.subscribe('fastify.initialization', this._handleInitialization));
        }
        return super.enable();
      }
      disable() {
        return (
          this._handleInitialization &&
            (d.default.unsubscribe('fastify.initialization', this._handleInitialization),
            (this._handleInitialization = void 0)),
          super.disable()
        );
      }
      init() {
        return [];
      }
      plugin() {
        let a = this;
        return (
          (b[Symbol.for('skip-override')] = !0),
          (b[Symbol.for('fastify.display-name')] = '@fastify/otel'),
          (b[Symbol.for('plugin-meta')] = { fastify: '>=4.0.0 <6', name: '@fastify/otel' }),
          b
        );
        function b(b, c, d) {
          function g(a, b, c, d) {
            let f = a[p];
            (null != f &&
              (b.statusCode < 500 && f.setStatus({ code: e.SpanStatusCode.OK, message: 'OK' }),
              f.setAttributes({ [h.ATTR_HTTP_RESPONSE_STATUS_CODE]: b.statusCode }),
              f.end()),
              (a[p] = null),
              d(null, c));
          }
          function i(a, b, c, d) {
            let f = a[p];
            (null != f &&
              (f.setStatus({ code: e.SpanStatusCode.ERROR, message: c.message }),
              f.recordException(c)),
              d());
          }
          function j(a, b = {}) {
            return function (...c) {
              let d = this[o],
                [f] = c;
              if (!1 === d.isEnabled()) return a.call(this, ...c);
              let g = f[q] ?? e.context.active(),
                h = d.tracer.startSpan(
                  `handler - ${a.name?.length > 0 ? a.name : (this.pluginName ?? n)}`,
                  { attributes: b },
                  g
                );
              return e.context.with(
                e.trace.setSpan(g, h),
                function () {
                  try {
                    let b = a.call(this, ...c);
                    if ('function' == typeof b?.then)
                      return b.then(
                        (a) => (h.end(), a),
                        (a) => (
                          h.setStatus({ code: e.SpanStatusCode.ERROR, message: a.message }),
                          h.recordException(a),
                          h.end(),
                          Promise.reject(a)
                        )
                      );
                    return (h.end(), b);
                  } catch (a) {
                    throw (
                      h.setStatus({ code: e.SpanStatusCode.ERROR, message: a.message }),
                      h.recordException(a),
                      h.end(),
                      a
                    );
                  }
                },
                this
              );
            };
          }
          (b.decorate(o, a),
            b.decorate(r, b.addHook),
            b.decorate(s, b.setNotFoundHandler),
            b.decorateRequest('opentelemetry', function () {
              let b = this[q];
              return {
                span: this[p],
                tracer: a.tracer,
                context: b,
                inject: (a, c) => e.propagation.inject(b, a, c),
                extract: (a, c) => e.propagation.extract(b, a, c),
              };
            }),
            b.decorateRequest(p, null),
            b.decorateRequest(q, null),
            b.addHook('onRoute', function (c) {
              if (a[t]?.(c) === !0)
                return void a._logger.debug(
                  `Ignoring route instrumentation ${c.method} ${c.url} because it matches the ignore path`
                );
              for (let a of k)
                if (null != c[a]) {
                  let d = c[a];
                  if ('function' == typeof d)
                    c[a] = j(d, {
                      [h.ATTR_SERVICE_NAME]: b[o].servername,
                      [l.HOOK_NAME]: `${this.pluginName} - route -> ${a}`,
                      [l.FASTIFY_TYPE]: m.ROUTE,
                      [h.ATTR_HTTP_ROUTE]: c.url,
                      [l.HOOK_CALLBACK_NAME]: d.name?.length > 0 ? d.name : n,
                    });
                  else if (Array.isArray(d)) {
                    let e = [];
                    for (let f of d)
                      e.push(
                        j(f, {
                          [h.ATTR_SERVICE_NAME]: b[o].servername,
                          [l.HOOK_NAME]: `${this.pluginName} - route -> ${a}`,
                          [l.FASTIFY_TYPE]: m.ROUTE,
                          [h.ATTR_HTTP_ROUTE]: c.url,
                          [l.HOOK_CALLBACK_NAME]: f.name?.length > 0 ? f.name : n,
                        })
                      );
                    c[a] = e;
                  }
                }
              (null != c.onSend
                ? (c.onSend = Array.isArray(c.onSend) ? [...c.onSend, g] : [c.onSend, g])
                : (c.onSend = g),
                null != c.onError
                  ? (c.onError = Array.isArray(c.onError) ? [...c.onError, i] : [c.onError, i])
                  : (c.onError = i),
                (c.handler = j(c.handler, {
                  [h.ATTR_SERVICE_NAME]: b[o].servername,
                  [l.HOOK_NAME]: `${this.pluginName} - route-handler`,
                  [l.FASTIFY_TYPE]: m.HANDLER,
                  [h.ATTR_HTTP_ROUTE]: c.url,
                  [l.HOOK_CALLBACK_NAME]: c.handler.name.length > 0 ? c.handler.name : n,
                })));
            }),
            b.addHook('onRequest', function (a, c, d) {
              if (!1 === this[o].isEnabled()) return d();
              if (this[o][t]?.({ url: a.url, method: a.method }) === !0)
                return (
                  this[o]._logger.debug(
                    `Ignoring request ${a.method} ${a.url} because it matches the ignore path`
                  ),
                  d()
                );
              let g = e.context.active();
              null == e.trace.getSpan(g) && (g = e.propagation.extract(g, a.headers));
              let i = f.getRPCMetadata(g);
              null != a.routeOptions.url &&
                i?.type === f.RPCType.HTTP &&
                (i.route = a.routeOptions.url);
              let j = this[o].tracer.startSpan(
                'request',
                {
                  attributes: {
                    [h.ATTR_SERVICE_NAME]: b[o].servername,
                    [l.ROOT]: '@fastify/otel',
                    [h.ATTR_HTTP_ROUTE]: a.url,
                    [h.ATTR_HTTP_REQUEST_METHOD]: a.method,
                  },
                },
                g
              );
              ((a[q] = e.trace.setSpan(g, j)),
                (a[p] = j),
                e.context.with(a[q], () => {
                  d();
                }));
            }),
            b.addHook('onResponse', function (a, b, c) {
              let d = a[p];
              (null != d &&
                (d.setStatus({ code: e.SpanStatusCode.OK, message: 'OK' }),
                d.setAttributes({ [h.ATTR_HTTP_RESPONSE_STATUS_CODE]: 404 }),
                d.end()),
                (a[p] = null),
                c());
            }),
            (b.addHook = function (a, c) {
              let d = this[r];
              return k.includes(a)
                ? d.call(
                    this,
                    a,
                    j(c, {
                      [h.ATTR_SERVICE_NAME]: b[o].servername,
                      [l.HOOK_NAME]: `${this.pluginName} - ${a}`,
                      [l.FASTIFY_TYPE]: m.INSTANCE,
                      [l.HOOK_CALLBACK_NAME]: c.name?.length > 0 ? c.name : n,
                    })
                  )
                : d.call(this, a, c);
            }),
            (b.setNotFoundHandler = function (a, c) {
              let d = this[s];
              'function' == typeof a
                ? ((c = j(a, {
                    [h.ATTR_SERVICE_NAME]: b[o].servername,
                    [l.HOOK_NAME]: `${this.pluginName} - not-found-handler`,
                    [l.FASTIFY_TYPE]: m.INSTANCE,
                    [l.HOOK_CALLBACK_NAME]: a.name?.length > 0 ? a.name : n,
                  })),
                  d.call(this, c))
                : (null != a.preValidation &&
                    (a.preValidation = j(a.preValidation, {
                      [h.ATTR_SERVICE_NAME]: b[o].servername,
                      [l.HOOK_NAME]: `${this.pluginName} - not-found-handler - preValidation`,
                      [l.FASTIFY_TYPE]: m.INSTANCE,
                      [l.HOOK_CALLBACK_NAME]:
                        a.preValidation.name?.length > 0 ? a.preValidation.name : n,
                    })),
                  null != a.preHandler &&
                    (a.preHandler = j(a.preHandler, {
                      [h.ATTR_SERVICE_NAME]: b[o].servername,
                      [l.HOOK_NAME]: `${this.pluginName} - not-found-handler - preHandler`,
                      [l.FASTIFY_TYPE]: m.INSTANCE,
                      [l.HOOK_CALLBACK_NAME]: a.preHandler.name?.length > 0 ? a.preHandler.name : n,
                    })),
                  (c = j(c, {
                    [h.ATTR_SERVICE_NAME]: b[o].servername,
                    [l.HOOK_NAME]: `${this.pluginName} - not-found-handler`,
                    [l.FASTIFY_TYPE]: m.INSTANCE,
                    [l.HOOK_CALLBACK_NAME]: c.name?.length > 0 ? c.name : n,
                  })),
                  d.call(this, a, c));
            }),
            d());
        }
      }
    }
    c.FastifyOtelInstrumentation = u;
  },
  98526,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.AttributeNames = void 0),
      (function (a) {
        ((a.FASTIFY_NAME = 'fastify.name'),
          (a.FASTIFY_TYPE = 'fastify.type'),
          (a.HOOK_NAME = 'hook.name'),
          (a.PLUGIN_NAME = 'plugin.name'));
      })(c.AttributeNames || (c.AttributeNames = {})),
      (c.FastifyTypes = void 0),
      (function (a) {
        ((a.MIDDLEWARE = 'middleware'), (a.REQUEST_HANDLER = 'request_handler'));
      })(c.FastifyTypes || (c.FastifyTypes = {})),
      (c.FastifyNames = void 0),
      (function (a) {
        ((a.MIDDLEWARE = 'middleware'), (a.REQUEST_HANDLER = 'request handler'));
      })(c.FastifyNames || (c.FastifyNames = {})));
  },
  90506,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.spanRequestSymbol = Symbol('opentelemetry.instrumentation.fastify.request_active_span')));
  },
  14015,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(90506);
    function f(a) {
      return (
        ('object' == typeof a &&
          a &&
          'function' == typeof Object.getOwnPropertyDescriptor(a, 'then')?.value) ||
        !1
      );
    }
    ((c.endSpan = function (a, b) {
      let c = a[e.spanRequestSymbol] || [];
      c.length &&
        (c.forEach((a) => {
          (b &&
            (a.setStatus({ code: d.SpanStatusCode.ERROR, message: b.message }),
            a.recordException(b)),
            a.end());
        }),
        delete a[e.spanRequestSymbol]);
    }),
      (c.safeExecuteInTheMiddleMaybePromise = function (a, b, c) {
        let d, e;
        try {
          ((e = a()),
            f(e) &&
              e.then(
                (a) => b(void 0, a),
                (a) => b(a)
              ));
        } catch (a) {
          d = a;
        } finally {
          if (!f(e) && (b(d, e), d && 1)) throw d;
          return e;
        }
      }),
      (c.startSpan = function (a, b, c, d = {}) {
        let f = b.startSpan(c, { attributes: d }),
          g = a[e.spanRequestSymbol] || [];
        return (
          g.push(f),
          Object.defineProperty(a, e.spanRequestSymbol, {
            enumerable: !1,
            configurable: !0,
            value: g,
          }),
          f
        );
      }));
  },
  49984,
  (a, b, c) => {
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }));
    let d = a.r(77674),
      e = a.r(98070),
      f = a.r(38625),
      g = a.r(79154),
      h = a.r(32723),
      i = a.r(98526),
      j = a.r(14015),
      k = 'anonymous',
      l = new Set([
        'onTimeout',
        'onRequest',
        'preParsing',
        'preValidation',
        'preSerialization',
        'preHandler',
        'onSend',
        'onResponse',
        'onError',
      ]);
    class m extends f.InstrumentationBase {
      constructor(a = {}) {
        super('@sentry/instrumentation-fastify-v3', '0.1.0', a);
      }
      init() {
        return [
          new f.InstrumentationNodeModuleDefinition('fastify', ['>=3.0.0 <4'], (a) =>
            this._patchConstructor(a)
          ),
        ];
      }
      _hookOnRequest() {
        let a = this;
        return function (b, c, f) {
          if (!a.isEnabled()) return f();
          a._wrap(c, 'send', a._patchSend());
          let g = e.getRPCMetadata(d.context.active()),
            i = b.routeOptions ? b.routeOptions.url : b.routerPath;
          i && g?.type === e.RPCType.HTTP && (g.route = i);
          let j = b.method || 'GET';
          (h.getIsolationScope().setTransactionName(`${j} ${i}`), f());
        };
      }
      _wrapHandler(a, b, c, e) {
        let f = this;
        return (
          this._diag.debug('Patching fastify route.handler function'),
          function (...g) {
            if (!f.isEnabled()) return c.apply(this, g);
            let h = c.name || a || k,
              l = `${i.FastifyNames.MIDDLEWARE} - ${h}`,
              m = g[1],
              n = j.startSpan(m, f.tracer, l, {
                [i.AttributeNames.FASTIFY_TYPE]: i.FastifyTypes.MIDDLEWARE,
                [i.AttributeNames.PLUGIN_NAME]: a,
                [i.AttributeNames.HOOK_NAME]: b,
              }),
              o = e && g[g.length - 1];
            return (
              o &&
                (g[g.length - 1] = function (...a) {
                  (j.endSpan(m), o.apply(this, a));
                }),
              d.context.with(d.trace.setSpan(d.context.active(), n), () =>
                j.safeExecuteInTheMiddleMaybePromise(
                  () => c.apply(this, g),
                  (a) => {
                    (a instanceof Error &&
                      (n.setStatus({ code: d.SpanStatusCode.ERROR, message: a.message }),
                      n.recordException(a)),
                      e || j.endSpan(m));
                  }
                )
              )
            );
          }
        );
      }
      _wrapAddHook() {
        let a = this;
        return (
          this._diag.debug('Patching fastify server.addHook function'),
          function (b) {
            return function (...c) {
              let d = c[0],
                e = c[1],
                f = this.pluginName;
              if (!l.has(d)) return b.apply(this, c);
              let g =
                'function' == typeof c[c.length - 1] && 'AsyncFunction' !== e.constructor.name;
              return b.apply(this, [d, a._wrapHandler(f, d, e, g)]);
            };
          }
        );
      }
      _patchConstructor(a) {
        let b = this;
        function c(...d) {
          let e = a.fastify.apply(this, d);
          return (
            e.addHook('onRequest', b._hookOnRequest()),
            e.addHook('preHandler', b._hookPreHandler()),
            (function () {
              let a = h.getClient();
              a &&
                a.on('spanStart', (a) => {
                  n(a);
                });
            })(),
            b._wrap(e, 'addHook', b._wrapAddHook()),
            e
          );
        }
        return (
          void 0 !== a.errorCodes && (c.errorCodes = a.errorCodes),
          (c.fastify = c),
          (c.default = c),
          c
        );
      }
      _patchSend() {
        let a = this;
        return (
          this._diag.debug('Patching fastify reply.send function'),
          function (b) {
            return function (...c) {
              let d = c[0];
              return a.isEnabled()
                ? f.safeExecuteInTheMiddle(
                    () => b.apply(this, c),
                    (a) => {
                      (!a && d instanceof Error && (a = d), j.endSpan(this, a));
                    }
                  )
                : b.apply(this, c);
            };
          }
        );
      }
      _hookPreHandler() {
        let a = this;
        return (
          this._diag.debug('Patching fastify preHandler function'),
          function (b, c, e) {
            if (!a.isEnabled()) return e();
            let h = b.routeOptions?.handler || b.context?.handler,
              l = h?.name.startsWith('bound ') ? h.name.substring(6) : h?.name,
              m = `${i.FastifyNames.REQUEST_HANDLER} - ${l || this.pluginName || k}`,
              o = {
                [i.AttributeNames.PLUGIN_NAME]: this.pluginName,
                [i.AttributeNames.FASTIFY_TYPE]: i.FastifyTypes.REQUEST_HANDLER,
                [g.SEMATTRS_HTTP_ROUTE]: b.routeOptions ? b.routeOptions.url : b.routerPath,
              };
            l && (o[i.AttributeNames.FASTIFY_NAME] = l);
            let p = j.startSpan(c, a.tracer, m, o);
            n(p);
            let { requestHook: q } = a.getConfig();
            return (
              q &&
                f.safeExecuteInTheMiddle(
                  () => q(p, { request: b }),
                  (b) => {
                    b && a._diag.error('request hook failed', b);
                  },
                  !0
                ),
              d.context.with(d.trace.setSpan(d.context.active(), p), () => {
                e();
              })
            );
          }
        );
      }
    }
    function n(a) {
      let b = h.spanToJSON(a).data,
        c = b['fastify.type'];
      if (b[h.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !c) return;
      a.setAttributes({
        [h.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',
        [h.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${c}.fastify`,
      });
      let d = b['fastify.name'] || b['plugin.name'] || b['hook.name'];
      if ('string' == typeof d) {
        let b = d.replace(/^fastify -> /, '').replace(/^@fastify\/otel -> /, '');
        a.updateName(b);
      }
    }
    c.FastifyInstrumentationV3 = m;
  },
  20845,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77652),
      e = a.r(32723),
      f = a.r(28063),
      g = a.r(60418),
      h = a.r(91237),
      i = a.r(49984),
      j = 'Fastify',
      k = f.generateInstrumentOnce(`${j}.v3`, () => new i.FastifyInstrumentationV3());
    function l() {
      let a = e.getClient();
      if (a) return a.getIntegrationByName(j);
    }
    function m(a, b, c, d) {
      let f = l()?.getShouldHandleError() || o;
      if (
        ('diagnostics-channel' === d && (this.diagnosticsChannelExists = !0),
        this.diagnosticsChannelExists && 'onError-hook' === d)
      ) {
        g.DEBUG_BUILD &&
          e.debug.warn(
            'Fastify error handler was already registered via diagnostics channel.',
            'You can safely remove `setupFastifyErrorHandler` call and set `shouldHandleError` on the integration options.'
          );
        return;
      }
      f(a, b, c) && e.captureException(a, { mechanism: { handled: !1, type: 'fastify' } });
    }
    let n = f.generateInstrumentOnce(`${j}.v5`, () => {
      let a = new h.FastifyOtelInstrumentation(),
        b = a.plugin();
      return (
        d.subscribe('fastify.initialization', (a) => {
          let c = a.fastify;
          c?.register(b).after((a) => {
            a
              ? g.DEBUG_BUILD && e.debug.error('Failed to setup Fastify instrumentation', a)
              : ((function () {
                  let a = e.getClient();
                  a &&
                    a.on('spanStart', (a) => {
                      p(a);
                    });
                })(),
                c &&
                  c.addHook('onRequest', async (a, b) => {
                    if (a.opentelemetry) {
                      let { span: b } = a.opentelemetry();
                      b && p(b);
                    }
                    let c = a.routeOptions?.url,
                      d = a.method || 'GET';
                    e.getIsolationScope().setTransactionName(`${d} ${c}`);
                  }));
          });
        }),
        d.subscribe('tracing:fastify.request.handler:error', (a) => {
          let { error: b, request: c, reply: d } = a;
          m.call(m, b, c, d, 'diagnostics-channel');
        }),
        a
      );
    });
    function o(a, b, c) {
      let d = c.statusCode;
      return d >= 500 || d <= 299;
    }
    function p(a) {
      let b = e.spanToJSON(a),
        c = b.description,
        d = b.data,
        f = d['fastify.type'],
        g = 'hook' === f,
        h = f === c?.startsWith('handler -'),
        i = 'request' === c || 'request-handler' === f;
      if (d[e.SEMANTIC_ATTRIBUTE_SENTRY_OP] || (!h && !i && !g)) return;
      a.setAttributes({
        [e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',
        [e.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${g ? 'hook' : h ? 'middleware' : i ? 'request-handler' : '<unknown>'}.fastify`,
      });
      let j = d['fastify.name'] || d['plugin.name'] || d['hook.name'];
      if ('string' == typeof j) {
        let b = j.replace(/^fastify -> /, '').replace(/^@fastify\/otel -> /, '');
        a.updateName(b);
      }
    }
    ((c.fastifyIntegration = e.defineIntegration((a = {}) =>
      (({ shouldHandleError: a }) => {
        let b;
        return {
          name: j,
          setupOnce() {
            ((b = a || o), k(), n());
          },
          getShouldHandleError: () => b,
          setShouldHandleError(a) {
            b = a;
          },
        };
      })(a)
    )),
      (c.instrumentFastify = n),
      (c.instrumentFastifyV3 = k),
      (c.setupFastifyErrorHandler = function (a, b) {
        b?.shouldHandleError && l()?.setShouldHandleError(b.shouldHandleError);
        let c = Object.assign(
          function (a, b, c) {
            (a.addHook('onError', async (a, b, c) => {
              m.call(m, c, a, b, 'onError-hook');
            }),
              c());
          },
          {
            [Symbol.for('skip-override')]: !0,
            [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',
          }
        );
        a.register(c);
      }));
  },
  40252,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.SpanNames = c.TokenKind = c.AllowedOperationTypes = void 0),
      (function (a) {
        ((a.QUERY = 'query'), (a.MUTATION = 'mutation'), (a.SUBSCRIPTION = 'subscription'));
      })(c.AllowedOperationTypes || (c.AllowedOperationTypes = {})),
      (function (a) {
        ((a.SOF = '<SOF>'),
          (a.EOF = '<EOF>'),
          (a.BANG = '!'),
          (a.DOLLAR = '$'),
          (a.AMP = '&'),
          (a.PAREN_L = '('),
          (a.PAREN_R = ')'),
          (a.SPREAD = '...'),
          (a.COLON = ':'),
          (a.EQUALS = '='),
          (a.AT = '@'),
          (a.BRACKET_L = '['),
          (a.BRACKET_R = ']'),
          (a.BRACE_L = '{'),
          (a.PIPE = '|'),
          (a.BRACE_R = '}'),
          (a.NAME = 'Name'),
          (a.INT = 'Int'),
          (a.FLOAT = 'Float'),
          (a.STRING = 'String'),
          (a.BLOCK_STRING = 'BlockString'),
          (a.COMMENT = 'Comment'));
      })(c.TokenKind || (c.TokenKind = {})),
      (function (a) {
        ((a.EXECUTE = 'graphql.execute'),
          (a.PARSE = 'graphql.parse'),
          (a.RESOLVE = 'graphql.resolve'),
          (a.VALIDATE = 'graphql.validate'),
          (a.SCHEMA_VALIDATE = 'graphql.validateSchema'),
          (a.SCHEMA_PARSE = 'graphql.parseSchema'));
      })(c.SpanNames || (c.SpanNames = {})));
  },
  33852,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = void 0),
      (function (a) {
        ((a.SOURCE = 'graphql.source'),
          (a.FIELD_NAME = 'graphql.field.name'),
          (a.FIELD_PATH = 'graphql.field.path'),
          (a.FIELD_TYPE = 'graphql.field.type'),
          (a.OPERATION_TYPE = 'graphql.operation.type'),
          (a.OPERATION_NAME = 'graphql.operation.name'),
          (a.VARIABLES = 'graphql.variables.'),
          (a.ERROR_VALIDATION_NAME = 'graphql.validation.error'));
      })(c.AttributeNames || (c.AttributeNames = {})));
  },
  90534,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.OTEL_GRAPHQL_DATA_SYMBOL = c.OTEL_PATCHED_SYMBOL = void 0),
      (c.OTEL_PATCHED_SYMBOL = Symbol.for('opentelemetry.patched')),
      (c.OTEL_GRAPHQL_DATA_SYMBOL = Symbol.for('opentelemetry.graphql_data')));
  },
  20734,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.OPERATION_NOT_SUPPORTED = void 0),
      a.r(90534),
      (c.OPERATION_NOT_SUPPORTED = 'Operation$operationName$not supported'));
  },
  86894,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.wrapFieldResolver =
        c.wrapFields =
        c.getSourceFromLocation =
        c.getOperation =
        c.endSpan =
        c.addSpanSource =
        c.addInputVariableAttributes =
        c.isPromise =
          void 0));
    let d = a.r(77674),
      e = a.r(40252),
      f = a.r(33852),
      g = a.r(90534),
      h = Object.values(e.AllowedOperationTypes);
    function i(a, b, c, d, e) {
      let g = n(b, c, d, e);
      a.setAttribute(f.AttributeNames.SOURCE, g);
    }
    function j(a, b) {
      return a[g.OTEL_GRAPHQL_DATA_SYMBOL].fields[b.join('.')];
    }
    function k(a, b) {
      for (let c = b.length - 1; c > 0; c--) {
        let d = j(a, b.slice(0, c));
        if (d) return d;
      }
      return { span: a[g.OTEL_GRAPHQL_DATA_SYMBOL].span };
    }
    ((c.isPromise = (a) => 'function' == typeof a?.then),
      (c.addInputVariableAttributes = function (a, b) {
        Object.entries(b).forEach(([b, c]) => {
          !(function a(b, c, d) {
            Array.isArray(d)
              ? d.forEach((d, e) => {
                  a(b, `${c}.${e}`, d);
                })
              : d instanceof Object
                ? Object.entries(d).forEach(([d, e]) => {
                    a(b, `${c}.${d}`, e);
                  })
                : b.setAttribute(`${f.AttributeNames.VARIABLES}${String(c)}`, d);
          })(a, b, c);
        });
      }),
      (c.addSpanSource = i),
      (c.endSpan = function (a, b) {
        (b && a.recordException(b), a.end());
      }),
      (c.getOperation = function (a, b) {
        if (a && Array.isArray(a.definitions))
          if (b)
            return a.definitions
              .filter((a) => -1 !== h.indexOf(a?.operation))
              .find((a) => b === a?.name?.value);
          else return a.definitions.find((a) => -1 !== h.indexOf(a?.operation));
      }));
    function l(a, b) {
      let c = '';
      for (let d = 0; d < b; d++) c += a;
      return c;
    }
    let m = [e.TokenKind.FLOAT, e.TokenKind.STRING, e.TokenKind.INT, e.TokenKind.BLOCK_STRING];
    function n(a, b = !1, c, d) {
      let f = '';
      if (a?.startToken) {
        let g = 'number' == typeof c ? c : a.start,
          h = 'number' == typeof d ? d : a.end,
          i = a.startToken.next,
          j = 1;
        for (; i; ) {
          if (i.start < g || i.end > h) {
            ((i = i.next), (j = i?.line));
            continue;
          }
          let a = i.value || i.kind,
            c = '';
          ((!b && m.indexOf(i.kind) >= 0 && (a = '*'),
          i.kind === e.TokenKind.STRING && (a = `"${a}"`),
          i.kind === e.TokenKind.EOF && (a = ''),
          i.line > j)
            ? ((f += l('\n', i.line - j)), (j = i.line), (c = l(' ', i.column - 1)))
            : i.line === i.prev?.line && (c = l(' ', i.start - (i.prev?.end || 0))),
            (f += c + a),
            i && (i = i.next));
        }
      }
      return f;
    }
    ((c.getSourceFromLocation = n),
      (c.wrapFields = function a(b, c, d) {
        if (!b || 'function' != typeof b.getFields || b[g.OTEL_PATCHED_SYMBOL]) return;
        let e = b.getFields();
        ((b[g.OTEL_PATCHED_SYMBOL] = !0),
          Object.keys(e).forEach((b) => {
            let f = e[b];
            if (f && (f.resolve && (f.resolve = q(c, d, f.resolve)), f.type)) {
              let b = f.type;
              for (; b.ofType; ) b = b.ofType;
              a(b, c, d);
            }
          }));
      }));
    let o = (a, b, c) => {
        c &&
          (a.recordException(b),
          a.setStatus({ code: d.SpanStatusCode.ERROR, message: b.message }),
          a.end());
      },
      p = (a, b) => {
        b && a.end();
      };
    function q(a, b, h, l = !1) {
      if (m[g.OTEL_PATCHED_SYMBOL] || 'function' != typeof h) return h;
      function m(m, n, q, r) {
        let s;
        if (!h) return;
        let t = b();
        if (
          (t.ignoreTrivialResolveSpans &&
            l &&
            (('object' == typeof m && null !== m) || 'function' == typeof m) &&
            'function' != typeof m[r.fieldName]) ||
          !q[g.OTEL_GRAPHQL_DATA_SYMBOL]
        )
          return h.call(this, m, n, q, r);
        let u = (function (a, b) {
            let c = [],
              d = b;
            for (; d; ) {
              let b = d.key;
              (a && 'number' == typeof b && (b = '*'), c.push(String(b)), (d = d.prev));
            }
            return c.reverse();
          })(t.mergeItems, r && r.path),
          v = u.filter((a) => 'string' == typeof a).length,
          w = !1;
        if (t.depth >= 0 && t.depth < v) s = k(q, u);
        else {
          let c = (function (a, b, c, h, l) {
            let m = j(c, l),
              n = !1;
            if (!m) {
              var o, p, q;
              n = !0;
              let j = k(c, l);
              ((m = {
                parent: j,
                span: (function (a, b, c, h, j, k) {
                  let l = {
                      [f.AttributeNames.FIELD_NAME]: h.fieldName,
                      [f.AttributeNames.FIELD_PATH]: j.join('.'),
                      [f.AttributeNames.FIELD_TYPE]: h.returnType.toString(),
                    },
                    m = a.startSpan(
                      `${e.SpanNames.RESOLVE} ${l[f.AttributeNames.FIELD_PATH]}`,
                      { attributes: l },
                      k ? d.trace.setSpan(d.context.active(), k) : void 0
                    ),
                    n = c[g.OTEL_GRAPHQL_DATA_SYMBOL].source,
                    o = h.fieldNodes.find((a) => 'Field' === a.kind);
                  return (o && i(m, n.loc, b().allowValues, o.loc?.start, o.loc?.end), m);
                })(a, b, c, h, l, j.span),
                error: null,
              }),
                (o = c),
                (p = l),
                (q = m),
                (o[g.OTEL_GRAPHQL_DATA_SYMBOL].fields[p.join('.')] = q));
            }
            return { spanAdded: n, field: m };
          })(a, b, q, r, u);
          ((s = c.field), (w = c.spanAdded));
        }
        return d.context.with(d.trace.setSpan(d.context.active(), s.span), () => {
          try {
            let a = h.call(this, m, n, q, r);
            if ((0, c.isPromise)(a))
              return a.then(
                (a) => (p(s.span, w), a),
                (a) => {
                  throw (o(s.span, a, w), a);
                }
              );
            return (p(s.span, w), a);
          } catch (a) {
            throw (o(s.span, a, w), a);
          }
        });
      }
      return ((m[g.OTEL_PATCHED_SYMBOL] = !0), m);
    }
    c.wrapFieldResolver = q;
  },
  16615,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.51.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-graphql'));
  },
  16227,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.GraphQLInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(40252),
      g = a.r(33852),
      h = a.r(90534),
      i = a.r(20734),
      j = a.r(86894),
      k = a.r(16615),
      l = { mergeItems: !1, depth: -1, allowValues: !1, ignoreResolveSpans: !1 },
      m = ['>=14.0.0 <17'];
    class n extends e.InstrumentationBase {
      constructor(a = {}) {
        super(k.PACKAGE_NAME, k.PACKAGE_VERSION, { ...l, ...a });
      }
      setConfig(a = {}) {
        super.setConfig({ ...l, ...a });
      }
      init() {
        let a = new e.InstrumentationNodeModuleDefinition('graphql', m);
        return (
          a.files.push(this._addPatchingExecute()),
          a.files.push(this._addPatchingParser()),
          a.files.push(this._addPatchingValidate()),
          a
        );
      }
      _addPatchingExecute() {
        return new e.InstrumentationNodeModuleFile(
          'graphql/execution/execute.js',
          m,
          (a) => (
            (0, e.isWrapped)(a.execute) && this._unwrap(a, 'execute'),
            this._wrap(a, 'execute', this._patchExecute(a.defaultFieldResolver)),
            a
          ),
          (a) => {
            a && this._unwrap(a, 'execute');
          }
        );
      }
      _addPatchingParser() {
        return new e.InstrumentationNodeModuleFile(
          'graphql/language/parser.js',
          m,
          (a) => (
            (0, e.isWrapped)(a.parse) && this._unwrap(a, 'parse'),
            this._wrap(a, 'parse', this._patchParse()),
            a
          ),
          (a) => {
            a && this._unwrap(a, 'parse');
          }
        );
      }
      _addPatchingValidate() {
        return new e.InstrumentationNodeModuleFile(
          'graphql/validation/validate.js',
          m,
          (a) => (
            (0, e.isWrapped)(a.validate) && this._unwrap(a, 'validate'),
            this._wrap(a, 'validate', this._patchValidate()),
            a
          ),
          (a) => {
            a && this._unwrap(a, 'validate');
          }
        );
      }
      _patchExecute(a) {
        let b = this;
        return function (c) {
          return function () {
            let f;
            if (arguments.length >= 2) {
              let c = arguments;
              f = b._wrapExecuteArgs(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], a);
            } else {
              let c = arguments[0];
              f = b._wrapExecuteArgs(
                c.schema,
                c.document,
                c.rootValue,
                c.contextValue,
                c.variableValues,
                c.operationName,
                c.fieldResolver,
                c.typeResolver,
                a
              );
            }
            let g = (0, j.getOperation)(f.document, f.operationName),
              i = b._createExecuteSpan(g, f);
            return (
              (f.contextValue[h.OTEL_GRAPHQL_DATA_SYMBOL] = {
                source: f.document ? f.document || f.document[h.OTEL_GRAPHQL_DATA_SYMBOL] : void 0,
                span: i,
                fields: {},
              }),
              d.context.with(d.trace.setSpan(d.context.active(), i), () =>
                (0, e.safeExecuteInTheMiddle)(
                  () => c.apply(this, [f]),
                  (a, c) => {
                    b._handleExecutionResult(i, a, c);
                  }
                )
              )
            );
          };
        };
      }
      _handleExecutionResult(a, b, c) {
        let d = this.getConfig();
        if (void 0 === c || b) return void (0, j.endSpan)(a, b);
        if ((0, j.isPromise)(c))
          c.then(
            (b) => {
              if ('function' != typeof d.responseHook) return void (0, j.endSpan)(a);
              this._executeResponseHook(a, b);
            },
            (b) => {
              (0, j.endSpan)(a, b);
            }
          );
        else {
          if ('function' != typeof d.responseHook) return void (0, j.endSpan)(a);
          this._executeResponseHook(a, c);
        }
      }
      _executeResponseHook(a, b) {
        let { responseHook: c } = this.getConfig();
        c &&
          (0, e.safeExecuteInTheMiddle)(
            () => {
              c(a, b);
            },
            (b) => {
              (b && this._diag.error('Error running response hook', b), (0, j.endSpan)(a, void 0));
            },
            !0
          );
      }
      _patchParse() {
        let a = this;
        return function (b) {
          return function (c, d) {
            return a._parse(this, b, c, d);
          };
        };
      }
      _patchValidate() {
        let a = this;
        return function (b) {
          return function (c, d, e, f, g) {
            return a._validate(this, b, c, d, e, g, f);
          };
        };
      }
      _parse(a, b, c, g) {
        let h = this.getConfig(),
          i = this.tracer.startSpan(f.SpanNames.PARSE);
        return d.context.with(d.trace.setSpan(d.context.active(), i), () =>
          (0, e.safeExecuteInTheMiddle)(
            () => b.call(a, c, g),
            (a, b) => {
              (b &&
                ((0, j.getOperation)(b)
                  ? b.loc && (0, j.addSpanSource)(i, b.loc, h.allowValues)
                  : i.updateName(f.SpanNames.SCHEMA_PARSE)),
                (0, j.endSpan)(i, a));
            }
          )
        );
      }
      _validate(a, b, c, h, i, k, l) {
        let m = this.tracer.startSpan(f.SpanNames.VALIDATE, {});
        return d.context.with(d.trace.setSpan(d.context.active(), m), () =>
          (0, e.safeExecuteInTheMiddle)(
            () => b.call(a, c, h, i, l, k),
            (a, b) => {
              (h.loc || m.updateName(f.SpanNames.SCHEMA_VALIDATE),
                b &&
                  b.length &&
                  m.recordException({
                    name: g.AttributeNames.ERROR_VALIDATION_NAME,
                    message: JSON.stringify(b),
                  }),
                (0, j.endSpan)(m, a));
            }
          )
        );
      }
      _createExecuteSpan(a, b) {
        let c = this.getConfig(),
          d = this.tracer.startSpan(f.SpanNames.EXECUTE, {});
        if (a) {
          let { operation: b, name: c } = a;
          d.setAttribute(g.AttributeNames.OPERATION_TYPE, b);
          let e = c?.value;
          e
            ? (d.setAttribute(g.AttributeNames.OPERATION_NAME, e), d.updateName(`${b} ${e}`))
            : d.updateName(b);
        } else {
          let a = ' ';
          (b.operationName && (a = ` "${b.operationName}" `),
            (a = i.OPERATION_NOT_SUPPORTED.replace('$operationName$', a)),
            d.setAttribute(g.AttributeNames.OPERATION_NAME, a));
        }
        return (
          b.document?.loc && (0, j.addSpanSource)(d, b.document.loc, c.allowValues),
          b.variableValues &&
            c.allowValues &&
            (0, j.addInputVariableAttributes)(d, b.variableValues),
          d
        );
      }
      _wrapExecuteArgs(a, b, c, d, e, f, g, i, k) {
        if ((d || (d = {}), d[h.OTEL_GRAPHQL_DATA_SYMBOL] || this.getConfig().ignoreResolveSpans))
          return {
            schema: a,
            document: b,
            rootValue: c,
            contextValue: d,
            variableValues: e,
            operationName: f,
            fieldResolver: g,
            typeResolver: i,
          };
        let l = null == g,
          m = g ?? k;
        return (
          (g = (0, j.wrapFieldResolver)(this.tracer, () => this.getConfig(), m, l)),
          a &&
            ((0, j.wrapFields)(a.getQueryType(), this.tracer, () => this.getConfig()),
            (0, j.wrapFields)(a.getMutationType(), this.tracer, () => this.getConfig())),
          {
            schema: a,
            document: b,
            rootValue: c,
            contextValue: d,
            variableValues: e,
            operationName: f,
            fieldResolver: g,
            typeResolver: i,
          }
        );
      }
    }
    c.GraphQLInstrumentation = n;
  },
  60833,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.GraphQLInstrumentation = void 0));
    var d = a.r(16227);
    Object.defineProperty(c, 'GraphQLInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.GraphQLInstrumentation;
      },
    });
  },
  95432,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(60833),
      f = a.r(32723),
      g = a.r(28063),
      h = a.r(39786),
      i = 'Graphql',
      j = g.generateInstrumentOnce(i, e.GraphQLInstrumentation, (a) => {
        let b = k(a);
        return {
          ...b,
          responseHook(a, c) {
            (g.addOriginToSpan(a, 'auto.graphql.otel.graphql'),
              c.errors?.length &&
                !f.spanToJSON(a).status &&
                a.setStatus({ code: d.SpanStatusCode.ERROR }));
            let e = f.spanToJSON(a).data,
              i = e['graphql.operation.type'],
              j = e['graphql.operation.name'];
            if (b.useOperationNameForRootSpan && i) {
              let b = f.getRootSpan(a),
                c = f.spanToJSON(b).data[h.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [],
                d = j ? `${i} ${j}` : `${i}`;
              (Array.isArray(c)
                ? (c.push(d), b.setAttribute(h.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, c))
                : 'string' == typeof c
                  ? b.setAttribute(h.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [c, d])
                  : b.setAttribute(h.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, d),
                f.spanToJSON(b).data['original-description'] ||
                  b.setAttribute('original-description', f.spanToJSON(b).description),
                b.updateName(
                  `${f.spanToJSON(b).data['original-description']} (${(function (a) {
                    if (Array.isArray(a)) {
                      let b = a.slice().sort();
                      return b.length <= 5
                        ? b.join(', ')
                        : `${b.slice(0, 5).join(', ')}, +${b.length - 5}`;
                    }
                    return `${a}`;
                  })(c)})`
                ));
            }
          },
        };
      });
    function k(a) {
      return {
        ignoreResolveSpans: !0,
        ignoreTrivialResolveSpans: !0,
        useOperationNameForRootSpan: !0,
        ...a,
      };
    }
    ((c.graphqlIntegration = f.defineIntegration((a = {}) => ({
      name: i,
      setupOnce() {
        j(k(a));
      },
    }))),
      (c.instrumentGraphql = j));
  },
  74326,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.EVENT_LISTENERS_SET = void 0),
      (c.EVENT_LISTENERS_SET = Symbol('opentelemetry.instrumentation.kafkajs.eventListenersSet')));
  },
  4131,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.bufferTextMapGetter = void 0),
      (c.bufferTextMapGetter = {
        get(a, b) {
          if (a) {
            for (let c of Object.keys(a))
              if (c === b || c.toLowerCase() === b) return a[c]?.toString();
          }
        },
        keys: (a) => (a ? Object.keys(a) : []),
      }));
  },
  43669,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.METRIC_MESSAGING_PROCESS_DURATION =
        c.METRIC_MESSAGING_CLIENT_SENT_MESSAGES =
        c.METRIC_MESSAGING_CLIENT_OPERATION_DURATION =
        c.METRIC_MESSAGING_CLIENT_CONSUMED_MESSAGES =
        c.MESSAGING_SYSTEM_VALUE_KAFKA =
        c.MESSAGING_OPERATION_TYPE_VALUE_SEND =
        c.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE =
        c.MESSAGING_OPERATION_TYPE_VALUE_PROCESS =
        c.ATTR_MESSAGING_SYSTEM =
        c.ATTR_MESSAGING_OPERATION_TYPE =
        c.ATTR_MESSAGING_OPERATION_NAME =
        c.ATTR_MESSAGING_KAFKA_OFFSET =
        c.ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE =
        c.ATTR_MESSAGING_KAFKA_MESSAGE_KEY =
        c.ATTR_MESSAGING_DESTINATION_PARTITION_ID =
        c.ATTR_MESSAGING_DESTINATION_NAME =
        c.ATTR_MESSAGING_BATCH_MESSAGE_COUNT =
          void 0),
      (c.ATTR_MESSAGING_BATCH_MESSAGE_COUNT = 'messaging.batch.message_count'),
      (c.ATTR_MESSAGING_DESTINATION_NAME = 'messaging.destination.name'),
      (c.ATTR_MESSAGING_DESTINATION_PARTITION_ID = 'messaging.destination.partition.id'),
      (c.ATTR_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message.key'),
      (c.ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE = 'messaging.kafka.message.tombstone'),
      (c.ATTR_MESSAGING_KAFKA_OFFSET = 'messaging.kafka.offset'),
      (c.ATTR_MESSAGING_OPERATION_NAME = 'messaging.operation.name'),
      (c.ATTR_MESSAGING_OPERATION_TYPE = 'messaging.operation.type'),
      (c.ATTR_MESSAGING_SYSTEM = 'messaging.system'),
      (c.MESSAGING_OPERATION_TYPE_VALUE_PROCESS = 'process'),
      (c.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE = 'receive'),
      (c.MESSAGING_OPERATION_TYPE_VALUE_SEND = 'send'),
      (c.MESSAGING_SYSTEM_VALUE_KAFKA = 'kafka'),
      (c.METRIC_MESSAGING_CLIENT_CONSUMED_MESSAGES = 'messaging.client.consumed.messages'),
      (c.METRIC_MESSAGING_CLIENT_OPERATION_DURATION = 'messaging.client.operation.duration'),
      (c.METRIC_MESSAGING_CLIENT_SENT_MESSAGES = 'messaging.client.sent.messages'),
      (c.METRIC_MESSAGING_PROCESS_DURATION = 'messaging.process.duration'));
  },
  20112,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.13.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-kafkajs'));
  },
  74766,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.KafkaJsInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(79154),
      g = a.r(74326),
      h = a.r(4131),
      i = a.r(43669),
      j = a.r(20112);
    function k(a, b, c) {
      return (d) => {
        a.add(b, { ...c, ...(d ? { [f.ATTR_ERROR_TYPE]: d } : {}) });
      };
    }
    function l(a, b, c) {
      return (d) => {
        a.record((Date.now() - b) / 1e3, { ...c, ...(d ? { [f.ATTR_ERROR_TYPE]: d } : {}) });
      };
    }
    let m = [0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5, 7.5, 10];
    class n extends e.InstrumentationBase {
      constructor(a = {}) {
        super(j.PACKAGE_NAME, j.PACKAGE_VERSION, a);
      }
      _updateMetricInstruments() {
        ((this._clientDuration = this.meter.createHistogram(
          i.METRIC_MESSAGING_CLIENT_OPERATION_DURATION,
          { advice: { explicitBucketBoundaries: m } }
        )),
          (this._sentMessages = this.meter.createCounter(i.METRIC_MESSAGING_CLIENT_SENT_MESSAGES)),
          (this._consumedMessages = this.meter.createCounter(
            i.METRIC_MESSAGING_CLIENT_CONSUMED_MESSAGES
          )),
          (this._processDuration = this.meter.createHistogram(i.METRIC_MESSAGING_PROCESS_DURATION, {
            advice: { explicitBucketBoundaries: m },
          })));
      }
      init() {
        let a = (a) => {
          ((0, e.isWrapped)(a?.Kafka?.prototype.producer) &&
            this._unwrap(a.Kafka.prototype, 'producer'),
            (0, e.isWrapped)(a?.Kafka?.prototype.consumer) &&
              this._unwrap(a.Kafka.prototype, 'consumer'));
        };
        return new e.InstrumentationNodeModuleDefinition(
          'kafkajs',
          ['>=0.3.0 <3'],
          (b) => (
            a(b),
            this._wrap(b?.Kafka?.prototype, 'producer', this._getProducerPatch()),
            this._wrap(b?.Kafka?.prototype, 'consumer', this._getConsumerPatch()),
            b
          ),
          a
        );
      }
      _getConsumerPatch() {
        let a = this;
        return (b) =>
          function (...c) {
            let d = b.apply(this, c);
            return (
              (0, e.isWrapped)(d.run) && a._unwrap(d, 'run'),
              a._wrap(d, 'run', a._getConsumerRunPatch()),
              a._setKafkaEventListeners(d),
              d
            );
          };
      }
      _setKafkaEventListeners(a) {
        a[g.EVENT_LISTENERS_SET] ||
          (a.events?.REQUEST && a.on(a.events.REQUEST, this._recordClientDurationMetric.bind(this)),
          (a[g.EVENT_LISTENERS_SET] = !0));
      }
      _recordClientDurationMetric(a) {
        let [b, c] = a.payload.broker.split(':');
        this._clientDuration.record(a.payload.duration / 1e3, {
          [i.ATTR_MESSAGING_SYSTEM]: i.MESSAGING_SYSTEM_VALUE_KAFKA,
          [i.ATTR_MESSAGING_OPERATION_NAME]: `${a.payload.apiName}`,
          [f.ATTR_SERVER_ADDRESS]: b,
          [f.ATTR_SERVER_PORT]: Number.parseInt(c, 10),
        });
      }
      _getProducerPatch() {
        let a = this;
        return (b) =>
          function (...c) {
            let d = b.apply(this, c);
            return (
              (0, e.isWrapped)(d.sendBatch) && a._unwrap(d, 'sendBatch'),
              a._wrap(d, 'sendBatch', a._getSendBatchPatch()),
              (0, e.isWrapped)(d.send) && a._unwrap(d, 'send'),
              a._wrap(d, 'send', a._getSendPatch()),
              (0, e.isWrapped)(d.transaction) && a._unwrap(d, 'transaction'),
              a._wrap(d, 'transaction', a._getProducerTransactionPatch()),
              a._setKafkaEventListeners(d),
              d
            );
          };
      }
      _getConsumerRunPatch() {
        let a = this;
        return (b) =>
          function (...c) {
            let d = c[0];
            return (
              d?.eachMessage &&
                ((0, e.isWrapped)(d.eachMessage) && a._unwrap(d, 'eachMessage'),
                a._wrap(d, 'eachMessage', a._getConsumerEachMessagePatch())),
              d?.eachBatch &&
                ((0, e.isWrapped)(d.eachBatch) && a._unwrap(d, 'eachBatch'),
                a._wrap(d, 'eachBatch', a._getConsumerEachBatchPatch())),
              b.call(this, d)
            );
          };
      }
      _getConsumerEachMessagePatch() {
        let a = this;
        return (b) =>
          function (...c) {
            let e = c[0],
              f = d.propagation.extract(d.ROOT_CONTEXT, e.message.headers, h.bufferTextMapGetter),
              g = a._startConsumerSpan({
                topic: e.topic,
                message: e.message,
                operationType: i.MESSAGING_OPERATION_TYPE_VALUE_PROCESS,
                ctx: f,
                attributes: { [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(e.partition) },
              }),
              j = [
                l(a._processDuration, Date.now(), {
                  [i.ATTR_MESSAGING_SYSTEM]: i.MESSAGING_SYSTEM_VALUE_KAFKA,
                  [i.ATTR_MESSAGING_OPERATION_NAME]: 'process',
                  [i.ATTR_MESSAGING_DESTINATION_NAME]: e.topic,
                  [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(e.partition),
                }),
                k(a._consumedMessages, 1, {
                  [i.ATTR_MESSAGING_SYSTEM]: i.MESSAGING_SYSTEM_VALUE_KAFKA,
                  [i.ATTR_MESSAGING_OPERATION_NAME]: 'process',
                  [i.ATTR_MESSAGING_DESTINATION_NAME]: e.topic,
                  [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(e.partition),
                }),
              ],
              m = d.context.with(d.trace.setSpan(f, g), () => b.apply(this, c));
            return a._endSpansOnPromise([g], j, m);
          };
      }
      _getConsumerEachBatchPatch() {
        return (a) => {
          let b = this;
          return function (...c) {
            let e = c[0],
              f = b._startConsumerSpan({
                topic: e.batch.topic,
                message: void 0,
                operationType: i.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE,
                ctx: d.ROOT_CONTEXT,
                attributes: {
                  [i.ATTR_MESSAGING_BATCH_MESSAGE_COUNT]: e.batch.messages.length,
                  [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(e.batch.partition),
                },
              });
            return d.context.with(d.trace.setSpan(d.context.active(), f), () => {
              let g = Date.now(),
                j = [],
                m = [
                  k(b._consumedMessages, e.batch.messages.length, {
                    [i.ATTR_MESSAGING_SYSTEM]: i.MESSAGING_SYSTEM_VALUE_KAFKA,
                    [i.ATTR_MESSAGING_OPERATION_NAME]: 'process',
                    [i.ATTR_MESSAGING_DESTINATION_NAME]: e.batch.topic,
                    [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(e.batch.partition),
                  }),
                ];
              e.batch.messages.forEach((a) => {
                let c,
                  f = d.propagation.extract(d.ROOT_CONTEXT, a.headers, h.bufferTextMapGetter),
                  k = d.trace.getSpan(f)?.spanContext();
                (k && (c = { context: k }),
                  j.push(
                    b._startConsumerSpan({
                      topic: e.batch.topic,
                      message: a,
                      operationType: i.MESSAGING_OPERATION_TYPE_VALUE_PROCESS,
                      link: c,
                      attributes: {
                        [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(e.batch.partition),
                      },
                    })
                  ),
                  m.push(
                    l(b._processDuration, g, {
                      [i.ATTR_MESSAGING_SYSTEM]: i.MESSAGING_SYSTEM_VALUE_KAFKA,
                      [i.ATTR_MESSAGING_OPERATION_NAME]: 'process',
                      [i.ATTR_MESSAGING_DESTINATION_NAME]: e.batch.topic,
                      [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(e.batch.partition),
                    })
                  ));
              });
              let n = a.apply(this, c);
              return (j.unshift(f), b._endSpansOnPromise(j, m, n));
            });
          };
        };
      }
      _getProducerTransactionPatch() {
        let a = this;
        return (b) =>
          function (...c) {
            let e = a.tracer.startSpan('transaction'),
              f = b.apply(this, c);
            return (
              f
                .then((b) => {
                  let c = b.send;
                  b.send = function (...b) {
                    return d.context.with(d.trace.setSpan(d.context.active(), e), () =>
                      a
                        ._getSendPatch()(c)
                        .apply(this, b)
                        .catch((a) => {
                          throw (
                            e.setStatus({ code: d.SpanStatusCode.ERROR, message: a?.message }),
                            e.recordException(a),
                            a
                          );
                        })
                    );
                  };
                  let f = b.sendBatch;
                  b.sendBatch = function (...b) {
                    return d.context.with(d.trace.setSpan(d.context.active(), e), () =>
                      a
                        ._getSendBatchPatch()(f)
                        .apply(this, b)
                        .catch((a) => {
                          throw (
                            e.setStatus({ code: d.SpanStatusCode.ERROR, message: a?.message }),
                            e.recordException(a),
                            a
                          );
                        })
                    );
                  };
                  let g = b.commit;
                  b.commit = function (...b) {
                    let c = g.apply(this, b).then(() => {
                      e.setStatus({ code: d.SpanStatusCode.OK });
                    });
                    return a._endSpansOnPromise([e], [], c);
                  };
                  let h = b.abort;
                  b.abort = function (...b) {
                    let c = h.apply(this, b);
                    return a._endSpansOnPromise([e], [], c);
                  };
                })
                .catch((a) => {
                  (e.setStatus({ code: d.SpanStatusCode.ERROR, message: a?.message }),
                    e.recordException(a),
                    e.end());
                }),
              f
            );
          };
      }
      _getSendBatchPatch() {
        let a = this;
        return (b) =>
          function (...c) {
            let d = c[0].topicMessages || [],
              e = [],
              f = [];
            d.forEach((b) => {
              b.messages.forEach((c) => {
                (e.push(a._startProducerSpan(b.topic, c)),
                  f.push(
                    k(a._sentMessages, 1, {
                      [i.ATTR_MESSAGING_SYSTEM]: i.MESSAGING_SYSTEM_VALUE_KAFKA,
                      [i.ATTR_MESSAGING_OPERATION_NAME]: 'send',
                      [i.ATTR_MESSAGING_DESTINATION_NAME]: b.topic,
                      ...(void 0 !== c.partition
                        ? { [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(c.partition) }
                        : {}),
                    })
                  ));
              });
            });
            let g = b.apply(this, c);
            return a._endSpansOnPromise(e, f, g);
          };
      }
      _getSendPatch() {
        let a = this;
        return (b) =>
          function (...c) {
            let d = c[0],
              e = d.messages.map((b) => a._startProducerSpan(d.topic, b)),
              f = d.messages.map((b) =>
                k(a._sentMessages, 1, {
                  [i.ATTR_MESSAGING_SYSTEM]: i.MESSAGING_SYSTEM_VALUE_KAFKA,
                  [i.ATTR_MESSAGING_OPERATION_NAME]: 'send',
                  [i.ATTR_MESSAGING_DESTINATION_NAME]: d.topic,
                  ...(void 0 !== b.partition
                    ? { [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]: String(b.partition) }
                    : {}),
                })
              ),
              g = b.apply(this, c);
            return a._endSpansOnPromise(e, f, g);
          };
      }
      _endSpansOnPromise(a, b, c) {
        return Promise.resolve(c)
          .then((a) => (b.forEach((a) => a()), a))
          .catch((c) => {
            let e,
              g = f.ERROR_TYPE_VALUE_OTHER;
            throw (
              'string' == typeof c || void 0 === c
                ? (e = c)
                : 'object' == typeof c &&
                  Object.prototype.hasOwnProperty.call(c, 'message') &&
                  ((e = c.message), (g = c.constructor.name)),
              b.forEach((a) => a(g)),
              a.forEach((a) => {
                (a.setAttribute(f.ATTR_ERROR_TYPE, g),
                  a.setStatus({ code: d.SpanStatusCode.ERROR, message: e }));
              }),
              c
            );
          })
          .finally(() => {
            a.forEach((a) => a.end());
          });
      }
      _startConsumerSpan({
        topic: a,
        message: b,
        operationType: c,
        ctx: f,
        link: g,
        attributes: h,
      }) {
        let j = c === i.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE ? 'poll' : c,
          k = this.tracer.startSpan(
            `${j} ${a}`,
            {
              kind:
                c === i.MESSAGING_OPERATION_TYPE_VALUE_RECEIVE
                  ? d.SpanKind.CLIENT
                  : d.SpanKind.CONSUMER,
              attributes: {
                ...h,
                [i.ATTR_MESSAGING_SYSTEM]: i.MESSAGING_SYSTEM_VALUE_KAFKA,
                [i.ATTR_MESSAGING_DESTINATION_NAME]: a,
                [i.ATTR_MESSAGING_OPERATION_TYPE]: c,
                [i.ATTR_MESSAGING_OPERATION_NAME]: j,
                [i.ATTR_MESSAGING_KAFKA_MESSAGE_KEY]: b?.key ? String(b.key) : void 0,
                [i.ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE]:
                  (!!b?.key && null === b.value) || void 0,
                [i.ATTR_MESSAGING_KAFKA_OFFSET]: b?.offset,
              },
              links: g ? [g] : [],
            },
            f
          ),
          { consumerHook: l } = this.getConfig();
        return (
          l &&
            b &&
            (0, e.safeExecuteInTheMiddle)(
              () => l(k, { topic: a, message: b }),
              (a) => {
                a && this._diag.error('consumerHook error', a);
              },
              !0
            ),
          k
        );
      }
      _startProducerSpan(a, b) {
        let c = this.tracer.startSpan(`send ${a}`, {
          kind: d.SpanKind.PRODUCER,
          attributes: {
            [i.ATTR_MESSAGING_SYSTEM]: i.MESSAGING_SYSTEM_VALUE_KAFKA,
            [i.ATTR_MESSAGING_DESTINATION_NAME]: a,
            [i.ATTR_MESSAGING_KAFKA_MESSAGE_KEY]: b.key ? String(b.key) : void 0,
            [i.ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE]: (!!b.key && null === b.value) || void 0,
            [i.ATTR_MESSAGING_DESTINATION_PARTITION_ID]:
              void 0 !== b.partition ? String(b.partition) : void 0,
            [i.ATTR_MESSAGING_OPERATION_NAME]: 'send',
            [i.ATTR_MESSAGING_OPERATION_TYPE]: i.MESSAGING_OPERATION_TYPE_VALUE_SEND,
          },
        });
        ((b.headers = b.headers ?? {}),
          d.propagation.inject(d.trace.setSpan(d.context.active(), c), b.headers));
        let { producerHook: f } = this.getConfig();
        return (
          f &&
            (0, e.safeExecuteInTheMiddle)(
              () => f(c, { topic: a, message: b }),
              (a) => {
                a && this._diag.error('producerHook error', a);
              },
              !0
            ),
          c
        );
      }
    }
    c.KafkaJsInstrumentation = n;
  },
  46590,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.KafkaJsInstrumentation = void 0));
    var d = a.r(74766);
    Object.defineProperty(c, 'KafkaJsInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.KafkaJsInstrumentation;
      },
    });
  },
  29323,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(46590),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Kafka',
      h = f.generateInstrumentOnce(
        g,
        () =>
          new d.KafkaJsInstrumentation({
            consumerHook(a) {
              f.addOriginToSpan(a, 'auto.kafkajs.otel.consumer');
            },
            producerHook(a) {
              f.addOriginToSpan(a, 'auto.kafkajs.otel.producer');
            },
          })
      ),
      i = e.defineIntegration(() => ({
        name: g,
        setupOnce() {
          h();
        },
      }));
    ((c.instrumentKafka = h), (c.kafkaIntegration = i));
  },
  20552,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.48.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-lru-memoizer'));
  },
  74452,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.LruMemoizerInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(20552);
    class g extends e.InstrumentationBase {
      constructor(a = {}) {
        super(f.PACKAGE_NAME, f.PACKAGE_VERSION, a);
      }
      init() {
        return [
          new e.InstrumentationNodeModuleDefinition(
            'lru-memoizer',
            ['>=1.3 <3'],
            (a) => {
              let b = function () {
                let b = a.apply(this, arguments);
                return function () {
                  let a = [...arguments],
                    c = a.pop(),
                    e = 'function' == typeof c ? d.context.bind(d.context.active(), c) : c;
                  return (a.push(e), b.apply(this, a));
                };
              };
              return ((b.sync = a.sync), b);
            },
            void 0
          ),
        ];
      }
    }
    c.LruMemoizerInstrumentation = g;
  },
  19178,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.LruMemoizerInstrumentation = void 0));
    var d = a.r(74452);
    Object.defineProperty(c, 'LruMemoizerInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.LruMemoizerInstrumentation;
      },
    });
  },
  23712,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(19178),
      e = a.r(32723),
      f = a.r(28063),
      g = 'LruMemoizer',
      h = f.generateInstrumentOnce(g, () => new d.LruMemoizerInstrumentation()),
      i = e.defineIntegration(() => ({
        name: g,
        setupOnce() {
          h();
        },
      }));
    ((c.instrumentLruMemoizer = h), (c.lruMemoizerIntegration = i));
  },
  68480,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.MongodbCommandType = void 0),
      (function (a) {
        ((a.CREATE_INDEXES = 'createIndexes'),
          (a.FIND_AND_MODIFY = 'findAndModify'),
          (a.IS_MASTER = 'isMaster'),
          (a.COUNT = 'count'),
          (a.AGGREGATE = 'aggregate'),
          (a.UNKNOWN = 'unknown'));
      })(c.MongodbCommandType || (c.MongodbCommandType = {})));
  },
  96713,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.56.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-mongodb'));
  },
  54523,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.MongoDBInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(79154),
      g = a.r(68480),
      h = a.r(96713),
      i = { requireParentSpan: !0 };
    class j extends e.InstrumentationBase {
      constructor(a = {}) {
        super(h.PACKAGE_NAME, h.PACKAGE_VERSION, { ...i, ...a });
      }
      setConfig(a = {}) {
        super.setConfig({ ...i, ...a });
      }
      _updateMetricInstruments() {
        this._connectionsUsage = this.meter.createUpDownCounter('db.client.connections.usage', {
          description:
            'The number of connections that are currently in state described by the state attribute.',
          unit: '{connection}',
        });
      }
      init() {
        let { v3PatchConnection: a, v3UnpatchConnection: b } = this._getV3ConnectionPatches(),
          { v4PatchConnect: c, v4UnpatchConnect: d } = this._getV4ConnectPatches(),
          {
            v4PatchConnectionCallback: f,
            v4PatchConnectionPromise: g,
            v4UnpatchConnection: h,
          } = this._getV4ConnectionPatches(),
          { v4PatchConnectionPool: i, v4UnpatchConnectionPool: j } =
            this._getV4ConnectionPoolPatches(),
          { v4PatchSessions: k, v4UnpatchSessions: l } = this._getV4SessionsPatches();
        return [
          new e.InstrumentationNodeModuleDefinition('mongodb', ['>=3.3.0 <4'], void 0, void 0, [
            new e.InstrumentationNodeModuleFile(
              'mongodb/lib/core/wireprotocol/index.js',
              ['>=3.3.0 <4'],
              a,
              b
            ),
          ]),
          new e.InstrumentationNodeModuleDefinition('mongodb', ['>=4.0.0 <7'], void 0, void 0, [
            new e.InstrumentationNodeModuleFile(
              'mongodb/lib/cmap/connection.js',
              ['>=4.0.0 <6.4'],
              f,
              h
            ),
            new e.InstrumentationNodeModuleFile(
              'mongodb/lib/cmap/connection.js',
              ['>=6.4.0 <7'],
              g,
              h
            ),
            new e.InstrumentationNodeModuleFile(
              'mongodb/lib/cmap/connection_pool.js',
              ['>=4.0.0 <6.4'],
              i,
              j
            ),
            new e.InstrumentationNodeModuleFile(
              'mongodb/lib/cmap/connect.js',
              ['>=4.0.0 <7'],
              c,
              d
            ),
            new e.InstrumentationNodeModuleFile('mongodb/lib/sessions.js', ['>=4.0.0 <7'], k, l),
          ]),
        ];
      }
      _getV3ConnectionPatches() {
        return {
          v3PatchConnection: (a) => (
            (0, e.isWrapped)(a.insert) && this._unwrap(a, 'insert'),
            this._wrap(a, 'insert', this._getV3PatchOperation('insert')),
            (0, e.isWrapped)(a.remove) && this._unwrap(a, 'remove'),
            this._wrap(a, 'remove', this._getV3PatchOperation('remove')),
            (0, e.isWrapped)(a.update) && this._unwrap(a, 'update'),
            this._wrap(a, 'update', this._getV3PatchOperation('update')),
            (0, e.isWrapped)(a.command) && this._unwrap(a, 'command'),
            this._wrap(a, 'command', this._getV3PatchCommand()),
            (0, e.isWrapped)(a.query) && this._unwrap(a, 'query'),
            this._wrap(a, 'query', this._getV3PatchFind()),
            (0, e.isWrapped)(a.getMore) && this._unwrap(a, 'getMore'),
            this._wrap(a, 'getMore', this._getV3PatchCursor()),
            a
          ),
          v3UnpatchConnection: (a) => {
            void 0 !== a &&
              (this._unwrap(a, 'insert'),
              this._unwrap(a, 'remove'),
              this._unwrap(a, 'update'),
              this._unwrap(a, 'command'),
              this._unwrap(a, 'query'),
              this._unwrap(a, 'getMore'));
          },
        };
      }
      _getV4SessionsPatches() {
        return {
          v4PatchSessions: (a) => (
            (0, e.isWrapped)(a.acquire) && this._unwrap(a, 'acquire'),
            this._wrap(a.ServerSessionPool.prototype, 'acquire', this._getV4AcquireCommand()),
            (0, e.isWrapped)(a.release) && this._unwrap(a, 'release'),
            this._wrap(a.ServerSessionPool.prototype, 'release', this._getV4ReleaseCommand()),
            a
          ),
          v4UnpatchSessions: (a) => {
            void 0 !== a &&
              ((0, e.isWrapped)(a.acquire) && this._unwrap(a, 'acquire'),
              (0, e.isWrapped)(a.release) && this._unwrap(a, 'release'));
          },
        };
      }
      _getV4AcquireCommand() {
        let a = this;
        return (b) =>
          function () {
            let c = this.sessions.length,
              d = b.call(this),
              e = this.sessions.length;
            return (
              c === e
                ? a._connectionsUsage.add(1, { state: 'used', 'pool.name': a._poolName })
                : c - 1 === e &&
                  (a._connectionsUsage.add(-1, { state: 'idle', 'pool.name': a._poolName }),
                  a._connectionsUsage.add(1, { state: 'used', 'pool.name': a._poolName })),
              d
            );
          };
      }
      _getV4ReleaseCommand() {
        let a = this;
        return (b) =>
          function (c) {
            let d = b.call(this, c);
            return (
              a._connectionsUsage.add(-1, { state: 'used', 'pool.name': a._poolName }),
              a._connectionsUsage.add(1, { state: 'idle', 'pool.name': a._poolName }),
              d
            );
          };
      }
      _getV4ConnectionPoolPatches() {
        return {
          v4PatchConnectionPool: (a) => {
            let b = a.ConnectionPool.prototype;
            return (
              (0, e.isWrapped)(b.checkOut) && this._unwrap(b, 'checkOut'),
              this._wrap(b, 'checkOut', this._getV4ConnectionPoolCheckOut()),
              a
            );
          },
          v4UnpatchConnectionPool: (a) => {
            void 0 !== a && this._unwrap(a.ConnectionPool.prototype, 'checkOut');
          },
        };
      }
      _getV4ConnectPatches() {
        return {
          v4PatchConnect: (a) => (
            (0, e.isWrapped)(a.connect) && this._unwrap(a, 'connect'),
            this._wrap(a, 'connect', this._getV4ConnectCommand()),
            a
          ),
          v4UnpatchConnect: (a) => {
            void 0 !== a && this._unwrap(a, 'connect');
          },
        };
      }
      _getV4ConnectionPoolCheckOut() {
        return (a) =>
          function (b) {
            let c = d.context.bind(d.context.active(), b);
            return a.call(this, c);
          };
      }
      _getV4ConnectCommand() {
        let a = this;
        return (b) =>
          function (c, d) {
            if (1 === b.length) {
              let d = b.call(this, c);
              return (
                d &&
                  'function' == typeof d.then &&
                  d.then(
                    () => a.setPoolName(c),
                    () => void 0
                  ),
                d
              );
            }
            return b.call(this, c, function (b, e) {
              if (b || !e) return void d(b, e);
              (a.setPoolName(c), d(b, e));
            });
          };
      }
      _getV4ConnectionPatches() {
        return {
          v4PatchConnectionCallback: (a) => (
            (0, e.isWrapped)(a.Connection.prototype.command) &&
              this._unwrap(a.Connection.prototype, 'command'),
            this._wrap(a.Connection.prototype, 'command', this._getV4PatchCommandCallback()),
            a
          ),
          v4PatchConnectionPromise: (a) => (
            (0, e.isWrapped)(a.Connection.prototype.command) &&
              this._unwrap(a.Connection.prototype, 'command'),
            this._wrap(a.Connection.prototype, 'command', this._getV4PatchCommandPromise()),
            a
          ),
          v4UnpatchConnection: (a) => {
            void 0 !== a && this._unwrap(a.Connection.prototype, 'command');
          },
        };
      }
      _getV3PatchOperation(a) {
        let b = this;
        return (c) =>
          function (e, f, g, h, i) {
            let j = d.trace.getSpan(d.context.active()),
              k = b._checkSkipInstrumentation(j),
              l = 'function' == typeof h ? h : i;
            if (k || 'function' != typeof l || 'object' != typeof g)
              if ('function' == typeof h) return c.call(this, e, f, g, h);
              else return c.call(this, e, f, g, h, i);
            let m = b.tracer.startSpan(`mongodb.${a}`, { kind: d.SpanKind.CLIENT });
            b._populateV3Attributes(m, f, e, g[0], a);
            let n = b._patchEnd(m, l);
            return 'function' == typeof h ? c.call(this, e, f, g, n) : c.call(this, e, f, g, h, n);
          };
      }
      _getV3PatchCommand() {
        let a = this;
        return (b) =>
          function (c, e, f, h, i) {
            let k = d.trace.getSpan(d.context.active()),
              l = a._checkSkipInstrumentation(k),
              m = 'function' == typeof h ? h : i;
            if (l || 'function' != typeof m || 'object' != typeof f)
              if ('function' == typeof h) return b.call(this, c, e, f, h);
              else return b.call(this, c, e, f, h, i);
            let n = j._getCommandType(f),
              o = n === g.MongodbCommandType.UNKNOWN ? 'command' : n,
              p = a.tracer.startSpan(`mongodb.${o}`, { kind: d.SpanKind.CLIENT }),
              q = n === g.MongodbCommandType.UNKNOWN ? void 0 : n;
            a._populateV3Attributes(p, e, c, f, q);
            let r = a._patchEnd(p, m);
            return 'function' == typeof h ? b.call(this, c, e, f, r) : b.call(this, c, e, f, h, r);
          };
      }
      _getV4PatchCommandCallback() {
        let a = this;
        return (b) =>
          function (c, e, f, g) {
            let h,
              i = d.trace.getSpan(d.context.active()),
              j = a._checkSkipInstrumentation(i),
              k = Object.keys(e)[0];
            if ('object' != typeof e || e.ismaster || e.hello) return b.call(this, c, e, f, g);
            j ||
              ((h = a.tracer.startSpan(`mongodb.${k}`, { kind: d.SpanKind.CLIENT })),
              a._populateV4Attributes(h, this, c, e, k));
            let l = a._patchEnd(h, g, this.id, k);
            return b.call(this, c, e, f, l);
          };
      }
      _getV4PatchCommandPromise() {
        let a = this;
        return (b) =>
          function (...c) {
            let e,
              [f, g] = c,
              h = d.trace.getSpan(d.context.active()),
              i = a._checkSkipInstrumentation(h),
              j = Object.keys(g)[0];
            if ('object' != typeof g || g.ismaster || g.hello) return b.apply(this, c);
            i ||
              ((e = a.tracer.startSpan(`mongodb.${j}`, { kind: d.SpanKind.CLIENT })),
              a._populateV4Attributes(e, this, f, g, j));
            let k = a._patchEnd(e, () => void 0, this.id, j),
              l = b.apply(this, c);
            return (
              l.then(
                (a) => k(null, a),
                (a) => k(a)
              ),
              l
            );
          };
      }
      _getV3PatchFind() {
        let a = this;
        return (b) =>
          function (c, e, f, g, h, i) {
            let j = d.trace.getSpan(d.context.active()),
              k = a._checkSkipInstrumentation(j),
              l = 'function' == typeof h ? h : i;
            if (k || 'function' != typeof l || 'object' != typeof f)
              if ('function' == typeof h) return b.call(this, c, e, f, g, h);
              else return b.call(this, c, e, f, g, h, i);
            let m = a.tracer.startSpan('mongodb.find', { kind: d.SpanKind.CLIENT });
            a._populateV3Attributes(m, e, c, f, 'find');
            let n = a._patchEnd(m, l);
            return 'function' == typeof h
              ? b.call(this, c, e, f, g, n)
              : b.call(this, c, e, f, g, h, n);
          };
      }
      _getV3PatchCursor() {
        let a = this;
        return (b) =>
          function (c, e, f, g, h, i) {
            let j = d.trace.getSpan(d.context.active()),
              k = a._checkSkipInstrumentation(j),
              l = 'function' == typeof h ? h : i;
            if (k || 'function' != typeof l)
              if ('function' == typeof h) return b.call(this, c, e, f, g, h);
              else return b.call(this, c, e, f, g, h, i);
            let m = a.tracer.startSpan('mongodb.getMore', { kind: d.SpanKind.CLIENT });
            a._populateV3Attributes(m, e, c, f.cmd, 'getMore');
            let n = a._patchEnd(m, l);
            return 'function' == typeof h
              ? b.call(this, c, e, f, g, n)
              : b.call(this, c, e, f, g, h, n);
          };
      }
      static _getCommandType(a) {
        if (void 0 !== a.createIndexes) return g.MongodbCommandType.CREATE_INDEXES;
        if (void 0 !== a.findandmodify) return g.MongodbCommandType.FIND_AND_MODIFY;
        if (void 0 !== a.ismaster) return g.MongodbCommandType.IS_MASTER;
        if (void 0 !== a.count) return g.MongodbCommandType.COUNT;
        if (void 0 !== a.aggregate) return g.MongodbCommandType.AGGREGATE;
        else return g.MongodbCommandType.UNKNOWN;
      }
      _populateV4Attributes(a, b, c, d, e) {
        let f, g, h;
        if (b) {
          let a = 'string' == typeof b.address ? b.address.split(':') : '';
          2 === a.length && ((f = a[0]), (g = a[1]));
        }
        ((h = d?.documents && d.documents[0] ? d.documents[0] : d?.cursors ? d.cursors : d),
          this._addAllSpanAttributes(a, c.db, c.collection, f, g, h, e));
      }
      _populateV3Attributes(a, b, c, d, e) {
        let f, g;
        if (
          c &&
          c.s &&
          ((f = c.s.options?.host ?? c.s.host),
          (g = (c.s.options?.port ?? c.s.port)?.toString()),
          null == f || null == g)
        ) {
          let a = c.description?.address;
          if (a) {
            let b = a.split(':');
            ((f = b[0]), (g = b[1]));
          }
        }
        let [h, i] = b.toString().split('.'),
          j = d?.query ?? d?.q ?? d;
        this._addAllSpanAttributes(a, h, i, f, g, j, e);
      }
      _addAllSpanAttributes(a, b, c, d, g, h, i) {
        if (
          (a.setAttributes({
            [f.SEMATTRS_DB_SYSTEM]: f.DBSYSTEMVALUES_MONGODB,
            [f.SEMATTRS_DB_NAME]: b,
            [f.SEMATTRS_DB_MONGODB_COLLECTION]: c,
            [f.SEMATTRS_DB_OPERATION]: i,
            [f.SEMATTRS_DB_CONNECTION_STRING]: `mongodb://${d}:${g}/${b}`,
          }),
          d && g)
        ) {
          a.setAttribute(f.SEMATTRS_NET_PEER_NAME, d);
          let b = parseInt(g, 10);
          isNaN(b) || a.setAttribute(f.SEMATTRS_NET_PEER_PORT, b);
        }
        if (!h) return;
        let { dbStatementSerializer: j } = this.getConfig(),
          k = 'function' == typeof j ? j : this._defaultDbStatementSerializer.bind(this);
        (0, e.safeExecuteInTheMiddle)(
          () => {
            let b = k(h);
            a.setAttribute(f.SEMATTRS_DB_STATEMENT, b);
          },
          (a) => {
            a && this._diag.error('Error running dbStatementSerializer hook', a);
          },
          !0
        );
      }
      _defaultDbStatementSerializer(a) {
        let { enhancedDatabaseReporting: b } = this.getConfig();
        return JSON.stringify(b ? a : this._scrubStatement(a));
      }
      _scrubStatement(a) {
        return Array.isArray(a)
          ? a.map((a) => this._scrubStatement(a))
          : 'object' == typeof a && null !== a
            ? Object.fromEntries(Object.entries(a).map(([a, b]) => [a, this._scrubStatement(b)]))
            : '?';
      }
      _handleExecutionResult(a, b) {
        let { responseHook: c } = this.getConfig();
        'function' == typeof c &&
          (0, e.safeExecuteInTheMiddle)(
            () => {
              c(a, { data: b });
            },
            (a) => {
              a && this._diag.error('Error running response hook', a);
            },
            !0
          );
      }
      _patchEnd(a, b, c, e) {
        let f = d.context.active(),
          g = this;
        return function (...c) {
          let h = c[0];
          if (a) {
            if (h instanceof Error)
              a?.setStatus({ code: d.SpanStatusCode.ERROR, message: h.message });
            else {
              let b = c[1];
              g._handleExecutionResult(a, b);
            }
            a.end();
          }
          return d.context.with(
            f,
            () => (
              'endSessions' === e &&
                g._connectionsUsage.add(-1, { state: 'idle', 'pool.name': g._poolName }),
              b.apply(this, c)
            )
          );
        };
      }
      setPoolName(a) {
        let b = a.hostAddress?.host,
          c = a.hostAddress?.port,
          d = a.dbName,
          e = `mongodb://${b}:${c}/${d}`;
        this._poolName = e;
      }
      _checkSkipInstrumentation(a) {
        return !0 === this.getConfig().requireParentSpan && void 0 === a;
      }
    }
    c.MongoDBInstrumentation = j;
  },
  39807,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.MongodbCommandType = void 0),
      (function (a) {
        ((a.CREATE_INDEXES = 'createIndexes'),
          (a.FIND_AND_MODIFY = 'findAndModify'),
          (a.IS_MASTER = 'isMaster'),
          (a.COUNT = 'count'),
          (a.UNKNOWN = 'unknown'));
      })(c.MongodbCommandType || (c.MongodbCommandType = {})));
  },
  23412,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.MongodbCommandType = c.MongoDBInstrumentation = void 0));
    var d = a.r(54523);
    Object.defineProperty(c, 'MongoDBInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.MongoDBInstrumentation;
      },
    });
    var e = a.r(39807);
    Object.defineProperty(c, 'MongodbCommandType', {
      enumerable: !0,
      get: function () {
        return e.MongodbCommandType;
      },
    });
  },
  16509,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(23412),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Mongo',
      h = f.generateInstrumentOnce(
        g,
        () =>
          new d.MongoDBInstrumentation({
            dbStatementSerializer: i,
            responseHook(a) {
              f.addOriginToSpan(a, 'auto.db.otel.mongo');
            },
          })
      );
    function i(a) {
      return JSON.stringify(
        (function a(b) {
          var c, d;
          let e;
          return Array.isArray(b)
            ? b.map((b) => a(b))
            : 'object' != typeof (c = b) ||
                null === c ||
                ((d = c), (e = !1), 'undefined' != typeof Buffer && (e = Buffer.isBuffer(d)), e)
              ? '?'
              : Object.entries(b)
                  .map(([b, c]) => [b, a(c)])
                  .reduce((a, b) => (Array.isArray(b) && (a[b[0]] = b[1]), a), {});
        })(a)
      );
    }
    let j = e.defineIntegration(() => ({
      name: g,
      setupOnce() {
        h();
      },
    }));
    ((c._defaultDbStatementSerializer = i), (c.instrumentMongo = h), (c.mongoIntegration = j));
  },
  96285,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.handleCallbackResponse =
        c.handlePromiseResponse =
        c.getAttributesFromCollection =
          void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(79154);
    function g(a, b = {}) {
      (a.recordException(b),
        a.setStatus({
          code: d.SpanStatusCode.ERROR,
          message: `${b.message} ${
            b.code
              ? `
Mongoose Error Code: ${b.code}`
              : ''
          }`,
        }));
    }
    function h(a, b, c, f) {
      c &&
        (0, e.safeExecuteInTheMiddle)(
          () => c(a, { moduleVersion: f, response: b }),
          (a) => {
            a && d.diag.error('mongoose instrumentation: responseHook error', a);
          },
          !0
        );
    }
    ((c.getAttributesFromCollection = function (a) {
      return {
        [f.SEMATTRS_DB_MONGODB_COLLECTION]: a.name,
        [f.SEMATTRS_DB_NAME]: a.conn.name,
        [f.SEMATTRS_DB_USER]: a.conn.user,
        [f.SEMATTRS_NET_PEER_NAME]: a.conn.host,
        [f.SEMATTRS_NET_PEER_PORT]: a.conn.port,
      };
    }),
      (c.handlePromiseResponse = function (a, b, c, d) {
        return a instanceof Promise
          ? a
              .then((a) => (h(b, a, c, d), a))
              .catch((a) => {
                throw (g(b, a), a);
              })
              .finally(() => b.end())
          : (h(b, a, c, d), b.end(), a);
      }),
      (c.handleCallbackResponse = function (a, b, c, d, e, f, i) {
        let j = 0;
        return (
          2 === e.length ? (j = 1) : 3 === e.length && (j = 2),
          (e[j] = (b, c) => (b ? g(d, b) : h(d, c, f, i), d.end(), a(b, c))),
          b.apply(c, e)
        );
      }));
  },
  23935,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.50.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-mongoose'));
  },
  38309,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.MongooseInstrumentation = c._STORED_PARENT_SPAN = void 0));
    let d = a.r(77674),
      e = a.r(98070),
      f = a.r(96285),
      g = a.r(38625),
      h = a.r(23935),
      i = a.r(79154),
      j = [
        'deleteOne',
        'deleteMany',
        'find',
        'findOne',
        'estimatedDocumentCount',
        'countDocuments',
        'distinct',
        'where',
        '$where',
        'findOneAndUpdate',
        'findOneAndDelete',
        'findOneAndReplace',
      ],
      k = ['remove', 'count', 'findOneAndRemove', ...j],
      l = ['count', 'findOneAndRemove', ...j],
      m = [...j];
    function n(a) {
      return a ? (a.startsWith('6.') || a.startsWith('5.') ? k : a.startsWith('7.') ? l : m) : j;
    }
    function o(a) {
      return (a && (a.startsWith('5.') || a.startsWith('6.'))) || !1;
    }
    c._STORED_PARENT_SPAN = Symbol('stored-parent-span');
    class p extends g.InstrumentationBase {
      constructor(a = {}) {
        super(h.PACKAGE_NAME, h.PACKAGE_VERSION, a);
      }
      init() {
        return new g.InstrumentationNodeModuleDefinition(
          'mongoose',
          ['>=5.9.7 <9'],
          this.patch.bind(this),
          this.unpatch.bind(this)
        );
      }
      patch(a, b) {
        let c = 'Module' === a[Symbol.toStringTag] ? a.default : a;
        return (
          this._wrap(c.Model.prototype, 'save', this.patchOnModelMethods('save', b)),
          (c.Model.prototype.$save = c.Model.prototype.save),
          o(b) && this._wrap(c.Model.prototype, 'remove', this.patchOnModelMethods('remove', b)),
          this._wrap(c.Query.prototype, 'exec', this.patchQueryExec(b)),
          this._wrap(c.Aggregate.prototype, 'exec', this.patchAggregateExec(b)),
          n(b).forEach((a) => {
            this._wrap(c.Query.prototype, a, this.patchAndCaptureSpanContext(a));
          }),
          this._wrap(c.Model, 'aggregate', this.patchModelAggregate()),
          this._wrap(c.Model, 'insertMany', this.patchModelStatic('insertMany', b)),
          this._wrap(c.Model, 'bulkWrite', this.patchModelStatic('bulkWrite', b)),
          c
        );
      }
      unpatch(a, b) {
        let c = 'Module' === a[Symbol.toStringTag] ? a.default : a,
          d = n(b);
        (this._unwrap(c.Model.prototype, 'save'),
          (c.Model.prototype.$save = c.Model.prototype.save),
          o(b) && this._unwrap(c.Model.prototype, 'remove'),
          this._unwrap(c.Query.prototype, 'exec'),
          this._unwrap(c.Aggregate.prototype, 'exec'),
          d.forEach((a) => {
            this._unwrap(c.Query.prototype, a);
          }),
          this._unwrap(c.Model, 'aggregate'),
          this._unwrap(c.Model, 'insertMany'),
          this._unwrap(c.Model, 'bulkWrite'));
      }
      patchAggregateExec(a) {
        let b = this;
        return (e) =>
          function (f) {
            if (b.getConfig().requireParentSpan && void 0 === d.trace.getSpan(d.context.active()))
              return e.apply(this, arguments);
            let g = this[c._STORED_PARENT_SPAN],
              h = {},
              { dbStatementSerializer: j } = b.getConfig();
            j &&
              (h[i.SEMATTRS_DB_STATEMENT] = j('aggregate', {
                options: this.options,
                aggregatePipeline: this._pipeline,
              }));
            let k = b._startSpan(this._model.collection, this._model?.modelName, 'aggregate', h, g);
            return b._handleResponse(k, e, this, arguments, f, a);
          };
      }
      patchQueryExec(a) {
        let b = this;
        return (e) =>
          function (f) {
            if (b.getConfig().requireParentSpan && void 0 === d.trace.getSpan(d.context.active()))
              return e.apply(this, arguments);
            let g = this[c._STORED_PARENT_SPAN],
              h = {},
              { dbStatementSerializer: j } = b.getConfig();
            j &&
              (h[i.SEMATTRS_DB_STATEMENT] = j(this.op, {
                condition: this._conditions,
                updates: this._update,
                options: this.options,
                fields: this._fields,
              }));
            let k = b._startSpan(this.mongooseCollection, this.model.modelName, this.op, h, g);
            return b._handleResponse(k, e, this, arguments, f, a);
          };
      }
      patchOnModelMethods(a, b) {
        let c = this;
        return (e) =>
          function (f, g) {
            if (c.getConfig().requireParentSpan && void 0 === d.trace.getSpan(d.context.active()))
              return e.apply(this, arguments);
            let h = { document: this };
            !f || f instanceof Function || (h.options = f);
            let j = {},
              { dbStatementSerializer: k } = c.getConfig();
            k && (j[i.SEMATTRS_DB_STATEMENT] = k(a, h));
            let l = c._startSpan(this.constructor.collection, this.constructor.modelName, a, j);
            return (
              f instanceof Function && ((g = f), (f = void 0)),
              c._handleResponse(l, e, this, arguments, g, b)
            );
          };
      }
      patchModelStatic(a, b) {
        let c = this;
        return (e) =>
          function (f, g, h) {
            if (c.getConfig().requireParentSpan && void 0 === d.trace.getSpan(d.context.active()))
              return e.apply(this, arguments);
            'function' == typeof g && ((h = g), (g = void 0));
            let j = {};
            switch (a) {
              case 'insertMany':
                j.documents = f;
                break;
              case 'bulkWrite':
                j.operations = f;
                break;
              default:
                j.document = f;
            }
            void 0 !== g && (j.options = g);
            let k = {},
              { dbStatementSerializer: l } = c.getConfig();
            l && (k[i.SEMATTRS_DB_STATEMENT] = l(a, j));
            let m = c._startSpan(this.collection, this.modelName, a, k);
            return c._handleResponse(m, e, this, arguments, h, b);
          };
      }
      patchModelAggregate() {
        let a = this;
        return (b) =>
          function () {
            let e = d.trace.getSpan(d.context.active()),
              f = a._callOriginalFunction(() => b.apply(this, arguments));
            return (f && (f[c._STORED_PARENT_SPAN] = e), f);
          };
      }
      patchAndCaptureSpanContext(a) {
        let b = this;
        return (a) =>
          function () {
            return (
              (this[c._STORED_PARENT_SPAN] = d.trace.getSpan(d.context.active())),
              b._callOriginalFunction(() => a.apply(this, arguments))
            );
          };
      }
      _startSpan(a, b, c, e, g) {
        return this.tracer.startSpan(
          `mongoose.${b}.${c}`,
          {
            kind: d.SpanKind.CLIENT,
            attributes: {
              ...e,
              ...(0, f.getAttributesFromCollection)(a),
              [i.SEMATTRS_DB_OPERATION]: c,
              [i.SEMATTRS_DB_SYSTEM]: 'mongoose',
            },
          },
          g ? d.trace.setSpan(d.context.active(), g) : void 0
        );
      }
      _handleResponse(a, b, c, d, e, g) {
        let h = this;
        if (e instanceof Function)
          return h._callOriginalFunction(() =>
            (0, f.handleCallbackResponse)(e, b, c, a, d, h.getConfig().responseHook, g)
          );
        {
          let e = h._callOriginalFunction(() => b.apply(c, d));
          return (0, f.handlePromiseResponse)(e, a, h.getConfig().responseHook, g);
        }
      }
      _callOriginalFunction(a) {
        return this.getConfig().suppressInternalInstrumentation
          ? d.context.with((0, e.suppressTracing)(d.context.active()), a)
          : a();
      }
    }
    c.MongooseInstrumentation = p;
  },
  55801,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.MongooseInstrumentation = void 0));
    var d = a.r(38309);
    Object.defineProperty(c, 'MongooseInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.MongooseInstrumentation;
      },
    });
  },
  88952,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(55801),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Mongoose',
      h = f.generateInstrumentOnce(
        g,
        () =>
          new d.MongooseInstrumentation({
            responseHook(a) {
              f.addOriginToSpan(a, 'auto.db.otel.mongoose');
            },
          })
      ),
      i = e.defineIntegration(() => ({
        name: g,
        setupOnce() {
          h();
        },
      }));
    ((c.instrumentMongoose = h), (c.mongooseIntegration = i));
  },
  5723,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = void 0),
      ((c.AttributeNames || (c.AttributeNames = {})).MYSQL_VALUES = 'db.mysql.values'));
  },
  48647,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.getPoolName =
        c.arrayStringifyHelper =
        c.getSpanName =
        c.getDbValues =
        c.getDbStatement =
        c.getConnectionAttributes =
          void 0));
    let d = a.r(79154);
    function e(a, b, c) {
      let d = `jdbc:mysql://${a || 'localhost'}`;
      return ('number' == typeof b && (d += `:${b}`), 'string' == typeof c && (d += `/${c}`), d);
    }
    function f(a) {
      return a ? `[${a.toString()}]` : '';
    }
    ((c.getConnectionAttributes = function (a) {
      let {
          host: b,
          port: c,
          database: f,
          user: g,
        } = (function (a) {
          let { host: b, port: c, database: d, user: e } = (a && a.connectionConfig) || a || {};
          return { host: b, port: c, database: d, user: e };
        })(a),
        h = parseInt(c, 10);
      return isNaN(h)
        ? {
            [d.SEMATTRS_NET_PEER_NAME]: b,
            [d.SEMATTRS_DB_CONNECTION_STRING]: e(b, c, f),
            [d.SEMATTRS_DB_NAME]: f,
            [d.SEMATTRS_DB_USER]: g,
          }
        : {
            [d.SEMATTRS_NET_PEER_NAME]: b,
            [d.SEMATTRS_NET_PEER_PORT]: h,
            [d.SEMATTRS_DB_CONNECTION_STRING]: e(b, c, f),
            [d.SEMATTRS_DB_NAME]: f,
            [d.SEMATTRS_DB_USER]: g,
          };
    }),
      (c.getDbStatement = function (a) {
        return 'string' == typeof a ? a : a.sql;
      }),
      (c.getDbValues = function (a, b) {
        return 'string' == typeof a ? f(b) : f(b || a.values);
      }),
      (c.getSpanName = function (a) {
        let b = 'object' == typeof a ? a.sql : a,
          c = b?.indexOf(' ');
        return 'number' == typeof c && -1 !== c ? b?.substring(0, c) : b;
      }),
      (c.arrayStringifyHelper = f),
      (c.getPoolName = function (a) {
        let b = a.config.connectionConfig,
          c = '';
        return (
          (c += b.host ? `host: '${b.host}', ` : ''),
          (c += b.port ? `port: ${b.port}, ` : ''),
          (c += b.database ? `database: '${b.database}', ` : ''),
          (c += b.user ? `user: '${b.user}'` : ''),
          b.user || (c = c.substring(0, c.length - 2)),
          c.trim()
        );
      }));
  },
  67235,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.49.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-mysql'));
  },
  80319,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.MySQLInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(79154),
      g = a.r(5723),
      h = a.r(48647),
      i = a.r(67235);
    class j extends e.InstrumentationBase {
      static COMMON_ATTRIBUTES = { [f.SEMATTRS_DB_SYSTEM]: f.DBSYSTEMVALUES_MYSQL };
      constructor(a = {}) {
        (super(i.PACKAGE_NAME, i.PACKAGE_VERSION, a), this._setMetricInstruments());
      }
      setMeterProvider(a) {
        (super.setMeterProvider(a), this._setMetricInstruments());
      }
      _setMetricInstruments() {
        this._connectionsUsage = this.meter.createUpDownCounter('db.client.connections.usage', {
          description:
            'The number of connections that are currently in state described by the state attribute.',
          unit: '{connection}',
        });
      }
      init() {
        return [
          new e.InstrumentationNodeModuleDefinition(
            'mysql',
            ['>=2.0.0 <3'],
            (a) => (
              (0, e.isWrapped)(a.createConnection) && this._unwrap(a, 'createConnection'),
              this._wrap(a, 'createConnection', this._patchCreateConnection()),
              (0, e.isWrapped)(a.createPool) && this._unwrap(a, 'createPool'),
              this._wrap(a, 'createPool', this._patchCreatePool()),
              (0, e.isWrapped)(a.createPoolCluster) && this._unwrap(a, 'createPoolCluster'),
              this._wrap(a, 'createPoolCluster', this._patchCreatePoolCluster()),
              a
            ),
            (a) => {
              void 0 !== a &&
                (this._unwrap(a, 'createConnection'),
                this._unwrap(a, 'createPool'),
                this._unwrap(a, 'createPoolCluster'));
            }
          ),
        ];
      }
      _patchCreateConnection() {
        return (a) => {
          let b = this;
          return function (c) {
            let d = a(...arguments);
            return (b._wrap(d, 'query', b._patchQuery(d)), d);
          };
        };
      }
      _patchCreatePool() {
        return (a) => {
          let b = this;
          return function (c) {
            let d = a(...arguments);
            return (
              b._wrap(d, 'query', b._patchQuery(d)),
              b._wrap(d, 'getConnection', b._patchGetConnection(d)),
              b._wrap(d, 'end', b._patchPoolEnd(d)),
              b._setPoolcallbacks(d, b, ''),
              d
            );
          };
        };
      }
      _patchPoolEnd(a) {
        return (b) => {
          let c = this;
          return function (d) {
            let e = a._allConnections.length,
              f = a._freeConnections.length,
              g = (0, h.getPoolName)(a);
            (c._connectionsUsage.add(-(e - f), { state: 'used', name: g }),
              c._connectionsUsage.add(-f, { state: 'idle', name: g }),
              b.apply(a, arguments));
          };
        };
      }
      _patchCreatePoolCluster() {
        return (a) => {
          let b = this;
          return function (c) {
            let d = a(...arguments);
            return (
              b._wrap(d, 'getConnection', b._patchGetConnection(d)),
              b._wrap(d, 'add', b._patchAdd(d)),
              d
            );
          };
        };
      }
      _patchAdd(a) {
        return (b) => {
          let c = this;
          return function (d, e) {
            if (!c._enabled) return (c._unwrap(a, 'add'), b.apply(a, arguments));
            b.apply(a, arguments);
            let f = a._nodes;
            if (f) {
              let b = f['object' == typeof d ? 'CLUSTER::' + a._lastId : String(d)].pool;
              c._setPoolcallbacks(b, c, d);
            }
          };
        };
      }
      _patchGetConnection(a) {
        return (b) => {
          let c = this;
          return function (d, e, f) {
            if (!c._enabled) return (c._unwrap(a, 'getConnection'), b.apply(a, arguments));
            if (1 == arguments.length && 'function' == typeof d) {
              let e = c._getConnectionCallbackPatchFn(d);
              return b.call(a, e);
            }
            if (2 == arguments.length && 'function' == typeof e) {
              let f = c._getConnectionCallbackPatchFn(e);
              return b.call(a, d, f);
            }
            if (3 == arguments.length && 'function' == typeof f) {
              let g = c._getConnectionCallbackPatchFn(f);
              return b.call(a, d, e, g);
            }
            return b.apply(a, arguments);
          };
        };
      }
      _getConnectionCallbackPatchFn(a) {
        let b = this,
          c = d.context.active();
        return function (f, g) {
          (g && !(0, e.isWrapped)(g.query) && b._wrap(g, 'query', b._patchQuery(g)),
            'function' == typeof a && d.context.with(c, a, this, f, g));
        };
      }
      _patchQuery(a) {
        return (b) => {
          let c = this;
          return function (e, i, k) {
            if (!c._enabled) return (c._unwrap(a, 'query'), b.apply(a, arguments));
            let l = c.tracer.startSpan((0, h.getSpanName)(e), {
              kind: d.SpanKind.CLIENT,
              attributes: { ...j.COMMON_ATTRIBUTES, ...(0, h.getConnectionAttributes)(a.config) },
            });
            if (
              (l.setAttribute(f.SEMATTRS_DB_STATEMENT, (0, h.getDbStatement)(e)),
              c.getConfig().enhancedDatabaseReporting)
            ) {
              let a;
              (Array.isArray(i) ? (a = i) : arguments[2] && (a = [i]),
                l.setAttribute(g.AttributeNames.MYSQL_VALUES, (0, h.getDbValues)(e, a)));
            }
            let m = Array.from(arguments).findIndex((a) => 'function' == typeof a),
              n = d.context.active();
            if (-1 !== m)
              return (
                c._wrap(arguments, m, c._patchCallbackQuery(l, n)),
                d.context.with(d.trace.setSpan(d.context.active(), l), () => b.apply(a, arguments))
              );
            {
              let c = d.context.with(d.trace.setSpan(d.context.active(), l), () =>
                b.apply(a, arguments)
              );
              return (
                d.context.bind(n, c),
                c
                  .on('error', (a) =>
                    l.setStatus({ code: d.SpanStatusCode.ERROR, message: a.message })
                  )
                  .on('end', () => {
                    l.end();
                  })
              );
            }
          };
        };
      }
      _patchCallbackQuery(a, b) {
        return (c) =>
          function (e, f, g) {
            return (
              e && a.setStatus({ code: d.SpanStatusCode.ERROR, message: e.message }),
              a.end(),
              d.context.with(b, () => c(...arguments))
            );
          };
      }
      _setPoolcallbacks(a, b, c) {
        let d = c || (0, h.getPoolName)(a);
        (a.on('connection', (a) => {
          b._connectionsUsage.add(1, { state: 'idle', name: d });
        }),
          a.on('acquire', (a) => {
            (b._connectionsUsage.add(-1, { state: 'idle', name: d }),
              b._connectionsUsage.add(1, { state: 'used', name: d }));
          }),
          a.on('release', (a) => {
            (b._connectionsUsage.add(-1, { state: 'used', name: d }),
              b._connectionsUsage.add(1, { state: 'idle', name: d }));
          }));
      }
    }
    c.MySQLInstrumentation = j;
  },
  35512,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.MySQLInstrumentation = void 0));
    var d = a.r(80319);
    Object.defineProperty(c, 'MySQLInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.MySQLInstrumentation;
      },
    });
  },
  34404,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(35512),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Mysql',
      h = f.generateInstrumentOnce(g, () => new d.MySQLInstrumentation({})),
      i = e.defineIntegration(() => ({
        name: g,
        setupOnce() {
          h();
        },
      }));
    ((c.instrumentMysql = h), (c.mysqlIntegration = i));
  },
  56148,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.addSqlCommenterComment = void 0));
    let d = a.r(77674),
      e = a.r(98070);
    c.addSqlCommenterComment = function (a, b) {
      if (
        'string' != typeof b ||
        0 === b.length ||
        (function (a) {
          let b = a.indexOf('--');
          return b >= 0 || (!(0 > a.indexOf('/*')) && b < a.indexOf('*/'));
        })(b)
      )
        return b;
      let c = new e.W3CTraceContextPropagator(),
        f = {};
      c.inject(d.trace.setSpan(d.ROOT_CONTEXT, a), f, d.defaultTextMapSetter);
      let g = Object.keys(f).sort();
      if (0 === g.length) return b;
      let h = g
        .map((a) => {
          let b = encodeURIComponent(f[a]).replace(
            /[!'()*]/g,
            (a) => `%${a.charCodeAt(0).toString(16).toUpperCase()}`
          );
          return `${a}='${b}'`;
        })
        .join(',');
      return `${b} /*${h}*/`;
    };
  },
  94767,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.getConnectionPrototypeToInstrument =
        c.once =
        c.getSpanName =
        c.getDbStatement =
        c.getConnectionAttributes =
          void 0));
    let d = a.r(79154);
    function e(a, b, c) {
      let d = `jdbc:mysql://${a || 'localhost'}`;
      return ('number' == typeof b && (d += `:${b}`), 'string' == typeof c && (d += `/${c}`), d);
    }
    function f(a) {
      return a.replace(/\b\d+\b/g, '?').replace(/(["'])(?:(?=(\\?))\2.)*?\1/g, '?');
    }
    ((c.getConnectionAttributes = function (a) {
      let {
          host: b,
          port: c,
          database: f,
          user: g,
        } = (function (a) {
          let { host: b, port: c, database: d, user: e } = (a && a.connectionConfig) || a || {};
          return { host: b, port: c, database: d, user: e };
        })(a),
        h = parseInt(c, 10);
      return isNaN(h)
        ? {
            [d.SEMATTRS_NET_PEER_NAME]: b,
            [d.SEMATTRS_DB_CONNECTION_STRING]: e(b, c, f),
            [d.SEMATTRS_DB_NAME]: f,
            [d.SEMATTRS_DB_USER]: g,
          }
        : {
            [d.SEMATTRS_NET_PEER_NAME]: b,
            [d.SEMATTRS_NET_PEER_PORT]: h,
            [d.SEMATTRS_DB_CONNECTION_STRING]: e(b, c, f),
            [d.SEMATTRS_DB_NAME]: f,
            [d.SEMATTRS_DB_USER]: g,
          };
    }),
      (c.getDbStatement = function (a, b, c, d = !1, e = f) {
        let [g, h] = 'string' == typeof a ? [a, c] : [a.sql, 'values' in a ? c || a.values : c];
        try {
          if (d) return e(g);
          if (b && h) return b(g, h);
          return g;
        } catch (a) {
          return 'Could not determine the query due to an error in masking or formatting';
        }
      }),
      (c.getSpanName = function (a) {
        let b = 'object' == typeof a ? a.sql : a,
          c = b?.indexOf(' ');
        return 'number' == typeof c && -1 !== c ? b?.substring(0, c) : b;
      }),
      (c.once = (a) => {
        let b = !1;
        return (...c) => {
          if (!b) return ((b = !0), a(...c));
        };
      }),
      (c.getConnectionPrototypeToInstrument = function (a) {
        let b = a.prototype,
          c = Object.getPrototypeOf(b);
        return 'function' == typeof c?.query && 'function' == typeof c?.execute ? c : b;
      }));
  },
  38946,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.50.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-mysql2'));
  },
  17735,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.MySQL2Instrumentation = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(79154),
      g = a.r(56148),
      h = a.r(94767),
      i = a.r(38946),
      j = ['>=1.4.2 <4'];
    class k extends e.InstrumentationBase {
      static COMMON_ATTRIBUTES = { [f.SEMATTRS_DB_SYSTEM]: f.DBSYSTEMVALUES_MYSQL };
      constructor(a = {}) {
        super(i.PACKAGE_NAME, i.PACKAGE_VERSION, a);
      }
      init() {
        let a;
        function b(b) {
          !a && b.format && (a = b.format);
        }
        let c = (b) => {
            ((0, e.isWrapped)(b.query) && this._unwrap(b, 'query'),
              this._wrap(b, 'query', this._patchQuery(a, !1)),
              (0, e.isWrapped)(b.execute) && this._unwrap(b, 'execute'),
              this._wrap(b, 'execute', this._patchQuery(a, !0)));
          },
          d = (a) => {
            (this._unwrap(a, 'query'), this._unwrap(a, 'execute'));
          };
        return [
          new e.InstrumentationNodeModuleDefinition(
            'mysql2',
            j,
            (a) => (b(a), a),
            () => {},
            [
              new e.InstrumentationNodeModuleFile(
                'mysql2/promise.js',
                j,
                (a) => (b(a), a),
                () => {}
              ),
              new e.InstrumentationNodeModuleFile(
                'mysql2/lib/connection.js',
                j,
                (a) => (c((0, h.getConnectionPrototypeToInstrument)(a)), a),
                (a) => {
                  void 0 !== a && d((0, h.getConnectionPrototypeToInstrument)(a));
                }
              ),
            ]
          ),
        ];
      }
      _patchQuery(a, b) {
        return (c) => {
          let i = this;
          return function (j, l, m) {
            let n;
            Array.isArray(l) ? (n = l) : arguments[2] && (n = [l]);
            let { maskStatement: o, maskStatementHook: p, responseHook: q } = i.getConfig(),
              r = i.tracer.startSpan((0, h.getSpanName)(j), {
                kind: d.SpanKind.CLIENT,
                attributes: {
                  ...k.COMMON_ATTRIBUTES,
                  ...(0, h.getConnectionAttributes)(this.config),
                  [f.SEMATTRS_DB_STATEMENT]: (0, h.getDbStatement)(j, a, n, o, p),
                },
              });
            !b &&
              i.getConfig().addSqlCommenterCommentToQueries &&
              (arguments[0] = j =
                'string' == typeof j
                  ? (0, g.addSqlCommenterComment)(r, j)
                  : Object.assign(j, { sql: (0, g.addSqlCommenterComment)(r, j.sql) }));
            let s = (0, h.once)((a, b) => {
              (a
                ? r.setStatus({ code: d.SpanStatusCode.ERROR, message: a.message })
                : 'function' == typeof q &&
                  (0, e.safeExecuteInTheMiddle)(
                    () => {
                      q(r, { queryResults: b });
                    },
                    (a) => {
                      a && i._diag.warn('Failed executing responseHook', a);
                    },
                    !0
                  ),
                r.end());
            });
            if (1 == arguments.length) {
              'function' == typeof j.onResult && i._wrap(j, 'onResult', i._patchCallbackQuery(s));
              let a = c.apply(this, arguments);
              return (
                a
                  .once('error', (a) => {
                    s(a);
                  })
                  .once('result', (a) => {
                    s(void 0, a);
                  }),
                a
              );
            }
            return (
              'function' == typeof arguments[1]
                ? i._wrap(arguments, 1, i._patchCallbackQuery(s))
                : 'function' == typeof arguments[2] &&
                  i._wrap(arguments, 2, i._patchCallbackQuery(s)),
              c.apply(this, arguments)
            );
          };
        };
      }
      _patchCallbackQuery(a) {
        return (b) =>
          function (c, d, e) {
            return (a(c, d), b(...arguments));
          };
      }
    }
    c.MySQL2Instrumentation = k;
  },
  36490,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.MySQL2Instrumentation = void 0));
    var d = a.r(17735);
    Object.defineProperty(c, 'MySQL2Instrumentation', {
      enumerable: !0,
      get: function () {
        return d.MySQL2Instrumentation;
      },
    });
  },
  13786,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(36490),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Mysql2',
      h = f.generateInstrumentOnce(
        g,
        () =>
          new d.MySQL2Instrumentation({
            responseHook(a) {
              f.addOriginToSpan(a, 'auto.db.otel.mysql2');
            },
          })
      ),
      i = e.defineIntegration(() => ({
        name: g,
        setupOnce() {
          h();
        },
      }));
    ((c.instrumentMysql2 = h), (c.mysql2Integration = i));
  },
  54513,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.endSpan = void 0));
    let d = a.r(77674);
    c.endSpan = (a, b) => {
      (b &&
        (a.recordException(b), a.setStatus({ code: d.SpanStatusCode.ERROR, message: b.message })),
        a.end());
    };
  },
  63594,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.defaultDbStatementSerializer = void 0));
    let d = [
      { regex: /^ECHO/i, args: 0 },
      { regex: /^(LPUSH|MSET|PFA|PUBLISH|RPUSH|SADD|SET|SPUBLISH|XADD|ZADD)/i, args: 1 },
      { regex: /^(HSET|HMSET|LSET|LINSERT)/i, args: 2 },
      {
        regex:
          /^(ACL|BIT|B[LRZ]|CLIENT|CLUSTER|CONFIG|COMMAND|DECR|DEL|EVAL|EX|FUNCTION|GEO|GET|HINCR|HMGET|HSCAN|INCR|L[TRLM]|MEMORY|P[EFISTU]|RPOP|S[CDIMORSU]|XACK|X[CDGILPRT]|Z[CDILMPRS])/i,
        args: -1,
      },
    ];
    c.defaultDbStatementSerializer = (a, b) => {
      if (Array.isArray(b) && b.length) {
        let c = d.find(({ regex: b }) => b.test(a))?.args ?? 0,
          e = c >= 0 ? b.slice(0, c) : b;
        return (
          b.length > e.length && e.push(`[${b.length - c} other arguments]`),
          `${a} ${e.join(' ')}`
        );
      }
      return a;
    };
  },
  55426,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.51.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-ioredis'));
  },
  12346,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.IORedisInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(79154),
      g = a.r(38625),
      h = a.r(54513),
      i = a.r(63594),
      j = a.r(55426),
      k = { requireParentSpan: !0 };
    class l extends e.InstrumentationBase {
      constructor(a = {}) {
        super(j.PACKAGE_NAME, j.PACKAGE_VERSION, { ...k, ...a });
      }
      setConfig(a = {}) {
        super.setConfig({ ...k, ...a });
      }
      init() {
        return [
          new e.InstrumentationNodeModuleDefinition(
            'ioredis',
            ['>=2.0.0 <6'],
            (a, b) => {
              let c = 'Module' === a[Symbol.toStringTag] ? a.default : a;
              return (
                (0, e.isWrapped)(c.prototype.sendCommand) &&
                  this._unwrap(c.prototype, 'sendCommand'),
                this._wrap(c.prototype, 'sendCommand', this._patchSendCommand(b)),
                (0, e.isWrapped)(c.prototype.connect) && this._unwrap(c.prototype, 'connect'),
                this._wrap(c.prototype, 'connect', this._patchConnection()),
                a
              );
            },
            (a) => {
              if (void 0 === a) return;
              let b = 'Module' === a[Symbol.toStringTag] ? a.default : a;
              (this._unwrap(b.prototype, 'sendCommand'), this._unwrap(b.prototype, 'connect'));
            }
          ),
        ];
      }
      _patchSendCommand(a) {
        return (b) => this._traceSendCommand(b, a);
      }
      _patchConnection() {
        return (a) => this._traceConnection(a);
      }
      _traceSendCommand(a, b) {
        let c = this;
        return function (e) {
          if (arguments.length < 1 || 'object' != typeof e) return a.apply(this, arguments);
          let j = c.getConfig(),
            k = j.dbStatementSerializer || i.defaultDbStatementSerializer,
            l = void 0 === d.trace.getSpan(d.context.active());
          if (!0 === j.requireParentSpan && l) return a.apply(this, arguments);
          let m = c.tracer.startSpan(e.name, {
              kind: d.SpanKind.CLIENT,
              attributes: {
                [f.SEMATTRS_DB_SYSTEM]: f.DBSYSTEMVALUES_REDIS,
                [f.SEMATTRS_DB_STATEMENT]: k(e.name, e.args),
              },
            }),
            { requestHook: n } = j;
          n &&
            (0, g.safeExecuteInTheMiddle)(
              () => n(m, { moduleVersion: b, cmdName: e.name, cmdArgs: e.args }),
              (a) => {
                a && d.diag.error('ioredis instrumentation: request hook failed', a);
              },
              !0
            );
          let { host: o, port: p } = this.options;
          m.setAttributes({
            [f.SEMATTRS_NET_PEER_NAME]: o,
            [f.SEMATTRS_NET_PEER_PORT]: p,
            [f.SEMATTRS_DB_CONNECTION_STRING]: `redis://${o}:${p}`,
          });
          try {
            let b = a.apply(this, arguments),
              c = e.resolve;
            e.resolve = function (a) {
              ((0, g.safeExecuteInTheMiddle)(
                () => j.responseHook?.(m, e.name, e.args, a),
                (a) => {
                  a && d.diag.error('ioredis instrumentation: response hook failed', a);
                },
                !0
              ),
                (0, h.endSpan)(m, null),
                c(a));
            };
            let f = e.reject;
            return (
              (e.reject = function (a) {
                ((0, h.endSpan)(m, a), f(a));
              }),
              b
            );
          } catch (a) {
            throw ((0, h.endSpan)(m, a), a);
          }
        };
      }
      _traceConnection(a) {
        let b = this;
        return function () {
          let c = void 0 === d.trace.getSpan(d.context.active());
          if (!0 === b.getConfig().requireParentSpan && c) return a.apply(this, arguments);
          let e = b.tracer.startSpan('connect', {
              kind: d.SpanKind.CLIENT,
              attributes: {
                [f.SEMATTRS_DB_SYSTEM]: f.DBSYSTEMVALUES_REDIS,
                [f.SEMATTRS_DB_STATEMENT]: 'connect',
              },
            }),
            { host: g, port: i } = this.options;
          e.setAttributes({
            [f.SEMATTRS_NET_PEER_NAME]: g,
            [f.SEMATTRS_NET_PEER_PORT]: i,
            [f.SEMATTRS_DB_CONNECTION_STRING]: `redis://${g}:${i}`,
          });
          try {
            let b = a.apply(this, arguments);
            return ((0, h.endSpan)(e, null), b);
          } catch (a) {
            throw ((0, h.endSpan)(e, a), a);
          }
        };
      }
    }
    c.IORedisInstrumentation = l;
  },
  77480,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.IORedisInstrumentation = void 0));
    var d = a.r(12346);
    Object.defineProperty(c, 'IORedisInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.IORedisInstrumentation;
      },
    });
  },
  13416,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.51.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-redis'));
  },
  82968,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.getTracedCreateStreamTrace = c.getTracedCreateClient = c.endSpan = void 0));
    let d = a.r(77674);
    ((c.endSpan = (a, b) => {
      (b && a.setStatus({ code: d.SpanStatusCode.ERROR, message: b.message }), a.end());
    }),
      (c.getTracedCreateClient = (a) =>
        function () {
          let b = a.apply(this, arguments);
          return d.context.bind(d.context.active(), b);
        }),
      (c.getTracedCreateStreamTrace = (a) =>
        function () {
          return (
            Object.prototype.hasOwnProperty.call(this, 'stream') ||
              Object.defineProperty(this, 'stream', {
                get() {
                  return this._patched_redis_stream;
                },
                set(a) {
                  (d.context.bind(d.context.active(), a), (this._patched_redis_stream = a));
                },
              }),
            a.apply(this, arguments)
          );
        }));
  },
  39675,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.RedisInstrumentationV2_V3 = void 0));
    let d = a.r(38625),
      e = a.r(82968),
      f = a.r(13416),
      g = a.r(77674),
      h = a.r(79154),
      i = a.r(63594);
    class j extends d.InstrumentationBase {
      static COMPONENT = 'redis';
      constructor(a = {}) {
        super(f.PACKAGE_NAME, f.PACKAGE_VERSION, a);
      }
      init() {
        return [
          new d.InstrumentationNodeModuleDefinition(
            'redis',
            ['>=2.6.0 <4'],
            (a) => (
              (0, d.isWrapped)(a.RedisClient.prototype.internal_send_command) &&
                this._unwrap(a.RedisClient.prototype, 'internal_send_command'),
              this._wrap(
                a.RedisClient.prototype,
                'internal_send_command',
                this._getPatchInternalSendCommand()
              ),
              (0, d.isWrapped)(a.RedisClient.prototype.create_stream) &&
                this._unwrap(a.RedisClient.prototype, 'create_stream'),
              this._wrap(a.RedisClient.prototype, 'create_stream', this._getPatchCreateStream()),
              (0, d.isWrapped)(a.createClient) && this._unwrap(a, 'createClient'),
              this._wrap(a, 'createClient', this._getPatchCreateClient()),
              a
            ),
            (a) => {
              void 0 !== a &&
                (this._unwrap(a.RedisClient.prototype, 'internal_send_command'),
                this._unwrap(a.RedisClient.prototype, 'create_stream'),
                this._unwrap(a, 'createClient'));
            }
          ),
        ];
      }
      _getPatchInternalSendCommand() {
        let a = this;
        return function (b) {
          return function (c) {
            if (1 != arguments.length || 'object' != typeof c) return b.apply(this, arguments);
            let f = a.getConfig(),
              k = void 0 === g.trace.getSpan(g.context.active());
            if (!0 === f.requireParentSpan && k) return b.apply(this, arguments);
            let l = f?.dbStatementSerializer || i.defaultDbStatementSerializer,
              m = a.tracer.startSpan(`${j.COMPONENT}-${c.command}`, {
                kind: g.SpanKind.CLIENT,
                attributes: {
                  [h.SEMATTRS_DB_SYSTEM]: h.DBSYSTEMVALUES_REDIS,
                  [h.SEMATTRS_DB_STATEMENT]: l(c.command, c.args),
                },
              });
            (this.connection_options &&
              m.setAttributes({
                [h.SEMATTRS_NET_PEER_NAME]: this.connection_options.host,
                [h.SEMATTRS_NET_PEER_PORT]: this.connection_options.port,
              }),
              this.address &&
                m.setAttribute(h.SEMATTRS_DB_CONNECTION_STRING, `redis://${this.address}`));
            let n = arguments[0].callback;
            if (n) {
              let b = g.context.active();
              arguments[0].callback = function (h, i) {
                if (f?.responseHook) {
                  let b = f.responseHook;
                  (0, d.safeExecuteInTheMiddle)(
                    () => {
                      b(m, c.command, c.args, i);
                    },
                    (b) => {
                      b && a._diag.error('Error executing responseHook', b);
                    },
                    !0
                  );
                }
                return ((0, e.endSpan)(m, h), g.context.with(b, n, this, ...arguments));
              };
            }
            try {
              return b.apply(this, arguments);
            } catch (a) {
              throw ((0, e.endSpan)(m, a), a);
            }
          };
        };
      }
      _getPatchCreateClient() {
        return function (a) {
          return (0, e.getTracedCreateClient)(a);
        };
      }
      _getPatchCreateStream() {
        return function (a) {
          return (0, e.getTracedCreateStreamTrace)(a);
        };
      }
    }
    c.RedisInstrumentationV2_V3 = j;
  },
  72287,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.getClientAttributes = void 0));
    let d = a.r(79154);
    c.getClientAttributes = function (a, b) {
      return {
        [d.SEMATTRS_DB_SYSTEM]: d.DBSYSTEMVALUES_REDIS,
        [d.SEMATTRS_NET_PEER_NAME]: b?.socket?.host,
        [d.SEMATTRS_NET_PEER_PORT]: b?.socket?.port,
        [d.SEMATTRS_DB_CONNECTION_STRING]: (function (a, b) {
          if ('string' == typeof b && b)
            try {
              let a = new URL(b);
              return (
                a.searchParams.delete('user_pwd'),
                (a.username = ''),
                (a.password = ''),
                a.href
              );
            } catch (b) {
              a.error('failed to sanitize redis connection url', b);
            }
        })(a, b?.url),
      };
    };
  },
  56730,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.RedisInstrumentationV4 = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(72287),
      g = a.r(63594),
      h = a.r(13416),
      i = a.r(79154),
      j = Symbol('opentelemetry.instrumentation.redis.open_spans'),
      k = Symbol('opentelemetry.instrumentation.redis.multi_command_options');
    class l extends e.InstrumentationBase {
      static COMPONENT = 'redis';
      constructor(a = {}) {
        super(h.PACKAGE_NAME, h.PACKAGE_VERSION, a);
      }
      init() {
        return [
          this._getInstrumentationNodeModuleDefinition('@redis/client'),
          this._getInstrumentationNodeModuleDefinition('@node-redis/client'),
        ];
      }
      _getInstrumentationNodeModuleDefinition(a) {
        let b = new e.InstrumentationNodeModuleFile(
            `${a}/dist/lib/commander.js`,
            ['^1.0.0'],
            (a, b) => {
              let c = a.transformCommandArguments;
              if (!c)
                return (
                  this._diag.error(
                    'internal instrumentation error, missing transformCommandArguments function'
                  ),
                  a
                );
              let d = b?.startsWith('1.0.') ? 'extendWithCommands' : 'attachCommands';
              return (
                (0, e.isWrapped)(a?.[d]) && this._unwrap(a, d),
                this._wrap(a, d, this._getPatchExtendWithCommands(c)),
                a
              );
            },
            (a) => {
              ((0, e.isWrapped)(a?.extendWithCommands) && this._unwrap(a, 'extendWithCommands'),
                (0, e.isWrapped)(a?.attachCommands) && this._unwrap(a, 'attachCommands'));
            }
          ),
          c = new e.InstrumentationNodeModuleFile(
            `${a}/dist/lib/client/multi-command.js`,
            ['^1.0.0'],
            (a) => {
              let b = a?.default?.prototype;
              return (
                (0, e.isWrapped)(b?.exec) && this._unwrap(b, 'exec'),
                this._wrap(b, 'exec', this._getPatchMultiCommandsExec()),
                (0, e.isWrapped)(b?.addCommand) && this._unwrap(b, 'addCommand'),
                this._wrap(b, 'addCommand', this._getPatchMultiCommandsAddCommand()),
                a
              );
            },
            (a) => {
              let b = a?.default?.prototype;
              ((0, e.isWrapped)(b?.exec) && this._unwrap(b, 'exec'),
                (0, e.isWrapped)(b?.addCommand) && this._unwrap(b, 'addCommand'));
            }
          ),
          d = new e.InstrumentationNodeModuleFile(
            `${a}/dist/lib/client/index.js`,
            ['^1.0.0'],
            (a) => {
              let b = a?.default?.prototype;
              return (
                b?.multi &&
                  ((0, e.isWrapped)(b?.multi) && this._unwrap(b, 'multi'),
                  this._wrap(b, 'multi', this._getPatchRedisClientMulti())),
                b?.MULTI &&
                  ((0, e.isWrapped)(b?.MULTI) && this._unwrap(b, 'MULTI'),
                  this._wrap(b, 'MULTI', this._getPatchRedisClientMulti())),
                (0, e.isWrapped)(b?.sendCommand) && this._unwrap(b, 'sendCommand'),
                this._wrap(b, 'sendCommand', this._getPatchRedisClientSendCommand()),
                this._wrap(b, 'connect', this._getPatchedClientConnect()),
                a
              );
            },
            (a) => {
              let b = a?.default?.prototype;
              ((0, e.isWrapped)(b?.multi) && this._unwrap(b, 'multi'),
                (0, e.isWrapped)(b?.MULTI) && this._unwrap(b, 'MULTI'),
                (0, e.isWrapped)(b?.sendCommand) && this._unwrap(b, 'sendCommand'));
            }
          );
        return new e.InstrumentationNodeModuleDefinition(
          a,
          ['^1.0.0'],
          (a) => a,
          () => {},
          [b, c, d]
        );
      }
      _getPatchExtendWithCommands(a) {
        let b = this;
        return function (c) {
          return function (d) {
            if (d?.BaseClass?.name !== 'RedisClient') return c.apply(this, arguments);
            let e = d.executor;
            return (
              (d.executor = function (c, d) {
                let f = a(c, d).args;
                return b._traceClientCommand(e, this, arguments, f);
              }),
              c.apply(this, arguments)
            );
          };
        };
      }
      _getPatchMultiCommandsExec() {
        let a = this;
        return function (b) {
          return function () {
            let c = b.apply(this, arguments);
            return 'function' != typeof c?.then
              ? (a._diag.error('got non promise result when patching RedisClientMultiCommand.exec'),
                c)
              : c
                  .then((b) => {
                    let c = this[j];
                    return (a._endSpansWithRedisReplies(c, b), b);
                  })
                  .catch((b) => {
                    let c = this[j];
                    if (c) {
                      let d =
                        'MultiErrorReply' === b.constructor.name
                          ? b.replies
                          : Array(c.length).fill(b);
                      a._endSpansWithRedisReplies(c, d);
                    } else a._diag.error('cannot find open spans to end for redis multi command');
                    return Promise.reject(b);
                  });
          };
        };
      }
      _getPatchMultiCommandsAddCommand() {
        let a = this;
        return function (b) {
          return function (c) {
            return a._traceClientCommand(b, this, arguments, c);
          };
        };
      }
      _getPatchRedisClientMulti() {
        return function (a) {
          return function () {
            let b = a.apply(this, arguments);
            return ((b[k] = this.options), b);
          };
        };
      }
      _getPatchRedisClientSendCommand() {
        let a = this;
        return function (b) {
          return function (c) {
            return a._traceClientCommand(b, this, arguments, c);
          };
        };
      }
      _getPatchedClientConnect() {
        let a = this;
        return function (b) {
          return function () {
            let c = this.options,
              e = (0, f.getClientAttributes)(a._diag, c),
              g = a.tracer.startSpan(`${l.COMPONENT}-connect`, {
                kind: d.SpanKind.CLIENT,
                attributes: e,
              });
            return d.context
              .with(d.trace.setSpan(d.context.active(), g), () => b.apply(this))
              .then((a) => (g.end(), a))
              .catch(
                (a) => (
                  g.recordException(a),
                  g.setStatus({ code: d.SpanStatusCode.ERROR, message: a.message }),
                  g.end(),
                  Promise.reject(a)
                )
              );
          };
        };
      }
      _traceClientCommand(a, b, c, e) {
        if (void 0 === d.trace.getSpan(d.context.active()) && this.getConfig().requireParentSpan)
          return a.apply(b, c);
        let h = b.options || b[k],
          m = e[0],
          n = e.slice(1),
          o = this.getConfig().dbStatementSerializer || g.defaultDbStatementSerializer,
          p = (0, f.getClientAttributes)(this._diag, h);
        try {
          let a = o(m, n);
          null != a && (p[i.SEMATTRS_DB_STATEMENT] = a);
        } catch (a) {
          this._diag.error('dbStatementSerializer throw an exception', a, { commandName: m });
        }
        let q = this.tracer.startSpan(`${l.COMPONENT}-${m}`, {
            kind: d.SpanKind.CLIENT,
            attributes: p,
          }),
          r = d.context.with(d.trace.setSpan(d.context.active(), q), () => a.apply(b, c));
        return (
          'function' == typeof r?.then
            ? r.then(
                (a) => {
                  this._endSpanWithResponse(q, m, n, a, void 0);
                },
                (a) => {
                  this._endSpanWithResponse(q, m, n, null, a);
                }
              )
            : ((r[j] = r[j] || []), r[j].push({ span: q, commandName: m, commandArgs: n })),
          r
        );
      }
      _endSpansWithRedisReplies(a, b) {
        if (!a) return this._diag.error('cannot find open spans to end for redis multi command');
        if (b.length !== a.length)
          return this._diag.error(
            'number of multi command spans does not match response from redis'
          );
        for (let c = 0; c < a.length; c++) {
          let { span: d, commandName: e, commandArgs: f } = a[c],
            g = b[c],
            [h, i] = g instanceof Error ? [null, g] : [g, void 0];
          this._endSpanWithResponse(d, e, f, h, i);
        }
      }
      _endSpanWithResponse(a, b, c, e, f) {
        let { responseHook: g } = this.getConfig();
        if (!f && g)
          try {
            g(a, b, c, e);
          } catch (a) {
            this._diag.error('responseHook throw an exception', a);
          }
        (f &&
          (a.recordException(f),
          a.setStatus({ code: d.SpanStatusCode.ERROR, message: f?.message })),
          a.end());
      }
    }
    c.RedisInstrumentationV4 = l;
  },
  1596,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.RedisInstrumentation = void 0));
    let d = a.r(38625),
      e = a.r(13416),
      f = a.r(39675),
      g = a.r(56730),
      h = { requireParentSpan: !1 };
    class i extends d.InstrumentationBase {
      instrumentationV2_V3;
      instrumentationV4;
      initialized = !1;
      constructor(a = {}) {
        (super(e.PACKAGE_NAME, e.PACKAGE_VERSION, { ...h, ...a }),
          (this.instrumentationV2_V3 = new f.RedisInstrumentationV2_V3(this.getConfig())),
          (this.instrumentationV4 = new g.RedisInstrumentationV4(this.getConfig())),
          (this.initialized = !0));
      }
      setConfig(a = {}) {
        let b = { ...h, ...a };
        (super.setConfig(b),
          this.initialized &&
            (this.instrumentationV2_V3.setConfig(b), this.instrumentationV4.setConfig(b)));
      }
      init() {}
      setTracerProvider(a) {
        (super.setTracerProvider(a),
          this.initialized &&
            (this.instrumentationV2_V3.setTracerProvider(a),
            this.instrumentationV4.setTracerProvider(a)));
      }
      enable() {
        (super.enable(),
          this.initialized &&
            (this.instrumentationV2_V3.enable(), this.instrumentationV4.enable()));
      }
      disable() {
        (super.disable(),
          this.initialized &&
            (this.instrumentationV2_V3.disable(), this.instrumentationV4.disable()));
      }
    }
    c.RedisInstrumentation = i;
  },
  43572,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.RedisInstrumentation = void 0));
    var d = a.r(1596);
    Object.defineProperty(c, 'RedisInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.RedisInstrumentation;
      },
    });
  },
  69036,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = ['get', 'set', 'setex'],
      e = ['get', 'mget'],
      f = ['set', 'setex'];
    function g(a, b) {
      return a.includes(b.toLowerCase());
    }
    function h(a) {
      return g(e, a) ? 'cache.get' : g(f, a) ? 'cache.put' : void 0;
    }
    function i(a) {
      let b = [],
        c = (a) => {
          a.forEach((a) => {
            Array.isArray(a) ? c(a) : b.push(a);
          });
        };
      return (c(a), b);
    }
    ((c.GET_COMMANDS = e),
      (c.SET_COMMANDS = f),
      (c.calculateCacheItemSize = function (a) {
        let b = (a) => {
          try {
            if (Buffer.isBuffer(a)) return a.byteLength;
            if ('string' == typeof a) return a.length;
            if ('number' == typeof a) return a.toString().length;
            else if (null == a) return 0;
            return JSON.stringify(a).length;
          } catch {
            return;
          }
        };
        return Array.isArray(a)
          ? a.reduce((a, c) => {
              let d = b(c);
              return 'number' == typeof d ? (void 0 !== a ? a + d : d) : a;
            }, 0)
          : b(a);
      }),
      (c.getCacheKeySafely = function (a, b) {
        try {
          if (0 === b.length) return;
          let c = (a) =>
              'string' == typeof a || 'number' == typeof a || Buffer.isBuffer(a)
                ? [a.toString()]
                : Array.isArray(a)
                  ? i(a.map((a) => c(a)))
                  : ['<unknown>'],
            e = b[0];
          if (g(d, a) && null != e) return c(e);
          return i(b.map((a) => c(a)));
        } catch {
          return;
        }
      }),
      (c.getCacheOperation = h),
      (c.isInCommands = g),
      (c.shouldConsiderForCache = function (a, b, c) {
        if (!h(a)) return !1;
        for (let a of b)
          if (
            (function (a, b) {
              return b.some((b) => a.startsWith(b));
            })(a, c)
          )
            return !0;
        return !1;
      }));
  },
  39244,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77480),
      e = a.r(43572),
      f = a.r(32723),
      g = a.r(28063),
      h = a.r(69036),
      i = 'Redis',
      j = {},
      k = (a, b, c, d) => {
        a.setAttribute(f.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');
        let e = h.getCacheKeySafely(b, c),
          g = h.getCacheOperation(b);
        if (!e || !g || !j.cachePrefixes || !h.shouldConsiderForCache(b, e, j.cachePrefixes))
          return;
        let i = f.spanToJSON(a).data['net.peer.name'],
          k = f.spanToJSON(a).data['net.peer.port'];
        k && i && a.setAttributes({ 'network.peer.address': i, 'network.peer.port': k });
        let l = h.calculateCacheItemSize(d);
        (l && a.setAttribute(f.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, l),
          h.isInCommands(h.GET_COMMANDS, b) &&
            void 0 !== l &&
            a.setAttribute(f.SEMANTIC_ATTRIBUTE_CACHE_HIT, l > 0),
          a.setAttributes({
            [f.SEMANTIC_ATTRIBUTE_SENTRY_OP]: g,
            [f.SEMANTIC_ATTRIBUTE_CACHE_KEY]: e,
          }));
        let m = e.join(', ');
        a.updateName(f.truncate(m, 1024));
      },
      l = g.generateInstrumentOnce(
        `${i}.IORedis`,
        () => new d.IORedisInstrumentation({ responseHook: k })
      ),
      m = g.generateInstrumentOnce(
        `${i}.Redis`,
        () => new e.RedisInstrumentation({ responseHook: k })
      ),
      n = Object.assign(
        () => {
          (l(), m());
        },
        { id: i }
      ),
      o = f.defineIntegration((a = {}) => ({
        name: i,
        setupOnce() {
          ((j = a), n());
        },
      }));
    ((c.instrumentRedis = n), (c.redisIntegration = o));
  },
  88639,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.EVENT_LISTENERS_SET = void 0),
      (c.EVENT_LISTENERS_SET = Symbol('opentelemetry.instrumentation.pg.eventListenersSet')));
  },
  90058,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = void 0),
      (function (a) {
        ((a.PG_VALUES = 'db.postgresql.values'),
          (a.PG_PLAN = 'db.postgresql.plan'),
          (a.IDLE_TIMEOUT_MILLIS = 'db.postgresql.idle.timeout.millis'),
          (a.MAX_CLIENT = 'db.postgresql.max.client'));
      })(c.AttributeNames || (c.AttributeNames = {})));
  },
  65929,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.METRIC_DB_CLIENT_OPERATION_DURATION =
        c.METRIC_DB_CLIENT_CONNECTION_PENDING_REQUESTS =
        c.METRIC_DB_CLIENT_CONNECTION_COUNT =
        c.DB_CLIENT_CONNECTION_STATE_VALUE_IDLE =
        c.DB_CLIENT_CONNECTION_STATE_VALUE_USED =
        c.ATTR_DB_OPERATION_NAME =
        c.ATTR_DB_NAMESPACE =
        c.ATTR_DB_CLIENT_CONNECTION_STATE =
        c.ATTR_DB_CLIENT_CONNECTION_POOL_NAME =
          void 0),
      (c.ATTR_DB_CLIENT_CONNECTION_POOL_NAME = 'db.client.connection.pool.name'),
      (c.ATTR_DB_CLIENT_CONNECTION_STATE = 'db.client.connection.state'),
      (c.ATTR_DB_NAMESPACE = 'db.namespace'),
      (c.ATTR_DB_OPERATION_NAME = 'db.operation.name'),
      (c.DB_CLIENT_CONNECTION_STATE_VALUE_USED = 'used'),
      (c.DB_CLIENT_CONNECTION_STATE_VALUE_IDLE = 'idle'),
      (c.METRIC_DB_CLIENT_CONNECTION_COUNT = 'db.client.connection.count'),
      (c.METRIC_DB_CLIENT_CONNECTION_PENDING_REQUESTS = 'db.client.connection.pending_requests'),
      (c.METRIC_DB_CLIENT_OPERATION_DURATION = 'db.client.operation.duration'));
  },
  56337,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.SpanNames = void 0),
      (function (a) {
        ((a.QUERY_PREFIX = 'pg.query'),
          (a.CONNECT = 'pg.connect'),
          (a.POOL_CONNECT = 'pg-pool.connect'));
      })(c.SpanNames || (c.SpanNames = {})));
  },
  73562,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.isObjectWithTextString =
        c.getErrorMessage =
        c.patchClientConnectCallback =
        c.patchCallbackPGPool =
        c.updateCounter =
        c.getPoolName =
        c.patchCallback =
        c.handleExecutionResult =
        c.handleConfigQuery =
        c.shouldSkipInstrumentation =
        c.getSemanticAttributesFromPool =
        c.getSemanticAttributesFromConnection =
        c.getConnectionString =
        c.parseAndMaskConnectionString =
        c.parseNormalizedOperationName =
        c.getQuerySpanName =
          void 0));
    let d = a.r(77674),
      e = a.r(90058),
      f = a.r(79154),
      g = a.r(65929),
      h = a.r(38625),
      i = a.r(56337);
    function j(a, b) {
      if (!b) return i.SpanNames.QUERY_PREFIX;
      let c = 'string' == typeof b.name && b.name ? b.name : k(b.text);
      return `${i.SpanNames.QUERY_PREFIX}:${c}${a ? ` ${a}` : ''}`;
    }
    function k(a) {
      let b = a.indexOf(' '),
        c = -1 === b ? a : a.slice(0, b);
      return (c = c.toUpperCase()).endsWith(';') ? c.slice(0, -1) : c;
    }
    function l(a) {
      try {
        let b = new URL(a);
        return ((b.username = ''), (b.password = ''), b.toString());
      } catch (a) {
        return 'postgresql://localhost:5432/';
      }
    }
    function m(a) {
      if ('connectionString' in a && a.connectionString) return l(a.connectionString);
      let b = a.host || 'localhost',
        c = a.port || 5432,
        d = a.database || '';
      return `postgresql://${b}:${c}/${d}`;
    }
    function n(a) {
      if (Number.isInteger(a)) return a;
    }
    function o(a) {
      return {
        [f.SEMATTRS_DB_SYSTEM]: f.DBSYSTEMVALUES_POSTGRESQL,
        [f.SEMATTRS_DB_NAME]: a.database,
        [f.SEMATTRS_DB_CONNECTION_STRING]: m(a),
        [f.SEMATTRS_NET_PEER_NAME]: a.host,
        [f.SEMATTRS_NET_PEER_PORT]: n(a.port),
        [f.SEMATTRS_DB_USER]: a.user,
      };
    }
    function p(a, b, c) {
      'function' == typeof a.responseHook &&
        (0, h.safeExecuteInTheMiddle)(
          () => {
            a.responseHook(b, { data: c });
          },
          (a) => {
            a && d.diag.error('Error running response hook', a);
          },
          !0
        );
    }
    ((c.getQuerySpanName = j),
      (c.parseNormalizedOperationName = k),
      (c.parseAndMaskConnectionString = l),
      (c.getConnectionString = m),
      (c.getSemanticAttributesFromConnection = o),
      (c.getSemanticAttributesFromPool = function (a) {
        let b;
        try {
          b = a.connectionString ? new URL(a.connectionString) : void 0;
        } catch (a) {
          b = void 0;
        }
        return {
          [f.SEMATTRS_DB_SYSTEM]: f.DBSYSTEMVALUES_POSTGRESQL,
          [f.SEMATTRS_DB_NAME]: b?.pathname.slice(1) ?? a.database,
          [f.SEMATTRS_DB_CONNECTION_STRING]: m(a),
          [f.SEMATTRS_NET_PEER_NAME]: b?.hostname ?? a.host,
          [f.SEMATTRS_NET_PEER_PORT]: Number(b?.port) || n(a.port),
          [f.SEMATTRS_DB_USER]: b?.username ?? a.user,
          [e.AttributeNames.IDLE_TIMEOUT_MILLIS]: a.idleTimeoutMillis,
          [e.AttributeNames.MAX_CLIENT]: a.maxClient,
        };
      }),
      (c.shouldSkipInstrumentation = function (a) {
        return !0 === a.requireParentSpan && void 0 === d.trace.getSpan(d.context.active());
      }),
      (c.handleConfigQuery = function (a, b, c) {
        let { connectionParameters: g } = this,
          h = j(g.database, c),
          i = a.startSpan(h, { kind: d.SpanKind.CLIENT, attributes: o(g) });
        if (!c) return i;
        if (
          (c.text && i.setAttribute(f.SEMATTRS_DB_STATEMENT, c.text),
          b.enhancedDatabaseReporting && Array.isArray(c.values))
        )
          try {
            let a = c.values.map((a) =>
              null == a
                ? 'null'
                : a instanceof Buffer
                  ? a.toString()
                  : 'object' != typeof a
                    ? a.toString()
                    : 'function' == typeof a.toPostgres
                      ? a.toPostgres()
                      : JSON.stringify(a)
            );
            i.setAttribute(e.AttributeNames.PG_VALUES, a);
          } catch (a) {
            d.diag.error('failed to stringify ', c.values, a);
          }
        return ('string' == typeof c.name && i.setAttribute(e.AttributeNames.PG_PLAN, c.name), i);
      }),
      (c.handleExecutionResult = p),
      (c.patchCallback = function (a, b, c, e, g) {
        return function (h, i) {
          (h
            ? (Object.prototype.hasOwnProperty.call(h, 'code') && (e[f.ATTR_ERROR_TYPE] = h.code),
              b.setStatus({ code: d.SpanStatusCode.ERROR, message: h.message }))
            : p(a, b, i),
            g(),
            b.end(),
            c.call(this, h, i));
        };
      }),
      (c.getPoolName = function (a) {
        let b = '';
        return (b +=
          (a?.host ? `${a.host}` : 'unknown_host') +
          ':' +
          (a?.port ? `${a.port}` : 'unknown_port') +
          '/' +
          (a?.database ? `${a.database}` : 'unknown_database')).trim();
      }),
      (c.updateCounter = function (a, b, c, d, e) {
        let f = b.totalCount,
          h = b.waitingCount,
          i = b.idleCount,
          j = f - i;
        return (
          c.add(j - e.used, {
            [g.ATTR_DB_CLIENT_CONNECTION_STATE]: g.DB_CLIENT_CONNECTION_STATE_VALUE_USED,
            [g.ATTR_DB_CLIENT_CONNECTION_POOL_NAME]: a,
          }),
          c.add(i - e.idle, {
            [g.ATTR_DB_CLIENT_CONNECTION_STATE]: g.DB_CLIENT_CONNECTION_STATE_VALUE_IDLE,
            [g.ATTR_DB_CLIENT_CONNECTION_POOL_NAME]: a,
          }),
          d.add(h - e.pending, { [g.ATTR_DB_CLIENT_CONNECTION_POOL_NAME]: a }),
          { used: j, idle: i, pending: h }
        );
      }),
      (c.patchCallbackPGPool = function (a, b) {
        return function (c, e, f) {
          (c && a.setStatus({ code: d.SpanStatusCode.ERROR, message: c.message }),
            a.end(),
            b.call(this, c, e, f));
        };
      }),
      (c.patchClientConnectCallback = function (a, b) {
        return function (c) {
          (c && a.setStatus({ code: d.SpanStatusCode.ERROR, message: c.message }),
            a.end(),
            b.apply(this, arguments));
        };
      }),
      (c.getErrorMessage = function (a) {
        return 'object' == typeof a && null !== a && 'message' in a ? String(a.message) : void 0;
      }),
      (c.isObjectWithTextString = function (a) {
        return 'object' == typeof a && 'string' == typeof a?.text;
      }));
  },
  66645,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.55.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-pg'));
  },
  81631,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PgInstrumentation = void 0));
    let d = a.r(38625),
      e = a.r(77674),
      f = a.r(88639),
      g = a.r(73562),
      h = a.r(56148),
      i = a.r(66645),
      j = a.r(56337),
      k = a.r(98070),
      l = a.r(79154),
      m = a.r(65929);
    function n(a) {
      return 'Module' === a[Symbol.toStringTag] ? a.default : a;
    }
    class o extends d.InstrumentationBase {
      _connectionsCounter = { used: 0, idle: 0, pending: 0 };
      constructor(a = {}) {
        super(i.PACKAGE_NAME, i.PACKAGE_VERSION, a);
      }
      _updateMetricInstruments() {
        ((this._operationDuration = this.meter.createHistogram(
          m.METRIC_DB_CLIENT_OPERATION_DURATION,
          {
            description: 'Duration of database client operations.',
            unit: 's',
            valueType: e.ValueType.DOUBLE,
            advice: { explicitBucketBoundaries: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10] },
          }
        )),
          (this._connectionsCounter = { idle: 0, pending: 0, used: 0 }),
          (this._connectionsCount = this.meter.createUpDownCounter(
            m.METRIC_DB_CLIENT_CONNECTION_COUNT,
            {
              description:
                'The number of connections that are currently in state described by the state attribute.',
              unit: '{connection}',
            }
          )),
          (this._connectionPendingRequests = this.meter.createUpDownCounter(
            m.METRIC_DB_CLIENT_CONNECTION_PENDING_REQUESTS,
            {
              description: 'The number of current pending requests for an open connection.',
              unit: '{connection}',
            }
          )));
      }
      init() {
        let a = ['>=8.0.3 <9'],
          b = new d.InstrumentationNodeModuleFile(
            'pg/lib/native/client.js',
            a,
            this._patchPgClient.bind(this),
            this._unpatchPgClient.bind(this)
          ),
          c = new d.InstrumentationNodeModuleFile(
            'pg/lib/client.js',
            a,
            this._patchPgClient.bind(this),
            this._unpatchPgClient.bind(this)
          );
        return [
          new d.InstrumentationNodeModuleDefinition(
            'pg',
            a,
            (a) => {
              let b = n(a);
              return (this._patchPgClient(b.Client), a);
            },
            (a) => {
              let b = n(a);
              return (this._unpatchPgClient(b.Client), a);
            },
            [c, b]
          ),
          new d.InstrumentationNodeModuleDefinition(
            'pg-pool',
            ['>=2.0.0 <4'],
            (a) => {
              let b = n(a);
              return (
                (0, d.isWrapped)(b.prototype.connect) && this._unwrap(b.prototype, 'connect'),
                this._wrap(b.prototype, 'connect', this._getPoolConnectPatch()),
                b
              );
            },
            (a) => {
              let b = n(a);
              (0, d.isWrapped)(b.prototype.connect) && this._unwrap(b.prototype, 'connect');
            }
          ),
        ];
      }
      _patchPgClient(a) {
        if (!a) return;
        let b = n(a);
        return (
          (0, d.isWrapped)(b.prototype.query) && this._unwrap(b.prototype, 'query'),
          (0, d.isWrapped)(b.prototype.connect) && this._unwrap(b.prototype, 'connect'),
          this._wrap(b.prototype, 'query', this._getClientQueryPatch()),
          this._wrap(b.prototype, 'connect', this._getClientConnectPatch()),
          a
        );
      }
      _unpatchPgClient(a) {
        let b = n(a);
        return (
          (0, d.isWrapped)(b.prototype.query) && this._unwrap(b.prototype, 'query'),
          (0, d.isWrapped)(b.prototype.connect) && this._unwrap(b.prototype, 'connect'),
          a
        );
      }
      _getClientConnectPatch() {
        let a = this;
        return (b) =>
          function (c) {
            if (g.shouldSkipInstrumentation(a.getConfig())) return b.call(this, c);
            let d = a.tracer.startSpan(j.SpanNames.CONNECT, {
              kind: e.SpanKind.CLIENT,
              attributes: g.getSemanticAttributesFromConnection(this),
            });
            if (c) {
              let a = e.trace.getSpan(e.context.active());
              ((c = g.patchClientConnectCallback(d, c)),
                a && (c = e.context.bind(e.context.active(), c)));
            }
            let f = e.context.with(e.trace.setSpan(e.context.active(), d), () => b.call(this, c));
            return p(d, f);
          };
      }
      recordOperationDuration(a, b) {
        let c = {};
        [
          l.SEMATTRS_DB_SYSTEM,
          m.ATTR_DB_NAMESPACE,
          l.ATTR_ERROR_TYPE,
          l.ATTR_SERVER_PORT,
          l.ATTR_SERVER_ADDRESS,
          m.ATTR_DB_OPERATION_NAME,
        ].forEach((b) => {
          b in a && (c[b] = a[b]);
        });
        let d = (0, k.hrTimeToMilliseconds)((0, k.hrTimeDuration)(b, (0, k.hrTime)())) / 1e3;
        this._operationDuration.record(d, c);
      }
      _getClientQueryPatch() {
        let a = this;
        return (b) => (
          this._diag.debug('Patching pg.Client.prototype.query'),
          function (...c) {
            let f;
            if (g.shouldSkipInstrumentation(a.getConfig())) return b.apply(this, c);
            let i = (0, k.hrTime)(),
              j = c[0],
              n = 'string' == typeof j,
              o = g.isObjectWithTextString(j),
              p = n ? { text: j, values: Array.isArray(c[1]) ? c[1] : void 0 } : o ? j : void 0,
              q = {
                [l.SEMATTRS_DB_SYSTEM]: l.DBSYSTEMVALUES_POSTGRESQL,
                [m.ATTR_DB_NAMESPACE]: this.database,
                [l.ATTR_SERVER_PORT]: this.connectionParameters.port,
                [l.ATTR_SERVER_ADDRESS]: this.connectionParameters.host,
              };
            p?.text && (q[m.ATTR_DB_OPERATION_NAME] = g.parseNormalizedOperationName(p?.text));
            let r = () => {
                a.recordOperationDuration(q, i);
              },
              s = a.getConfig(),
              t = g.handleConfigQuery.call(this, a.tracer, s, p);
            if (
              (s.addSqlCommenterCommentToQueries &&
                (n
                  ? (c[0] = (0, h.addSqlCommenterComment)(t, j))
                  : !o ||
                    'name' in j ||
                    (c[0] = { ...j, text: (0, h.addSqlCommenterComment)(t, j.text) })),
              c.length > 0)
            ) {
              let b = e.trace.getSpan(e.context.active());
              if ('function' == typeof c[c.length - 1])
                ((c[c.length - 1] = g.patchCallback(s, t, c[c.length - 1], q, r)),
                  b && (c[c.length - 1] = e.context.bind(e.context.active(), c[c.length - 1])));
              else if ('function' == typeof p?.callback) {
                let d = g.patchCallback(a.getConfig(), t, p.callback, q, r);
                (b && (d = e.context.bind(e.context.active(), d)), (c[0].callback = d));
              }
            }
            let { requestHook: u } = s;
            'function' == typeof u &&
              p &&
              (0, d.safeExecuteInTheMiddle)(
                () => {
                  let { database: a, host: b, port: c, user: d } = this.connectionParameters;
                  u(t, {
                    connection: { database: a, host: b, port: c, user: d },
                    query: { text: p.text, values: p.values, name: p.name },
                  });
                },
                (b) => {
                  b && a._diag.error('Error running query hook', b);
                },
                !0
              );
            try {
              f = b.apply(this, c);
            } catch (a) {
              throw (
                t.setStatus({ code: e.SpanStatusCode.ERROR, message: g.getErrorMessage(a) }),
                t.end(),
                a
              );
            }
            return f instanceof Promise
              ? f
                  .then(
                    (b) =>
                      new Promise((c) => {
                        (g.handleExecutionResult(a.getConfig(), t, b), r(), t.end(), c(b));
                      })
                  )
                  .catch(
                    (a) =>
                      new Promise((b, c) => {
                        (t.setStatus({ code: e.SpanStatusCode.ERROR, message: a.message }),
                          r(),
                          t.end(),
                          c(a));
                      })
                  )
              : f;
          }
        );
      }
      _setPoolConnectEventListeners(a) {
        if (a[f.EVENT_LISTENERS_SET]) return;
        let b = g.getPoolName(a.options);
        (a.on('connect', () => {
          this._connectionsCounter = g.updateCounter(
            b,
            a,
            this._connectionsCount,
            this._connectionPendingRequests,
            this._connectionsCounter
          );
        }),
          a.on('acquire', () => {
            this._connectionsCounter = g.updateCounter(
              b,
              a,
              this._connectionsCount,
              this._connectionPendingRequests,
              this._connectionsCounter
            );
          }),
          a.on('remove', () => {
            this._connectionsCounter = g.updateCounter(
              b,
              a,
              this._connectionsCount,
              this._connectionPendingRequests,
              this._connectionsCounter
            );
          }),
          a.on('release', () => {
            this._connectionsCounter = g.updateCounter(
              b,
              a,
              this._connectionsCount,
              this._connectionPendingRequests,
              this._connectionsCounter
            );
          }),
          (a[f.EVENT_LISTENERS_SET] = !0));
      }
      _getPoolConnectPatch() {
        let a = this;
        return (b) =>
          function (c) {
            if (g.shouldSkipInstrumentation(a.getConfig())) return b.call(this, c);
            let d = a.tracer.startSpan(j.SpanNames.POOL_CONNECT, {
              kind: e.SpanKind.CLIENT,
              attributes: g.getSemanticAttributesFromPool(this.options),
            });
            if ((a._setPoolConnectEventListeners(this), c)) {
              let a = e.trace.getSpan(e.context.active());
              ((c = g.patchCallbackPGPool(d, c)), a && (c = e.context.bind(e.context.active(), c)));
            }
            let f = e.context.with(e.trace.setSpan(e.context.active(), d), () => b.call(this, c));
            return p(d, f);
          };
      }
    }
    function p(a, b) {
      return b instanceof Promise
        ? e.context.bind(
            e.context.active(),
            b
              .then((b) => (a.end(), b))
              .catch(
                (b) => (
                  a.setStatus({ code: e.SpanStatusCode.ERROR, message: g.getErrorMessage(b) }),
                  a.end(),
                  Promise.reject(b)
                )
              )
          )
        : b;
    }
    c.PgInstrumentation = o;
  },
  42686,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = c.PgInstrumentation = void 0));
    var d = a.r(81631);
    Object.defineProperty(c, 'PgInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.PgInstrumentation;
      },
    });
    var e = a.r(90058);
    Object.defineProperty(c, 'AttributeNames', {
      enumerable: !0,
      get: function () {
        return e.AttributeNames;
      },
    });
  },
  60972,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(42686),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Postgres',
      h = f.generateInstrumentOnce(
        g,
        () =>
          new d.PgInstrumentation({
            requireParentSpan: !0,
            requestHook(a) {
              f.addOriginToSpan(a, 'auto.db.otel.postgres');
            },
          })
      ),
      i = e.defineIntegration(() => ({
        name: g,
        setupOnce() {
          h();
        },
      }));
    ((c.instrumentPostgres = h), (c.postgresIntegration = i));
  },
  12494,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(79154),
      g = a.r(32723),
      h = a.r(28063),
      i = 'PostgresJs',
      j = ['>=3.0.0 <4'],
      k = h.generateInstrumentOnce(
        i,
        (a) => new l({ requireParentSpan: a?.requireParentSpan ?? !0, requestHook: a?.requestHook })
      );
    class l extends e.InstrumentationBase {
      constructor(a) {
        super('sentry-postgres-js', g.SDK_VERSION, a);
      }
      init() {
        let a = new e.InstrumentationNodeModuleDefinition('postgres', j);
        return (
          ['src', 'cf/src', 'cjs/src'].forEach((b) => {
            (a.files.push(
              new e.InstrumentationNodeModuleFile(
                `postgres/${b}/connection.js`,
                ['*'],
                this._patchConnection.bind(this),
                this._unwrap.bind(this)
              )
            ),
              a.files.push(
                new e.InstrumentationNodeModuleFile(
                  `postgres/${b}/query.js`,
                  j,
                  this._patchQuery.bind(this),
                  this._unwrap.bind(this)
                )
              ));
          }),
          [a]
        );
      }
      _shouldCreateSpans() {
        let a = this.getConfig();
        return void 0 !== d.trace.getSpan(d.context.active()) || !a.requireParentSpan;
      }
      _patchReject(a, b) {
        return new Proxy(a, {
          apply: (a, c, d) => {
            b.setStatus({ code: g.SPAN_STATUS_ERROR, message: d?.[0]?.message || 'unknown_error' });
            let e = Reflect.apply(a, c, d);
            return (
              b.setAttribute(f.ATTR_DB_RESPONSE_STATUS_CODE, d?.[0]?.code || 'Unknown error'),
              b.setAttribute(f.ATTR_ERROR_TYPE, d?.[0]?.name || 'Unknown error'),
              b.end(),
              e
            );
          },
        });
      }
      _patchResolve(a, b) {
        return new Proxy(a, {
          apply: (a, c, d) => {
            let e = Reflect.apply(a, c, d),
              g = d?.[0]?.command;
            return (g && b.setAttribute(f.ATTR_DB_OPERATION_NAME, g), b.end(), e);
          },
        });
      }
      _patchQuery(a) {
        return (
          (a.Query.prototype.handle = new Proxy(a.Query.prototype.handle, {
            apply: async (a, b, c) => {
              if (!this._shouldCreateSpans()) return Reflect.apply(a, b, c);
              let d = this._sanitizeSqlQuery(b.strings?.[0]);
              return g.startSpanManual({ name: d || 'postgresjs.query', op: 'db' }, (j) => {
                let k = g.getCurrentScope().getScopeData().contexts.postgresjsConnection;
                h.addOriginToSpan(j, 'auto.db.otel.postgres');
                let { requestHook: l } = this.getConfig();
                l &&
                  e.safeExecuteInTheMiddle(
                    () => l(j, d, k),
                    (a) => {
                      a && g.debug.error(`Error in requestHook for ${i} integration:`, a);
                    }
                  );
                let m = k?.ATTR_DB_NAMESPACE || '<unknown database>',
                  n = k?.ATTR_SERVER_ADDRESS || '<unknown host>',
                  o = k?.ATTR_SERVER_PORT || '<unknown port>';
                (j.setAttribute(f.ATTR_DB_SYSTEM_NAME, 'postgres'),
                  j.setAttribute(f.ATTR_DB_NAMESPACE, m),
                  j.setAttribute(f.ATTR_SERVER_ADDRESS, n),
                  j.setAttribute(f.ATTR_SERVER_PORT, o),
                  j.setAttribute(f.ATTR_DB_QUERY_TEXT, d),
                  (b.resolve = this._patchResolve(b.resolve, j)),
                  (b.reject = this._patchReject(b.reject, j)));
                try {
                  return Reflect.apply(a, b, c);
                } catch (a) {
                  throw (j.setStatus({ code: g.SPAN_STATUS_ERROR }), j.end(), a);
                }
              });
            },
          })),
          a
        );
      }
      _patchConnection(a) {
        return new Proxy(a, {
          apply: (a, b, c) => {
            let d = c[0]?.database || '<unknown database>',
              e = c[0]?.host?.[0] || '<unknown host>',
              f = c[0]?.port?.[0] || '<unknown port>';
            return (
              g
                .getCurrentScope()
                .setContext('postgresjsConnection', {
                  ATTR_DB_NAMESPACE: d,
                  ATTR_SERVER_ADDRESS: e,
                  ATTR_SERVER_PORT: f,
                }),
              Reflect.apply(a, b, c)
            );
          },
        });
      }
      _sanitizeSqlQuery(a) {
        return a
          ? a
              .replace(/\s+/g, ' ')
              .trim()
              .substring(0, 1024)
              .replace(/--.*?(\r?\n|$)/g, '')
              .replace(/\/\*[\s\S]*?\*\//g, '')
              .replace(/;\s*$/, '')
              .replace(/\b\d+\b/g, '?')
              .replace(/\s+/g, ' ')
              .replace(/\bIN\b\s*\(\s*\?(?:\s*,\s*\?)*\s*\)/g, 'IN (?)')
          : 'Unknown SQL Query';
      }
    }
    let m = g.defineIntegration(() => ({
      name: i,
      setupOnce() {
        k();
      },
    }));
    ((c.PostgresJsInstrumentation = l),
      (c.instrumentPostgresJs = k),
      (c.postgresJsIntegration = m));
  },
  2707,
  (a, b, c) => {
    'use strict';
    b.exports = {
      MAX_LENGTH: 256,
      MAX_SAFE_COMPONENT_LENGTH: 16,
      MAX_SAFE_BUILD_LENGTH: 250,
      MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 0x1fffffffffffff,
      RELEASE_TYPES: ['major', 'premajor', 'minor', 'preminor', 'patch', 'prepatch', 'prerelease'],
      SEMVER_SPEC_VERSION: '2.0.0',
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2,
    };
  },
  21173,
  (a, b, c) => {
    'use strict';
    b.exports =
      'object' == typeof process &&
      process.env &&
      process.env.NODE_DEBUG &&
      /\bsemver\b/i.test(process.env.NODE_DEBUG)
        ? (...a) => console.error('SEMVER', ...a)
        : () => {};
  },
  11039,
  (a, b, c) => {
    'use strict';
    let { MAX_SAFE_COMPONENT_LENGTH: d, MAX_SAFE_BUILD_LENGTH: e, MAX_LENGTH: f } = a.r(2707),
      g = a.r(21173),
      h = ((c = b.exports = {}).re = []),
      i = (c.safeRe = []),
      j = (c.src = []),
      k = (c.safeSrc = []),
      l = (c.t = {}),
      m = 0,
      n = '[a-zA-Z0-9-]',
      o = [
        ['\\s', 1],
        ['\\d', f],
        [n, e],
      ],
      p = (a, b, c) => {
        let d = ((a) => {
            for (let [b, c] of o)
              a = a.split(`${b}*`).join(`${b}{0,${c}}`).split(`${b}+`).join(`${b}{1,${c}}`);
            return a;
          })(b),
          e = m++;
        (g(a, e, b),
          (l[a] = e),
          (j[e] = b),
          (k[e] = d),
          (h[e] = new RegExp(b, c ? 'g' : void 0)),
          (i[e] = new RegExp(d, c ? 'g' : void 0)));
      };
    (p('NUMERICIDENTIFIER', '0|[1-9]\\d*'),
      p('NUMERICIDENTIFIERLOOSE', '\\d+'),
      p('NONNUMERICIDENTIFIER', `\\d*[a-zA-Z-]${n}*`),
      p(
        'MAINVERSION',
        `(${j[l.NUMERICIDENTIFIER]})\\.(${j[l.NUMERICIDENTIFIER]})\\.(${j[l.NUMERICIDENTIFIER]})`
      ),
      p(
        'MAINVERSIONLOOSE',
        `(${j[l.NUMERICIDENTIFIERLOOSE]})\\.(${j[l.NUMERICIDENTIFIERLOOSE]})\\.(${j[l.NUMERICIDENTIFIERLOOSE]})`
      ),
      p('PRERELEASEIDENTIFIER', `(?:${j[l.NONNUMERICIDENTIFIER]}|${j[l.NUMERICIDENTIFIER]})`),
      p(
        'PRERELEASEIDENTIFIERLOOSE',
        `(?:${j[l.NONNUMERICIDENTIFIER]}|${j[l.NUMERICIDENTIFIERLOOSE]})`
      ),
      p('PRERELEASE', `(?:-(${j[l.PRERELEASEIDENTIFIER]}(?:\\.${j[l.PRERELEASEIDENTIFIER]})*))`),
      p(
        'PRERELEASELOOSE',
        `(?:-?(${j[l.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${j[l.PRERELEASEIDENTIFIERLOOSE]})*))`
      ),
      p('BUILDIDENTIFIER', `${n}+`),
      p('BUILD', `(?:\\+(${j[l.BUILDIDENTIFIER]}(?:\\.${j[l.BUILDIDENTIFIER]})*))`),
      p('FULLPLAIN', `v?${j[l.MAINVERSION]}${j[l.PRERELEASE]}?${j[l.BUILD]}?`),
      p('FULL', `^${j[l.FULLPLAIN]}$`),
      p('LOOSEPLAIN', `[v=\\s]*${j[l.MAINVERSIONLOOSE]}${j[l.PRERELEASELOOSE]}?${j[l.BUILD]}?`),
      p('LOOSE', `^${j[l.LOOSEPLAIN]}$`),
      p('GTLT', '((?:<|>)?=?)'),
      p('XRANGEIDENTIFIERLOOSE', `${j[l.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),
      p('XRANGEIDENTIFIER', `${j[l.NUMERICIDENTIFIER]}|x|X|\\*`),
      p(
        'XRANGEPLAIN',
        `[v=\\s]*(${j[l.XRANGEIDENTIFIER]})(?:\\.(${j[l.XRANGEIDENTIFIER]})(?:\\.(${j[l.XRANGEIDENTIFIER]})(?:${j[l.PRERELEASE]})?${j[l.BUILD]}?)?)?`
      ),
      p(
        'XRANGEPLAINLOOSE',
        `[v=\\s]*(${j[l.XRANGEIDENTIFIERLOOSE]})(?:\\.(${j[l.XRANGEIDENTIFIERLOOSE]})(?:\\.(${j[l.XRANGEIDENTIFIERLOOSE]})(?:${j[l.PRERELEASELOOSE]})?${j[l.BUILD]}?)?)?`
      ),
      p('XRANGE', `^${j[l.GTLT]}\\s*${j[l.XRANGEPLAIN]}$`),
      p('XRANGELOOSE', `^${j[l.GTLT]}\\s*${j[l.XRANGEPLAINLOOSE]}$`),
      p('COERCEPLAIN', `(^|[^\\d])(\\d{1,${d}})(?:\\.(\\d{1,${d}}))?(?:\\.(\\d{1,${d}}))?`),
      p('COERCE', `${j[l.COERCEPLAIN]}(?:$|[^\\d])`),
      p(
        'COERCEFULL',
        j[l.COERCEPLAIN] + `(?:${j[l.PRERELEASE]})?` + `(?:${j[l.BUILD]})?` + '(?:$|[^\\d])'
      ),
      p('COERCERTL', j[l.COERCE], !0),
      p('COERCERTLFULL', j[l.COERCEFULL], !0),
      p('LONETILDE', '(?:~>?)'),
      p('TILDETRIM', `(\\s*)${j[l.LONETILDE]}\\s+`, !0),
      (c.tildeTrimReplace = '$1~'),
      p('TILDE', `^${j[l.LONETILDE]}${j[l.XRANGEPLAIN]}$`),
      p('TILDELOOSE', `^${j[l.LONETILDE]}${j[l.XRANGEPLAINLOOSE]}$`),
      p('LONECARET', '(?:\\^)'),
      p('CARETTRIM', `(\\s*)${j[l.LONECARET]}\\s+`, !0),
      (c.caretTrimReplace = '$1^'),
      p('CARET', `^${j[l.LONECARET]}${j[l.XRANGEPLAIN]}$`),
      p('CARETLOOSE', `^${j[l.LONECARET]}${j[l.XRANGEPLAINLOOSE]}$`),
      p('COMPARATORLOOSE', `^${j[l.GTLT]}\\s*(${j[l.LOOSEPLAIN]})$|^$`),
      p('COMPARATOR', `^${j[l.GTLT]}\\s*(${j[l.FULLPLAIN]})$|^$`),
      p('COMPARATORTRIM', `(\\s*)${j[l.GTLT]}\\s*(${j[l.LOOSEPLAIN]}|${j[l.XRANGEPLAIN]})`, !0),
      (c.comparatorTrimReplace = '$1$2$3'),
      p('HYPHENRANGE', `^\\s*(${j[l.XRANGEPLAIN]})\\s+-\\s+(${j[l.XRANGEPLAIN]})\\s*$`),
      p(
        'HYPHENRANGELOOSE',
        `^\\s*(${j[l.XRANGEPLAINLOOSE]})\\s+-\\s+(${j[l.XRANGEPLAINLOOSE]})\\s*$`
      ),
      p('STAR', '(<|>)?=?\\s*\\*'),
      p('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$'),
      p('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$'));
  },
  54404,
  (a, b, c) => {
    'use strict';
    let d = Object.freeze({ loose: !0 }),
      e = Object.freeze({});
    b.exports = (a) => (a ? ('object' != typeof a ? d : a) : e);
  },
  57153,
  (a, b, c) => {
    'use strict';
    let d = /^[0-9]+$/,
      e = (a, b) => {
        let c = d.test(a),
          e = d.test(b);
        return (
          c && e && ((a *= 1), (b *= 1)),
          a === b ? 0 : c && !e ? -1 : e && !c ? 1 : a < b ? -1 : 1
        );
      };
    b.exports = { compareIdentifiers: e, rcompareIdentifiers: (a, b) => e(b, a) };
  },
  12975,
  (a, b, c) => {
    'use strict';
    let d = a.r(21173),
      { MAX_LENGTH: e, MAX_SAFE_INTEGER: f } = a.r(2707),
      { safeRe: g, t: h } = a.r(11039),
      i = a.r(54404),
      { compareIdentifiers: j } = a.r(57153);
    class k {
      constructor(a, b) {
        if (((b = i(b)), a instanceof k))
          if (!!b.loose === a.loose && !!b.includePrerelease === a.includePrerelease) return a;
          else a = a.version;
        else if ('string' != typeof a)
          throw TypeError(`Invalid version. Must be a string. Got type "${typeof a}".`);
        if (a.length > e) throw TypeError(`version is longer than ${e} characters`);
        (d('SemVer', a, b),
          (this.options = b),
          (this.loose = !!b.loose),
          (this.includePrerelease = !!b.includePrerelease));
        let c = a.trim().match(b.loose ? g[h.LOOSE] : g[h.FULL]);
        if (!c) throw TypeError(`Invalid Version: ${a}`);
        if (
          ((this.raw = a),
          (this.major = +c[1]),
          (this.minor = +c[2]),
          (this.patch = +c[3]),
          this.major > f || this.major < 0)
        )
          throw TypeError('Invalid major version');
        if (this.minor > f || this.minor < 0) throw TypeError('Invalid minor version');
        if (this.patch > f || this.patch < 0) throw TypeError('Invalid patch version');
        (c[4]
          ? (this.prerelease = c[4].split('.').map((a) => {
              if (/^[0-9]+$/.test(a)) {
                let b = +a;
                if (b >= 0 && b < f) return b;
              }
              return a;
            }))
          : (this.prerelease = []),
          (this.build = c[5] ? c[5].split('.') : []),
          this.format());
      }
      format() {
        return (
          (this.version = `${this.major}.${this.minor}.${this.patch}`),
          this.prerelease.length && (this.version += `-${this.prerelease.join('.')}`),
          this.version
        );
      }
      toString() {
        return this.version;
      }
      compare(a) {
        if ((d('SemVer.compare', this.version, this.options, a), !(a instanceof k))) {
          if ('string' == typeof a && a === this.version) return 0;
          a = new k(a, this.options);
        }
        return a.version === this.version ? 0 : this.compareMain(a) || this.comparePre(a);
      }
      compareMain(a) {
        return (
          a instanceof k || (a = new k(a, this.options)),
          j(this.major, a.major) || j(this.minor, a.minor) || j(this.patch, a.patch)
        );
      }
      comparePre(a) {
        if (
          (a instanceof k || (a = new k(a, this.options)),
          this.prerelease.length && !a.prerelease.length)
        )
          return -1;
        if (!this.prerelease.length && a.prerelease.length) return 1;
        if (!this.prerelease.length && !a.prerelease.length) return 0;
        let b = 0;
        do {
          let c = this.prerelease[b],
            e = a.prerelease[b];
          if ((d('prerelease compare', b, c, e), void 0 === c && void 0 === e)) return 0;
          if (void 0 === e) return 1;
          if (void 0 === c) return -1;
          else if (c === e) continue;
          else return j(c, e);
        } while (++b);
      }
      compareBuild(a) {
        a instanceof k || (a = new k(a, this.options));
        let b = 0;
        do {
          let c = this.build[b],
            e = a.build[b];
          if ((d('build compare', b, c, e), void 0 === c && void 0 === e)) return 0;
          if (void 0 === e) return 1;
          if (void 0 === c) return -1;
          else if (c === e) continue;
          else return j(c, e);
        } while (++b);
      }
      inc(a, b, c) {
        if (a.startsWith('pre')) {
          if (!b && !1 === c) throw Error('invalid increment argument: identifier is empty');
          if (b) {
            let a = `-${b}`.match(this.options.loose ? g[h.PRERELEASELOOSE] : g[h.PRERELEASE]);
            if (!a || a[1] !== b) throw Error(`invalid identifier: ${b}`);
          }
        }
        switch (a) {
          case 'premajor':
            ((this.prerelease.length = 0),
              (this.patch = 0),
              (this.minor = 0),
              this.major++,
              this.inc('pre', b, c));
            break;
          case 'preminor':
            ((this.prerelease.length = 0), (this.patch = 0), this.minor++, this.inc('pre', b, c));
            break;
          case 'prepatch':
            ((this.prerelease.length = 0), this.inc('patch', b, c), this.inc('pre', b, c));
            break;
          case 'prerelease':
            (0 === this.prerelease.length && this.inc('patch', b, c), this.inc('pre', b, c));
            break;
          case 'release':
            if (0 === this.prerelease.length)
              throw Error(`version ${this.raw} is not a prerelease`);
            this.prerelease.length = 0;
            break;
          case 'major':
            ((0 !== this.minor || 0 !== this.patch || 0 === this.prerelease.length) && this.major++,
              (this.minor = 0),
              (this.patch = 0),
              (this.prerelease = []));
            break;
          case 'minor':
            ((0 !== this.patch || 0 === this.prerelease.length) && this.minor++,
              (this.patch = 0),
              (this.prerelease = []));
            break;
          case 'patch':
            (0 === this.prerelease.length && this.patch++, (this.prerelease = []));
            break;
          case 'pre': {
            let a = +!!Number(c);
            if (0 === this.prerelease.length) this.prerelease = [a];
            else {
              let d = this.prerelease.length;
              for (; --d >= 0; )
                'number' == typeof this.prerelease[d] && (this.prerelease[d]++, (d = -2));
              if (-1 === d) {
                if (b === this.prerelease.join('.') && !1 === c)
                  throw Error('invalid increment argument: identifier already exists');
                this.prerelease.push(a);
              }
            }
            if (b) {
              let d = [b, a];
              (!1 === c && (d = [b]),
                0 === j(this.prerelease[0], b)
                  ? isNaN(this.prerelease[1]) && (this.prerelease = d)
                  : (this.prerelease = d));
            }
            break;
          }
          default:
            throw Error(`invalid increment argument: ${a}`);
        }
        return (
          (this.raw = this.format()),
          this.build.length && (this.raw += `+${this.build.join('.')}`),
          this
        );
      }
    }
    b.exports = k;
  },
  7570,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975);
    b.exports = (a, b, c = !1) => {
      if (a instanceof d) return a;
      try {
        return new d(a, b);
      } catch (a) {
        if (!c) return null;
        throw a;
      }
    };
  },
  17456,
  (a, b, c) => {
    'use strict';
    let d = a.r(7570);
    b.exports = (a, b) => {
      let c = d(a, b);
      return c ? c.version : null;
    };
  },
  2088,
  (a, b, c) => {
    'use strict';
    let d = a.r(7570);
    b.exports = (a, b) => {
      let c = d(a.trim().replace(/^[=v]+/, ''), b);
      return c ? c.version : null;
    };
  },
  81070,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975);
    b.exports = (a, b, c, e, f) => {
      'string' == typeof c && ((f = e), (e = c), (c = void 0));
      try {
        return new d(a instanceof d ? a.version : a, c).inc(b, e, f).version;
      } catch (a) {
        return null;
      }
    };
  },
  1300,
  (a, b, c) => {
    'use strict';
    let d = a.r(7570);
    b.exports = (a, b) => {
      let c = d(a, null, !0),
        e = d(b, null, !0),
        f = c.compare(e);
      if (0 === f) return null;
      let g = f > 0,
        h = g ? c : e,
        i = g ? e : c,
        j = !!h.prerelease.length;
      if (i.prerelease.length && !j) {
        if (!i.patch && !i.minor) return 'major';
        if (0 === i.compareMain(h)) return i.minor && !i.patch ? 'minor' : 'patch';
      }
      let k = j ? 'pre' : '';
      return c.major !== e.major
        ? k + 'major'
        : c.minor !== e.minor
          ? k + 'minor'
          : c.patch !== e.patch
            ? k + 'patch'
            : 'prerelease';
    };
  },
  79060,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975);
    b.exports = (a, b) => new d(a, b).major;
  },
  55371,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975);
    b.exports = (a, b) => new d(a, b).minor;
  },
  17232,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975);
    b.exports = (a, b) => new d(a, b).patch;
  },
  90583,
  (a, b, c) => {
    'use strict';
    let d = a.r(7570);
    b.exports = (a, b) => {
      let c = d(a, b);
      return c && c.prerelease.length ? c.prerelease : null;
    };
  },
  95965,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975);
    b.exports = (a, b, c) => new d(a, c).compare(new d(b, c));
  },
  29721,
  (a, b, c) => {
    'use strict';
    let d = a.r(95965);
    b.exports = (a, b, c) => d(b, a, c);
  },
  3844,
  (a, b, c) => {
    'use strict';
    let d = a.r(95965);
    b.exports = (a, b) => d(a, b, !0);
  },
  54658,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975);
    b.exports = (a, b, c) => {
      let e = new d(a, c),
        f = new d(b, c);
      return e.compare(f) || e.compareBuild(f);
    };
  },
  97873,
  (a, b, c) => {
    'use strict';
    let d = a.r(54658);
    b.exports = (a, b) => a.sort((a, c) => d(a, c, b));
  },
  12918,
  (a, b, c) => {
    'use strict';
    let d = a.r(54658);
    b.exports = (a, b) => a.sort((a, c) => d(c, a, b));
  },
  29794,
  (a, b, c) => {
    'use strict';
    let d = a.r(95965);
    b.exports = (a, b, c) => d(a, b, c) > 0;
  },
  36831,
  (a, b, c) => {
    'use strict';
    let d = a.r(95965);
    b.exports = (a, b, c) => 0 > d(a, b, c);
  },
  98379,
  (a, b, c) => {
    'use strict';
    let d = a.r(95965);
    b.exports = (a, b, c) => 0 === d(a, b, c);
  },
  11916,
  (a, b, c) => {
    'use strict';
    let d = a.r(95965);
    b.exports = (a, b, c) => 0 !== d(a, b, c);
  },
  53551,
  (a, b, c) => {
    'use strict';
    let d = a.r(95965);
    b.exports = (a, b, c) => d(a, b, c) >= 0;
  },
  79354,
  (a, b, c) => {
    'use strict';
    let d = a.r(95965);
    b.exports = (a, b, c) => 0 >= d(a, b, c);
  },
  93403,
  (a, b, c) => {
    'use strict';
    let d = a.r(98379),
      e = a.r(11916),
      f = a.r(29794),
      g = a.r(53551),
      h = a.r(36831),
      i = a.r(79354);
    b.exports = (a, b, c, j) => {
      switch (b) {
        case '===':
          return (
            'object' == typeof a && (a = a.version),
            'object' == typeof c && (c = c.version),
            a === c
          );
        case '!==':
          return (
            'object' == typeof a && (a = a.version),
            'object' == typeof c && (c = c.version),
            a !== c
          );
        case '':
        case '=':
        case '==':
          return d(a, c, j);
        case '!=':
          return e(a, c, j);
        case '>':
          return f(a, c, j);
        case '>=':
          return g(a, c, j);
        case '<':
          return h(a, c, j);
        case '<=':
          return i(a, c, j);
        default:
          throw TypeError(`Invalid operator: ${b}`);
      }
    };
  },
  99080,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975),
      e = a.r(7570),
      { safeRe: f, t: g } = a.r(11039);
    b.exports = (a, b) => {
      if (a instanceof d) return a;
      if (('number' == typeof a && (a = String(a)), 'string' != typeof a)) return null;
      let c = null;
      if ((b = b || {}).rtl) {
        let d,
          e = b.includePrerelease ? f[g.COERCERTLFULL] : f[g.COERCERTL];
        for (; (d = e.exec(a)) && (!c || c.index + c[0].length !== a.length); )
          ((c && d.index + d[0].length === c.index + c[0].length) || (c = d),
            (e.lastIndex = d.index + d[1].length + d[2].length));
        e.lastIndex = -1;
      } else c = a.match(b.includePrerelease ? f[g.COERCEFULL] : f[g.COERCE]);
      if (null === c) return null;
      let h = c[2],
        i = c[3] || '0',
        j = c[4] || '0',
        k = b.includePrerelease && c[5] ? `-${c[5]}` : '',
        l = b.includePrerelease && c[6] ? `+${c[6]}` : '';
      return e(`${h}.${i}.${j}${k}${l}`, b);
    };
  },
  92846,
  (a, b, c) => {
    'use strict';
    b.exports = class {
      constructor() {
        ((this.max = 1e3), (this.map = new Map()));
      }
      get(a) {
        let b = this.map.get(a);
        if (void 0 !== b) return (this.map.delete(a), this.map.set(a, b), b);
      }
      delete(a) {
        return this.map.delete(a);
      }
      set(a, b) {
        if (!this.delete(a) && void 0 !== b) {
          if (this.map.size >= this.max) {
            let a = this.map.keys().next().value;
            this.delete(a);
          }
          this.map.set(a, b);
        }
        return this;
      }
    };
  },
  88064,
  (a, b, c) => {
    'use strict';
    let d = /\s+/g;
    class e {
      constructor(a, b) {
        if (((b = g(b)), a instanceof e))
          if (!!b.loose === a.loose && !!b.includePrerelease === a.includePrerelease) return a;
          else return new e(a.raw, b);
        if (a instanceof h)
          return ((this.raw = a.value), (this.set = [[a]]), (this.formatted = void 0), this);
        if (
          ((this.options = b),
          (this.loose = !!b.loose),
          (this.includePrerelease = !!b.includePrerelease),
          (this.raw = a.trim().replace(d, ' ')),
          (this.set = this.raw
            .split('||')
            .map((a) => this.parseRange(a.trim()))
            .filter((a) => a.length)),
          !this.set.length)
        )
          throw TypeError(`Invalid SemVer Range: ${this.raw}`);
        if (this.set.length > 1) {
          let a = this.set[0];
          if (((this.set = this.set.filter((a) => !r(a[0]))), 0 === this.set.length))
            this.set = [a];
          else if (this.set.length > 1) {
            for (let a of this.set)
              if (1 === a.length && s(a[0])) {
                this.set = [a];
                break;
              }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (void 0 === this.formatted) {
          this.formatted = '';
          for (let a = 0; a < this.set.length; a++) {
            a > 0 && (this.formatted += '||');
            let b = this.set[a];
            for (let a = 0; a < b.length; a++)
              (a > 0 && (this.formatted += ' '), (this.formatted += b[a].toString().trim()));
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(a) {
        let b = ((this.options.includePrerelease && p) | (this.options.loose && q)) + ':' + a,
          c = f.get(b);
        if (c) return c;
        let d = this.options.loose,
          e = d ? k[l.HYPHENRANGELOOSE] : k[l.HYPHENRANGE];
        (i('hyphen replace', (a = a.replace(e, E(this.options.includePrerelease)))),
          i('comparator trim', (a = a.replace(k[l.COMPARATORTRIM], m))),
          i('tilde trim', (a = a.replace(k[l.TILDETRIM], n))),
          i('caret trim', (a = a.replace(k[l.CARETTRIM], o))));
        let g = a
          .split(' ')
          .map((a) => u(a, this.options))
          .join(' ')
          .split(/\s+/)
          .map((a) => D(a, this.options));
        (d &&
          (g = g.filter(
            (a) => (i('loose invalid filter', a, this.options), !!a.match(k[l.COMPARATORLOOSE]))
          )),
          i('range list', g));
        let j = new Map();
        for (let a of g.map((a) => new h(a, this.options))) {
          if (r(a)) return [a];
          j.set(a.value, a);
        }
        j.size > 1 && j.has('') && j.delete('');
        let s = [...j.values()];
        return (f.set(b, s), s);
      }
      intersects(a, b) {
        if (!(a instanceof e)) throw TypeError('a Range is required');
        return this.set.some(
          (c) =>
            t(c, b) &&
            a.set.some((a) => t(a, b) && c.every((c) => a.every((a) => c.intersects(a, b))))
        );
      }
      test(a) {
        if (!a) return !1;
        if ('string' == typeof a)
          try {
            a = new j(a, this.options);
          } catch (a) {
            return !1;
          }
        for (let b = 0; b < this.set.length; b++) if (F(this.set[b], a, this.options)) return !0;
        return !1;
      }
    }
    b.exports = e;
    let f = new (a.r(92846))(),
      g = a.r(54404),
      h = a.r(19603),
      i = a.r(21173),
      j = a.r(12975),
      {
        safeRe: k,
        t: l,
        comparatorTrimReplace: m,
        tildeTrimReplace: n,
        caretTrimReplace: o,
      } = a.r(11039),
      { FLAG_INCLUDE_PRERELEASE: p, FLAG_LOOSE: q } = a.r(2707),
      r = (a) => '<0.0.0-0' === a.value,
      s = (a) => '' === a.value,
      t = (a, b) => {
        let c = !0,
          d = a.slice(),
          e = d.pop();
        for (; c && d.length; ) ((c = d.every((a) => e.intersects(a, b))), (e = d.pop()));
        return c;
      },
      u = (a, b) => (
        i('comp', a, b),
        i('caret', (a = y(a, b))),
        i('tildes', (a = w(a, b))),
        i('xrange', (a = A(a, b))),
        i('stars', (a = C(a, b))),
        a
      ),
      v = (a) => !a || 'x' === a.toLowerCase() || '*' === a,
      w = (a, b) =>
        a
          .trim()
          .split(/\s+/)
          .map((a) => x(a, b))
          .join(' '),
      x = (a, b) => {
        let c = b.loose ? k[l.TILDELOOSE] : k[l.TILDE];
        return a.replace(c, (b, c, d, e, f) => {
          let g;
          return (
            i('tilde', a, b, c, d, e, f),
            v(c)
              ? (g = '')
              : v(d)
                ? (g = `>=${c}.0.0 <${+c + 1}.0.0-0`)
                : v(e)
                  ? (g = `>=${c}.${d}.0 <${c}.${+d + 1}.0-0`)
                  : f
                    ? (i('replaceTilde pr', f), (g = `>=${c}.${d}.${e}-${f} <${c}.${+d + 1}.0-0`))
                    : (g = `>=${c}.${d}.${e} <${c}.${+d + 1}.0-0`),
            i('tilde return', g),
            g
          );
        });
      },
      y = (a, b) =>
        a
          .trim()
          .split(/\s+/)
          .map((a) => z(a, b))
          .join(' '),
      z = (a, b) => {
        i('caret', a, b);
        let c = b.loose ? k[l.CARETLOOSE] : k[l.CARET],
          d = b.includePrerelease ? '-0' : '';
        return a.replace(c, (b, c, e, f, g) => {
          let h;
          return (
            i('caret', a, b, c, e, f, g),
            v(c)
              ? (h = '')
              : v(e)
                ? (h = `>=${c}.0.0${d} <${+c + 1}.0.0-0`)
                : v(f)
                  ? (h =
                      '0' === c
                        ? `>=${c}.${e}.0${d} <${c}.${+e + 1}.0-0`
                        : `>=${c}.${e}.0${d} <${+c + 1}.0.0-0`)
                  : g
                    ? (i('replaceCaret pr', g),
                      (h =
                        '0' === c
                          ? '0' === e
                            ? `>=${c}.${e}.${f}-${g} <${c}.${e}.${+f + 1}-0`
                            : `>=${c}.${e}.${f}-${g} <${c}.${+e + 1}.0-0`
                          : `>=${c}.${e}.${f}-${g} <${+c + 1}.0.0-0`))
                    : (i('no pr'),
                      (h =
                        '0' === c
                          ? '0' === e
                            ? `>=${c}.${e}.${f}${d} <${c}.${e}.${+f + 1}-0`
                            : `>=${c}.${e}.${f}${d} <${c}.${+e + 1}.0-0`
                          : `>=${c}.${e}.${f} <${+c + 1}.0.0-0`)),
            i('caret return', h),
            h
          );
        });
      },
      A = (a, b) => (
        i('replaceXRanges', a, b),
        a
          .split(/\s+/)
          .map((a) => B(a, b))
          .join(' ')
      ),
      B = (a, b) => {
        a = a.trim();
        let c = b.loose ? k[l.XRANGELOOSE] : k[l.XRANGE];
        return a.replace(c, (c, d, e, f, g, h) => {
          i('xRange', a, c, d, e, f, g, h);
          let j = v(e),
            k = j || v(f),
            l = k || v(g);
          return (
            '=' === d && l && (d = ''),
            (h = b.includePrerelease ? '-0' : ''),
            j
              ? (c = '>' === d || '<' === d ? '<0.0.0-0' : '*')
              : d && l
                ? (k && (f = 0),
                  (g = 0),
                  '>' === d
                    ? ((d = '>='), k ? ((e = +e + 1), (f = 0)) : (f = +f + 1), (g = 0))
                    : '<=' === d && ((d = '<'), k ? (e = +e + 1) : (f = +f + 1)),
                  '<' === d && (h = '-0'),
                  (c = `${d + e}.${f}.${g}${h}`))
                : k
                  ? (c = `>=${e}.0.0${h} <${+e + 1}.0.0-0`)
                  : l && (c = `>=${e}.${f}.0${h} <${e}.${+f + 1}.0-0`),
            i('xRange return', c),
            c
          );
        });
      },
      C = (a, b) => (i('replaceStars', a, b), a.trim().replace(k[l.STAR], '')),
      D = (a, b) => (
        i('replaceGTE0', a, b),
        a.trim().replace(k[b.includePrerelease ? l.GTE0PRE : l.GTE0], '')
      ),
      E = (a) => (b, c, d, e, f, g, h, i, j, k, l, m) => (
        (c = v(d)
          ? ''
          : v(e)
            ? `>=${d}.0.0${a ? '-0' : ''}`
            : v(f)
              ? `>=${d}.${e}.0${a ? '-0' : ''}`
              : g
                ? `>=${c}`
                : `>=${c}${a ? '-0' : ''}`),
        (i = v(j)
          ? ''
          : v(k)
            ? `<${+j + 1}.0.0-0`
            : v(l)
              ? `<${j}.${+k + 1}.0-0`
              : m
                ? `<=${j}.${k}.${l}-${m}`
                : a
                  ? `<${j}.${k}.${+l + 1}-0`
                  : `<=${i}`),
        `${c} ${i}`.trim()
      ),
      F = (a, b, c) => {
        for (let c = 0; c < a.length; c++) if (!a[c].test(b)) return !1;
        if (b.prerelease.length && !c.includePrerelease) {
          for (let c = 0; c < a.length; c++)
            if ((i(a[c].semver), a[c].semver !== h.ANY && a[c].semver.prerelease.length > 0)) {
              let d = a[c].semver;
              if (d.major === b.major && d.minor === b.minor && d.patch === b.patch) return !0;
            }
          return !1;
        }
        return !0;
      };
  },
  19603,
  (a, b, c) => {
    'use strict';
    let d = Symbol('SemVer ANY');
    class e {
      static get ANY() {
        return d;
      }
      constructor(a, b) {
        if (((b = f(b)), a instanceof e))
          if (!!b.loose === a.loose) return a;
          else a = a.value;
        (j('comparator', (a = a.trim().split(/\s+/).join(' ')), b),
          (this.options = b),
          (this.loose = !!b.loose),
          this.parse(a),
          this.semver === d
            ? (this.value = '')
            : (this.value = this.operator + this.semver.version),
          j('comp', this));
      }
      parse(a) {
        let b = this.options.loose ? g[h.COMPARATORLOOSE] : g[h.COMPARATOR],
          c = a.match(b);
        if (!c) throw TypeError(`Invalid comparator: ${a}`);
        ((this.operator = void 0 !== c[1] ? c[1] : ''),
          '=' === this.operator && (this.operator = ''),
          c[2] ? (this.semver = new k(c[2], this.options.loose)) : (this.semver = d));
      }
      toString() {
        return this.value;
      }
      test(a) {
        if ((j('Comparator.test', a, this.options.loose), this.semver === d || a === d)) return !0;
        if ('string' == typeof a)
          try {
            a = new k(a, this.options);
          } catch (a) {
            return !1;
          }
        return i(a, this.operator, this.semver, this.options);
      }
      intersects(a, b) {
        if (!(a instanceof e)) throw TypeError('a Comparator is required');
        return '' === this.operator
          ? '' === this.value || new l(a.value, b).test(this.value)
          : '' === a.operator
            ? '' === a.value || new l(this.value, b).test(a.semver)
            : !(
                ((b = f(b)).includePrerelease &&
                  ('<0.0.0-0' === this.value || '<0.0.0-0' === a.value)) ||
                (!b.includePrerelease &&
                  (this.value.startsWith('<0.0.0') || a.value.startsWith('<0.0.0')))
              ) &&
              !!(
                (this.operator.startsWith('>') && a.operator.startsWith('>')) ||
                (this.operator.startsWith('<') && a.operator.startsWith('<')) ||
                (this.semver.version === a.semver.version &&
                  this.operator.includes('=') &&
                  a.operator.includes('=')) ||
                (i(this.semver, '<', a.semver, b) &&
                  this.operator.startsWith('>') &&
                  a.operator.startsWith('<')) ||
                (i(this.semver, '>', a.semver, b) &&
                  this.operator.startsWith('<') &&
                  a.operator.startsWith('>'))
              );
      }
    }
    b.exports = e;
    let f = a.r(54404),
      { safeRe: g, t: h } = a.r(11039),
      i = a.r(93403),
      j = a.r(21173),
      k = a.r(12975),
      l = a.r(88064);
  },
  27757,
  (a, b, c) => {
    'use strict';
    let d = a.r(88064);
    b.exports = (a, b, c) => {
      try {
        b = new d(b, c);
      } catch (a) {
        return !1;
      }
      return b.test(a);
    };
  },
  73953,
  (a, b, c) => {
    'use strict';
    let d = a.r(88064);
    b.exports = (a, b) =>
      new d(a, b).set.map((a) =>
        a
          .map((a) => a.value)
          .join(' ')
          .trim()
          .split(' ')
      );
  },
  22130,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975),
      e = a.r(88064);
    b.exports = (a, b, c) => {
      let f = null,
        g = null,
        h = null;
      try {
        h = new e(b, c);
      } catch (a) {
        return null;
      }
      return (
        a.forEach((a) => {
          h.test(a) && (!f || -1 === g.compare(a)) && (g = new d((f = a), c));
        }),
        f
      );
    };
  },
  16632,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975),
      e = a.r(88064);
    b.exports = (a, b, c) => {
      let f = null,
        g = null,
        h = null;
      try {
        h = new e(b, c);
      } catch (a) {
        return null;
      }
      return (
        a.forEach((a) => {
          h.test(a) && (!f || 1 === g.compare(a)) && (g = new d((f = a), c));
        }),
        f
      );
    };
  },
  89650,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975),
      e = a.r(88064),
      f = a.r(29794);
    b.exports = (a, b) => {
      a = new e(a, b);
      let c = new d('0.0.0');
      if (a.test(c) || ((c = new d('0.0.0-0')), a.test(c))) return c;
      c = null;
      for (let b = 0; b < a.set.length; ++b) {
        let e = a.set[b],
          g = null;
        (e.forEach((a) => {
          let b = new d(a.semver.version);
          switch (a.operator) {
            case '>':
              (0 === b.prerelease.length ? b.patch++ : b.prerelease.push(0), (b.raw = b.format()));
            case '':
            case '>=':
              (!g || f(b, g)) && (g = b);
              break;
            case '<':
            case '<=':
              break;
            default:
              throw Error(`Unexpected operation: ${a.operator}`);
          }
        }),
          g && (!c || f(c, g)) && (c = g));
      }
      return c && a.test(c) ? c : null;
    };
  },
  83131,
  (a, b, c) => {
    'use strict';
    let d = a.r(88064);
    b.exports = (a, b) => {
      try {
        return new d(a, b).range || '*';
      } catch (a) {
        return null;
      }
    };
  },
  63022,
  (a, b, c) => {
    'use strict';
    let d = a.r(12975),
      e = a.r(19603),
      { ANY: f } = e,
      g = a.r(88064),
      h = a.r(27757),
      i = a.r(29794),
      j = a.r(36831),
      k = a.r(79354),
      l = a.r(53551);
    b.exports = (a, b, c, m) => {
      let n, o, p, q, r;
      switch (((a = new d(a, m)), (b = new g(b, m)), c)) {
        case '>':
          ((n = i), (o = k), (p = j), (q = '>'), (r = '>='));
          break;
        case '<':
          ((n = j), (o = l), (p = i), (q = '<'), (r = '<='));
          break;
        default:
          throw TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (h(a, b, m)) return !1;
      for (let c = 0; c < b.set.length; ++c) {
        let d = b.set[c],
          g = null,
          h = null;
        if (
          (d.forEach((a) => {
            (a.semver === f && (a = new e('>=0.0.0')),
              (g = g || a),
              (h = h || a),
              n(a.semver, g.semver, m) ? (g = a) : p(a.semver, h.semver, m) && (h = a));
          }),
          g.operator === q ||
            g.operator === r ||
            ((!h.operator || h.operator === q) && o(a, h.semver)) ||
            (h.operator === r && p(a, h.semver)))
        )
          return !1;
      }
      return !0;
    };
  },
  81509,
  (a, b, c) => {
    'use strict';
    let d = a.r(63022);
    b.exports = (a, b, c) => d(a, b, '>', c);
  },
  25749,
  (a, b, c) => {
    'use strict';
    let d = a.r(63022);
    b.exports = (a, b, c) => d(a, b, '<', c);
  },
  82817,
  (a, b, c) => {
    'use strict';
    let d = a.r(88064);
    b.exports = (a, b, c) => ((a = new d(a, c)), (b = new d(b, c)), a.intersects(b, c));
  },
  52768,
  (a, b, c) => {
    'use strict';
    let d = a.r(27757),
      e = a.r(95965);
    b.exports = (a, b, c) => {
      let f = [],
        g = null,
        h = null,
        i = a.sort((a, b) => e(a, b, c));
      for (let a of i)
        d(a, b, c) ? ((h = a), g || (g = a)) : (h && f.push([g, h]), (h = null), (g = null));
      g && f.push([g, null]);
      let j = [];
      for (let [a, b] of f)
        a === b
          ? j.push(a)
          : b || a !== i[0]
            ? b
              ? a === i[0]
                ? j.push(`<=${b}`)
                : j.push(`${a} - ${b}`)
              : j.push(`>=${a}`)
            : j.push('*');
      let k = j.join(' || '),
        l = 'string' == typeof b.raw ? b.raw : String(b);
      return k.length < l.length ? k : b;
    };
  },
  27102,
  (a, b, c) => {
    'use strict';
    let d = a.r(88064),
      e = a.r(19603),
      { ANY: f } = e,
      g = a.r(27757),
      h = a.r(95965),
      i = [new e('>=0.0.0-0')],
      j = [new e('>=0.0.0')],
      k = (a, b, c) => {
        let d, e, k, n, o, p, q;
        if (a === b) return !0;
        if (1 === a.length && a[0].semver === f)
          if (1 === b.length && b[0].semver === f) return !0;
          else a = c.includePrerelease ? i : j;
        if (1 === b.length && b[0].semver === f)
          if (c.includePrerelease) return !0;
          else b = j;
        let r = new Set();
        for (let b of a)
          '>' === b.operator || '>=' === b.operator
            ? (d = l(d, b, c))
            : '<' === b.operator || '<=' === b.operator
              ? (e = m(e, b, c))
              : r.add(b.semver);
        if (r.size > 1) return null;
        if (
          d &&
          e &&
          ((k = h(d.semver, e.semver, c)) > 0 ||
            (0 === k && ('>=' !== d.operator || '<=' !== e.operator)))
        )
          return null;
        for (let a of r) {
          if ((d && !g(a, String(d), c)) || (e && !g(a, String(e), c))) return null;
          for (let d of b) if (!g(a, String(d), c)) return !1;
          return !0;
        }
        let s = !!e && !c.includePrerelease && !!e.semver.prerelease.length && e.semver,
          t = !!d && !c.includePrerelease && !!d.semver.prerelease.length && d.semver;
        for (let a of (s &&
          1 === s.prerelease.length &&
          '<' === e.operator &&
          0 === s.prerelease[0] &&
          (s = !1),
        b)) {
          if (
            ((q = q || '>' === a.operator || '>=' === a.operator),
            (p = p || '<' === a.operator || '<=' === a.operator),
            d)
          ) {
            if (
              (t &&
                a.semver.prerelease &&
                a.semver.prerelease.length &&
                a.semver.major === t.major &&
                a.semver.minor === t.minor &&
                a.semver.patch === t.patch &&
                (t = !1),
              '>' === a.operator || '>=' === a.operator)
            ) {
              if ((n = l(d, a, c)) === a && n !== d) return !1;
            } else if ('>=' === d.operator && !g(d.semver, String(a), c)) return !1;
          }
          if (e) {
            if (
              (s &&
                a.semver.prerelease &&
                a.semver.prerelease.length &&
                a.semver.major === s.major &&
                a.semver.minor === s.minor &&
                a.semver.patch === s.patch &&
                (s = !1),
              '<' === a.operator || '<=' === a.operator)
            ) {
              if ((o = m(e, a, c)) === a && o !== e) return !1;
            } else if ('<=' === e.operator && !g(e.semver, String(a), c)) return !1;
          }
          if (!a.operator && (e || d) && 0 !== k) return !1;
        }
        return (!d || !p || !!e || 0 === k) && (!e || !q || !!d || 0 === k) && !t && !s && !0;
      },
      l = (a, b, c) => {
        if (!a) return b;
        let d = h(a.semver, b.semver, c);
        return d > 0 ? a : d < 0 || ('>' === b.operator && '>=' === a.operator) ? b : a;
      },
      m = (a, b, c) => {
        if (!a) return b;
        let d = h(a.semver, b.semver, c);
        return d < 0 ? a : d > 0 || ('<' === b.operator && '<=' === a.operator) ? b : a;
      };
    b.exports = (a, b, c = {}) => {
      if (a === b) return !0;
      ((a = new d(a, c)), (b = new d(b, c)));
      let e = !1;
      b: for (let d of a.set) {
        for (let a of b.set) {
          let b = k(d, a, c);
          if (((e = e || null !== b), b)) continue b;
        }
        if (e) return !1;
      }
      return !0;
    };
  },
  12510,
  (a, b, c) => {
    'use strict';
    let d = a.r(11039),
      e = a.r(2707),
      f = a.r(12975),
      g = a.r(57153),
      h = a.r(7570),
      i = a.r(17456),
      j = a.r(2088),
      k = a.r(81070),
      l = a.r(1300),
      m = a.r(79060),
      n = a.r(55371),
      o = a.r(17232),
      p = a.r(90583),
      q = a.r(95965),
      r = a.r(29721),
      s = a.r(3844),
      t = a.r(54658),
      u = a.r(97873),
      v = a.r(12918),
      w = a.r(29794),
      x = a.r(36831),
      y = a.r(98379),
      z = a.r(11916),
      A = a.r(53551),
      B = a.r(79354),
      C = a.r(93403),
      D = a.r(99080),
      E = a.r(19603),
      F = a.r(88064),
      G = a.r(27757),
      H = a.r(73953),
      I = a.r(22130),
      J = a.r(16632),
      K = a.r(89650),
      L = a.r(83131),
      M = a.r(63022),
      N = a.r(81509),
      O = a.r(25749),
      P = a.r(82817);
    b.exports = {
      parse: h,
      valid: i,
      clean: j,
      inc: k,
      diff: l,
      major: m,
      minor: n,
      patch: o,
      prerelease: p,
      compare: q,
      rcompare: r,
      compareLoose: s,
      compareBuild: t,
      sort: u,
      rsort: v,
      gt: w,
      lt: x,
      eq: y,
      neq: z,
      gte: A,
      lte: B,
      cmp: C,
      coerce: D,
      Comparator: E,
      Range: F,
      satisfies: G,
      toComparators: H,
      maxSatisfying: I,
      minSatisfying: J,
      minVersion: K,
      validRange: L,
      outside: M,
      gtr: N,
      ltr: O,
      intersects: P,
      simplifyRange: a.r(52768),
      subset: a.r(27102),
      SemVer: f,
      re: d.re,
      src: d.src,
      tokens: d.t,
      SEMVER_SPEC_VERSION: e.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: e.RELEASE_TYPES,
      compareIdentifiers: g.compareIdentifiers,
      rcompareIdentifiers: g.rcompareIdentifiers,
    };
  },
  57494,
  (a, b, c) => {
    'use strict';
    function d(a) {
      return 'function' == typeof a;
    }
    var e = console.error.bind(console);
    function f(a, b, c) {
      var d = !!a[b] && a.propertyIsEnumerable(b);
      Object.defineProperty(a, b, { configurable: !0, enumerable: d, writable: !0, value: c });
    }
    function g(a) {
      a &&
        a.logger &&
        (d(a.logger) ? (e = a.logger) : e("new logger isn't a function, not replacing"));
    }
    function h(a, b, c) {
      if (!a || !a[b]) return void e('no original function ' + b + ' to wrap');
      if (!c) {
        (e('no wrapper function'), e(Error().stack));
        return;
      }
      if (!d(a[b]) || !d(c)) return void e('original object and wrapper must be functions');
      var g = a[b],
        h = c(g, b);
      return (
        f(h, '__original', g),
        f(h, '__unwrap', function () {
          a[b] === h && f(a, b, g);
        }),
        f(h, '__wrapped', !0),
        f(a, b, h),
        h
      );
    }
    function i(a, b) {
      if (!a || !a[b]) {
        (e('no function to unwrap.'), e(Error().stack));
        return;
      }
      if (a[b].__unwrap) return a[b].__unwrap();
      e('no original to unwrap to -- has ' + b + ' already been unwrapped?');
    }
    ((g.wrap = h),
      (g.massWrap = function (a, b, c) {
        if (a) Array.isArray(a) || (a = [a]);
        else {
          (e('must provide one or more modules to patch'), e(Error().stack));
          return;
        }
        if (!(b && Array.isArray(b)))
          return void e('must provide one or more functions to wrap on modules');
        a.forEach(function (a) {
          b.forEach(function (b) {
            h(a, b, c);
          });
        });
      }),
      (g.unwrap = i),
      (g.massUnwrap = function (a, b) {
        if (a) Array.isArray(a) || (a = [a]);
        else {
          (e('must provide one or more modules to patch'), e(Error().stack));
          return;
        }
        if (!(b && Array.isArray(b)))
          return void e('must provide one or more functions to unwrap on modules');
        a.forEach(function (a) {
          b.forEach(function (b) {
            i(a, b);
          });
        });
      }),
      (b.exports = g));
  },
  87866,
  (a) => {
    'use strict';
    (a.s(
      [
        'InstrumentationBase',
        () => K,
        'InstrumentationNodeModuleDefinition',
        () => M,
        'InstrumentationNodeModuleFile',
        () => N,
        'isWrapped',
        () => H,
        'registerInstrumentations',
        () => l,
        'safeExecuteInTheMiddle',
        () => F,
        'safeExecuteInTheMiddleAsync',
        () => G,
      ],
      87866
    ),
      a.s([], 38372),
      a.i(38372));
    var b = a.i(73609),
      c = a.i(86010),
      d = 'object' == typeof globalThis ? globalThis : a.g,
      e = Symbol.for('io.opentelemetry.js.api.logs'),
      f = (function () {
        function a() {}
        return ((a.prototype.emit = function (a) {}), a);
      })(),
      g = new f(),
      h = new ((function () {
        function a() {}
        return (
          (a.prototype.getLogger = function (a, b, c) {
            return new f();
          }),
          a
        );
      })())(),
      i = (function () {
        function a(a, b, c, d) {
          ((this._provider = a), (this.name = b), (this.version = c), (this.options = d));
        }
        return (
          (a.prototype.emit = function (a) {
            this._getLogger().emit(a);
          }),
          (a.prototype._getLogger = function () {
            if (this._delegate) return this._delegate;
            var a = this._provider.getDelegateLogger(this.name, this.version, this.options);
            return a ? ((this._delegate = a), this._delegate) : g;
          }),
          a
        );
      })(),
      j = (function () {
        function a() {}
        return (
          (a.prototype.getLogger = function (a, b, c) {
            var d;
            return null != (d = this.getDelegateLogger(a, b, c)) ? d : new i(this, a, b, c);
          }),
          (a.prototype.getDelegate = function () {
            var a;
            return null != (a = this._delegate) ? a : h;
          }),
          (a.prototype.setDelegate = function (a) {
            this._delegate = a;
          }),
          (a.prototype.getDelegateLogger = function (a, b, c) {
            var d;
            return null == (d = this._delegate) ? void 0 : d.getLogger(a, b, c);
          }),
          a
        );
      })(),
      k = (function () {
        function a() {
          this._proxyLoggerProvider = new j();
        }
        return (
          (a.getInstance = function () {
            return (this._instance || (this._instance = new a()), this._instance);
          }),
          (a.prototype.setGlobalLoggerProvider = function (a) {
            return d[e]
              ? this.getLoggerProvider()
              : ((d[e] = function (b) {
                  return 1 === b ? a : h;
                }),
                this._proxyLoggerProvider.setDelegate(a),
                a);
          }),
          (a.prototype.getLoggerProvider = function () {
            var a, b;
            return null != (b = null == (a = d[e]) ? void 0 : a.call(d, 1))
              ? b
              : this._proxyLoggerProvider;
          }),
          (a.prototype.getLogger = function (a, b, c) {
            return this.getLoggerProvider().getLogger(a, b, c);
          }),
          (a.prototype.disable = function () {
            (delete d[e], (this._proxyLoggerProvider = new j()));
          }),
          a
        );
      })().getInstance();
    function l(a) {
      for (
        var d,
          e,
          f = a.tracerProvider || b.trace.getTracerProvider(),
          g = a.meterProvider || c.metrics.getMeterProvider(),
          h = a.loggerProvider || k.getLoggerProvider(),
          i = null != (e = null == (d = a.instrumentations) ? void 0 : d.flat()) ? e : [],
          j = 0,
          l = i.length;
        j < l;
        j++
      ) {
        var m = i[j];
        (f && m.setTracerProvider(f),
          g && m.setMeterProvider(g),
          h && m.setLoggerProvider && m.setLoggerProvider(h),
          m.getConfig().enabled || m.enable());
      }
      return function () {
        i.forEach(function (a) {
          return a.disable();
        });
      };
    }
    var m = a.i(14747),
      n = a.i(24361),
      o = a.i(12510),
      p = a.i(57494),
      q = a.i(84151);
    globalThis._sentryNextJsVersion = '15.5.2';
    var r = function () {
        return (r =
          Object.assign ||
          function (a) {
            for (var b, c = 1, d = arguments.length; c < d; c++)
              for (var e in (b = arguments[c]))
                Object.prototype.hasOwnProperty.call(b, e) && (a[e] = b[e]);
            return a;
          }).apply(this, arguments);
      },
      s = (function () {
        function a(a, d, e) {
          ((this.instrumentationName = a),
            (this.instrumentationVersion = d),
            (this._config = {}),
            (this._wrap = p.wrap),
            (this._unwrap = p.unwrap),
            (this._massWrap = p.massWrap),
            (this._massUnwrap = p.massUnwrap),
            this.setConfig(e),
            (this._diag = q.diag.createComponentLogger({ namespace: a })),
            (this._tracer = b.trace.getTracer(a, d)),
            (this._meter = c.metrics.getMeter(a, d)),
            (this._logger = k.getLogger(a, d)),
            this._updateMetricInstruments());
        }
        return (
          Object.defineProperty(a.prototype, 'meter', {
            get: function () {
              return this._meter;
            },
            enumerable: !1,
            configurable: !0,
          }),
          (a.prototype.setMeterProvider = function (a) {
            ((this._meter = a.getMeter(this.instrumentationName, this.instrumentationVersion)),
              this._updateMetricInstruments());
          }),
          Object.defineProperty(a.prototype, 'logger', {
            get: function () {
              return this._logger;
            },
            enumerable: !1,
            configurable: !0,
          }),
          (a.prototype.setLoggerProvider = function (a) {
            this._logger = a.getLogger(this.instrumentationName, this.instrumentationVersion);
          }),
          (a.prototype.getModuleDefinitions = function () {
            var a,
              b = null != (a = this.init()) ? a : [];
            return Array.isArray(b) ? b : [b];
          }),
          (a.prototype._updateMetricInstruments = function () {}),
          (a.prototype.getConfig = function () {
            return this._config;
          }),
          (a.prototype.setConfig = function (a) {
            this._config = r({ enabled: !0 }, a);
          }),
          (a.prototype.setTracerProvider = function (a) {
            this._tracer = a.getTracer(this.instrumentationName, this.instrumentationVersion);
          }),
          Object.defineProperty(a.prototype, 'tracer', {
            get: function () {
              return this._tracer;
            },
            enumerable: !1,
            configurable: !0,
          }),
          (a.prototype._runSpanCustomizationHook = function (a, b, c, d) {
            if (a)
              try {
                a(c, d);
              } catch (a) {
                this._diag.error(
                  'Error running span customization hook due to exception in handler',
                  { triggerName: b },
                  a
                );
              }
          }),
          a
        );
      })(),
      t = a.i(79314),
      u = function (a) {
        var b = 'function' == typeof Symbol && Symbol.iterator,
          c = b && a[b],
          d = 0;
        if (c) return c.call(a);
        if (a && 'number' == typeof a.length)
          return {
            next: function () {
              return (a && d >= a.length && (a = void 0), { value: a && a[d++], done: !a });
            },
          };
        throw TypeError(b ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      },
      v = function (a, b) {
        var c = 'function' == typeof Symbol && a[Symbol.iterator];
        if (!c) return a;
        var d,
          e,
          f = c.call(a),
          g = [];
        try {
          for (; (void 0 === b || b-- > 0) && !(d = f.next()).done; ) g.push(d.value);
        } catch (a) {
          e = { error: a };
        } finally {
          try {
            d && !d.done && (c = f.return) && c.call(f);
          } finally {
            if (e) throw e.error;
          }
        }
        return g;
      },
      w = function (a, b, c) {
        if (c || 2 == arguments.length)
          for (var d, e = 0, f = b.length; e < f; e++)
            (!d && e in b) || (d || (d = Array.prototype.slice.call(b, 0, e)), (d[e] = b[e]));
        return a.concat(d || Array.prototype.slice.call(b));
      },
      x = function () {
        ((this.hooks = []), (this.children = new Map()));
      },
      y = (function () {
        function a() {
          ((this._trie = new x()), (this._counter = 0));
        }
        return (
          (a.prototype.insert = function (a) {
            var b,
              c,
              d = this._trie;
            try {
              for (var e = u(a.moduleName.split('/')), f = e.next(); !f.done; f = e.next()) {
                var g = f.value,
                  h = d.children.get(g);
                (h || ((h = new x()), d.children.set(g, h)), (d = h));
              }
            } catch (a) {
              b = { error: a };
            } finally {
              try {
                f && !f.done && (c = e.return) && c.call(e);
              } finally {
                if (b) throw b.error;
              }
            }
            d.hooks.push({ hook: a, insertedId: this._counter++ });
          }),
          (a.prototype.search = function (a, b) {
            var c,
              d,
              e = void 0 === b ? {} : b,
              f = e.maintainInsertionOrder,
              g = e.fullOnly,
              h = this._trie,
              i = [],
              j = !0;
            try {
              for (var k = u(a.split('/')), l = k.next(); !l.done; l = k.next()) {
                var m = l.value,
                  n = h.children.get(m);
                if (!n) {
                  j = !1;
                  break;
                }
                (g || i.push.apply(i, w([], v(n.hooks), !1)), (h = n));
              }
            } catch (a) {
              c = { error: a };
            } finally {
              try {
                l && !l.done && (d = k.return) && d.call(k);
              } finally {
                if (c) throw c.error;
              }
            }
            return (g && j && i.push.apply(i, w([], v(h.hooks), !1)), 0 === i.length)
              ? []
              : 1 === i.length
                ? [i[0].hook]
                : (f &&
                    i.sort(function (a, b) {
                      return a.insertedId - b.insertedId;
                    }),
                  i.map(function (a) {
                    return a.hook;
                  }));
          }),
          a
        );
      })(),
      z = function (a) {
        var b = 'function' == typeof Symbol && Symbol.iterator,
          c = b && a[b],
          d = 0;
        if (c) return c.call(a);
        if (a && 'number' == typeof a.length)
          return {
            next: function () {
              return (a && d >= a.length && (a = void 0), { value: a && a[d++], done: !a });
            },
          };
        throw TypeError(b ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      },
      A = ['afterEach', 'after', 'beforeEach', 'before', 'describe', 'it'].every(function (b) {
        return 'function' == typeof a.g[b];
      }),
      B = (function () {
        function a() {
          ((this._moduleNameTrie = new y()), this._initialize());
        }
        return (
          (a.prototype._initialize = function () {
            var a = this;
            new t.Hook(null, { internals: !0 }, function (b, c, d) {
              var e,
                f,
                g,
                h = ((e = c), '/' !== m.sep ? e.split(m.sep).join('/') : e),
                i = a._moduleNameTrie.search(h, {
                  maintainInsertionOrder: !0,
                  fullOnly: void 0 === d,
                });
              try {
                for (var j = z(i), k = j.next(); !k.done; k = j.next())
                  b = (0, k.value.onRequire)(b, c, d);
              } catch (a) {
                f = { error: a };
              } finally {
                try {
                  k && !k.done && (g = j.return) && g.call(j);
                } finally {
                  if (f) throw f.error;
                }
              }
              return b;
            });
          }),
          (a.prototype.register = function (a, b) {
            var c = { moduleName: a, onRequire: b };
            return (this._moduleNameTrie.insert(c), c);
          }),
          (a.getInstance = function () {
            var b;
            return A ? new a() : (this._instance = null != (b = this._instance) ? b : new a());
          }),
          a
        );
      })(),
      C = a.i(85397),
      D = a.i(22734),
      E = function (a, b) {
        var c,
          d,
          e,
          f,
          g = {
            label: 0,
            sent: function () {
              if (1 & e[0]) throw e[1];
              return e[1];
            },
            trys: [],
            ops: [],
          };
        return (
          (f = { next: h(0), throw: h(1), return: h(2) }),
          'function' == typeof Symbol &&
            (f[Symbol.iterator] = function () {
              return this;
            }),
          f
        );
        function h(f) {
          return function (h) {
            var i = [f, h];
            if (c) throw TypeError('Generator is already executing.');
            for (; g; )
              try {
                if (
                  ((c = 1),
                  d &&
                    (e =
                      2 & i[0]
                        ? d.return
                        : i[0]
                          ? d.throw || ((e = d.return) && e.call(d), 0)
                          : d.next) &&
                    !(e = e.call(d, i[1])).done)
                )
                  return e;
                switch (((d = 0), e && (i = [2 & i[0], e.value]), i[0])) {
                  case 0:
                  case 1:
                    e = i;
                    break;
                  case 4:
                    return (g.label++, { value: i[1], done: !1 });
                  case 5:
                    (g.label++, (d = i[1]), (i = [0]));
                    continue;
                  case 7:
                    ((i = g.ops.pop()), g.trys.pop());
                    continue;
                  default:
                    if (
                      !(e = (e = g.trys).length > 0 && e[e.length - 1]) &&
                      (6 === i[0] || 2 === i[0])
                    ) {
                      g = 0;
                      continue;
                    }
                    if (3 === i[0] && (!e || (i[1] > e[0] && i[1] < e[3]))) {
                      g.label = i[1];
                      break;
                    }
                    if (6 === i[0] && g.label < e[1]) {
                      ((g.label = e[1]), (e = i));
                      break;
                    }
                    if (e && g.label < e[2]) {
                      ((g.label = e[2]), g.ops.push(i));
                      break;
                    }
                    (e[2] && g.ops.pop(), g.trys.pop());
                    continue;
                }
                i = b.call(a, g);
              } catch (a) {
                ((i = [6, a]), (d = 0));
              } finally {
                c = e = 0;
              }
            if (5 & i[0]) throw i[1];
            return { value: i[0] ? i[1] : void 0, done: !0 };
          };
        }
      };
    function F(a, b, c) {
      var d, e;
      try {
        e = a();
      } catch (a) {
        d = a;
      } finally {
        if ((b(d, e), d && !c)) throw d;
        return e;
      }
    }
    function G(a, b, c) {
      var d, e, f, g;
      return (
        (d = this),
        (e = void 0),
        (f = void 0),
        (g = function () {
          var d, e;
          return E(this, function (f) {
            switch (f.label) {
              case 0:
                return (f.trys.push([0, 2, 3, 4]), [4, a()]);
              case 1:
                return ((e = f.sent()), [3, 4]);
              case 2:
                return ((d = f.sent()), [3, 4]);
              case 3:
                if ((b(d, e), d && !c)) throw d;
                return [2, e];
              case 4:
                return [2];
            }
          });
        }),
        new (f || (f = Promise))(function (a, b) {
          function c(a) {
            try {
              i(g.next(a));
            } catch (a) {
              b(a);
            }
          }
          function h(a) {
            try {
              i(g.throw(a));
            } catch (a) {
              b(a);
            }
          }
          function i(b) {
            var d;
            b.done
              ? a(b.value)
              : ((d = b.value) instanceof f
                  ? d
                  : new f(function (a) {
                      a(d);
                    })
                ).then(c, h);
          }
          i((g = g.apply(d, e || [])).next());
        })
      );
    }
    function H(a) {
      return (
        'function' == typeof a &&
        'function' == typeof a.__original &&
        'function' == typeof a.__unwrap &&
        !0 === a.__wrapped
      );
    }
    globalThis._sentryNextJsVersion = '15.5.2';
    var I = (function () {
        var a = function (b, c) {
          return (a =
            Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array &&
              function (a, b) {
                a.__proto__ = b;
              }) ||
            function (a, b) {
              for (var c in b) Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
            })(b, c);
        };
        return function (b, c) {
          if ('function' != typeof c && null !== c)
            throw TypeError('Class extends value ' + String(c) + ' is not a constructor or null');
          function d() {
            this.constructor = b;
          }
          (a(b, c),
            (b.prototype = null === c ? Object.create(c) : ((d.prototype = c.prototype), new d())));
        };
      })(),
      J = function (a) {
        var b = 'function' == typeof Symbol && Symbol.iterator,
          c = b && a[b],
          d = 0;
        if (c) return c.call(a);
        if (a && 'number' == typeof a.length)
          return {
            next: function () {
              return (a && d >= a.length && (a = void 0), { value: a && a[d++], done: !a });
            },
          };
        throw TypeError(b ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      },
      K = (function (b) {
        function c(a, c, d) {
          var e = b.call(this, a, c, d) || this;
          ((e._hooks = []),
            (e._requireInTheMiddleSingleton = B.getInstance()),
            (e._enabled = !1),
            (e._wrap = function (a, b, c) {
              if ((H(a[b]) && e._unwrap(a, b), !n.types.isProxy(a))) return (0, p.wrap)(a, b, c);
              var d = (0, p.wrap)(Object.assign({}, a), b, c);
              return (Object.defineProperty(a, b, { value: d }), d);
            }),
            (e._unwrap = function (a, b) {
              return n.types.isProxy(a)
                ? Object.defineProperty(a, b, { value: a[b] })
                : (0, p.unwrap)(a, b);
            }),
            (e._massWrap = function (a, b, c) {
              return a
                ? (Array.isArray(a) || (a = [a]), b && Array.isArray(b))
                  ? void a.forEach(function (a) {
                      b.forEach(function (b) {
                        e._wrap(a, b, c);
                      });
                    })
                  : void q.diag.error('must provide one or more functions to wrap on modules')
                : void q.diag.error('must provide one or more modules to patch');
            }),
            (e._massUnwrap = function (a, b) {
              return a
                ? (Array.isArray(a) || (a = [a]), b && Array.isArray(b))
                  ? void a.forEach(function (a) {
                      b.forEach(function (b) {
                        e._unwrap(a, b);
                      });
                    })
                  : void q.diag.error('must provide one or more functions to wrap on modules')
                : void q.diag.error('must provide one or more modules to patch');
            }));
          var f = e.init();
          return (
            f && !Array.isArray(f) && (f = [f]),
            (e._modules = f || []),
            e._config.enabled && e.enable(),
            e
          );
        }
        return (
          I(c, b),
          (c.prototype._warnOnPreloadedModules = function () {
            var b = this;
            this._modules.forEach(function (c) {
              var d = c.name;
              try {
                var e = (() => {
                  let a = Error('Cannot find module as expression is too dynamic');
                  throw ((a.code = 'MODULE_NOT_FOUND'), a);
                })();
                a.c[e] &&
                  b._diag.warn(
                    'Module ' +
                      d +
                      ' has been loaded before ' +
                      b.instrumentationName +
                      ' so it might not work, please initialize it before requiring ' +
                      d
                  );
              } catch (a) {}
            });
          }),
          (c.prototype._extractPackageVersion = function (a) {
            try {
              var b = (0, D.readFileSync)(m.join(a, 'package.json'), { encoding: 'utf8' }),
                c = JSON.parse(b).version;
              return 'string' == typeof c ? c : void 0;
            } catch (b) {
              q.diag.warn('Failed extracting version', a);
            }
          }),
          (c.prototype._onRequire = function (a, b, c, d) {
            var e,
              f = this;
            if (!d)
              return 'function' == typeof a.patch && ((a.moduleExports = b), this._enabled)
                ? (this._diag.debug(
                    'Applying instrumentation patch for nodejs core module on require hook',
                    { module: a.name }
                  ),
                  a.patch(b))
                : b;
            var g = this._extractPackageVersion(d);
            if (((a.moduleVersion = g), a.name === c))
              return L(a.supportedVersions, g, a.includePrerelease) &&
                'function' == typeof a.patch &&
                ((a.moduleExports = b), this._enabled)
                ? (this._diag.debug('Applying instrumentation patch for module on require hook', {
                    module: a.name,
                    version: a.moduleVersion,
                    baseDir: d,
                  }),
                  a.patch(b, a.moduleVersion))
                : b;
            var h = null != (e = a.files) ? e : [],
              i = m.normalize(c);
            return h
              .filter(function (a) {
                return a.name === i;
              })
              .filter(function (b) {
                return L(b.supportedVersions, g, a.includePrerelease);
              })
              .reduce(function (b, c) {
                return ((c.moduleExports = b), f._enabled)
                  ? (f._diag.debug(
                      'Applying instrumentation patch for nodejs module file on require hook',
                      { module: a.name, version: a.moduleVersion, fileName: c.name, baseDir: d }
                    ),
                    c.patch(b, a.moduleVersion))
                  : b;
              }, b);
          }),
          (c.prototype.enable = function () {
            var a,
              b,
              c,
              d,
              e,
              f,
              g = this;
            if (!this._enabled) {
              if (((this._enabled = !0), this._hooks.length > 0)) {
                try {
                  for (var h = J(this._modules), i = h.next(); !i.done; i = h.next()) {
                    var j = i.value;
                    'function' == typeof j.patch &&
                      j.moduleExports &&
                      (this._diag.debug(
                        'Applying instrumentation patch for nodejs module on instrumentation enabled',
                        { module: j.name, version: j.moduleVersion }
                      ),
                      j.patch(j.moduleExports, j.moduleVersion));
                    try {
                      for (
                        var k = ((c = void 0), J(j.files)), l = k.next();
                        !l.done;
                        l = k.next()
                      ) {
                        var n = l.value;
                        n.moduleExports &&
                          (this._diag.debug(
                            'Applying instrumentation patch for nodejs module file on instrumentation enabled',
                            { module: j.name, version: j.moduleVersion, fileName: n.name }
                          ),
                          n.patch(n.moduleExports, j.moduleVersion));
                      }
                    } catch (a) {
                      c = { error: a };
                    } finally {
                      try {
                        l && !l.done && (d = k.return) && d.call(k);
                      } finally {
                        if (c) throw c.error;
                      }
                    }
                  }
                } catch (b) {
                  a = { error: b };
                } finally {
                  try {
                    i && !i.done && (b = h.return) && b.call(h);
                  } finally {
                    if (a) throw a.error;
                  }
                }
                return;
              }
              this._warnOnPreloadedModules();
              var o = function (a) {
                  var b = function (b, c, d) {
                      return g._onRequire(a, b, c, d);
                    },
                    c = m.isAbsolute(a.name)
                      ? new t.Hook([a.name], { internals: !0 }, b)
                      : p._requireInTheMiddleSingleton.register(a.name, b);
                  p._hooks.push(c);
                  var d = new C.Hook([a.name], { internals: !1 }, function (b, c, d) {
                    if (!d && m.isAbsolute(c)) {
                      var e = m.parse(c);
                      ((c = e.name), (d = e.dir));
                    }
                    return g._onRequire(a, b, c, d);
                  });
                  p._hooks.push(d);
                },
                p = this;
              try {
                for (var q = J(this._modules), r = q.next(); !r.done; r = q.next()) {
                  var s = r.value;
                  o(s);
                }
              } catch (a) {
                e = { error: a };
              } finally {
                try {
                  r && !r.done && (f = q.return) && f.call(q);
                } finally {
                  if (e) throw e.error;
                }
              }
            }
          }),
          (c.prototype.disable = function () {
            var a, b, c, d;
            if (this._enabled) {
              this._enabled = !1;
              try {
                for (var e = J(this._modules), f = e.next(); !f.done; f = e.next()) {
                  var g = f.value;
                  'function' == typeof g.unpatch &&
                    g.moduleExports &&
                    (this._diag.debug(
                      'Removing instrumentation patch for nodejs module on instrumentation disabled',
                      { module: g.name, version: g.moduleVersion }
                    ),
                    g.unpatch(g.moduleExports, g.moduleVersion));
                  try {
                    for (var h = ((c = void 0), J(g.files)), i = h.next(); !i.done; i = h.next()) {
                      var j = i.value;
                      j.moduleExports &&
                        (this._diag.debug(
                          'Removing instrumentation patch for nodejs module file on instrumentation disabled',
                          { module: g.name, version: g.moduleVersion, fileName: j.name }
                        ),
                        j.unpatch(j.moduleExports, g.moduleVersion));
                    }
                  } catch (a) {
                    c = { error: a };
                  } finally {
                    try {
                      i && !i.done && (d = h.return) && d.call(h);
                    } finally {
                      if (c) throw c.error;
                    }
                  }
                }
              } catch (b) {
                a = { error: b };
              } finally {
                try {
                  f && !f.done && (b = e.return) && b.call(e);
                } finally {
                  if (a) throw a.error;
                }
              }
            }
          }),
          (c.prototype.isEnabled = function () {
            return this._enabled;
          }),
          c
        );
      })(s);
    function L(a, b, c) {
      return void 0 === b
        ? a.includes('*')
        : a.some(function (a) {
            return (0, o.satisfies)(b, a, { includePrerelease: c });
          });
    }
    var M = function (a, b, c, d, e) {
        ((this.name = a),
          (this.supportedVersions = b),
          (this.patch = c),
          (this.unpatch = d),
          (this.files = e || []));
      },
      N = function (a, b, c, d) {
        ((this.supportedVersions = b),
          (this.patch = c),
          (this.unpatch = d),
          (this.name = (0, m.normalize)(a)));
      };
  },
  12639,
  (a, b, c) => {
    'use strict';
    var d = Object.defineProperty,
      e = Object.getOwnPropertyDescriptor,
      f = Object.getOwnPropertyNames,
      g = Object.prototype.hasOwnProperty,
      h = {};
    (((a, b) => {
      for (var c in b) d(a, c, { get: b[c], enumerable: !0 });
    })(h, {
      PrismaInstrumentation: () => v,
      registerInstrumentations: () => w.registerInstrumentations,
    }),
      (b.exports = ((a, b, c, h) => {
        if ((b && 'object' == typeof b) || 'function' == typeof b)
          for (let i of f(b))
            g.call(a, i) ||
              i === c ||
              d(a, i, { get: () => b[i], enumerable: !(h = e(b, i)) || h.enumerable });
        return a;
      })(d({}, '__esModule', { value: !0 }), h)));
    var i = a.r(77674),
      j = a.r(87866),
      k = a.r(77674),
      l = 'true' === process.env.PRISMA_SHOW_ALL_TRACES,
      m = class {
        tracerProvider;
        ignoreSpanTypes;
        constructor({ tracerProvider: a, ignoreSpanTypes: b }) {
          ((this.tracerProvider = a), (this.ignoreSpanTypes = b));
        }
        isEnabled() {
          return !0;
        }
        getTraceParent(a) {
          let b = k.trace.getSpanContext(a ?? k.context.active());
          return b ? `00-${b.traceId}-${b.spanId}-0${b.traceFlags}` : '00-10-10-00';
        }
        dispatchEngineSpans(a) {
          let b = this.tracerProvider.getTracer('prisma'),
            c = new Map();
          for (let d of a.filter((a) => null === a.parentId))
            !(function a(b, c, d, e, f) {
              if (o(c.name, f)) return;
              let g = {
                attributes: c.attributes,
                kind: 'client' === c.kind ? k.SpanKind.CLIENT : k.SpanKind.INTERNAL,
                startTime: c.startTime,
              };
              b.startActiveSpan(c.name, g, (g) => {
                for (let h of (e.set(c.id, g.spanContext().spanId),
                c.links &&
                  g.addLinks(
                    c.links.flatMap((a) => {
                      let b = e.get(a);
                      return b
                        ? {
                            context: {
                              spanId: b,
                              traceId: g.spanContext().traceId,
                              traceFlags: g.spanContext().traceFlags,
                            },
                          }
                        : [];
                    })
                  ),
                d.filter((a) => a.parentId === c.id)))
                  a(b, h, d, e, f);
                g.end(c.endTime);
              });
            })(b, d, a, c, this.ignoreSpanTypes);
        }
        getActiveContext() {
          return k.context.active();
        }
        runInChildSpan(a, b) {
          if (('string' == typeof a && (a = { name: a }), a.internal && !l)) return b();
          let c = this.tracerProvider.getTracer('prisma'),
            d = a.context ?? this.getActiveContext(),
            e = `prisma:client:${a.name}`;
          if (o(e, this.ignoreSpanTypes)) return b();
          if (!1 === a.active) {
            let f = c.startSpan(e, a, d);
            return n(f, b(f, d));
          }
          return c.startActiveSpan(e, a, (a) => n(a, b(a, d)));
        }
      };
    function n(a, b) {
      var c;
      return null != (c = b) && 'function' == typeof c.then
        ? b.then(
            (b) => (a.end(), b),
            (b) => {
              throw (a.end(), b);
            }
          )
        : (a.end(), b);
    }
    function o(a, b) {
      return b.some((b) => ('string' == typeof b ? b === a : b.test(a)));
    }
    var p = { name: '@prisma/instrumentation', version: '6.14.0' },
      q = p.version,
      r = q.split('.')[0],
      s = 'PRISMA_INSTRUMENTATION',
      t = `V${r}_PRISMA_INSTRUMENTATION`,
      u = p.name,
      v = class extends j.InstrumentationBase {
        tracerProvider;
        constructor(a = {}) {
          super(u, q, a);
        }
        setTracerProvider(a) {
          this.tracerProvider = a;
        }
        init() {
          return [new j.InstrumentationNodeModuleDefinition('@prisma/client', [q])];
        }
        enable() {
          let b = this._config,
            c = {
              helper: new m({
                tracerProvider: this.tracerProvider ?? i.trace.getTracerProvider(),
                ignoreSpanTypes: b.ignoreSpanTypes ?? [],
              }),
            };
          ((a.g[s] = c), (a.g[t] = c));
        }
        disable() {
          (delete a.g[s], delete a.g[t]);
        }
        isEnabled() {
          return !!a.g[t];
        }
      },
      w = a.r(87866);
  },
  43537,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(12639),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Prisma';
    function h() {
      let a = globalThis.PRISMA_INSTRUMENTATION;
      return a && 'object' == typeof a && 'helper' in a ? a.helper : void 0;
    }
    class i extends d.PrismaInstrumentation {
      constructor() {
        super();
      }
      enable() {
        super.enable();
        let a = h(),
          b = !1;
        a &&
          'object' == typeof a &&
          'dispatchEngineSpans' in a &&
          (a.createEngineSpan = () => {
            e.consoleSandbox(() => {
              b ||
                ((b = !0),
                console.warn(
                  '[Sentry] The Sentry SDK supports tracing with Prisma version 5 only with limited capabilities. For full tracing capabilities pass `prismaInstrumentation` for version 5 to the Sentry `prismaIntegration`. Read more: https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/'
                ));
            });
          });
      }
    }
    let j = f.generateInstrumentOnce(g, (a) =>
        a?.prismaInstrumentation ? a.prismaInstrumentation : new i()
      ),
      k = e.defineIntegration(({ prismaInstrumentation: a } = {}) => ({
        name: g,
        setupOnce() {
          j({ prismaInstrumentation: a });
        },
        setup(a) {
          h() &&
            a.on('spanStart', (a) => {
              let b = e.spanToJSON(a);
              (b.description?.startsWith('prisma:') &&
                a.setAttribute(e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma'),
                'prisma:engine:db_query' === b.description &&
                  b.data['db.query.text'] &&
                  a.updateName(b.data['db.query.text']),
                'prisma:engine:db_query' !== b.description ||
                  b.data['db.system'] ||
                  a.setAttribute('db.system', 'prisma'));
            });
        },
      }));
    ((c.instrumentPrisma = j), (c.prismaIntegration = k));
  },
  88371,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.50.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-hapi'));
  },
  68314,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.HapiLifecycleMethodNames =
        c.HapiLayerType =
        c.handlerPatched =
        c.HapiComponentName =
          void 0),
      (c.HapiComponentName = '@hapi/hapi'),
      (c.handlerPatched = Symbol('hapi-handler-patched')),
      (c.HapiLayerType = { ROUTER: 'router', PLUGIN: 'plugin', EXT: 'server.ext' }),
      (c.HapiLifecycleMethodNames = new Set([
        'onPreAuth',
        'onCredentials',
        'onPostAuth',
        'onPreHandler',
        'onPostHandler',
        'onPreResponse',
        'onRequest',
      ])));
  },
  30244,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.ATTR_HTTP_METHOD = void 0),
      (c.ATTR_HTTP_METHOD = 'http.method'));
  },
  99465,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = void 0),
      (function (a) {
        ((a.HAPI_TYPE = 'hapi.type'),
          (a.PLUGIN_NAME = 'hapi.plugin.name'),
          (a.EXT_TYPE = 'server.ext.type'));
      })(c.AttributeNames || (c.AttributeNames = {})));
  },
  30402,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.getPluginFromInput =
        c.getExtMetadata =
        c.getRouteMetadata =
        c.isPatchableExtMethod =
        c.isDirectExtInput =
        c.isLifecycleExtEventObj =
        c.isLifecycleExtType =
        c.getPluginName =
          void 0));
    let d = a.r(79154),
      e = a.r(30244),
      f = a.r(68314),
      g = a.r(99465),
      h = a.r(38625);
    ((c.getPluginName = function (a) {
      return a.name ? a.name : a.pkg.name;
    }),
      (c.isLifecycleExtType = (a) => 'string' == typeof a && f.HapiLifecycleMethodNames.has(a)),
      (c.isLifecycleExtEventObj = (a) => {
        let b = a?.type;
        return void 0 !== b && (0, c.isLifecycleExtType)(b);
      }),
      (c.isDirectExtInput = (a) =>
        Array.isArray(a) &&
        a.length <= 3 &&
        (0, c.isLifecycleExtType)(a[0]) &&
        'function' == typeof a[1]),
      (c.isPatchableExtMethod = (a) => !Array.isArray(a)),
      (c.getRouteMetadata = (a, b, c) => {
        let i,
          j = { [d.ATTR_HTTP_ROUTE]: a.path };
        return (
          b & h.SemconvStability.OLD && (j[e.ATTR_HTTP_METHOD] = a.method),
          b & h.SemconvStability.STABLE && (j[d.ATTR_HTTP_REQUEST_METHOD] = a.method),
          c
            ? ((j[g.AttributeNames.HAPI_TYPE] = f.HapiLayerType.PLUGIN),
              (j[g.AttributeNames.PLUGIN_NAME] = c),
              (i = `${c}: route - ${a.path}`))
            : ((j[g.AttributeNames.HAPI_TYPE] = f.HapiLayerType.ROUTER), (i = `route - ${a.path}`)),
          { attributes: j, name: i }
        );
      }),
      (c.getExtMetadata = (a, b) =>
        b
          ? {
              attributes: {
                [g.AttributeNames.EXT_TYPE]: a,
                [g.AttributeNames.HAPI_TYPE]: f.HapiLayerType.EXT,
                [g.AttributeNames.PLUGIN_NAME]: b,
              },
              name: `${b}: ext - ${a}`,
            }
          : {
              attributes: {
                [g.AttributeNames.EXT_TYPE]: a,
                [g.AttributeNames.HAPI_TYPE]: f.HapiLayerType.EXT,
              },
              name: `ext - ${a}`,
            }),
      (c.getPluginFromInput = (a) =>
        'plugin' in a ? ('plugin' in a.plugin ? a.plugin.plugin : a.plugin) : a));
  },
  54682,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.HapiInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(98070),
      f = a.r(38625),
      g = a.r(88371),
      h = a.r(68314),
      i = a.r(30402);
    class j extends f.InstrumentationBase {
      _semconvStability;
      constructor(a = {}) {
        (super(g.PACKAGE_NAME, g.PACKAGE_VERSION, a),
          (this._semconvStability = (0, f.semconvStabilityFromStr)(
            'http',
            process.env.OTEL_SEMCONV_STABILITY_OPT_IN
          )));
      }
      init() {
        return new f.InstrumentationNodeModuleDefinition(
          h.HapiComponentName,
          ['>=17.0.0 <22'],
          (a) => {
            let b = 'Module' === a[Symbol.toStringTag] ? a.default : a;
            return (
              (0, f.isWrapped)(b.server) ||
                this._wrap(b, 'server', this._getServerPatch.bind(this)),
              (0, f.isWrapped)(b.Server) ||
                this._wrap(b, 'Server', this._getServerPatch.bind(this)),
              b
            );
          },
          (a) => {
            let b = 'Module' === a[Symbol.toStringTag] ? a.default : a;
            this._massUnwrap([b], ['server', 'Server']);
          }
        );
      }
      _getServerPatch(a) {
        let b = this,
          c = this;
        return function (d) {
          let e = a.apply(this, [d]);
          return (
            c._wrap(e, 'route', (a) => b._getServerRoutePatch.bind(b)(a)),
            c._wrap(e, 'ext', (a) => b._getServerExtPatch.bind(b)(a)),
            c._wrap(e, 'register', b._getServerRegisterPatch.bind(b)),
            e
          );
        };
      }
      _getServerRegisterPatch(a) {
        let b = this;
        return function (c, d) {
          if (Array.isArray(c))
            for (let a of c) {
              let c = (0, i.getPluginFromInput)(a);
              b._wrapRegisterHandler(c);
            }
          else {
            let a = (0, i.getPluginFromInput)(c);
            b._wrapRegisterHandler(a);
          }
          return a.apply(this, [c, d]);
        };
      }
      _getServerExtPatch(a, b) {
        let c = this;
        return function (...d) {
          if (Array.isArray(d[0])) {
            let a = d[0];
            for (let d = 0; d < a.length; d++) {
              let e = a[d];
              if ((0, i.isLifecycleExtType)(e.type)) {
                let f = c._wrapExtMethods(e.method, e.type, b);
                ((e.method = f), (a[d] = e));
              }
            }
          } else if ((0, i.isDirectExtInput)(d)) {
            let e = d[1],
              f = c._wrapExtMethods(e, d[0], b);
            return a.apply(this, [d[0], f, d[2]]);
          } else if ((0, i.isLifecycleExtEventObj)(d[0])) {
            let e = d[0],
              f = c._wrapExtMethods(e.method, e.type, b);
            return ((e.method = f), a.call(this, e));
          }
          return a.apply(this, d);
        };
      }
      _getServerRoutePatch(a, b) {
        let c = this;
        return function (d) {
          if (Array.isArray(d))
            for (let a = 0; a < d.length; a++) {
              let e = c._wrapRouteHandler.call(c, d[a], b);
              d[a] = e;
            }
          else d = c._wrapRouteHandler.call(c, d, b);
          return a.apply(this, [d]);
        };
      }
      _wrapRegisterHandler(a) {
        let b = this,
          c = (0, i.getPluginName)(a),
          d = a.register,
          e = this;
        a.register = function (a, f) {
          return (
            e._wrap(a, 'route', (a) => b._getServerRoutePatch.bind(b)(a, c)),
            e._wrap(a, 'ext', (a) => b._getServerExtPatch.bind(b)(a, c)),
            d.call(this, a, f)
          );
        };
      }
      _wrapExtMethods(a, b, c) {
        let e = this;
        if (a instanceof Array)
          for (let c = 0; c < a.length; c++) a[c] = e._wrapExtMethods(a[c], b);
        else if ((0, i.isPatchableExtMethod)(a))
          return !0 === a[h.handlerPatched]
            ? a
            : ((a[h.handlerPatched] = !0),
              async function (...f) {
                if (void 0 === d.trace.getSpan(d.context.active())) return await a.apply(this, f);
                let g = (0, i.getExtMetadata)(b, c),
                  h = e.tracer.startSpan(g.name, { attributes: g.attributes });
                try {
                  return await d.context.with(
                    d.trace.setSpan(d.context.active(), h),
                    a,
                    void 0,
                    ...f
                  );
                } catch (a) {
                  throw (
                    h.recordException(a),
                    h.setStatus({ code: d.SpanStatusCode.ERROR, message: a.message }),
                    a
                  );
                } finally {
                  h.end();
                }
              });
        return a;
      }
      _wrapRouteHandler(a, b) {
        let c = this;
        if (!0 === a[h.handlerPatched]) return a;
        a[h.handlerPatched] = !0;
        let f = (f) =>
          async function (...g) {
            if (void 0 === d.trace.getSpan(d.context.active())) return await f.call(this, ...g);
            let h = (0, e.getRPCMetadata)(d.context.active());
            h?.type === e.RPCType.HTTP && (h.route = a.path);
            let j = (0, i.getRouteMetadata)(a, c._semconvStability, b),
              k = c.tracer.startSpan(j.name, { attributes: j.attributes });
            try {
              return await d.context.with(d.trace.setSpan(d.context.active(), k), () =>
                f.call(this, ...g)
              );
            } catch (a) {
              throw (
                k.recordException(a),
                k.setStatus({ code: d.SpanStatusCode.ERROR, message: a.message }),
                a
              );
            } finally {
              k.end();
            }
          };
        if ('function' == typeof a.handler) a.handler = f(a.handler);
        else if ('function' == typeof a.options) {
          let b = a.options;
          a.options = function (a) {
            let c = b(a);
            return ('function' == typeof c.handler && (c.handler = f(c.handler)), c);
          };
        } else
          'function' == typeof a.options?.handler && (a.options.handler = f(a.options.handler));
        return a;
      }
    }
    c.HapiInstrumentation = j;
  },
  1766,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = c.HapiInstrumentation = void 0));
    var d = a.r(54682);
    Object.defineProperty(c, 'HapiInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.HapiInstrumentation;
      },
    });
    var e = a.r(99465);
    Object.defineProperty(c, 'AttributeNames', {
      enumerable: !0,
      get: function () {
        return e.AttributeNames;
      },
    });
  },
  58389,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(1766),
      e = a.r(32723),
      f = a.r(28063),
      g = a.r(60418),
      h = 'Hapi',
      i = f.generateInstrumentOnce(h, () => new d.HapiInstrumentation()),
      j = e.defineIntegration(() => ({
        name: h,
        setupOnce() {
          i();
        },
      })),
      k = {
        name: 'SentryHapiErrorPlugin',
        version: e.SDK_VERSION,
        register: async function (a) {
          a.events.on({ name: 'request', channels: ['error'] }, (a, b) => {
            var c;
            if (e.getIsolationScope() !== e.getDefaultIsolationScope()) {
              let b = a.route;
              b.path &&
                e.getIsolationScope().setTransactionName(`${b.method.toUpperCase()} ${b.path}`);
            } else
              g.DEBUG_BUILD &&
                e.debug.warn(
                  'Isolation scope is still the default isolation scope - skipping setting transactionName'
                );
            b &&
              'object' == typeof b &&
              'error' in b &&
              b.error &&
              ((c = b.error),
              e.captureException(c, {
                mechanism: { type: 'hapi', handled: !1, data: { function: 'hapiErrorPlugin' } },
              }));
          });
        },
      };
    async function l(a) {
      await a.register(k);
      let b = e.getClient();
      (b &&
        b.on('spanStart', (a) => {
          var b = a;
          let c = e.spanToJSON(b).data,
            d = c['hapi.type'];
          !c[e.SEMANTIC_ATTRIBUTE_SENTRY_OP] &&
            d &&
            b.setAttributes({
              [e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',
              [e.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${d}.hapi`,
            });
        }),
        f.ensureIsWrapped(a.register, 'hapi'));
    }
    ((c.hapiErrorPlugin = k),
      (c.hapiIntegration = j),
      (c.instrumentHapi = i),
      (c.setupHapiErrorHandler = l));
  },
  99924,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.KoaLayerType = void 0),
      (function (a) {
        ((a.ROUTER = 'router'), (a.MIDDLEWARE = 'middleware'));
      })(c.KoaLayerType || (c.KoaLayerType = {})));
  },
  99371,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.51.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-koa'));
  },
  77150,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.AttributeNames = void 0),
      (function (a) {
        ((a.KOA_TYPE = 'koa.type'), (a.KOA_NAME = 'koa.name'));
      })(c.AttributeNames || (c.AttributeNames = {})));
  },
  95431,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.isLayerIgnored = c.getMiddlewareMetadata = void 0));
    let d = a.r(99924),
      e = a.r(77150),
      f = a.r(79154);
    ((c.getMiddlewareMetadata = (a, b, c, g) =>
      c
        ? {
            attributes: {
              [e.AttributeNames.KOA_NAME]: g?.toString(),
              [e.AttributeNames.KOA_TYPE]: d.KoaLayerType.ROUTER,
              [f.SEMATTRS_HTTP_ROUTE]: g?.toString(),
            },
            name: a._matchedRouteName || `router - ${g}`,
          }
        : {
            attributes: {
              [e.AttributeNames.KOA_NAME]: b.name ?? 'middleware',
              [e.AttributeNames.KOA_TYPE]: d.KoaLayerType.MIDDLEWARE,
            },
            name: `middleware - ${b.name}`,
          }),
      (c.isLayerIgnored = (a, b) =>
        !!(Array.isArray(b?.ignoreLayersType) && b?.ignoreLayersType?.includes(a))));
  },
  74543,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.kLayerPatched = void 0),
      (c.kLayerPatched = Symbol('koa-layer-patched')));
  },
  14318,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.KoaInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(99924),
      g = a.r(99371),
      h = a.r(95431),
      i = a.r(98070),
      j = a.r(74543);
    class k extends e.InstrumentationBase {
      constructor(a = {}) {
        super(g.PACKAGE_NAME, g.PACKAGE_VERSION, a);
      }
      init() {
        return new e.InstrumentationNodeModuleDefinition(
          'koa',
          ['>=2.0.0 <3'],
          (a) => {
            let b = 'Module' === a[Symbol.toStringTag] ? a.default : a;
            return null == b
              ? b
              : ((0, e.isWrapped)(b.prototype.use) && this._unwrap(b.prototype, 'use'),
                this._wrap(b.prototype, 'use', this._getKoaUsePatch.bind(this)),
                a);
          },
          (a) => {
            let b = 'Module' === a[Symbol.toStringTag] ? a.default : a;
            (0, e.isWrapped)(b.prototype.use) && this._unwrap(b.prototype, 'use');
          }
        );
      }
      _getKoaUsePatch(a) {
        let b = this;
        return function (c) {
          let d;
          return (
            (d = c.router ? b._patchRouterDispatch(c) : b._patchLayer(c, !1)),
            a.apply(this, [d])
          );
        };
      }
      _patchRouterDispatch(a) {
        d.diag.debug('Patching @koa/router dispatch');
        let b = a.router;
        for (let a of b?.stack ?? []) {
          let b = a.path,
            c = a.stack;
          for (let a = 0; a < c.length; a++) {
            let d = c[a];
            c[a] = this._patchLayer(d, !0, b);
          }
        }
        return a;
      }
      _patchLayer(a, b, c) {
        let g = b ? f.KoaLayerType.ROUTER : f.KoaLayerType.MIDDLEWARE;
        return !0 === a[j.kLayerPatched] || (0, h.isLayerIgnored)(g, this.getConfig())
          ? a
          : 'GeneratorFunction' === a.constructor.name ||
              'AsyncGeneratorFunction' === a.constructor.name
            ? (d.diag.debug('ignoring generator-based Koa middleware layer'), a)
            : ((a[j.kLayerPatched] = !0),
              d.diag.debug('patching Koa middleware layer'),
              async (f, j) => {
                if (void 0 === d.trace.getSpan(d.context.active())) return a(f, j);
                let k = (0, h.getMiddlewareMetadata)(f, a, b, c),
                  l = this.tracer.startSpan(k.name, { attributes: k.attributes }),
                  m = (0, i.getRPCMetadata)(d.context.active());
                m?.type === i.RPCType.HTTP &&
                  f._matchedRoute &&
                  (m.route = f._matchedRoute.toString());
                let { requestHook: n } = this.getConfig();
                n &&
                  (0, e.safeExecuteInTheMiddle)(
                    () => n(l, { context: f, middlewareLayer: a, layerType: g }),
                    (a) => {
                      a && d.diag.error('koa instrumentation: request hook failed', a);
                    },
                    !0
                  );
                let o = d.trace.setSpan(d.context.active(), l);
                return d.context.with(o, async () => {
                  try {
                    return await a(f, j);
                  } catch (a) {
                    throw (l.recordException(a), a);
                  } finally {
                    l.end();
                  }
                });
              });
      }
    }
    c.KoaInstrumentation = k;
  },
  48674,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.KoaLayerType = c.AttributeNames = c.KoaInstrumentation = void 0));
    var d = a.r(14318);
    Object.defineProperty(c, 'KoaInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.KoaInstrumentation;
      },
    });
    var e = a.r(77150);
    Object.defineProperty(c, 'AttributeNames', {
      enumerable: !0,
      get: function () {
        return e.AttributeNames;
      },
    });
    var f = a.r(99924);
    Object.defineProperty(c, 'KoaLayerType', {
      enumerable: !0,
      get: function () {
        return f.KoaLayerType;
      },
    });
  },
  18180,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(48674),
      e = a.r(79154),
      f = a.r(32723),
      g = a.r(28063),
      h = a.r(60418),
      i = g.generateInstrumentOnce('Koa', d.KoaInstrumentation, (a = {}) => ({
        ignoreLayersType: a.ignoreLayersType,
        requestHook(a, b) {
          g.addOriginToSpan(a, 'auto.http.otel.koa');
          let c = f.spanToJSON(a).data,
            d = c['koa.type'];
          d && a.setAttribute(f.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${d}.koa`);
          let i = c['koa.name'];
          if (
            ('string' == typeof i && a.updateName(i || '< unknown >'),
            f.getIsolationScope() === f.getDefaultIsolationScope())
          ) {
            h.DEBUG_BUILD &&
              f.debug.warn(
                'Isolation scope is default isolation scope - skipping setting transactionName'
              );
            return;
          }
          let j = c[e.ATTR_HTTP_ROUTE],
            k = b.context?.request?.method?.toUpperCase() || 'GET';
          j && f.getIsolationScope().setTransactionName(`${k} ${j}`);
        },
      })),
      j = f.defineIntegration((a = {}) => ({
        name: 'Koa',
        setupOnce() {
          i(a);
        },
      }));
    ((c.instrumentKoa = i),
      (c.koaIntegration = j),
      (c.setupKoaErrorHandler = (a) => {
        (a.use(async (a, b) => {
          try {
            await b();
          } catch (a) {
            throw (f.captureException(a), a);
          }
        }),
          g.ensureIsWrapped(a.use, 'koa'));
      }));
  },
  5363,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.ConnectNames = c.ConnectTypes = c.AttributeNames = void 0),
      (function (a) {
        ((a.CONNECT_TYPE = 'connect.type'), (a.CONNECT_NAME = 'connect.name'));
      })(c.AttributeNames || (c.AttributeNames = {})),
      (function (a) {
        ((a.MIDDLEWARE = 'middleware'), (a.REQUEST_HANDLER = 'request_handler'));
      })(c.ConnectTypes || (c.ConnectTypes = {})),
      (function (a) {
        ((a.MIDDLEWARE = 'middleware'), (a.REQUEST_HANDLER = 'request handler'));
      })(c.ConnectNames || (c.ConnectNames = {})));
  },
  57179,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.47.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-connect'));
  },
  82525,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c._LAYERS_STORE_PROPERTY = void 0),
      (c._LAYERS_STORE_PROPERTY = Symbol(
        'opentelemetry.instrumentation-connect.request-route-stack'
      )));
  },
  20759,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.generateRoute = c.replaceCurrentStackRoute = c.addNewStackLayer = void 0));
    let d = a.r(77674),
      e = a.r(82525);
    ((c.addNewStackLayer = (a) => {
      (!1 === Array.isArray(a[e._LAYERS_STORE_PROPERTY]) &&
        Object.defineProperty(a, e._LAYERS_STORE_PROPERTY, { enumerable: !1, value: [] }),
        a[e._LAYERS_STORE_PROPERTY].push('/'));
      let b = a[e._LAYERS_STORE_PROPERTY].length;
      return () => {
        b === a[e._LAYERS_STORE_PROPERTY].length
          ? a[e._LAYERS_STORE_PROPERTY].pop()
          : d.diag.warn('Connect: Trying to pop the stack multiple time');
      };
    }),
      (c.replaceCurrentStackRoute = (a, b) => {
        b && a[e._LAYERS_STORE_PROPERTY].splice(-1, 1, b);
      }),
      (c.generateRoute = (a) =>
        a[e._LAYERS_STORE_PROPERTY].reduce((a, b) => a.replace(/\/+$/, '') + b)));
  },
  22105,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.ConnectInstrumentation = c.ANONYMOUS_NAME = void 0));
    let d = a.r(77674),
      e = a.r(98070),
      f = a.r(5363),
      g = a.r(57179),
      h = a.r(38625),
      i = a.r(79154),
      j = a.r(20759);
    c.ANONYMOUS_NAME = 'anonymous';
    class k extends h.InstrumentationBase {
      constructor(a = {}) {
        super(g.PACKAGE_NAME, g.PACKAGE_VERSION, a);
      }
      init() {
        return [
          new h.InstrumentationNodeModuleDefinition('connect', ['>=3.0.0 <4'], (a) =>
            this._patchConstructor(a)
          ),
        ];
      }
      _patchApp(a) {
        ((0, h.isWrapped)(a.use) || this._wrap(a, 'use', this._patchUse.bind(this)),
          (0, h.isWrapped)(a.handle) || this._wrap(a, 'handle', this._patchHandle.bind(this)));
      }
      _patchConstructor(a) {
        let b = this;
        return function (...c) {
          let d = a.apply(this, c);
          return (b._patchApp(d), d);
        };
      }
      _patchNext(a, b) {
        return function (c) {
          let d = a.apply(this, [c]);
          return (b(), d);
        };
      }
      _startSpan(a, b) {
        let d, e, g;
        a
          ? ((d = f.ConnectTypes.REQUEST_HANDLER), (g = f.ConnectNames.REQUEST_HANDLER), (e = a))
          : ((d = f.ConnectTypes.MIDDLEWARE),
            (g = f.ConnectNames.MIDDLEWARE),
            (e = b.name || c.ANONYMOUS_NAME));
        let h = `${g} - ${e}`,
          j = {
            attributes: {
              [i.ATTR_HTTP_ROUTE]: a.length > 0 ? a : '/',
              [f.AttributeNames.CONNECT_TYPE]: d,
              [f.AttributeNames.CONNECT_NAME]: e,
            },
          };
        return this.tracer.startSpan(h, j);
      }
      _patchMiddleware(a, b) {
        let f = this,
          g = 4 === b.length;
        function h() {
          if (!f.isEnabled()) return b.apply(this, arguments);
          let [h, i, k] = g ? [1, 2, 3] : [0, 1, 2],
            l = arguments[h],
            m = arguments[i],
            n = arguments[k];
          (0, j.replaceCurrentStackRoute)(l, a);
          let o = (0, e.getRPCMetadata)(d.context.active());
          a && o?.type === e.RPCType.HTTP && (o.route = (0, j.generateRoute)(l));
          let p = '';
          p = a ? `request handler - ${a}` : `middleware - ${b.name || c.ANONYMOUS_NAME}`;
          let q = f._startSpan(a, b);
          f._diag.debug('start span', p);
          let r = !1;
          function s() {
            (r
              ? f._diag.debug(`span ${q.name} - already finished`)
              : ((r = !0), f._diag.debug(`finishing span ${q.name}`), q.end()),
              m.removeListener('close', s));
          }
          return (
            m.addListener('close', s),
            (arguments[k] = f._patchNext(n, s)),
            b.apply(this, arguments)
          );
        }
        return (
          Object.defineProperty(h, 'length', { value: b.length, writable: !1, configurable: !0 }),
          h
        );
      }
      _patchUse(a) {
        let b = this;
        return function (...c) {
          let d = c[c.length - 1],
            e = c[c.length - 2] || '';
          return ((c[c.length - 1] = b._patchMiddleware(e, d)), a.apply(this, c));
        };
      }
      _patchHandle(a) {
        let b = this;
        return function () {
          let [c, d] = [0, 2],
            e = arguments[c],
            f = arguments[d],
            g = (0, j.addNewStackLayer)(e);
          return (
            'function' == typeof f && (arguments[d] = b._patchOut(f, g)),
            a.apply(this, arguments)
          );
        };
      }
      _patchOut(a, b) {
        return function (...c) {
          return (b(), Reflect.apply(a, this, c));
        };
      }
    }
    c.ConnectInstrumentation = k;
  },
  17162,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.ConnectTypes =
        c.ConnectNames =
        c.AttributeNames =
        c.ANONYMOUS_NAME =
        c.ConnectInstrumentation =
          void 0));
    var d = a.r(22105);
    (Object.defineProperty(c, 'ConnectInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.ConnectInstrumentation;
      },
    }),
      Object.defineProperty(c, 'ANONYMOUS_NAME', {
        enumerable: !0,
        get: function () {
          return d.ANONYMOUS_NAME;
        },
      }));
    var e = a.r(5363);
    (Object.defineProperty(c, 'AttributeNames', {
      enumerable: !0,
      get: function () {
        return e.AttributeNames;
      },
    }),
      Object.defineProperty(c, 'ConnectNames', {
        enumerable: !0,
        get: function () {
          return e.ConnectNames;
        },
      }),
      Object.defineProperty(c, 'ConnectTypes', {
        enumerable: !0,
        get: function () {
          return e.ConnectTypes;
        },
      }));
  },
  30279,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(17162),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Connect',
      h = f.generateInstrumentOnce(g, () => new d.ConnectInstrumentation());
    function i(a, b, c, d) {
      (e.captureException(a), d(a));
    }
    ((c.connectIntegration = e.defineIntegration(() => ({
      name: g,
      setupOnce() {
        h();
      },
    }))),
      (c.instrumentConnect = h),
      (c.setupConnectErrorHandler = (a) => {
        a.use(i);
        let b = e.getClient();
        (b &&
          b.on('spanStart', (a) => {
            !(function (a) {
              let b = e.spanToJSON(a).data,
                c = b['connect.type'];
              if (b[e.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !c) return;
              a.setAttributes({
                [e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',
                [e.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${c}.connect`,
              });
              let d = b['connect.name'];
              'string' == typeof d && a.updateName(d);
            })(a);
          }),
          f.ensureIsWrapped(a.use, 'connect'));
      }));
  },
  24671,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.48.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-knex'));
  },
  16225,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.SUPPORTED_VERSIONS = c.MODULE_NAME = void 0),
      (c.MODULE_NAME = 'knex'),
      (c.SUPPORTED_VERSIONS = [
        '>=0.22.0 <4',
        '>=0.10.0 <0.18.0',
        '>=0.19.0 <0.22.0',
        '>=0.18.0 <0.19.0',
      ]));
  },
  77720,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.DB_SYSTEM_NAME_VALUE_SQLITE = void 0),
      (c.DB_SYSTEM_NAME_VALUE_SQLITE = 'sqlite'));
  },
  61737,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.extractTableName =
        c.limitLength =
        c.getName =
        c.mapSystem =
        c.otelExceptionFromKnexError =
        c.getFormatter =
          void 0));
    let d = a.r(79154),
      e = a.r(77720);
    ((c.getFormatter = (a) => {
      if (a) {
        if (a.client) {
          if (a.client._formatQuery) return a.client._formatQuery.bind(a.client);
          else if (a.client.SqlString) return a.client.SqlString.format.bind(a.client.SqlString);
        }
        if (a.builder) return a.builder.toString.bind(a.builder);
      }
      return () => '<noop formatter>';
    }),
      (c.otelExceptionFromKnexError = function (a, b) {
        return a && a instanceof Error
          ? { message: b, code: a.code, stack: a.stack, name: a.name }
          : a;
      }));
    let f = new Map([
      ['sqlite3', e.DB_SYSTEM_NAME_VALUE_SQLITE],
      ['pg', d.DB_SYSTEM_NAME_VALUE_POSTGRESQL],
    ]);
    ((c.mapSystem = (a) => f.get(a) || a),
      (c.getName = (a, b, c) => (b ? (c ? `${b} ${a}.${c}` : `${b} ${a}`) : a)),
      (c.limitLength = (a, b) =>
        'string' == typeof a && 'number' == typeof b && 0 < b && b < a.length
          ? a.substring(0, b) + '..'
          : a),
      (c.extractTableName = (a) => {
        let b = a?._single?.table;
        return 'object' == typeof b ? (0, c.extractTableName)(b) : b;
      }));
  },
  68802,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.KnexInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(24671),
      f = a.r(16225),
      g = a.r(38625),
      h = a.r(61737),
      i = a.r(79154),
      j = Symbol('opentelemetry.instrumentation-knex.context'),
      k = { maxQueryLength: 1022, requireParentSpan: !1 };
    class l extends g.InstrumentationBase {
      _semconvStability;
      constructor(a = {}) {
        (super(e.PACKAGE_NAME, e.PACKAGE_VERSION, { ...k, ...a }),
          (this._semconvStability = (0, g.semconvStabilityFromStr)(
            'database',
            process.env.OTEL_SEMCONV_STABILITY_OPT_IN
          )));
      }
      setConfig(a = {}) {
        super.setConfig({ ...k, ...a });
      }
      init() {
        let a = new g.InstrumentationNodeModuleDefinition(f.MODULE_NAME, f.SUPPORTED_VERSIONS);
        return (
          a.files.push(
            this.getClientNodeModuleFileInstrumentation('src'),
            this.getClientNodeModuleFileInstrumentation('lib'),
            this.getRunnerNodeModuleFileInstrumentation('src'),
            this.getRunnerNodeModuleFileInstrumentation('lib'),
            this.getRunnerNodeModuleFileInstrumentation('lib/execution')
          ),
          a
        );
      }
      getRunnerNodeModuleFileInstrumentation(a) {
        return new g.InstrumentationNodeModuleFile(
          `knex/${a}/runner.js`,
          f.SUPPORTED_VERSIONS,
          (a, b) => (this.ensureWrapped(a.prototype, 'query', this.createQueryWrapper(b)), a),
          (a, b) => (this._unwrap(a.prototype, 'query'), a)
        );
      }
      getClientNodeModuleFileInstrumentation(a) {
        return new g.InstrumentationNodeModuleFile(
          `knex/${a}/client.js`,
          f.SUPPORTED_VERSIONS,
          (a) => (
            this.ensureWrapped(a.prototype, 'queryBuilder', this.storeContext.bind(this)),
            this.ensureWrapped(a.prototype, 'schemaBuilder', this.storeContext.bind(this)),
            this.ensureWrapped(a.prototype, 'raw', this.storeContext.bind(this)),
            a
          ),
          (a) => (
            this._unwrap(a.prototype, 'queryBuilder'),
            this._unwrap(a.prototype, 'schemaBuilder'),
            this._unwrap(a.prototype, 'raw'),
            a
          )
        );
      }
      createQueryWrapper(a) {
        let b = this;
        return function (c) {
          return function (e) {
            let f = this.client.config,
              k = h.extractTableName(this.builder),
              l = e?.method,
              m = f?.connection?.filename || f?.connection?.database,
              { maxQueryLength: n } = b.getConfig(),
              o = { 'knex.version': a },
              p = f?.connection?.filename === ':memory:' ? 'inproc' : void 0;
            if (
              (b._semconvStability & g.SemconvStability.OLD &&
                Object.assign(o, {
                  [i.SEMATTRS_DB_SYSTEM]: h.mapSystem(f.client),
                  [i.SEMATTRS_DB_SQL_TABLE]: k,
                  [i.SEMATTRS_DB_OPERATION]: l,
                  [i.SEMATTRS_DB_USER]: f?.connection?.user,
                  [i.SEMATTRS_DB_NAME]: m,
                  [i.SEMATTRS_NET_PEER_NAME]: f?.connection?.host,
                  [i.SEMATTRS_NET_PEER_PORT]: f?.connection?.port,
                  [i.SEMATTRS_NET_TRANSPORT]: p,
                }),
              b._semconvStability & g.SemconvStability.STABLE &&
                Object.assign(o, {
                  [i.ATTR_DB_SYSTEM_NAME]: h.mapSystem(f.client),
                  [i.ATTR_DB_COLLECTION_NAME]: k,
                  [i.ATTR_DB_OPERATION_NAME]: l,
                  [i.ATTR_DB_NAMESPACE]: m,
                  [i.ATTR_SERVER_ADDRESS]: f?.connection?.host,
                  [i.ATTR_SERVER_PORT]: f?.connection?.port,
                }),
              n)
            ) {
              let a = h.limitLength(e?.sql, n);
              (b._semconvStability & g.SemconvStability.STABLE && (o[i.ATTR_DB_QUERY_TEXT] = a),
                b._semconvStability & g.SemconvStability.OLD && (o[i.SEMATTRS_DB_STATEMENT] = a));
            }
            let q = this.builder[j] || d.context.active(),
              r = d.trace.getSpan(q),
              s = r && d.trace.isSpanContextValid(r.spanContext());
            if (b._config.requireParentSpan && !s) return c.bind(this)(...arguments);
            let t = b.tracer.startSpan(
                h.getName(m, l, k),
                { kind: d.SpanKind.CLIENT, attributes: o },
                q
              ),
              u = d.trace.setSpan(d.context.active(), t);
            return d.context
              .with(u, c, this, ...arguments)
              .then((a) => (t.end(), a))
              .catch((a) => {
                let b = h.getFormatter(this)(e.sql, e.bindings || []),
                  c = a.message.replace(b + ' - ', ''),
                  f = h.otelExceptionFromKnexError(a, c);
                throw (
                  t.recordException(f),
                  t.setStatus({ code: d.SpanStatusCode.ERROR, message: c }),
                  t.end(),
                  a
                );
              });
          };
        };
      }
      storeContext(a) {
        return function () {
          let b = a.apply(this, arguments);
          return (Object.defineProperty(b, j, { value: d.context.active() }), b);
        };
      }
      ensureWrapped(a, b, c) {
        ((0, g.isWrapped)(a[b]) && this._unwrap(a, b), this._wrap(a, b, c));
      }
    }
    c.KnexInstrumentation = l;
  },
  66763,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.KnexInstrumentation = void 0));
    var d = a.r(68802);
    Object.defineProperty(c, 'KnexInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.KnexInstrumentation;
      },
    });
  },
  36772,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(66763),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Knex',
      h = f.generateInstrumentOnce(g, () => new d.KnexInstrumentation({ requireParentSpan: !0 })),
      i = e.defineIntegration(() => {
        let a;
        return {
          name: g,
          setupOnce() {
            let b = h();
            a = f.instrumentWhenWrapped(b);
          },
          setup(b) {
            a?.(() =>
              b.on('spanStart', (a) => {
                let { data: b } = e.spanToJSON(a);
                'knex.version' in b &&
                  a.setAttribute(e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');
              })
            );
          },
        };
      });
    ((c.instrumentKnex = h), (c.knexIntegration = i));
  },
  49165,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.once = c.getSpanName = void 0),
      (c.getSpanName = function (a, b, c, d) {
        return 'execBulkLoad' === a && d && b
          ? `${a} ${d} ${b}`
          : 'callProcedure' === a
            ? b
              ? `${a} ${c} ${b}`
              : `${a} ${c}`
            : b
              ? `${a} ${b}`
              : `${a}`;
      }),
      (c.once = (a) => {
        let b = !1;
        return (...c) => {
          if (!b) return ((b = !0), a(...c));
        };
      }));
  },
  16850,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.22.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-tedious'));
  },
  2422,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.TediousInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(27699),
      f = a.r(38625),
      g = a.r(79154),
      h = a.r(49165),
      i = a.r(16850),
      j = Symbol('opentelemetry.instrumentation-tedious.current-database'),
      k = ['callProcedure', 'execSql', 'execSqlBatch', 'execBulkLoad', 'prepare', 'execute'];
    function l(a) {
      Object.defineProperty(this, j, { value: a, writable: !0 });
    }
    class m extends f.InstrumentationBase {
      static COMPONENT = 'tedious';
      constructor(a = {}) {
        super(i.PACKAGE_NAME, i.PACKAGE_VERSION, a);
      }
      init() {
        return [
          new f.InstrumentationNodeModuleDefinition(
            m.COMPONENT,
            ['>=1.11.0 <20'],
            (a) => {
              let b = a.Connection.prototype;
              for (let a of k)
                ((0, f.isWrapped)(b[a]) && this._unwrap(b, a),
                  this._wrap(b, a, this._patchQuery(a)));
              return (
                (0, f.isWrapped)(b.connect) && this._unwrap(b, 'connect'),
                this._wrap(b, 'connect', this._patchConnect),
                a
              );
            },
            (a) => {
              if (void 0 === a) return;
              let b = a.Connection.prototype;
              for (let a of k) this._unwrap(b, a);
              this._unwrap(b, 'connect');
            }
          ),
        ];
      }
      _patchConnect(a) {
        return function () {
          return (
            l.call(this, this.config?.options?.database),
            this.removeListener('databaseChange', l),
            this.on('databaseChange', l),
            this.once('end', () => {
              this.removeListener('databaseChange', l);
            }),
            a.apply(this, arguments)
          );
        };
      }
      _patchQuery(a) {
        return (b) => {
          let c = this;
          function f(f) {
            if (!(f instanceof e.EventEmitter))
              return (
                c._diag.warn(`Unexpected invocation of patched ${a} method. Span not recorded`),
                b.apply(this, arguments)
              );
            let i = 0,
              k = 0,
              l = () => k++,
              m = () => i++,
              n = this[j],
              o =
                'sp_prepare' === f.sqlTextOrProcedure && f.parametersByName?.stmt?.value
                  ? f.parametersByName.stmt.value
                  : f.sqlTextOrProcedure,
              p = c.tracer.startSpan((0, h.getSpanName)(a, n, o, f.table), {
                kind: d.SpanKind.CLIENT,
                attributes: {
                  [g.SEMATTRS_DB_SYSTEM]: g.DBSYSTEMVALUES_MSSQL,
                  [g.SEMATTRS_DB_NAME]: n,
                  [g.SEMATTRS_NET_PEER_PORT]: this.config?.options?.port,
                  [g.SEMATTRS_NET_PEER_NAME]: this.config?.server,
                  [g.SEMATTRS_DB_USER]:
                    this.config?.userName ?? this.config?.authentication?.options?.userName,
                  [g.SEMATTRS_DB_STATEMENT]: o,
                  [g.SEMATTRS_DB_SQL_TABLE]: f.table,
                },
              }),
              q = (0, h.once)((a) => {
                (f.removeListener('done', l),
                  f.removeListener('doneInProc', l),
                  f.removeListener('doneProc', m),
                  f.removeListener('error', q),
                  this.removeListener('end', q),
                  p.setAttribute('tedious.procedure_count', i),
                  p.setAttribute('tedious.statement_count', k),
                  a && p.setStatus({ code: d.SpanStatusCode.ERROR, message: a.message }),
                  p.end());
              });
            return (
              f.on('done', l),
              f.on('doneInProc', l),
              f.on('doneProc', m),
              f.once('error', q),
              this.on('end', q),
              'function' == typeof f.callback
                ? c._wrap(f, 'callback', c._patchCallbackQuery(q))
                : c._diag.error('Expected request.callback to be a function'),
              d.context.with(d.trace.setSpan(d.context.active(), p), b, this, ...arguments)
            );
          }
          return (Object.defineProperty(f, 'length', { value: b.length, writable: !1 }), f);
        };
      }
      _patchCallbackQuery(a) {
        return (b) =>
          function (c, d, e) {
            return (a(c), b.apply(this, arguments));
          };
      }
    }
    c.TediousInstrumentation = m;
  },
  74021,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.TediousInstrumentation = void 0));
    var d = a.r(2422);
    Object.defineProperty(c, 'TediousInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.TediousInstrumentation;
      },
    });
  },
  1111,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(74021),
      e = a.r(32723),
      f = a.r(28063),
      g = new Set([
        'callProcedure',
        'execSql',
        'execSqlBatch',
        'execBulkLoad',
        'prepare',
        'execute',
      ]),
      h = 'Tedious',
      i = f.generateInstrumentOnce(h, () => new d.TediousInstrumentation({})),
      j = e.defineIntegration(() => {
        let a;
        return {
          name: h,
          setupOnce() {
            let b = i();
            a = f.instrumentWhenWrapped(b);
          },
          setup(b) {
            a?.(() =>
              b.on('spanStart', (a) => {
                let { description: b, data: c } = e.spanToJSON(a);
                if (!b || 'mssql' !== c['db.system']) return;
                let d = b.split(' ')[0] || '';
                g.has(d) &&
                  a.setAttribute(e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');
              })
            );
          },
        };
      });
    ((c.instrumentTedious = i), (c.tediousIntegration = j));
  },
  70878,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.47.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-generic-pool'));
  },
  30285,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.GenericPoolInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(38625),
      f = a.r(70878),
      g = 'generic-pool';
    class h extends e.InstrumentationBase {
      _isDisabled = !1;
      constructor(a = {}) {
        super(f.PACKAGE_NAME, f.PACKAGE_VERSION, a);
      }
      init() {
        return [
          new e.InstrumentationNodeModuleDefinition(
            g,
            ['>=3.0.0 <4'],
            (a) => {
              let b = a.Pool;
              return (
                (0, e.isWrapped)(b.prototype.acquire) && this._unwrap(b.prototype, 'acquire'),
                this._wrap(b.prototype, 'acquire', this._acquirePatcher.bind(this)),
                a
              );
            },
            (a) => {
              let b = a.Pool;
              return (this._unwrap(b.prototype, 'acquire'), a);
            }
          ),
          new e.InstrumentationNodeModuleDefinition(
            g,
            ['>=2.4.0 <3'],
            (a) => {
              let b = a.Pool;
              return (
                (0, e.isWrapped)(b.prototype.acquire) && this._unwrap(b.prototype, 'acquire'),
                this._wrap(b.prototype, 'acquire', this._acquireWithCallbacksPatcher.bind(this)),
                a
              );
            },
            (a) => {
              let b = a.Pool;
              return (this._unwrap(b.prototype, 'acquire'), a);
            }
          ),
          new e.InstrumentationNodeModuleDefinition(
            g,
            ['>=2.0.0 <2.4'],
            (a) => (
              (this._isDisabled = !1),
              (0, e.isWrapped)(a.Pool) && this._unwrap(a, 'Pool'),
              this._wrap(a, 'Pool', this._poolWrapper.bind(this)),
              a
            ),
            (a) => ((this._isDisabled = !0), a)
          ),
        ];
      }
      _acquirePatcher(a) {
        let b = this;
        return function (...c) {
          let e = d.context.active(),
            f = b.tracer.startSpan('generic-pool.acquire', {}, e);
          return d.context.with(d.trace.setSpan(e, f), () =>
            a.call(this, ...c).then(
              (a) => (f.end(), a),
              (a) => {
                throw (f.recordException(a), f.end(), a);
              }
            )
          );
        };
      }
      _poolWrapper(a) {
        let b = this;
        return function () {
          let c = a.apply(this, arguments);
          return (b._wrap(c, 'acquire', b._acquireWithCallbacksPatcher.bind(b)), c);
        };
      }
      _acquireWithCallbacksPatcher(a) {
        let b = this;
        return function (c, e) {
          if (b._isDisabled) return a.call(this, c, e);
          let f = d.context.active(),
            g = b.tracer.startSpan('generic-pool.acquire', {}, f);
          return d.context.with(d.trace.setSpan(f, g), () => {
            a.call(
              this,
              (a, b) => {
                if ((g.end(), c)) return c(a, b);
              },
              e
            );
          });
        };
      }
    }
    c.GenericPoolInstrumentation = h;
  },
  6685,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.GenericPoolInstrumentation = void 0));
    var d = a.r(30285);
    Object.defineProperty(c, 'GenericPoolInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.GenericPoolInstrumentation;
      },
    });
  },
  47777,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(6685),
      e = a.r(32723),
      f = a.r(28063),
      g = 'GenericPool',
      h = f.generateInstrumentOnce(g, () => new d.GenericPoolInstrumentation({}));
    ((c.genericPoolIntegration = e.defineIntegration(() => {
      let a;
      return {
        name: g,
        setupOnce() {
          let b = h();
          a = f.instrumentWhenWrapped(b);
        },
        setup(b) {
          a?.(() =>
            b.on('spanStart', (a) => {
              let b = e.spanToJSON(a).description;
              ('generic-pool.aquire' === b || 'generic-pool.acquire' === b) &&
                a.setAttribute(e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');
            })
          );
        },
      };
    })),
      (c.instrumentGenericPool = h));
  },
  92787,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.21.1'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-dataloader'));
  },
  43720,
  (a, b, c) => {
    'use strict';
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.DataloaderInstrumentation = void 0));
    let d = a.r(38625),
      e = a.r(77674),
      f = a.r(92787),
      g = 'dataloader';
    function h(a) {
      return 'Module' === a[Symbol.toStringTag] ? a.default : a;
    }
    class i extends d.InstrumentationBase {
      constructor(a = {}) {
        super(f.PACKAGE_NAME, f.PACKAGE_VERSION, a);
      }
      init() {
        return [
          new d.InstrumentationNodeModuleDefinition(
            g,
            ['>=2.0.0 <3'],
            (a) => {
              let b = h(a);
              return (
                this._patchLoad(b.prototype),
                this._patchLoadMany(b.prototype),
                this._patchPrime(b.prototype),
                this._patchClear(b.prototype),
                this._patchClearAll(b.prototype),
                this._getPatchedConstructor(b)
              );
            },
            (a) => {
              let b = h(a);
              ['load', 'loadMany', 'prime', 'clear', 'clearAll'].forEach((a) => {
                (0, d.isWrapped)(b.prototype[a]) && this._unwrap(b.prototype, a);
              });
            }
          ),
        ];
      }
      shouldCreateSpans() {
        let a = this.getConfig();
        return void 0 !== e.trace.getSpan(e.context.active()) || !a.requireParentSpan;
      }
      getSpanName(a, b) {
        let c = a.name;
        return null == c ? `${g}.${b}` : `${g}.${b} ${c}`;
      }
      _wrapBatchLoadFn(a) {
        let b = this;
        return function (...c) {
          if (!b.isEnabled() || !b.shouldCreateSpans()) return a.call(this, ...c);
          let d = e.context.active(),
            f = b.tracer.startSpan(
              b.getSpanName(this, 'batch'),
              { links: this._batch?.spanLinks },
              d
            );
          return e.context.with(e.trace.setSpan(d, f), () =>
            a
              .apply(this, c)
              .then((a) => (f.end(), a))
              .catch((a) => {
                throw (
                  f.recordException(a),
                  f.setStatus({ code: e.SpanStatusCode.ERROR, message: a.message }),
                  f.end(),
                  a
                );
              })
          );
        };
      }
      _getPatchedConstructor(a) {
        let b = this,
          c = a.prototype;
        if (!b.isEnabled()) return a;
        function e(...c) {
          return (
            'function' == typeof c[0] &&
              ((0, d.isWrapped)(c[0]) && b._unwrap(c, 0), (c[0] = b._wrapBatchLoadFn(c[0]))),
            a.apply(this, c)
          );
        }
        return ((e.prototype = c), e);
      }
      _patchLoad(a) {
        ((0, d.isWrapped)(a.load) && this._unwrap(a, 'load'),
          this._wrap(a, 'load', this._getPatchedLoad.bind(this)));
      }
      _getPatchedLoad(a) {
        let b = this;
        return function (...c) {
          if (!b.shouldCreateSpans()) return a.call(this, ...c);
          let d = e.context.active(),
            f = b.tracer.startSpan(b.getSpanName(this, 'load'), { kind: e.SpanKind.CLIENT }, d);
          return e.context.with(e.trace.setSpan(d, f), () => {
            let b = a
              .call(this, ...c)
              .then((a) => (f.end(), a))
              .catch((a) => {
                throw (
                  f.recordException(a),
                  f.setStatus({ code: e.SpanStatusCode.ERROR, message: a.message }),
                  f.end(),
                  a
                );
              });
            return (
              this._batch &&
                (this._batch.spanLinks || (this._batch.spanLinks = []),
                this._batch.spanLinks.push({ context: f.spanContext() })),
              b
            );
          });
        };
      }
      _patchLoadMany(a) {
        ((0, d.isWrapped)(a.loadMany) && this._unwrap(a, 'loadMany'),
          this._wrap(a, 'loadMany', this._getPatchedLoadMany.bind(this)));
      }
      _getPatchedLoadMany(a) {
        let b = this;
        return function (...c) {
          if (!b.shouldCreateSpans()) return a.call(this, ...c);
          let d = e.context.active(),
            f = b.tracer.startSpan(b.getSpanName(this, 'loadMany'), { kind: e.SpanKind.CLIENT }, d);
          return e.context.with(e.trace.setSpan(d, f), () =>
            a.call(this, ...c).then((a) => (f.end(), a))
          );
        };
      }
      _patchPrime(a) {
        ((0, d.isWrapped)(a.prime) && this._unwrap(a, 'prime'),
          this._wrap(a, 'prime', this._getPatchedPrime.bind(this)));
      }
      _getPatchedPrime(a) {
        let b = this;
        return function (...c) {
          if (!b.shouldCreateSpans()) return a.call(this, ...c);
          let d = e.context.active(),
            f = b.tracer.startSpan(b.getSpanName(this, 'prime'), { kind: e.SpanKind.CLIENT }, d),
            g = e.context.with(e.trace.setSpan(d, f), () => a.call(this, ...c));
          return (f.end(), g);
        };
      }
      _patchClear(a) {
        ((0, d.isWrapped)(a.clear) && this._unwrap(a, 'clear'),
          this._wrap(a, 'clear', this._getPatchedClear.bind(this)));
      }
      _getPatchedClear(a) {
        let b = this;
        return function (...c) {
          if (!b.shouldCreateSpans()) return a.call(this, ...c);
          let d = e.context.active(),
            f = b.tracer.startSpan(b.getSpanName(this, 'clear'), { kind: e.SpanKind.CLIENT }, d),
            g = e.context.with(e.trace.setSpan(d, f), () => a.call(this, ...c));
          return (f.end(), g);
        };
      }
      _patchClearAll(a) {
        ((0, d.isWrapped)(a.clearAll) && this._unwrap(a, 'clearAll'),
          this._wrap(a, 'clearAll', this._getPatchedClearAll.bind(this)));
      }
      _getPatchedClearAll(a) {
        let b = this;
        return function (...c) {
          if (!b.shouldCreateSpans()) return a.call(this, ...c);
          let d = e.context.active(),
            f = b.tracer.startSpan(b.getSpanName(this, 'clearAll'), { kind: e.SpanKind.CLIENT }, d),
            g = e.context.with(e.trace.setSpan(d, f), () => a.call(this, ...c));
          return (f.end(), g);
        };
      }
    }
    c.DataloaderInstrumentation = i;
  },
  88641,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.DataloaderInstrumentation = void 0));
    var d = a.r(43720);
    Object.defineProperty(c, 'DataloaderInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.DataloaderInstrumentation;
      },
    });
  },
  88306,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(88641),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Dataloader',
      h = f.generateInstrumentOnce(
        g,
        () => new d.DataloaderInstrumentation({ requireParentSpan: !0 })
      );
    ((c.dataloaderIntegration = e.defineIntegration(() => {
      let a;
      return {
        name: g,
        setupOnce() {
          let b = h();
          a = f.instrumentWhenWrapped(b);
        },
        setup(b) {
          a?.(() => {
            b.on('spanStart', (a) => {
              let b = e.spanToJSON(a);
              (b.description?.startsWith('dataloader') &&
                a.setAttribute(e.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader'),
                ('dataloader.load' === b.description ||
                  'dataloader.loadMany' === b.description ||
                  'dataloader.batch' === b.description) &&
                  a.setAttribute(e.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get'));
            });
          });
        },
      };
    })),
      (c.instrumentDataloader = h));
  },
  81942,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.DEFAULT_CONFIG = c.EndOperation = void 0),
      (function (a) {
        ((a.AutoAck = 'auto ack'),
          (a.Ack = 'ack'),
          (a.AckAll = 'ackAll'),
          (a.Reject = 'reject'),
          (a.Nack = 'nack'),
          (a.NackAll = 'nackAll'),
          (a.ChannelClosed = 'channel closed'),
          (a.ChannelError = 'channel error'),
          (a.InstrumentationTimeout = 'instrumentation timeout'));
      })(c.EndOperation || (c.EndOperation = {})),
      (c.DEFAULT_CONFIG = { consumeTimeoutMs: 6e4, useLinksForConsume: !1 }));
  },
  91854,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.isConfirmChannelTracing =
        c.unmarkConfirmChannelTracing =
        c.markConfirmChannelTracing =
        c.getConnectionAttributesFromUrl =
        c.getConnectionAttributesFromServer =
        c.normalizeExchange =
        c.CONNECTION_ATTRIBUTES =
        c.CHANNEL_CONSUME_TIMEOUT_TIMER =
        c.CHANNEL_SPANS_NOT_ENDED =
        c.MESSAGE_STORED_SPAN =
          void 0));
    let d = a.r(77674),
      e = a.r(79154);
    ((c.MESSAGE_STORED_SPAN = Symbol('opentelemetry.amqplib.message.stored-span')),
      (c.CHANNEL_SPANS_NOT_ENDED = Symbol('opentelemetry.amqplib.channel.spans-not-ended')),
      (c.CHANNEL_CONSUME_TIMEOUT_TIMER = Symbol(
        'opentelemetry.amqplib.channel.consumer-timeout-timer'
      )),
      (c.CONNECTION_ATTRIBUTES = Symbol('opentelemetry.amqplib.connection.attributes')));
    let f = (0, d.createContextKey)('opentelemetry.amqplib.channel.is-confirm-channel');
    c.normalizeExchange = (a) => ('' !== a ? a : '<default>');
    let g = (a, b) => a || ('AMQP' === b ? 5672 : 5671),
      h = (a) => {
        let b = a || 'amqp';
        return (b.endsWith(':') ? b.substring(0, b.length - 1) : b).toUpperCase();
      },
      i = (a, b, c, e) =>
        c
          ? { [b]: c }
          : (d.diag.error(
              `amqplib instrumentation: could not extract connection attribute ${e} from user supplied url`,
              { url: a }
            ),
            {});
    ((c.getConnectionAttributesFromServer = (a) => {
      let b = a.serverProperties.product?.toLowerCase?.();
      return b ? { [e.SEMATTRS_MESSAGING_SYSTEM]: b } : {};
    }),
      (c.getConnectionAttributesFromUrl = (a) => {
        let b = { [e.SEMATTRS_MESSAGING_PROTOCOL_VERSION]: '0.9.1' };
        if ('object' == typeof (a = a || 'amqp://localhost')) {
          let c = a,
            d = h(c?.protocol);
          Object.assign(b, { ...i(a, e.SEMATTRS_MESSAGING_PROTOCOL, d, 'protocol') });
          let f = c?.hostname || 'localhost';
          Object.assign(b, { ...i(a, e.SEMATTRS_NET_PEER_NAME, f, 'hostname') });
          let j = g(c.port, d);
          Object.assign(b, { ...i(a, e.SEMATTRS_NET_PEER_PORT, j, 'port') });
        } else {
          let c = a.replace(/:[^:@/]*@/, ':***@');
          b[e.SEMATTRS_MESSAGING_URL] = c;
          try {
            let a = new URL(c),
              d = h(a.protocol);
            Object.assign(b, { ...i(c, e.SEMATTRS_MESSAGING_PROTOCOL, d, 'protocol') });
            let f = a.hostname || 'localhost';
            Object.assign(b, { ...i(c, e.SEMATTRS_NET_PEER_NAME, f, 'hostname') });
            let j = g(a.port ? parseInt(a.port) : void 0, d);
            Object.assign(b, { ...i(c, e.SEMATTRS_NET_PEER_PORT, j, 'port') });
          } catch (a) {
            d.diag.error(
              'amqplib instrumentation: error while extracting connection details from connection url',
              { censoredUrl: c, err: a }
            );
          }
        }
        return b;
      }),
      (c.markConfirmChannelTracing = (a) => a.setValue(f, !0)),
      (c.unmarkConfirmChannelTracing = (a) => a.deleteValue(f)),
      (c.isConfirmChannelTracing = (a) => !0 === a.getValue(f)));
  },
  93481,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.PACKAGE_NAME = c.PACKAGE_VERSION = void 0),
      (c.PACKAGE_VERSION = '0.50.0'),
      (c.PACKAGE_NAME = '@opentelemetry/instrumentation-amqplib'));
  },
  57946,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }), (c.AmqplibInstrumentation = void 0));
    let d = a.r(77674),
      e = a.r(98070),
      f = a.r(38625),
      g = a.r(79154),
      h = a.r(81942),
      i = a.r(91854),
      j = a.r(93481),
      k = ['>=0.5.5 <1'];
    class l extends f.InstrumentationBase {
      constructor(a = {}) {
        super(j.PACKAGE_NAME, j.PACKAGE_VERSION, { ...h.DEFAULT_CONFIG, ...a });
      }
      setConfig(a = {}) {
        super.setConfig({ ...h.DEFAULT_CONFIG, ...a });
      }
      init() {
        let a = new f.InstrumentationNodeModuleFile(
            'amqplib/lib/channel_model.js',
            k,
            this.patchChannelModel.bind(this),
            this.unpatchChannelModel.bind(this)
          ),
          b = new f.InstrumentationNodeModuleFile(
            'amqplib/lib/callback_model.js',
            k,
            this.patchChannelModel.bind(this),
            this.unpatchChannelModel.bind(this)
          ),
          c = new f.InstrumentationNodeModuleFile(
            'amqplib/lib/connect.js',
            k,
            this.patchConnect.bind(this),
            this.unpatchConnect.bind(this)
          );
        return new f.InstrumentationNodeModuleDefinition('amqplib', k, void 0, void 0, [a, c, b]);
      }
      patchConnect(a) {
        return (
          (a = this.unpatchConnect(a)),
          (0, f.isWrapped)(a.connect) || this._wrap(a, 'connect', this.getConnectPatch.bind(this)),
          a
        );
      }
      unpatchConnect(a) {
        return ((0, f.isWrapped)(a.connect) && this._unwrap(a, 'connect'), a);
      }
      patchChannelModel(a, b) {
        return (
          (0, f.isWrapped)(a.Channel.prototype.publish) ||
            this._wrap(a.Channel.prototype, 'publish', this.getPublishPatch.bind(this, b)),
          (0, f.isWrapped)(a.Channel.prototype.consume) ||
            this._wrap(a.Channel.prototype, 'consume', this.getConsumePatch.bind(this, b)),
          (0, f.isWrapped)(a.Channel.prototype.ack) ||
            this._wrap(
              a.Channel.prototype,
              'ack',
              this.getAckPatch.bind(this, !1, h.EndOperation.Ack)
            ),
          (0, f.isWrapped)(a.Channel.prototype.nack) ||
            this._wrap(
              a.Channel.prototype,
              'nack',
              this.getAckPatch.bind(this, !0, h.EndOperation.Nack)
            ),
          (0, f.isWrapped)(a.Channel.prototype.reject) ||
            this._wrap(
              a.Channel.prototype,
              'reject',
              this.getAckPatch.bind(this, !0, h.EndOperation.Reject)
            ),
          (0, f.isWrapped)(a.Channel.prototype.ackAll) ||
            this._wrap(
              a.Channel.prototype,
              'ackAll',
              this.getAckAllPatch.bind(this, !1, h.EndOperation.AckAll)
            ),
          (0, f.isWrapped)(a.Channel.prototype.nackAll) ||
            this._wrap(
              a.Channel.prototype,
              'nackAll',
              this.getAckAllPatch.bind(this, !0, h.EndOperation.NackAll)
            ),
          (0, f.isWrapped)(a.Channel.prototype.emit) ||
            this._wrap(a.Channel.prototype, 'emit', this.getChannelEmitPatch.bind(this)),
          (0, f.isWrapped)(a.ConfirmChannel.prototype.publish) ||
            this._wrap(
              a.ConfirmChannel.prototype,
              'publish',
              this.getConfirmedPublishPatch.bind(this, b)
            ),
          a
        );
      }
      unpatchChannelModel(a) {
        return (
          (0, f.isWrapped)(a.Channel.prototype.publish) &&
            this._unwrap(a.Channel.prototype, 'publish'),
          (0, f.isWrapped)(a.Channel.prototype.consume) &&
            this._unwrap(a.Channel.prototype, 'consume'),
          (0, f.isWrapped)(a.Channel.prototype.ack) && this._unwrap(a.Channel.prototype, 'ack'),
          (0, f.isWrapped)(a.Channel.prototype.nack) && this._unwrap(a.Channel.prototype, 'nack'),
          (0, f.isWrapped)(a.Channel.prototype.reject) &&
            this._unwrap(a.Channel.prototype, 'reject'),
          (0, f.isWrapped)(a.Channel.prototype.ackAll) &&
            this._unwrap(a.Channel.prototype, 'ackAll'),
          (0, f.isWrapped)(a.Channel.prototype.nackAll) &&
            this._unwrap(a.Channel.prototype, 'nackAll'),
          (0, f.isWrapped)(a.Channel.prototype.emit) && this._unwrap(a.Channel.prototype, 'emit'),
          (0, f.isWrapped)(a.ConfirmChannel.prototype.publish) &&
            this._unwrap(a.ConfirmChannel.prototype, 'publish'),
          a
        );
      }
      getConnectPatch(a) {
        return function (b, c, d) {
          return a.call(this, b, c, function (a, c) {
            if (null == a) {
              let a = (0, i.getConnectionAttributesFromUrl)(b),
                d = (0, i.getConnectionAttributesFromServer)(c);
              c[i.CONNECTION_ATTRIBUTES] = { ...a, ...d };
            }
            d.apply(this, arguments);
          });
        };
      }
      getChannelEmitPatch(a) {
        let b = this;
        return function (c) {
          if ('close' === c) {
            b.endAllSpansOnChannel(this, !0, h.EndOperation.ChannelClosed, void 0);
            let a = this[i.CHANNEL_CONSUME_TIMEOUT_TIMER];
            (a && clearInterval(a), (this[i.CHANNEL_CONSUME_TIMEOUT_TIMER] = void 0));
          } else
            'error' === c && b.endAllSpansOnChannel(this, !0, h.EndOperation.ChannelError, void 0);
          return a.apply(this, arguments);
        };
      }
      getAckAllPatch(a, b, c) {
        let d = this;
        return function (e) {
          return (d.endAllSpansOnChannel(this, a, b, e), c.apply(this, arguments));
        };
      }
      getAckPatch(a, b, c) {
        let d = this;
        return function (e, f, g) {
          let j = b === h.EndOperation.Reject ? f : g,
            k = this[i.CHANNEL_SPANS_NOT_ENDED] ?? [],
            l = k.findIndex((a) => a.msg === e);
          if (l < 0) d.endConsumerSpan(e, a, b, j);
          else if (b !== h.EndOperation.Reject && f) {
            for (let c = 0; c <= l; c++) d.endConsumerSpan(k[c].msg, a, b, j);
            k.splice(0, l + 1);
          } else (d.endConsumerSpan(e, a, b, j), k.splice(l, 1));
          return c.apply(this, arguments);
        };
      }
      getConsumePatch(a, b) {
        let c = this;
        return function (j, k, l) {
          let m = this;
          if (!Object.prototype.hasOwnProperty.call(m, i.CHANNEL_SPANS_NOT_ENDED)) {
            let { consumeTimeoutMs: a } = c.getConfig();
            if (a) {
              let b = setInterval(() => {
                c.checkConsumeTimeoutOnChannel(m);
              }, a);
              (b.unref(), (m[i.CHANNEL_CONSUME_TIMEOUT_TIMER] = b));
            }
            m[i.CHANNEL_SPANS_NOT_ENDED] = [];
          }
          return (
            (arguments[1] = function (b) {
              let n;
              if (!b) return k.call(this, b);
              let o = b.properties.headers ?? {},
                p = d.propagation.extract(d.ROOT_CONTEXT, o),
                q = b.fields?.exchange;
              if (c._config.useLinksForConsume) {
                let a = p ? d.trace.getSpan(p)?.spanContext() : void 0;
                ((p = void 0), a && (n = [{ context: a }]));
              }
              let r = c.tracer.startSpan(
                  `${j} process`,
                  {
                    kind: d.SpanKind.CONSUMER,
                    attributes: {
                      ...m?.connection?.[i.CONNECTION_ATTRIBUTES],
                      [g.SEMATTRS_MESSAGING_DESTINATION]: q,
                      [g.SEMATTRS_MESSAGING_DESTINATION_KIND]:
                        g.MESSAGINGDESTINATIONKINDVALUES_TOPIC,
                      [g.SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY]: b.fields?.routingKey,
                      [g.SEMATTRS_MESSAGING_OPERATION]: g.MESSAGINGOPERATIONVALUES_PROCESS,
                      [g.SEMATTRS_MESSAGING_MESSAGE_ID]: b?.properties.messageId,
                      [g.SEMATTRS_MESSAGING_CONVERSATION_ID]: b?.properties.correlationId,
                    },
                    links: n,
                  },
                  p
                ),
                { consumeHook: s } = c.getConfig();
              (s &&
                (0, f.safeExecuteInTheMiddle)(
                  () => s(r, { moduleVersion: a, msg: b }),
                  (a) => {
                    a && d.diag.error('amqplib instrumentation: consumerHook error', a);
                  },
                  !0
                ),
                l?.noAck ||
                  (m[i.CHANNEL_SPANS_NOT_ENDED].push({ msg: b, timeOfConsume: (0, e.hrTime)() }),
                  (b[i.MESSAGE_STORED_SPAN] = r)));
              let t = p || d.ROOT_CONTEXT;
              (d.context.with(d.trace.setSpan(t, r), () => {
                k.call(this, b);
              }),
                l?.noAck && (c.callConsumeEndHook(r, b, !1, h.EndOperation.AutoAck), r.end()));
            }),
            b.apply(this, arguments)
          );
        };
      }
      getConfirmedPublishPatch(a, b) {
        let c = this;
        return function (e, g, h, j, k) {
          let { span: l, modifiedOptions: m } = c.createPublishSpan(c, e, g, this, j),
            { publishHook: n } = c.getConfig();
          n &&
            (0, f.safeExecuteInTheMiddle)(
              () =>
                n(l, {
                  moduleVersion: a,
                  exchange: e,
                  routingKey: g,
                  content: h,
                  options: m,
                  isConfirmChannel: !0,
                }),
              (a) => {
                a && d.diag.error('amqplib instrumentation: publishHook error', a);
              },
              !0
            );
          let o = (0, i.markConfirmChannelTracing)(d.context.active()),
            p = [...arguments];
          return (
            (p[3] = m),
            (p[4] = d.context.bind(
              (0, i.unmarkConfirmChannelTracing)(d.trace.setSpan(o, l)),
              function (b, i) {
                try {
                  k?.call(this, b, i);
                } finally {
                  let { publishConfirmHook: i } = c.getConfig();
                  (i &&
                    (0, f.safeExecuteInTheMiddle)(
                      () =>
                        i(l, {
                          moduleVersion: a,
                          exchange: e,
                          routingKey: g,
                          content: h,
                          options: j,
                          isConfirmChannel: !0,
                          confirmError: b,
                        }),
                      (a) => {
                        a && d.diag.error('amqplib instrumentation: publishConfirmHook error', a);
                      },
                      !0
                    ),
                    b &&
                      l.setStatus({
                        code: d.SpanStatusCode.ERROR,
                        message: "message confirmation has been nack'ed",
                      }),
                    l.end());
                }
              }
            )),
            d.context.with(o, b.bind(this, ...p))
          );
        };
      }
      getPublishPatch(a, b) {
        let c = this;
        return function (e, g, h, j) {
          if ((0, i.isConfirmChannelTracing)(d.context.active())) return b.apply(this, arguments);
          {
            let { span: i, modifiedOptions: k } = c.createPublishSpan(c, e, g, this, j),
              { publishHook: l } = c.getConfig();
            l &&
              (0, f.safeExecuteInTheMiddle)(
                () =>
                  l(i, {
                    moduleVersion: a,
                    exchange: e,
                    routingKey: g,
                    content: h,
                    options: k,
                    isConfirmChannel: !1,
                  }),
                (a) => {
                  a && d.diag.error('amqplib instrumentation: publishHook error', a);
                },
                !0
              );
            let m = [...arguments];
            m[3] = k;
            let n = b.apply(this, m);
            return (i.end(), n);
          }
        };
      }
      createPublishSpan(a, b, c, e, f) {
        let h = (0, i.normalizeExchange)(b),
          j = a.tracer.startSpan(`publish ${h}`, {
            kind: d.SpanKind.PRODUCER,
            attributes: {
              ...e.connection[i.CONNECTION_ATTRIBUTES],
              [g.SEMATTRS_MESSAGING_DESTINATION]: b,
              [g.SEMATTRS_MESSAGING_DESTINATION_KIND]: g.MESSAGINGDESTINATIONKINDVALUES_TOPIC,
              [g.SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY]: c,
              [g.SEMATTRS_MESSAGING_MESSAGE_ID]: f?.messageId,
              [g.SEMATTRS_MESSAGING_CONVERSATION_ID]: f?.correlationId,
            },
          }),
          k = f ?? {};
        return (
          (k.headers = k.headers ?? {}),
          d.propagation.inject(d.trace.setSpan(d.context.active(), j), k.headers),
          { span: j, modifiedOptions: k }
        );
      }
      endConsumerSpan(a, b, c, e) {
        let f = a[i.MESSAGE_STORED_SPAN];
        f &&
          (!1 !== b &&
            f.setStatus({
              code: d.SpanStatusCode.ERROR,
              message:
                c !== h.EndOperation.ChannelClosed && c !== h.EndOperation.ChannelError
                  ? `${c} called on message${!0 === e ? ' with requeue' : !1 === e ? ' without requeue' : ''}`
                  : c,
            }),
          this.callConsumeEndHook(f, a, b, c),
          f.end(),
          (a[i.MESSAGE_STORED_SPAN] = void 0));
      }
      endAllSpansOnChannel(a, b, c, d) {
        ((a[i.CHANNEL_SPANS_NOT_ENDED] ?? []).forEach((a) => {
          this.endConsumerSpan(a.msg, b, c, d);
        }),
          (a[i.CHANNEL_SPANS_NOT_ENDED] = []));
      }
      callConsumeEndHook(a, b, c, e) {
        let { consumeEndHook: g } = this.getConfig();
        g &&
          (0, f.safeExecuteInTheMiddle)(
            () => g(a, { msg: b, rejected: c, endOperation: e }),
            (a) => {
              a && d.diag.error('amqplib instrumentation: consumerEndHook error', a);
            },
            !0
          );
      }
      checkConsumeTimeoutOnChannel(a) {
        let b,
          c = (0, e.hrTime)(),
          d = a[i.CHANNEL_SPANS_NOT_ENDED] ?? [],
          { consumeTimeoutMs: f } = this.getConfig();
        for (b = 0; b < d.length; b++) {
          let a = d[b],
            g = (0, e.hrTimeDuration)(a.timeOfConsume, c);
          if ((0, e.hrTimeToMilliseconds)(g) < f) break;
          this.endConsumerSpan(a.msg, null, h.EndOperation.InstrumentationTimeout, !0);
        }
        d.splice(0, b);
      }
    }
    c.AmqplibInstrumentation = l;
  },
  41757,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      (c.EndOperation = c.DEFAULT_CONFIG = c.AmqplibInstrumentation = void 0));
    var d = a.r(57946);
    Object.defineProperty(c, 'AmqplibInstrumentation', {
      enumerable: !0,
      get: function () {
        return d.AmqplibInstrumentation;
      },
    });
    var e = a.r(81942);
    (Object.defineProperty(c, 'DEFAULT_CONFIG', {
      enumerable: !0,
      get: function () {
        return e.DEFAULT_CONFIG;
      },
    }),
      Object.defineProperty(c, 'EndOperation', {
        enumerable: !0,
        get: function () {
          return e.EndOperation;
        },
      }));
  },
  70051,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(41757),
      e = a.r(32723),
      f = a.r(28063),
      g = 'Amqplib',
      h = {
        consumeEndHook: (a) => {
          f.addOriginToSpan(a, 'auto.amqplib.otel.consumer');
        },
        publishHook: (a) => {
          f.addOriginToSpan(a, 'auto.amqplib.otel.publisher');
        },
      },
      i = f.generateInstrumentOnce(g, () => new d.AmqplibInstrumentation(h));
    ((c.amqplibIntegration = e.defineIntegration(() => ({
      name: g,
      setupOnce() {
        i();
      },
    }))),
      (c.instrumentAmqplib = i));
  },
  93801,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.INTEGRATION_NAME = 'VercelAI'));
  },
  99422,
  (a, b, c) => {
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }));
    let d = a.r(38625),
      e = a.r(32723),
      f = a.r(93801),
      g = ['generateText', 'streamText', 'generateObject', 'streamObject', 'embed', 'embedMany'];
    function h(a, b, c, d) {
      return {
        recordInputs:
          a?.recordInputs !== void 0
            ? a.recordInputs
            : void 0 !== b.recordInputs
              ? b.recordInputs
              : !0 === c || d,
        recordOutputs:
          a?.recordOutputs !== void 0
            ? a.recordOutputs
            : void 0 !== b.recordOutputs
              ? b.recordOutputs
              : !0 === c || d,
      };
    }
    class i extends d.InstrumentationBase {
      __init() {
        this._isPatched = !1;
      }
      __init2() {
        this._callbacks = [];
      }
      constructor(a = {}) {
        (super('@sentry/instrumentation-vercel-ai', e.SDK_VERSION, a),
          i.prototype.__init.call(this),
          i.prototype.__init2.call(this));
      }
      init() {
        return new d.InstrumentationNodeModuleDefinition(
          'ai',
          ['>=3.0.0 <6'],
          this._patch.bind(this)
        );
      }
      callWhenPatched(a) {
        this._isPatched ? a() : this._callbacks.push(a);
      }
      _patch(a) {
        function b(a) {
          return (...b) => {
            let c = b[0].experimental_telemetry || {},
              d = c.isEnabled,
              g = e.getCurrentScope().getClient(),
              i = g?.getIntegrationByName(f.INTEGRATION_NAME),
              { recordInputs: j, recordOutputs: k } = h(
                i?.options,
                c,
                d,
                !!i && !!g?.getOptions().sendDefaultPii
              );
            return (
              (b[0].experimental_telemetry = {
                ...c,
                isEnabled: void 0 === d || d,
                recordInputs: j,
                recordOutputs: k,
              }),
              e.handleCallbackErrors(
                async () => {
                  let c = await a.apply(this, b);
                  return (
                    !(function (a) {
                      if (
                        'object' == typeof a &&
                        null !== a &&
                        'content' in a &&
                        Array.isArray(a.content)
                      ) {
                        for (let b of a.content)
                          if (
                            'object' == typeof b &&
                            null !== b &&
                            'type' in b &&
                            'error' in b &&
                            'toolName' in b &&
                            'toolCallId' in b &&
                            'tool-error' === b.type &&
                            b.error instanceof Error
                          ) {
                            let a = e._INTERNAL_getSpanForToolCallId(b.toolCallId);
                            if (a) {
                              let c = a.spanContext();
                              (e.withScope((a) => {
                                (a.setContext('trace', { trace_id: c.traceId, span_id: c.spanId }),
                                  a.setTag('vercel.ai.tool.name', b.toolName),
                                  a.setTag('vercel.ai.tool.callId', b.toolCallId),
                                  a.setLevel('error'),
                                  e.captureException(b.error, {
                                    mechanism: { type: 'auto.vercelai.otel', handled: !1 },
                                  }));
                              }),
                                e._INTERNAL_cleanupToolCallSpan(b.toolCallId));
                            } else
                              e.withScope((a) => {
                                (a.setTag('vercel.ai.tool.name', b.toolName),
                                  a.setTag('vercel.ai.tool.callId', b.toolCallId),
                                  a.setLevel('error'),
                                  e.captureException(b.error, {
                                    mechanism: { type: 'auto.vercelai.otel', handled: !1 },
                                  }));
                              });
                          }
                      }
                    })(c),
                    c
                  );
                },
                (a) => {
                  a &&
                    'object' == typeof a &&
                    e.addNonEnumerableProperty(a, '_sentry_active_span', e.getActiveSpan());
                }
              )
            );
          };
        }
        if (
          ((this._isPatched = !0),
          this._callbacks.forEach((a) => a()),
          (this._callbacks = []),
          '[object Module]' === Object.prototype.toString.call(a))
        ) {
          for (let c of g) a[c] = b(a[c]);
          return a;
        }
        {
          let c = g.reduce((c, d) => ((c[d] = b(a[d])), c), {});
          return { ...a, ...c };
        }
      }
    }
    ((c.SentryVercelAiInstrumentation = i), (c.determineRecordingSettings = h));
  },
  663,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(28063),
      f = a.r(93801),
      g = a.r(99422),
      h = e.generateInstrumentOnce(
        f.INTEGRATION_NAME,
        () => new g.SentryVercelAiInstrumentation({})
      ),
      i = d.defineIntegration((a = {}) => {
        let b;
        return {
          name: f.INTEGRATION_NAME,
          options: a,
          setupOnce() {
            b = h();
          },
          afterAllSetup(c) {
            (a.force ??
            (function (a) {
              let b = a.getIntegrationByName('Modules');
              return !!b?.getModules?.()?.ai;
            })(c))
              ? d.addVercelAiProcessors(c)
              : b?.callWhenPatched(() => d.addVercelAiProcessors(c));
          },
        };
      });
    ((c.instrumentVercelAi = h), (c.vercelAIIntegration = i));
  },
  96702,
  (a, b, c) => {
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }));
    let d = a.r(38625),
      e = a.r(32723),
      f = ['>=4.0.0 <6'];
    class g extends d.InstrumentationBase {
      constructor(a = {}) {
        super('@sentry/instrumentation-openai', e.SDK_VERSION, a);
      }
      init() {
        return new d.InstrumentationNodeModuleDefinition('openai', f, this._patch.bind(this));
      }
      _patch(a) {
        let b = a.OpenAI,
          c = function (...a) {
            var c, d;
            let f = Reflect.construct(b, a),
              g = e.getCurrentScope().getClient(),
              h = g?.getIntegrationByName(e.OPENAI_INTEGRATION_NAME),
              { recordInputs: i, recordOutputs: j } =
                ((c = h?.options),
                (d = !!g?.getOptions().sendDefaultPii),
                { recordInputs: c?.recordInputs ?? d, recordOutputs: c?.recordOutputs ?? d });
            return e.instrumentOpenAiClient(f, { recordInputs: i, recordOutputs: j });
          };
        for (let a of (Object.setPrototypeOf(c, b),
        Object.setPrototypeOf(c.prototype, b.prototype),
        Object.getOwnPropertyNames(b)))
          if (!['length', 'name', 'prototype'].includes(a)) {
            let d = Object.getOwnPropertyDescriptor(b, a);
            d && Object.defineProperty(c, a, d);
          }
        try {
          a.OpenAI = c;
        } catch (b) {
          Object.defineProperty(a, 'OpenAI', {
            value: c,
            writable: !0,
            configurable: !0,
            enumerable: !0,
          });
        }
        if (a.default === b)
          try {
            a.default = c;
          } catch (b) {
            Object.defineProperty(a, 'default', {
              value: c,
              writable: !0,
              configurable: !0,
              enumerable: !0,
            });
          }
        return a;
      }
    }
    c.SentryOpenAiInstrumentation = g;
  },
  15508,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(28063),
      f = a.r(96702),
      g = e.generateInstrumentOnce(
        d.OPENAI_INTEGRATION_NAME,
        () => new f.SentryOpenAiInstrumentation({})
      ),
      h = d.defineIntegration((a = {}) => ({
        name: d.OPENAI_INTEGRATION_NAME,
        options: a,
        setupOnce() {
          g();
        },
      }));
    ((c.instrumentOpenAi = g), (c.openAIIntegration = h));
  },
  4891,
  (a, b, c) => {
    ((globalThis._sentryNextJsVersion = '15.5.2'),
      Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }));
    let d = a.r(38625),
      e = a.r(32723),
      f = ['>=0.19.2 <1.0.0'];
    class g extends d.InstrumentationBase {
      constructor(a = {}) {
        super('@sentry/instrumentation-anthropic-ai', e.SDK_VERSION, a);
      }
      init() {
        return new d.InstrumentationNodeModuleDefinition(
          '@anthropic-ai/sdk',
          f,
          this._patch.bind(this)
        );
      }
      _patch(a) {
        let b = a.Anthropic,
          c = function (...a) {
            var c, d;
            let f = Reflect.construct(b, a),
              g = e.getCurrentScope().getClient(),
              h = g?.getIntegrationByName(e.ANTHROPIC_AI_INTEGRATION_NAME),
              { recordInputs: i, recordOutputs: j } =
                ((c = h?.options),
                (d = !!g?.getOptions().sendDefaultPii),
                { recordInputs: c?.recordInputs ?? d, recordOutputs: c?.recordOutputs ?? d });
            return e.instrumentAnthropicAiClient(f, { recordInputs: i, recordOutputs: j });
          };
        for (let a of (Object.setPrototypeOf(c, b),
        Object.setPrototypeOf(c.prototype, b.prototype),
        Object.getOwnPropertyNames(b)))
          if (!['length', 'name', 'prototype'].includes(a)) {
            let d = Object.getOwnPropertyDescriptor(b, a);
            d && Object.defineProperty(c, a, d);
          }
        try {
          a.Anthropic = c;
        } catch (b) {
          Object.defineProperty(a, 'Anthropic', {
            value: c,
            writable: !0,
            configurable: !0,
            enumerable: !0,
          });
        }
        if (a.default === b)
          try {
            a.default = c;
          } catch (b) {
            Object.defineProperty(a, 'default', {
              value: c,
              writable: !0,
              configurable: !0,
              enumerable: !0,
            });
          }
        return a;
      }
    }
    c.SentryAnthropicAiInstrumentation = g;
  },
  20606,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(28063),
      f = a.r(4891),
      g = e.generateInstrumentOnce(
        d.ANTHROPIC_AI_INTEGRATION_NAME,
        () => new f.SentryAnthropicAiInstrumentation({})
      );
    ((c.anthropicAIIntegration = d.defineIntegration((a = {}) => ({
      name: d.ANTHROPIC_AI_INTEGRATION_NAME,
      options: a,
      setupOnce() {
        g();
      },
    }))),
      (c.instrumentAnthropicAi = g));
  },
  50295,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = d.defineIntegration(
        (a) => (
          d.isBrowser() ||
            d.consoleSandbox(() => {
              console.warn('The launchDarklyIntegration() can only be used in the browser.');
            }),
          { name: 'LaunchDarkly' }
        )
      );
    ((c.buildLaunchDarklyFlagUsedHandlerShim = function () {
      return (
        d.isBrowser() ||
          d.consoleSandbox(() => {
            console.warn('The buildLaunchDarklyFlagUsedHandler() can only be used in the browser.');
          }),
        { name: 'sentry-flag-auditor', type: 'flag-used', synchronous: !0, method: () => null }
      );
    }),
      (c.launchDarklyIntegrationShim = e));
  },
  50993,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = d.defineIntegration(
        (a) => (
          d.isBrowser() ||
            d.consoleSandbox(() => {
              console.warn('The openFeatureIntegration() can only be used in the browser.');
            }),
          { name: 'OpenFeature' }
        )
      );
    ((c.OpenFeatureIntegrationHookShim = class {
      constructor() {
        d.isBrowser() ||
          d.consoleSandbox(() => {
            console.warn('The OpenFeatureIntegrationHook can only be used in the browser.');
          });
      }
      after() {}
      error() {}
    }),
      (c.openFeatureIntegrationShim = e));
  },
  82596,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723);
    c.statsigIntegrationShim = d.defineIntegration(
      (a) => (
        d.isBrowser() ||
          d.consoleSandbox(() => {
            console.warn('The statsigIntegration() can only be used in the browser.');
          }),
        { name: 'Statsig' }
      )
    );
  },
  66218,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723);
    c.unleashIntegrationShim = d.defineIntegration(
      (a) => (
        d.isBrowser() ||
          d.consoleSandbox(() => {
            console.warn('The unleashIntegration() can only be used in the browser.');
          }),
        { name: 'Unleash' }
      )
    );
  },
  37007,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(61095),
      e = a.r(77674),
      f = a.r(38625),
      g = a.r(79154);
    function h(a, b, c, d, e) {
      var f, g, h, l, m, n, o, p;
      return (
        i(a, c),
        b(
          a,
          'addDoc',
          ((f = d),
          (g = e),
          function (a) {
            return function (b, c) {
              let d = k(f, 'addDoc', b);
              return (g(d), j(d, () => a(b, c)));
            };
          })
        ),
        b(
          a,
          'getDocs',
          ((h = d),
          (l = e),
          function (a) {
            return function (b) {
              let c = k(h, 'getDocs', b);
              return (l(c), j(c, () => a(b)));
            };
          })
        ),
        b(
          a,
          'setDoc',
          ((m = d),
          (n = e),
          function (a) {
            return function (b, c, d) {
              let e = k(m, 'setDoc', b.parent || b);
              return (n(e), j(e, () => (void 0 !== d ? a(b, c, d) : a(b, c))));
            };
          })
        ),
        b(
          a,
          'deleteDoc',
          ((o = d),
          (p = e),
          function (a) {
            return function (b) {
              let c = k(o, 'deleteDoc', b.parent || b);
              return (p(c), j(c, () => a(b)));
            };
          })
        ),
        a
      );
    }
    function i(a, b) {
      for (let c of ['addDoc', 'getDocs', 'setDoc', 'deleteDoc']) f.isWrapped(a[c]) && b(a, c);
      return a;
    }
    function j(a, b) {
      return e.context.with(e.trace.setSpan(e.context.active(), a), () =>
        f.safeExecuteInTheMiddle(
          () => b(),
          (b) => {
            (b && a.recordException(b), a.end());
          },
          !0
        )
      );
    }
    function k(a, b, c) {
      let d = a.startSpan(`${b} ${c.path}`, { kind: e.SpanKind.CLIENT });
      return (
        (function (a, b) {
          let c = b.firestore.app,
            d = c.options,
            e = (b.firestore.toJSON() || {}).settings || {},
            f = {
              [g.ATTR_DB_COLLECTION_NAME]: b.path,
              [g.ATTR_DB_NAMESPACE]: c.name,
              [g.ATTR_DB_SYSTEM_NAME]: 'firebase.firestore',
              'firebase.firestore.type': b.type,
              'firebase.firestore.options.projectId': d.projectId,
              'firebase.firestore.options.appId': d.appId,
              'firebase.firestore.options.messagingSenderId': d.messagingSenderId,
              'firebase.firestore.options.storageBucket': d.storageBucket,
            },
            { address: h, port: i } = l(e);
          (h && (f[g.ATTR_SERVER_ADDRESS] = h),
            i && (f[g.ATTR_SERVER_PORT] = i),
            a.setAttributes(f));
        })(d, c),
        d.setAttribute(g.ATTR_DB_OPERATION_NAME, b),
        d
      );
    }
    function l(a) {
      let b, c;
      if ('string' == typeof a.host)
        if (a.host.startsWith('[')) {
          if (a.host.endsWith(']')) b = a.host.replace(/^\[|\]$/g, '');
          else if (a.host.includes(']:')) {
            let d = a.host.lastIndexOf(':');
            -1 !== d &&
              ((b = a.host.slice(1, d).replace(/^\[|\]$/g, '')), (c = a.host.slice(d + 1)));
          }
        } else if (d.isIPv6(a.host)) b = a.host;
        else {
          let d = a.host.lastIndexOf(':');
          -1 !== d ? ((b = a.host.slice(0, d)), (c = a.host.slice(d + 1))) : (b = a.host);
        }
      return { address: b, port: c ? parseInt(c, 10) : void 0 };
    }
    ((c.getPortAndAddress = l),
      (c.patchFirestore = function (a, b, c, d, g) {
        let j = () => {},
          k = g.firestoreSpanCreationHook;
        'function' == typeof k &&
          (j = (a) => {
            f.safeExecuteInTheMiddle(
              () => k(a),
              (a) => {
                a && e.diag.error(a?.message);
              },
              !0
            );
          });
        let l = new f.InstrumentationNodeModuleDefinition('@firebase/firestore', b, (b) =>
          h(b, c, d, a, j)
        );
        for (let e of [
          '@firebase/firestore/dist/lite/index.node.cjs.js',
          '@firebase/firestore/dist/lite/index.node.mjs.js',
          '@firebase/firestore/dist/lite/index.rn.esm2017.js',
          '@firebase/firestore/dist/lite/index.cjs.js',
        ])
          l.files.push(
            new f.InstrumentationNodeModuleFile(
              e,
              b,
              (b) => h(b, c, d, a, j),
              (a) => i(a, d)
            )
          );
        return l;
      }));
  },
  60744,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(38625),
      e = a.r(32723),
      f = a.r(37007),
      g = {},
      h = ['>=3.0.0 <5'];
    class i extends d.InstrumentationBase {
      constructor(a = g) {
        super('@sentry/instrumentation-firebase', e.SDK_VERSION, a);
      }
      setConfig(a = {}) {
        super.setConfig({ ...g, ...a });
      }
      init() {
        let a = [];
        return (
          a.push(f.patchFirestore(this.tracer, h, this._wrap, this._unwrap, this.getConfig())),
          a
        );
      }
    }
    c.FirebaseInstrumentation = i;
  },
  34077,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(28063),
      f = a.r(60744),
      g = 'Firebase',
      h = {
        firestoreSpanCreationHook: (a) => {
          (e.addOriginToSpan(a, 'auto.firebase.otel.firestore'),
            a.setAttribute(d.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'db.query'));
        },
      },
      i = e.generateInstrumentOnce(g, () => new f.FirebaseInstrumentation(h));
    ((c.firebaseIntegration = d.defineIntegration(() => ({
      name: g,
      setupOnce() {
        i();
      },
    }))),
      (c.instrumentFirebase = i));
  },
  30690,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(66900),
      e = a.r(70051),
      f = a.r(20606),
      g = a.r(30279),
      h = a.r(82685),
      i = a.r(20845),
      j = a.r(34077),
      k = a.r(47777),
      l = a.r(95432),
      m = a.r(58389),
      n = a.r(29323),
      o = a.r(18180),
      p = a.r(23712),
      q = a.r(16509),
      r = a.r(88952),
      s = a.r(34404),
      t = a.r(13786),
      u = a.r(15508),
      v = a.r(60972),
      w = a.r(12494),
      x = a.r(43537),
      y = a.r(39244),
      z = a.r(1111),
      A = a.r(663);
    ((c.getAutoPerformanceIntegrations = function () {
      return [
        h.expressIntegration(),
        i.fastifyIntegration(),
        l.graphqlIntegration(),
        q.mongoIntegration(),
        r.mongooseIntegration(),
        s.mysqlIntegration(),
        t.mysql2Integration(),
        y.redisIntegration(),
        v.postgresIntegration(),
        x.prismaIntegration(),
        m.hapiIntegration(),
        o.koaIntegration(),
        g.connectIntegration(),
        z.tediousIntegration(),
        k.genericPoolIntegration(),
        n.kafkaIntegration(),
        e.amqplibIntegration(),
        p.lruMemoizerIntegration(),
        A.vercelAIIntegration(),
        u.openAIIntegration(),
        w.postgresJsIntegration(),
        j.firebaseIntegration(),
        f.anthropicAIIntegration(),
      ];
    }),
      (c.getOpenTelemetryInstrumentationToPreload = function () {
        return [
          d.instrumentSentryHttp,
          d.instrumentOtelHttp,
          h.instrumentExpress,
          g.instrumentConnect,
          i.instrumentFastify,
          i.instrumentFastifyV3,
          m.instrumentHapi,
          n.instrumentKafka,
          o.instrumentKoa,
          p.instrumentLruMemoizer,
          q.instrumentMongo,
          r.instrumentMongoose,
          s.instrumentMysql,
          t.instrumentMysql2,
          v.instrumentPostgres,
          m.instrumentHapi,
          l.instrumentGraphql,
          y.instrumentRedis,
          z.instrumentTedious,
          k.instrumentGenericPool,
          e.instrumentAmqplib,
          A.instrumentVercelAi,
          u.instrumentOpenAi,
          w.instrumentPostgresJs,
          j.instrumentFirebase,
          f.instrumentAnthropicAi,
        ];
      }));
  },
  49744,
  (a) => {
    'use strict';
    let b;
    (a.s(
      [
        'defaultResource',
        () => r.defaultResource,
        'defaultServiceName',
        () => s.defaultServiceName,
        'detectResources',
        () => e,
        'emptyResource',
        () => r.emptyResource,
        'envDetector',
        () => i,
        'hostDetector',
        () => m,
        'osDetector',
        () => n,
        'processDetector',
        () => o,
        'resourceFromAttributes',
        () => r.resourceFromAttributes,
        'serviceInstanceIdDetector',
        () => q,
      ],
      49744
    ),
      a.s([], 85772),
      a.i(85772));
    var c = a.i(84151),
      d = a.i(12116);
    let e = (a = {}) =>
      (a.detectors || [])
        .map((b) => {
          try {
            let e = (0, d.resourceFromDetectedResource)(b.detect(a));
            return (c.diag.debug(`${b.constructor.name} found resource.`, e), e);
          } catch (a) {
            return (
              c.diag.debug(`${b.constructor.name} failed: ${a.message}`),
              (0, d.emptyResource)()
            );
          }
        })
        .reduce((a, b) => a.merge(b), (0, d.emptyResource)());
    var f = a.i(79833),
      g = a.i(15727);
    class h {
      _MAX_LENGTH = 255;
      _COMMA_SEPARATOR = ',';
      _LABEL_KEY_VALUE_SPLITTER = '=';
      _ERROR_MESSAGE_INVALID_CHARS =
        'should be a ASCII string with a length greater than 0 and not exceed ' +
        this._MAX_LENGTH +
        ' characters.';
      _ERROR_MESSAGE_INVALID_VALUE =
        'should be a ASCII string with a length not exceed ' + this._MAX_LENGTH + ' characters.';
      detect(a) {
        let b = {},
          d = (0, g.getStringFromEnv)('OTEL_RESOURCE_ATTRIBUTES'),
          e = (0, g.getStringFromEnv)('OTEL_SERVICE_NAME');
        if (d)
          try {
            let a = this._parseResourceAttributes(d);
            Object.assign(b, a);
          } catch (a) {
            c.diag.debug(`EnvDetector failed: ${a.message}`);
          }
        return (e && (b[f.ATTR_SERVICE_NAME] = e), { attributes: b });
      }
      _parseResourceAttributes(a) {
        if (!a) return {};
        let b = {};
        for (let c of a.split(this._COMMA_SEPARATOR, -1)) {
          let a = c.split(this._LABEL_KEY_VALUE_SPLITTER, -1);
          if (2 !== a.length) continue;
          let [d, e] = a;
          if (
            ((d = d.trim()), (e = e.trim().split(/^"|"$/).join('')), !this._isValidAndNotEmpty(d))
          )
            throw Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);
          if (!this._isValid(e))
            throw Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);
          b[d] = decodeURIComponent(e);
        }
        return b;
      }
      _isValid(a) {
        return a.length <= this._MAX_LENGTH && this._isBaggageOctetString(a);
      }
      _isBaggageOctetString(a) {
        for (let b = 0; b < a.length; b++) {
          let c = a.charCodeAt(b);
          if (c < 33 || 44 === c || 59 === c || 92 === c || c > 126) return !1;
        }
        return !0;
      }
      _isValidAndNotEmpty(a) {
        return a.length > 0 && this._isValid(a);
      }
    }
    let i = new h();
    var j = a.i(46786),
      k = a.i(5365);
    async function l() {
      if (!b)
        switch (k.platform) {
          case 'darwin':
            b = (await a.A(89922)).getMachineId;
            break;
          case 'linux':
            b = (await a.A(29075)).getMachineId;
            break;
          case 'freebsd':
            b = (await a.A(55666)).getMachineId;
            break;
          case 'win32':
            b = (await a.A(53898)).getMachineId;
            break;
          default:
            b = (await a.A(45881)).getMachineId;
        }
      return b();
    }
    let m = new (class {
        detect(a) {
          return {
            attributes: {
              'host.name': (0, j.hostname)(),
              'host.arch': ((a) => {
                switch (a) {
                  case 'arm':
                    return 'arm32';
                  case 'ppc':
                    return 'ppc32';
                  case 'x64':
                    return 'amd64';
                  default:
                    return a;
                }
              })((0, j.arch)()),
              'host.id': l(),
            },
          };
        }
      })(),
      n = new (class {
        detect(a) {
          return {
            attributes: {
              'os.type': ((a) => {
                switch (a) {
                  case 'sunos':
                    return 'solaris';
                  case 'win32':
                    return 'windows';
                  default:
                    return a;
                }
              })((0, j.platform)()),
              'os.version': (0, j.release)(),
            },
          };
        }
      })(),
      o = new (class {
        detect(a) {
          let b = {
            'process.pid': process.pid,
            'process.executable.name': process.title,
            'process.executable.path': process.execPath,
            'process.command_args': [
              process.argv[0],
              ...process.execArgv,
              ...process.argv.slice(1),
            ],
            'process.runtime.version': process.versions.node,
            'process.runtime.name': 'nodejs',
            'process.runtime.description': 'Node.js',
          };
          process.argv.length > 1 && (b['process.command'] = process.argv[1]);
          try {
            let a = j.userInfo();
            b['process.owner'] = a.username;
          } catch (a) {
            c.diag.debug(`error obtaining process owner: ${a}`);
          }
          return { attributes: b };
        }
      })();
    var p = a.i(54799);
    let q = new (class {
      detect(a) {
        return { attributes: { 'service.instance.id': (0, p.randomUUID)() } };
      }
    })();
    var r = d,
      s = a.i(11733);
  },
  81647,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(49744),
      f = a.r(51606),
      g = a.r(79154),
      h = a.r(32723),
      i = a.r(28063),
      j = a.r(39786),
      k = a.r(85397),
      l = a.r(62562),
      m = a.r(60418),
      n = a.r(30690);
    var o = 'undefined' != typeof document ? document.currentScript : null;
    function p() {
      let [b = 0, c = 0] = process.versions.node.split('.').map(Number);
      if (b >= 21 || (20 === b && c >= 6) || (18 === b && c >= 19)) {
        if (!h.GLOBAL_OBJ._sentryEsmLoaderHookRegistered)
          try {
            let { addHookMessagePort: b } = k.createAddHookMessageChannel();
            l.default.register(
              'import-in-the-middle/hook.mjs',
              'undefined' == typeof document
                ? a
                    .r(92509)
                    .pathToFileURL(
                      '/ROOT/node_modules/.pnpm/@sentry+node@10.10.0/node_modules/@sentry/node/build/cjs/sdk/initOtel.js'
                    ).href
                : (o && 'SCRIPT' === o.tagName.toUpperCase() && o.src) ||
                    new URL('sdk/initOtel.js', document.baseURI).href,
              { data: { addHookMessagePort: b, include: [] }, transferList: [b] }
            );
          } catch (a) {
            h.debug.warn('Failed to register ESM hook', a);
          }
      } else
        h.consoleSandbox(() => {
          console.warn(
            `[Sentry] You are using Node.js v${process.versions.node} in ESM mode ("import syntax"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS ("require() syntax"), or upgrade your Node.js version.`
          );
        });
    }
    function q(a, b = {}) {
      let c = new f.BasicTracerProvider({
        sampler: new j.SentrySampler(a),
        resource: e
          .defaultResource()
          .merge(
            e.resourceFromAttributes({
              [g.ATTR_SERVICE_NAME]: 'node',
              [g.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',
              [g.ATTR_SERVICE_VERSION]: h.SDK_VERSION,
            })
          ),
        forceFlushTimeoutMillis: 500,
        spanProcessors: [
          new j.SentrySpanProcessor({ timeout: r(a.getOptions().maxSpanWaitDuration) }),
          ...(b.spanProcessors || []),
        ],
      });
      return (
        d.trace.setGlobalTracerProvider(c),
        d.propagation.setGlobalPropagator(new j.SentryPropagator()),
        d.context.setGlobalContextManager(new i.SentryContextManager()),
        c
      );
    }
    function r(a) {
      if (null != a) {
        if (a > 1e6)
          return (
            m.DEBUG_BUILD &&
              h.debug.warn('`maxSpanWaitDuration` is too high, using the maximum value of 1000000'),
            1e6
          );
        if (a <= 0 || Number.isNaN(a)) {
          m.DEBUG_BUILD &&
            h.debug.warn(
              '`maxSpanWaitDuration` must be a positive number, using default value instead.'
            );
          return;
        }
        return a;
      }
    }
    ((c._clampSpanProcessorTimeout = r),
      (c.initOpenTelemetry = function (a, b = {}) {
        a.getOptions().debug && i.setupOpenTelemetryLogger();
        let c = q(a, b);
        a.traceProvider = c;
      }),
      (c.maybeInitializeEsmLoader = p),
      (c.preloadOpenTelemetry = function (a = {}) {
        let { debug: b } = a;
        (b && h.debug.enable(),
          i.isCjs() || p(),
          (function (a) {
            let b = n.getOpenTelemetryInstrumentationToPreload();
            return a
              ? b.filter((b) => {
                  let c = b.id;
                  return a.some((a) => c === a || c.startsWith(`${a}.`));
                })
              : b;
          })(a.integrations).forEach((a) => {
            (a(), b && h.debug.log(`[Sentry] Preloaded ${a.id} instrumentation`));
          }));
      }),
      (c.setupOtel = q));
  },
  69654,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(28063),
      f = a.r(66900),
      g = a.r(52502),
      h = a.r(30690),
      i = a.r(81647);
    function j() {
      return e
        .getDefaultIntegrations()
        .filter((a) => 'Http' !== a.name && 'NodeFetch' !== a.name)
        .concat(f.httpIntegration(), g.nativeNodeFetchIntegration());
    }
    function k(a) {
      return [...j(), ...(d.hasSpansEnabled(a) ? h.getAutoPerformanceIntegrations() : [])];
    }
    function l(a = {}, b) {
      d.applySdkMetadata(a, 'node');
      let c = e.init({ ...a, defaultIntegrations: a.defaultIntegrations ?? b(a) });
      return (
        c &&
          !a.skipOpenTelemetrySetup &&
          (i.initOpenTelemetry(c, { spanProcessors: a.openTelemetrySpanProcessors }),
          e.validateOpenTelemetrySetup()),
        c
      );
    }
    ((c.getDefaultIntegrations = k),
      (c.getDefaultIntegrationsWithoutPerformance = j),
      (c.init = function (a = {}) {
        return l(a, k);
      }),
      (c.initWithoutDefaultIntegrations = function (a = {}) {
        return l(a, () => []);
      }));
  },
  76341,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(66900),
      e = a.r(52502),
      f = a.r(75287),
      g = a.r(82685),
      h = a.r(20845),
      i = a.r(95432),
      j = a.r(29323),
      k = a.r(23712),
      l = a.r(16509),
      m = a.r(88952),
      n = a.r(34404),
      o = a.r(13786),
      p = a.r(39244),
      q = a.r(60972),
      r = a.r(12494),
      s = a.r(43537),
      t = a.r(58389),
      u = a.r(18180),
      v = a.r(30279),
      w = a.r(36772),
      x = a.r(1111),
      y = a.r(47777),
      z = a.r(88306),
      A = a.r(70051),
      B = a.r(663),
      C = a.r(15508),
      D = a.r(20606),
      E = a.r(50295),
      F = a.r(50993),
      G = a.r(82596),
      H = a.r(66218),
      I = a.r(34077),
      J = a.r(69654),
      K = a.r(81647),
      L = a.r(30690),
      M = a.r(39786),
      N = a.r(32723),
      O = a.r(28063);
    ((c.httpIntegration = d.httpIntegration),
      (c.nativeNodeFetchIntegration = e.nativeNodeFetchIntegration),
      (c.fsIntegration = f.fsIntegration),
      (c.expressErrorHandler = g.expressErrorHandler),
      (c.expressIntegration = g.expressIntegration),
      (c.setupExpressErrorHandler = g.setupExpressErrorHandler),
      (c.fastifyIntegration = h.fastifyIntegration),
      (c.setupFastifyErrorHandler = h.setupFastifyErrorHandler),
      (c.graphqlIntegration = i.graphqlIntegration),
      (c.kafkaIntegration = j.kafkaIntegration),
      (c.lruMemoizerIntegration = k.lruMemoizerIntegration),
      (c.mongoIntegration = l.mongoIntegration),
      (c.mongooseIntegration = m.mongooseIntegration),
      (c.mysqlIntegration = n.mysqlIntegration),
      (c.mysql2Integration = o.mysql2Integration),
      (c.redisIntegration = p.redisIntegration),
      (c.postgresIntegration = q.postgresIntegration),
      (c.postgresJsIntegration = r.postgresJsIntegration),
      (c.prismaIntegration = s.prismaIntegration),
      (c.hapiIntegration = t.hapiIntegration),
      (c.setupHapiErrorHandler = t.setupHapiErrorHandler),
      (c.koaIntegration = u.koaIntegration),
      (c.setupKoaErrorHandler = u.setupKoaErrorHandler),
      (c.connectIntegration = v.connectIntegration),
      (c.setupConnectErrorHandler = v.setupConnectErrorHandler),
      (c.knexIntegration = w.knexIntegration),
      (c.tediousIntegration = x.tediousIntegration),
      (c.genericPoolIntegration = y.genericPoolIntegration),
      (c.dataloaderIntegration = z.dataloaderIntegration),
      (c.amqplibIntegration = A.amqplibIntegration),
      (c.vercelAIIntegration = B.vercelAIIntegration),
      (c.openAIIntegration = C.openAIIntegration),
      (c.anthropicAIIntegration = D.anthropicAIIntegration),
      (c.buildLaunchDarklyFlagUsedHandler = E.buildLaunchDarklyFlagUsedHandlerShim),
      (c.launchDarklyIntegration = E.launchDarklyIntegrationShim),
      (c.OpenFeatureIntegrationHook = F.OpenFeatureIntegrationHookShim),
      (c.openFeatureIntegration = F.openFeatureIntegrationShim),
      (c.statsigIntegration = G.statsigIntegrationShim),
      (c.unleashIntegration = H.unleashIntegrationShim),
      (c.firebaseIntegration = I.firebaseIntegration),
      (c.getDefaultIntegrations = J.getDefaultIntegrations),
      (c.getDefaultIntegrationsWithoutPerformance = J.getDefaultIntegrationsWithoutPerformance),
      (c.init = J.init),
      (c.initWithoutDefaultIntegrations = J.initWithoutDefaultIntegrations),
      (c.initOpenTelemetry = K.initOpenTelemetry),
      (c.preloadOpenTelemetry = K.preloadOpenTelemetry),
      (c.getAutoPerformanceIntegrations = L.getAutoPerformanceIntegrations),
      (c.setNodeAsyncContextStrategy = M.setOpenTelemetryContextAsyncContextStrategy),
      (c.SDK_VERSION = N.SDK_VERSION),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_OP = N.SEMANTIC_ATTRIBUTE_SENTRY_OP),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = N.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = N.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE),
      (c.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = N.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE),
      (c.Scope = N.Scope),
      (c.addBreadcrumb = N.addBreadcrumb),
      (c.addEventProcessor = N.addEventProcessor),
      (c.addIntegration = N.addIntegration),
      (c.captureCheckIn = N.captureCheckIn),
      (c.captureConsoleIntegration = N.captureConsoleIntegration),
      (c.captureEvent = N.captureEvent),
      (c.captureException = N.captureException),
      (c.captureFeedback = N.captureFeedback),
      (c.captureMessage = N.captureMessage),
      (c.captureSession = N.captureSession),
      (c.close = N.close),
      (c.consoleIntegration = N.consoleIntegration),
      (c.consoleLoggingIntegration = N.consoleLoggingIntegration),
      (c.continueTrace = N.continueTrace),
      (c.createTransport = N.createTransport),
      (c.dedupeIntegration = N.dedupeIntegration),
      (c.endSession = N.endSession),
      (c.eventFiltersIntegration = N.eventFiltersIntegration),
      (c.extraErrorDataIntegration = N.extraErrorDataIntegration),
      (c.featureFlagsIntegration = N.featureFlagsIntegration),
      (c.flush = N.flush),
      (c.functionToStringIntegration = N.functionToStringIntegration),
      (c.getActiveSpan = N.getActiveSpan),
      (c.getClient = N.getClient),
      (c.getCurrentScope = N.getCurrentScope),
      (c.getGlobalScope = N.getGlobalScope),
      (c.getIsolationScope = N.getIsolationScope),
      (c.getRootSpan = N.getRootSpan),
      (c.getSpanDescendants = N.getSpanDescendants),
      (c.getSpanStatusFromHttpCode = N.getSpanStatusFromHttpCode),
      (c.getTraceData = N.getTraceData),
      (c.getTraceMetaTags = N.getTraceMetaTags),
      (c.inboundFiltersIntegration = N.inboundFiltersIntegration),
      (c.instrumentSupabaseClient = N.instrumentSupabaseClient),
      (c.isEnabled = N.isEnabled),
      (c.isInitialized = N.isInitialized),
      (c.lastEventId = N.lastEventId),
      (c.linkedErrorsIntegration = N.linkedErrorsIntegration),
      (c.parameterize = N.parameterize),
      (c.profiler = N.profiler),
      (c.requestDataIntegration = N.requestDataIntegration),
      (c.rewriteFramesIntegration = N.rewriteFramesIntegration),
      (c.setContext = N.setContext),
      (c.setCurrentClient = N.setCurrentClient),
      (c.setExtra = N.setExtra),
      (c.setExtras = N.setExtras),
      (c.setHttpStatus = N.setHttpStatus),
      (c.setMeasurement = N.setMeasurement),
      (c.setTag = N.setTag),
      (c.setTags = N.setTags),
      (c.setUser = N.setUser),
      (c.spanToBaggageHeader = N.spanToBaggageHeader),
      (c.spanToJSON = N.spanToJSON),
      (c.spanToTraceHeader = N.spanToTraceHeader),
      (c.startInactiveSpan = N.startInactiveSpan),
      (c.startNewTrace = N.startNewTrace),
      (c.startSession = N.startSession),
      (c.startSpan = N.startSpan),
      (c.startSpanManual = N.startSpanManual),
      (c.supabaseIntegration = N.supabaseIntegration),
      (c.suppressTracing = N.suppressTracing),
      (c.trpcMiddleware = N.trpcMiddleware),
      (c.updateSpanName = N.updateSpanName),
      (c.withActiveSpan = N.withActiveSpan),
      (c.withIsolationScope = N.withIsolationScope),
      (c.withMonitor = N.withMonitor),
      (c.withScope = N.withScope),
      (c.wrapMcpServerWithSentry = N.wrapMcpServerWithSentry),
      (c.zodErrorsIntegration = N.zodErrorsIntegration),
      (c.NODE_VERSION = O.NODE_VERSION),
      (c.NodeClient = O.NodeClient),
      (c.SentryContextManager = O.SentryContextManager),
      (c.anrIntegration = O.anrIntegration),
      (c.childProcessIntegration = O.childProcessIntegration),
      (c.contextLinesIntegration = O.contextLinesIntegration),
      (c.createGetModuleFromFilename = O.createGetModuleFromFilename),
      (c.createSentryWinstonTransport = O.createSentryWinstonTransport),
      (c.cron = O.cron),
      (c.defaultStackParser = O.defaultStackParser),
      (c.disableAnrDetectionForCallback = O.disableAnrDetectionForCallback),
      (c.generateInstrumentOnce = O.generateInstrumentOnce),
      (c.getSentryRelease = O.getSentryRelease),
      (c.localVariablesIntegration = O.localVariablesIntegration),
      (c.logger = O.logger),
      (c.makeNodeTransport = O.makeNodeTransport),
      (c.modulesIntegration = O.modulesIntegration),
      (c.nodeContextIntegration = O.nodeContextIntegration),
      (c.onUncaughtExceptionIntegration = O.onUncaughtExceptionIntegration),
      (c.onUnhandledRejectionIntegration = O.onUnhandledRejectionIntegration),
      (c.spotlightIntegration = O.spotlightIntegration),
      (c.systemErrorIntegration = O.systemErrorIntegration),
      (c.validateOpenTelemetrySetup = O.validateOpenTelemetrySetup));
  },
  72760,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(14747);
    c.getBuildPluginOptions = function ({
      sentryBuildOptions: a,
      releaseName: b,
      distDirAbsPath: c,
    }) {
      let e = [],
        f = [],
        g = c.replace(/\\/g, '/');
      return (
        e.push(d.posix.join(g, '**')),
        a.sourcemaps?.deleteSourcemapsAfterUpload &&
          f.push(
            d.posix.join(g, '**', '*.js.map'),
            d.posix.join(g, '**', '*.mjs.map'),
            d.posix.join(g, '**', '*.cjs.map')
          ),
        {
          authToken: a.authToken,
          headers: a.headers,
          org: a.org,
          project: a.project,
          telemetry: a.telemetry,
          debug: a.debug,
          errorHandler: a.errorHandler,
          reactComponentAnnotation: {
            ...a.reactComponentAnnotation,
            ...a.unstable_sentryWebpackPluginOptions?.reactComponentAnnotation,
          },
          silent: a.silent,
          url: a.sentryUrl,
          sourcemaps: {
            disable: a.sourcemaps?.disable,
            rewriteSources: (a) =>
              a.startsWith('webpack://_N_E/')
                ? a.replace('webpack://_N_E/', '')
                : a.startsWith('webpack://')
                  ? a.replace('webpack://', '')
                  : a,
            assets: a.sourcemaps?.assets ?? e,
            ignore: a.sourcemaps?.ignore ?? [],
            filesToDeleteAfterUpload: f,
            ...a.unstable_sentryWebpackPluginOptions?.sourcemaps,
          },
          release:
            void 0 !== b
              ? {
                  inject: !1,
                  name: b,
                  create: a.release?.create,
                  finalize: a.release?.finalize,
                  dist: a.release?.dist,
                  vcsRemote: a.release?.vcsRemote,
                  setCommits: a.release?.setCommits,
                  deploy: a.release?.deploy,
                  ...a.unstable_sentryWebpackPluginOptions?.release,
                }
              : { inject: !1, create: !1, finalize: !1 },
          bundleSizeOptimizations: { ...a.bundleSizeOptimizations },
          _metaOptions: {
            loggerPrefixOverride: '[@sentry/nextjs]',
            telemetry: { metaFramework: 'nextjs' },
          },
          ...a.unstable_sentryWebpackPluginOptions,
        }
      );
    };
  },
  69326,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(72760);
    c.handleRunAfterProductionCompile = async function (
      { releaseName: a, distDir: c, buildTool: f },
      g
    ) {
      if ('webpack' === f) return;
      g.debug && console.debug('[@sentry/nextjs] Running runAfterProductionCompile logic.');
      let { createSentryBuildPluginManager: h } =
        d.loadModule('@sentry/bundler-plugin-core', b) ?? {};
      if (!h)
        return void console.warn(
          '[@sentry/nextjs] Could not load build manager package. Will not run runAfterProductionCompile logic.'
        );
      let i = h(
        e.getBuildPluginOptions({ sentryBuildOptions: g, releaseName: a, distDirAbsPath: c }),
        { buildTool: f, loggerPrefix: '[@sentry/nextjs]' }
      );
      (await i.telemetry.emitBundlerPluginExecutionSignal(),
        await i.createRelease(),
        await i.injectDebugIds([c]),
        await i.uploadSourcemaps([c], { prepareArtifacts: !1 }),
        await i.deleteArtifacts());
    };
  },
  94045,
  (a, b, c) => {
    let d;
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let e = a.r(22734),
      f = a.r(14747),
      g = null,
      h = null;
    c.createRouteManifest = function (a) {
      let b;
      {
        let a = process.cwd(),
          c = f.join(a, 'app'),
          d = f.join(a, 'src', 'app');
        e.existsSync(c) && e.lstatSync(c).isDirectory()
          ? (b = c)
          : e.existsSync(d) && e.lstatSync(d).isDirectory() && (b = d);
      }
      if (!b) return { dynamicRoutes: [], staticRoutes: [] };
      if (g && h === b && d === a?.includeRouteGroups) return g;
      let { dynamicRoutes: c, staticRoutes: i } = (function a(b, c = '', d = !1) {
          let g = [],
            h = [];
          try {
            let j = e.readdirSync(b, { withFileTypes: !0 });
            if (
              j.some((a) => {
                var b;
                return (
                  (b = a.name),
                  'page.tsx' === b || 'page.jsx' === b || 'page.ts' === b || 'page.js' === b
                );
              })
            ) {
              let a = d ? c || '/' : (c || '/').replace(/\/\([^)]+\)/g, '');
              if (a.includes(':')) {
                let { regex: b, paramNames: c } = (function (a) {
                  let b,
                    c = a.split('/').filter(Boolean),
                    d = [],
                    e = [],
                    f = !1;
                  for (let a of c)
                    if (a.startsWith(':')) {
                      let b = a.substring(1);
                      if (b.endsWith('*?')) {
                        let a = b.slice(0, -2);
                        (e.push(a), (f = !0));
                      } else if (b.endsWith('*')) {
                        let a = b.slice(0, -1);
                        (e.push(a), d.push('(.+)'));
                      } else (e.push(b), d.push('([^/]+)'));
                    } else d.push(a.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
                  if (f)
                    if (0 === d.length) b = '^/(.*)$';
                    else {
                      let a = d.join('/');
                      b = `^/${a}(?:/(.*))?$`;
                    }
                  else b = `^/${d.join('/')}$`;
                  return { regex: b, paramNames: e };
                })(a);
                g.push({ path: a, regex: b, paramNames: c });
              } else h.push({ path: a });
            }
            for (let e of j)
              if (e.isDirectory()) {
                var i;
                let j,
                  k = f.join(b, e.name),
                  l = e.name.startsWith('[') && e.name.endsWith(']'),
                  m = (j =
                    (i = e.name).startsWith('(') && i.endsWith(')')
                      ? d
                        ? e.name
                        : ''
                      : l
                        ? (function (a) {
                            if (a.startsWith('[[...') && a.endsWith(']]')) {
                              let b = a.slice(5, -2);
                              return `:${b}*?`;
                            }
                            if (a.startsWith('[...') && a.endsWith(']')) {
                              let b = a.slice(4, -1);
                              return `:${b}*`;
                            }
                            return `:${a.slice(1, -1)}`;
                          })(e.name)
                        : e.name)
                    ? `${c}/${j}`
                    : c,
                  n = a(k, m, d);
                (g.push(...n.dynamicRoutes), h.push(...n.staticRoutes));
              }
          } catch (a) {
            console.warn('Error building route manifest:', a);
          }
          return { dynamicRoutes: g, staticRoutes: h };
        })(b, '', a?.includeRouteGroups),
        j = { dynamicRoutes: c, staticRoutes: i };
      return ((g = j), (h = b), (d = a?.includeRouteGroups), j);
    };
  },
  22426,
  (a, b, c) => {
    'use strict';
    let d =
        /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,
      e = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,
      f = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,
      g = /\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.)|([^\\])/gi,
      h = new Map([
        ['n', '\n'],
        ['r', '\r'],
        ['t', '	'],
        ['b', '\b'],
        ['f', '\f'],
        ['v', '\v'],
        ['0', '\0'],
        ['\\', '\\'],
        ['e', '\x1b'],
        ['a', '\x07'],
      ]);
    function i(a) {
      let b = 'u' === a[0],
        c = '{' === a[1];
      return (b && !c && 5 === a.length) || ('x' === a[0] && 3 === a.length)
        ? String.fromCharCode(parseInt(a.slice(1), 16))
        : b && c
          ? String.fromCodePoint(parseInt(a.slice(2, -1), 16))
          : h.get(a) || a;
    }
    function j(a, b) {
      let c = {};
      for (let a of b) for (let b of a.styles) c[b[0]] = a.inverse ? null : b.slice(1);
      let d = a;
      for (let [a, b] of Object.entries(c))
        if (Array.isArray(b)) {
          if (!(a in d)) throw Error(`Unknown Chalk style: ${a}`);
          d = b.length > 0 ? d[a](...b) : d[a];
        }
      return d;
    }
    b.exports = (a, b) => {
      let c = [],
        h = [],
        k = [];
      if (
        (b.replace(d, (b, d, l, m, n, o) => {
          if (d) k.push(i(d));
          else if (m) {
            let b = k.join('');
            ((k = []),
              h.push(0 === c.length ? b : j(a, c)(b)),
              c.push({
                inverse: l,
                styles: (function (a) {
                  let b;
                  e.lastIndex = 0;
                  let c = [];
                  for (; null !== (b = e.exec(a)); ) {
                    let a = b[1];
                    if (b[2]) {
                      let d = (function (a, b) {
                        let c,
                          d = [];
                        for (let e of b.trim().split(/\s*,\s*/g)) {
                          let b = Number(e);
                          if (Number.isNaN(b))
                            if ((c = e.match(f)))
                              d.push(c[2].replace(g, (a, b, c) => (b ? i(b) : c)));
                            else
                              throw Error(
                                `Invalid Chalk template style argument: ${e} (in style '${a}')`
                              );
                          else d.push(b);
                        }
                        return d;
                      })(a, b[2]);
                      c.push([a].concat(d));
                    } else c.push([a]);
                  }
                  return c;
                })(m),
              }));
          } else if (n) {
            if (0 === c.length) throw Error('Found extraneous } in Chalk template literal');
            (h.push(j(a, c)(k.join(''))), (k = []), c.pop());
          } else k.push(o);
        }),
        h.push(k.join('')),
        c.length > 0)
      )
        throw Error(
          `Chalk template literal is missing ${c.length} closing bracket${1 === c.length ? '' : 's'} (\`}\`)`
        );
      return h.join('');
    };
  },
  45008,
  (a, b, c) => {
    'use strict';
    b.exports = {
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 134, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 250, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      grey: [128, 128, 128],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 221],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      rebeccapurple: [102, 51, 153],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [112, 128, 144],
      slategrey: [112, 128, 144],
      snow: [255, 250, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 50],
    };
  },
  65658,
  (a, b, c) => {
    let d = a.r(45008),
      e = {};
    for (let a of Object.keys(d)) e[d[a]] = a;
    let f = {
      rgb: { channels: 3, labels: 'rgb' },
      hsl: { channels: 3, labels: 'hsl' },
      hsv: { channels: 3, labels: 'hsv' },
      hwb: { channels: 3, labels: 'hwb' },
      cmyk: { channels: 4, labels: 'cmyk' },
      xyz: { channels: 3, labels: 'xyz' },
      lab: { channels: 3, labels: 'lab' },
      lch: { channels: 3, labels: 'lch' },
      hex: { channels: 1, labels: ['hex'] },
      keyword: { channels: 1, labels: ['keyword'] },
      ansi16: { channels: 1, labels: ['ansi16'] },
      ansi256: { channels: 1, labels: ['ansi256'] },
      hcg: { channels: 3, labels: ['h', 'c', 'g'] },
      apple: { channels: 3, labels: ['r16', 'g16', 'b16'] },
      gray: { channels: 1, labels: ['gray'] },
    };
    for (let a of ((b.exports = f), Object.keys(f))) {
      if (!('channels' in f[a])) throw Error('missing channels property: ' + a);
      if (!('labels' in f[a])) throw Error('missing channel labels property: ' + a);
      if (f[a].labels.length !== f[a].channels)
        throw Error('channel and label counts mismatch: ' + a);
      let { channels: b, labels: c } = f[a];
      (delete f[a].channels,
        delete f[a].labels,
        Object.defineProperty(f[a], 'channels', { value: b }),
        Object.defineProperty(f[a], 'labels', { value: c }));
    }
    ((f.rgb.hsl = function (a) {
      let b,
        c = a[0] / 255,
        d = a[1] / 255,
        e = a[2] / 255,
        f = Math.min(c, d, e),
        g = Math.max(c, d, e),
        h = g - f;
      (g === f
        ? (b = 0)
        : c === g
          ? (b = (d - e) / h)
          : d === g
            ? (b = 2 + (e - c) / h)
            : e === g && (b = 4 + (c - d) / h),
        (b = Math.min(60 * b, 360)) < 0 && (b += 360));
      let i = (f + g) / 2;
      return [b, 100 * (g === f ? 0 : i <= 0.5 ? h / (g + f) : h / (2 - g - f)), 100 * i];
    }),
      (f.rgb.hsv = function (a) {
        let b,
          c,
          d,
          e,
          f,
          g = a[0] / 255,
          h = a[1] / 255,
          i = a[2] / 255,
          j = Math.max(g, h, i),
          k = j - Math.min(g, h, i),
          l = function (a) {
            return (j - a) / 6 / k + 0.5;
          };
        return (
          0 === k
            ? ((e = 0), (f = 0))
            : ((f = k / j),
              (b = l(g)),
              (c = l(h)),
              (d = l(i)),
              g === j
                ? (e = d - c)
                : h === j
                  ? (e = 1 / 3 + b - d)
                  : i === j && (e = 2 / 3 + c - b),
              e < 0 ? (e += 1) : e > 1 && (e -= 1)),
          [360 * e, 100 * f, 100 * j]
        );
      }),
      (f.rgb.hwb = function (a) {
        let b = a[0],
          c = a[1],
          d = a[2];
        return [
          f.rgb.hsl(a)[0],
          (1 / 255) * Math.min(b, Math.min(c, d)) * 100,
          100 * (d = 1 - (1 / 255) * Math.max(b, Math.max(c, d))),
        ];
      }),
      (f.rgb.cmyk = function (a) {
        let b = a[0] / 255,
          c = a[1] / 255,
          d = a[2] / 255,
          e = Math.min(1 - b, 1 - c, 1 - d);
        return [
          100 * ((1 - b - e) / (1 - e) || 0),
          100 * ((1 - c - e) / (1 - e) || 0),
          100 * ((1 - d - e) / (1 - e) || 0),
          100 * e,
        ];
      }),
      (f.rgb.keyword = function (a) {
        let b,
          c = e[a];
        if (c) return c;
        let f = 1 / 0;
        for (let c of Object.keys(d)) {
          let e = d[c],
            g = (a[0] - e[0]) ** 2 + (a[1] - e[1]) ** 2 + (a[2] - e[2]) ** 2;
          g < f && ((f = g), (b = c));
        }
        return b;
      }),
      (f.keyword.rgb = function (a) {
        return d[a];
      }),
      (f.rgb.xyz = function (a) {
        let b = a[0] / 255,
          c = a[1] / 255,
          d = a[2] / 255;
        return [
          100 *
            (0.4124 * (b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92) +
              0.3576 * (c = c > 0.04045 ? ((c + 0.055) / 1.055) ** 2.4 : c / 12.92) +
              0.1805 * (d = d > 0.04045 ? ((d + 0.055) / 1.055) ** 2.4 : d / 12.92)),
          100 * (0.2126 * b + 0.7152 * c + 0.0722 * d),
          100 * (0.0193 * b + 0.1192 * c + 0.9505 * d),
        ];
      }),
      (f.rgb.lab = function (a) {
        let b = f.rgb.xyz(a),
          c = b[0],
          d = b[1],
          e = b[2];
        return (
          (c /= 95.047),
          (d /= 100),
          (e /= 108.883),
          [
            116 * (d = d > 0.008856 ? d ** (1 / 3) : 7.787 * d + 16 / 116) - 16,
            500 * ((c = c > 0.008856 ? c ** (1 / 3) : 7.787 * c + 16 / 116) - d),
            200 * (d - (e = e > 0.008856 ? e ** (1 / 3) : 7.787 * e + 16 / 116)),
          ]
        );
      }),
      (f.hsl.rgb = function (a) {
        let b,
          c,
          d,
          e = a[0] / 360,
          f = a[1] / 100,
          g = a[2] / 100;
        if (0 === f) return [(d = 255 * g), d, d];
        b = g < 0.5 ? g * (1 + f) : g + f - g * f;
        let h = 2 * g - b,
          i = [0, 0, 0];
        for (let a = 0; a < 3; a++)
          ((c = e + -((1 / 3) * (a - 1))) < 0 && c++,
            c > 1 && c--,
            (d =
              6 * c < 1
                ? h + (b - h) * 6 * c
                : 2 * c < 1
                  ? b
                  : 3 * c < 2
                    ? h + (b - h) * (2 / 3 - c) * 6
                    : h),
            (i[a] = 255 * d));
        return i;
      }),
      (f.hsl.hsv = function (a) {
        let b = a[0],
          c = a[1] / 100,
          d = a[2] / 100,
          e = c,
          f = Math.max(d, 0.01);
        ((d *= 2), (c *= d <= 1 ? d : 2 - d), (e *= f <= 1 ? f : 2 - f));
        let g = (d + c) / 2;
        return [b, 100 * (0 === d ? (2 * e) / (f + e) : (2 * c) / (d + c)), 100 * g];
      }),
      (f.hsv.rgb = function (a) {
        let b = a[0] / 60,
          c = a[1] / 100,
          d = a[2] / 100,
          e = Math.floor(b) % 6,
          f = b - Math.floor(b),
          g = 255 * d * (1 - c),
          h = 255 * d * (1 - c * f),
          i = 255 * d * (1 - c * (1 - f));
        switch (((d *= 255), e)) {
          case 0:
            return [d, i, g];
          case 1:
            return [h, d, g];
          case 2:
            return [g, d, i];
          case 3:
            return [g, h, d];
          case 4:
            return [i, g, d];
          case 5:
            return [d, g, h];
        }
      }),
      (f.hsv.hsl = function (a) {
        let b,
          c,
          d = a[0],
          e = a[1] / 100,
          f = a[2] / 100,
          g = Math.max(f, 0.01);
        c = (2 - e) * f;
        let h = (2 - e) * g;
        return [d, 100 * (b = (b = (e * g) / (h <= 1 ? h : 2 - h)) || 0), 100 * (c /= 2)];
      }),
      (f.hwb.rgb = function (a) {
        let b,
          c,
          d,
          e,
          f = a[0] / 360,
          g = a[1] / 100,
          h = a[2] / 100,
          i = g + h;
        i > 1 && ((g /= i), (h /= i));
        let j = Math.floor(6 * f),
          k = 1 - h;
        ((b = 6 * f - j), (1 & j) != 0 && (b = 1 - b));
        let l = g + b * (k - g);
        switch (j) {
          default:
          case 6:
          case 0:
            ((c = k), (d = l), (e = g));
            break;
          case 1:
            ((c = l), (d = k), (e = g));
            break;
          case 2:
            ((c = g), (d = k), (e = l));
            break;
          case 3:
            ((c = g), (d = l), (e = k));
            break;
          case 4:
            ((c = l), (d = g), (e = k));
            break;
          case 5:
            ((c = k), (d = g), (e = l));
        }
        return [255 * c, 255 * d, 255 * e];
      }),
      (f.cmyk.rgb = function (a) {
        let b = a[0] / 100,
          c = a[1] / 100,
          d = a[2] / 100,
          e = a[3] / 100;
        return [
          255 * (1 - Math.min(1, b * (1 - e) + e)),
          255 * (1 - Math.min(1, c * (1 - e) + e)),
          255 * (1 - Math.min(1, d * (1 - e) + e)),
        ];
      }),
      (f.xyz.rgb = function (a) {
        let b,
          c,
          d,
          e = a[0] / 100,
          f = a[1] / 100,
          g = a[2] / 100;
        return (
          (b =
            (b = 3.2406 * e + -1.5372 * f + -0.4986 * g) > 0.0031308
              ? 1.055 * b ** (1 / 2.4) - 0.055
              : 12.92 * b),
          (c =
            (c = -0.9689 * e + 1.8758 * f + 0.0415 * g) > 0.0031308
              ? 1.055 * c ** (1 / 2.4) - 0.055
              : 12.92 * c),
          (d =
            (d = 0.0557 * e + -0.204 * f + 1.057 * g) > 0.0031308
              ? 1.055 * d ** (1 / 2.4) - 0.055
              : 12.92 * d),
          [
            255 * (b = Math.min(Math.max(0, b), 1)),
            255 * (c = Math.min(Math.max(0, c), 1)),
            255 * (d = Math.min(Math.max(0, d), 1)),
          ]
        );
      }),
      (f.xyz.lab = function (a) {
        let b = a[0],
          c = a[1],
          d = a[2];
        return (
          (b /= 95.047),
          (c /= 100),
          (d /= 108.883),
          [
            116 * (c = c > 0.008856 ? c ** (1 / 3) : 7.787 * c + 16 / 116) - 16,
            500 * ((b = b > 0.008856 ? b ** (1 / 3) : 7.787 * b + 16 / 116) - c),
            200 * (c - (d = d > 0.008856 ? d ** (1 / 3) : 7.787 * d + 16 / 116)),
          ]
        );
      }),
      (f.lab.xyz = function (a) {
        let b,
          c,
          d,
          e = a[0],
          f = a[1],
          g = a[2];
        ((b = f / 500 + (c = (e + 16) / 116)), (d = c - g / 200));
        let h = c ** 3,
          i = b ** 3,
          j = d ** 3;
        return (
          (c = (h > 0.008856 ? h : (c - 16 / 116) / 7.787) * 100),
          [
            (b = (i > 0.008856 ? i : (b - 16 / 116) / 7.787) * 95.047),
            c,
            (d = (j > 0.008856 ? j : (d - 16 / 116) / 7.787) * 108.883),
          ]
        );
      }),
      (f.lab.lch = function (a) {
        let b,
          c = a[0],
          d = a[1],
          e = a[2];
        return (
          (b = (360 * Math.atan2(e, d)) / 2 / Math.PI) < 0 && (b += 360),
          [c, Math.sqrt(d * d + e * e), b]
        );
      }),
      (f.lch.lab = function (a) {
        let b = a[0],
          c = a[1],
          d = (a[2] / 360) * 2 * Math.PI;
        return [b, c * Math.cos(d), c * Math.sin(d)];
      }),
      (f.rgb.ansi16 = function (a, b = null) {
        let [c, d, e] = a,
          g = null === b ? f.rgb.hsv(a)[2] : b;
        if (0 === (g = Math.round(g / 50))) return 30;
        let h =
          30 + ((Math.round(e / 255) << 2) | (Math.round(d / 255) << 1) | Math.round(c / 255));
        return (2 === g && (h += 60), h);
      }),
      (f.hsv.ansi16 = function (a) {
        return f.rgb.ansi16(f.hsv.rgb(a), a[2]);
      }),
      (f.rgb.ansi256 = function (a) {
        let b = a[0],
          c = a[1],
          d = a[2];
        return b === c && c === d
          ? b < 8
            ? 16
            : b > 248
              ? 231
              : Math.round(((b - 8) / 247) * 24) + 232
          : 16 +
              36 * Math.round((b / 255) * 5) +
              6 * Math.round((c / 255) * 5) +
              Math.round((d / 255) * 5);
      }),
      (f.ansi16.rgb = function (a) {
        let b = a % 10;
        if (0 === b || 7 === b) return (a > 50 && (b += 3.5), [(b = (b / 10.5) * 255), b, b]);
        let c = (~~(a > 50) + 1) * 0.5;
        return [(1 & b) * c * 255, ((b >> 1) & 1) * c * 255, ((b >> 2) & 1) * c * 255];
      }),
      (f.ansi256.rgb = function (a) {
        let b;
        if (a >= 232) {
          let b = (a - 232) * 10 + 8;
          return [b, b, b];
        }
        return [
          (Math.floor((a -= 16) / 36) / 5) * 255,
          (Math.floor((b = a % 36) / 6) / 5) * 255,
          ((b % 6) / 5) * 255,
        ];
      }),
      (f.rgb.hex = function (a) {
        let b = (
          ((255 & Math.round(a[0])) << 16) +
          ((255 & Math.round(a[1])) << 8) +
          (255 & Math.round(a[2]))
        )
          .toString(16)
          .toUpperCase();
        return '000000'.substring(b.length) + b;
      }),
      (f.hex.rgb = function (a) {
        let b = a.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!b) return [0, 0, 0];
        let c = b[0];
        3 === b[0].length &&
          (c = c
            .split('')
            .map((a) => a + a)
            .join(''));
        let d = parseInt(c, 16);
        return [(d >> 16) & 255, (d >> 8) & 255, 255 & d];
      }),
      (f.rgb.hcg = function (a) {
        let b,
          c = a[0] / 255,
          d = a[1] / 255,
          e = a[2] / 255,
          f = Math.max(Math.max(c, d), e),
          g = Math.min(Math.min(c, d), e),
          h = f - g;
        return (
          (b = h < 1 ? g / (1 - h) : 0),
          [
            360 *
              (((h <= 0
                ? 0
                : f === c
                  ? ((d - e) / h) % 6
                  : f === d
                    ? 2 + (e - c) / h
                    : 4 + (c - d) / h) /
                6) %
                1),
            100 * h,
            100 * b,
          ]
        );
      }),
      (f.hsl.hcg = function (a) {
        let b = a[1] / 100,
          c = a[2] / 100,
          d = c < 0.5 ? 2 * b * c : 2 * b * (1 - c),
          e = 0;
        return (d < 1 && (e = (c - 0.5 * d) / (1 - d)), [a[0], 100 * d, 100 * e]);
      }),
      (f.hsv.hcg = function (a) {
        let b = a[1] / 100,
          c = a[2] / 100,
          d = b * c,
          e = 0;
        return (d < 1 && (e = (c - d) / (1 - d)), [a[0], 100 * d, 100 * e]);
      }),
      (f.hcg.rgb = function (a) {
        let b = a[0] / 360,
          c = a[1] / 100,
          d = a[2] / 100;
        if (0 === c) return [255 * d, 255 * d, 255 * d];
        let e = [0, 0, 0],
          f = (b % 1) * 6,
          g = f % 1,
          h = 1 - g,
          i = 0;
        switch (Math.floor(f)) {
          case 0:
            ((e[0] = 1), (e[1] = g), (e[2] = 0));
            break;
          case 1:
            ((e[0] = h), (e[1] = 1), (e[2] = 0));
            break;
          case 2:
            ((e[0] = 0), (e[1] = 1), (e[2] = g));
            break;
          case 3:
            ((e[0] = 0), (e[1] = h), (e[2] = 1));
            break;
          case 4:
            ((e[0] = g), (e[1] = 0), (e[2] = 1));
            break;
          default:
            ((e[0] = 1), (e[1] = 0), (e[2] = h));
        }
        return (
          (i = (1 - c) * d),
          [(c * e[0] + i) * 255, (c * e[1] + i) * 255, (c * e[2] + i) * 255]
        );
      }),
      (f.hcg.hsv = function (a) {
        let b = a[1] / 100,
          c = b + (a[2] / 100) * (1 - b),
          d = 0;
        return (c > 0 && (d = b / c), [a[0], 100 * d, 100 * c]);
      }),
      (f.hcg.hsl = function (a) {
        let b = a[1] / 100,
          c = (a[2] / 100) * (1 - b) + 0.5 * b,
          d = 0;
        return (
          c > 0 && c < 0.5 ? (d = b / (2 * c)) : c >= 0.5 && c < 1 && (d = b / (2 * (1 - c))),
          [a[0], 100 * d, 100 * c]
        );
      }),
      (f.hcg.hwb = function (a) {
        let b = a[1] / 100,
          c = b + (a[2] / 100) * (1 - b);
        return [a[0], (c - b) * 100, (1 - c) * 100];
      }),
      (f.hwb.hcg = function (a) {
        let b = a[1] / 100,
          c = 1 - a[2] / 100,
          d = c - b,
          e = 0;
        return (d < 1 && (e = (c - d) / (1 - d)), [a[0], 100 * d, 100 * e]);
      }),
      (f.apple.rgb = function (a) {
        return [(a[0] / 65535) * 255, (a[1] / 65535) * 255, (a[2] / 65535) * 255];
      }),
      (f.rgb.apple = function (a) {
        return [(a[0] / 255) * 65535, (a[1] / 255) * 65535, (a[2] / 255) * 65535];
      }),
      (f.gray.rgb = function (a) {
        return [(a[0] / 100) * 255, (a[0] / 100) * 255, (a[0] / 100) * 255];
      }),
      (f.gray.hsl = function (a) {
        return [0, 0, a[0]];
      }),
      (f.gray.hsv = f.gray.hsl),
      (f.gray.hwb = function (a) {
        return [0, 100, a[0]];
      }),
      (f.gray.cmyk = function (a) {
        return [0, 0, 0, a[0]];
      }),
      (f.gray.lab = function (a) {
        return [a[0], 0, 0];
      }),
      (f.gray.hex = function (a) {
        let b = 255 & Math.round((a[0] / 100) * 255),
          c = ((b << 16) + (b << 8) + b).toString(16).toUpperCase();
        return '000000'.substring(c.length) + c;
      }),
      (f.rgb.gray = function (a) {
        return [((a[0] + a[1] + a[2]) / 3 / 255) * 100];
      }));
  },
  89551,
  (a, b, c) => {
    let d = a.r(65658);
    b.exports = function (a) {
      let b = (function (a) {
          let b = (function () {
              let a = {},
                b = Object.keys(d);
              for (let c = b.length, d = 0; d < c; d++) a[b[d]] = { distance: -1, parent: null };
              return a;
            })(),
            c = [a];
          for (b[a].distance = 0; c.length; ) {
            let a = c.pop(),
              e = Object.keys(d[a]);
            for (let d = e.length, f = 0; f < d; f++) {
              let d = e[f],
                g = b[d];
              -1 === g.distance && ((g.distance = b[a].distance + 1), (g.parent = a), c.unshift(d));
            }
          }
          return b;
        })(a),
        c = {},
        e = Object.keys(b);
      for (let a = e.length, f = 0; f < a; f++) {
        let a = e[f];
        null !== b[a].parent &&
          (c[a] = (function (a, b) {
            let c = [b[a].parent, a],
              e = d[b[a].parent][a],
              f = b[a].parent;
            for (; b[f].parent; )
              (c.unshift(b[f].parent),
                (e = (function (a, b) {
                  return function (c) {
                    return b(a(c));
                  };
                })(d[b[f].parent][f], e)),
                (f = b[f].parent));
            return ((e.conversion = c), e);
          })(a, b));
      }
      return c;
    };
  },
  13043,
  (a, b, c) => {
    let d = a.r(65658),
      e = a.r(89551),
      f = {};
    (Object.keys(d).forEach((a) => {
      ((f[a] = {}),
        Object.defineProperty(f[a], 'channels', { value: d[a].channels }),
        Object.defineProperty(f[a], 'labels', { value: d[a].labels }));
      let b = e(a);
      Object.keys(b).forEach((c) => {
        let d = b[c];
        ((f[a][c] = (function (a) {
          let b = function (...b) {
            let c = b[0];
            if (null == c) return c;
            c.length > 1 && (b = c);
            let d = a(b);
            if ('object' == typeof d)
              for (let a = d.length, b = 0; b < a; b++) d[b] = Math.round(d[b]);
            return d;
          };
          return ('conversion' in a && (b.conversion = a.conversion), b);
        })(d)),
          (f[a][c].raw = (function (a) {
            let b = function (...b) {
              let c = b[0];
              return null == c ? c : (c.length > 1 && (b = c), a(b));
            };
            return ('conversion' in a && (b.conversion = a.conversion), b);
          })(d)));
      });
    }),
      (b.exports = f));
  },
  56580,
  (a, b, c) => {
    'use strict';
    let d,
      e =
        (a, b) =>
        (...c) => {
          let d = a(...c);
          return `\u001B[${d + b}m`;
        },
      f =
        (a, b) =>
        (...c) => {
          let d = a(...c);
          return `\u001B[${38 + b};5;${d}m`;
        },
      g =
        (a, b) =>
        (...c) => {
          let d = a(...c);
          return `\u001B[${38 + b};2;${d[0]};${d[1]};${d[2]}m`;
        },
      h = (a) => a,
      i = (a, b, c) => [a, b, c],
      j = (a, b, c) => {
        Object.defineProperty(a, b, {
          get: () => {
            let d = c();
            return (Object.defineProperty(a, b, { value: d, enumerable: !0, configurable: !0 }), d);
          },
          enumerable: !0,
          configurable: !0,
        });
      },
      k = (b, c, e, f) => {
        void 0 === d && (d = a.r(13043));
        let g = 10 * !!f,
          h = {};
        for (let [a, f] of Object.entries(d)) {
          let d = 'ansi16' === a ? 'ansi' : a;
          a === c ? (h[d] = b(e, g)) : 'object' == typeof f && (h[d] = b(f[c], g));
        }
        return h;
      };
    Object.defineProperty(b, 'exports', {
      enumerable: !0,
      get: function () {
        let a = new Map(),
          b = {
            modifier: {
              reset: [0, 0],
              bold: [1, 22],
              dim: [2, 22],
              italic: [3, 23],
              underline: [4, 24],
              inverse: [7, 27],
              hidden: [8, 28],
              strikethrough: [9, 29],
            },
            color: {
              black: [30, 39],
              red: [31, 39],
              green: [32, 39],
              yellow: [33, 39],
              blue: [34, 39],
              magenta: [35, 39],
              cyan: [36, 39],
              white: [37, 39],
              blackBright: [90, 39],
              redBright: [91, 39],
              greenBright: [92, 39],
              yellowBright: [93, 39],
              blueBright: [94, 39],
              magentaBright: [95, 39],
              cyanBright: [96, 39],
              whiteBright: [97, 39],
            },
            bgColor: {
              bgBlack: [40, 49],
              bgRed: [41, 49],
              bgGreen: [42, 49],
              bgYellow: [43, 49],
              bgBlue: [44, 49],
              bgMagenta: [45, 49],
              bgCyan: [46, 49],
              bgWhite: [47, 49],
              bgBlackBright: [100, 49],
              bgRedBright: [101, 49],
              bgGreenBright: [102, 49],
              bgYellowBright: [103, 49],
              bgBlueBright: [104, 49],
              bgMagentaBright: [105, 49],
              bgCyanBright: [106, 49],
              bgWhiteBright: [107, 49],
            },
          };
        for (let [c, d] of ((b.color.gray = b.color.blackBright),
        (b.bgColor.bgGray = b.bgColor.bgBlackBright),
        (b.color.grey = b.color.blackBright),
        (b.bgColor.bgGrey = b.bgColor.bgBlackBright),
        Object.entries(b))) {
          for (let [c, e] of Object.entries(d))
            ((b[c] = { open: `\u001B[${e[0]}m`, close: `\u001B[${e[1]}m` }),
              (d[c] = b[c]),
              a.set(e[0], e[1]));
          Object.defineProperty(b, c, { value: d, enumerable: !1 });
        }
        return (
          Object.defineProperty(b, 'codes', { value: a, enumerable: !1 }),
          (b.color.close = '\x1b[39m'),
          (b.bgColor.close = '\x1b[49m'),
          j(b.color, 'ansi', () => k(e, 'ansi16', h, !1)),
          j(b.color, 'ansi256', () => k(f, 'ansi256', h, !1)),
          j(b.color, 'ansi16m', () => k(g, 'rgb', i, !1)),
          j(b.bgColor, 'ansi', () => k(e, 'ansi16', h, !0)),
          j(b.bgColor, 'ansi256', () => k(f, 'ansi256', h, !0)),
          j(b.bgColor, 'ansi16m', () => k(g, 'rgb', i, !0)),
          b
        );
      },
    });
  },
  88647,
  (a, b, c) => {
    'use strict';
    b.exports = (a, b = process.argv) => {
      let c = a.startsWith('-') ? '' : 1 === a.length ? '-' : '--',
        d = b.indexOf(c + a),
        e = b.indexOf('--');
      return -1 !== d && (-1 === e || d < e);
    };
  },
  12914,
  (a, b, c) => {
    'use strict';
    let d;
    a.r(46786);
    let e = a.r(70722),
      f = a.r(88647),
      { env: g } = process;
    function h(a) {
      return 0 !== a && { level: a, hasBasic: !0, has256: a >= 2, has16m: a >= 3 };
    }
    function i(a, b) {
      if (0 === d) return 0;
      if (f('color=16m') || f('color=full') || f('color=truecolor')) return 3;
      if (f('color=256')) return 2;
      if (a && !b && void 0 === d) return 0;
      let c = d || 0;
      if ('dumb' === g.TERM) return c;
      if ('CI' in g)
        return ['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(
          (a) => a in g
        ) || 'codeship' === g.CI_NAME
          ? 1
          : c;
      if ('TEAMCITY_VERSION' in g)
        return +!!/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(g.TEAMCITY_VERSION);
      if ('truecolor' === g.COLORTERM) return 3;
      if ('TERM_PROGRAM' in g) {
        let a = parseInt((g.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
        switch (g.TERM_PROGRAM) {
          case 'iTerm.app':
            return a >= 3 ? 3 : 2;
          case 'Apple_Terminal':
            return 2;
        }
      }
      return /-256(color)?$/i.test(g.TERM)
        ? 2
        : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(g.TERM) ||
            'COLORTERM' in g
          ? 1
          : c;
    }
    (f('no-color') || f('no-colors') || f('color=false') || f('color=never')
      ? (d = 0)
      : (f('color') || f('colors') || f('color=true') || f('color=always')) && (d = 1),
      'FORCE_COLOR' in g &&
        (d =
          'true' === g.FORCE_COLOR
            ? 1
            : 'false' === g.FORCE_COLOR
              ? 0
              : 0 === g.FORCE_COLOR.length
                ? 1
                : Math.min(parseInt(g.FORCE_COLOR, 10), 3)),
      (b.exports = {
        supportsColor: function (a) {
          return h(i(a, a && a.isTTY));
        },
        stdout: h(i(!0, e.isatty(1))),
        stderr: h(i(!0, e.isatty(2))),
      }));
  },
  94714,
  (a, b, c) => {
    'use strict';
    b.exports = {
      stringReplaceAll: (a, b, c) => {
        let d = a.indexOf(b);
        if (-1 === d) return a;
        let e = b.length,
          f = 0,
          g = '';
        do ((g += a.substr(f, d - f) + b + c), (f = d + e), (d = a.indexOf(b, f)));
        while (-1 !== d);
        return g + a.substr(f);
      },
      stringEncaseCRLFWithFirstIndex: (a, b, c, d) => {
        let e = 0,
          f = '';
        do {
          let g = '\r' === a[d - 1];
          ((f += a.substr(e, (g ? d - 1 : d) - e) + b + (g ? '\r\n' : '\n') + c),
            (e = d + 1),
            (d = a.indexOf('\n', e)));
        } while (-1 !== d);
        return f + a.substr(e);
      },
    };
  },
  11246,
  (a, b, c) => {
    'use strict';
    let d,
      e = a.r(56580),
      { stdout: f, stderr: g } = a.r(12914),
      { stringReplaceAll: h, stringEncaseCRLFWithFirstIndex: i } = a.r(94714),
      j = ['ansi', 'ansi', 'ansi256', 'ansi16m'],
      k = Object.create(null);
    class l {
      constructor(a) {
        return m(a);
      }
    }
    let m = (a) => {
      let b = {};
      return (
        ((a, b = {}) => {
          if (b.level > 3 || b.level < 0)
            throw Error('The `level` option should be an integer from 0 to 3');
          let c = f ? f.level : 0;
          a.level = void 0 === b.level ? c : b.level;
        })(b, a),
        (b.template = (...a) => t(b.template, ...a)),
        Object.setPrototypeOf(b, n.prototype),
        Object.setPrototypeOf(b.template, b),
        (b.template.constructor = () => {
          throw Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
        }),
        (b.template.Instance = l),
        b.template
      );
    };
    function n(a) {
      return m(a);
    }
    for (let [a, b] of Object.entries(e))
      k[a] = {
        get() {
          let c = r(this, q(b.open, b.close, this._styler), this._isEmpty);
          return (Object.defineProperty(this, a, { value: c }), c);
        },
      };
    k.visible = {
      get() {
        let a = r(this, this._styler, !0);
        return (Object.defineProperty(this, 'visible', { value: a }), a);
      },
    };
    let o = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];
    for (let a of o)
      k[a] = {
        get() {
          let { level: b } = this;
          return function (...c) {
            return r(this, q(e.color[j[b]][a](...c), e.color.close, this._styler), this._isEmpty);
          };
        },
      };
    for (let a of o)
      k['bg' + a[0].toUpperCase() + a.slice(1)] = {
        get() {
          let { level: b } = this;
          return function (...c) {
            return r(
              this,
              q(e.bgColor[j[b]][a](...c), e.bgColor.close, this._styler),
              this._isEmpty
            );
          };
        },
      };
    let p = Object.defineProperties(() => {}, {
        ...k,
        level: {
          enumerable: !0,
          get() {
            return this._generator.level;
          },
          set(a) {
            this._generator.level = a;
          },
        },
      }),
      q = (a, b, c) => {
        let d, e;
        return (
          void 0 === c ? ((d = a), (e = b)) : ((d = c.openAll + a), (e = b + c.closeAll)),
          { open: a, close: b, openAll: d, closeAll: e, parent: c }
        );
      },
      r = (a, b, c) => {
        let d = (...a) => s(d, 1 === a.length ? '' + a[0] : a.join(' '));
        return ((d.__proto__ = p), (d._generator = a), (d._styler = b), (d._isEmpty = c), d);
      },
      s = (a, b) => {
        if (a.level <= 0 || !b) return a._isEmpty ? '' : b;
        let c = a._styler;
        if (void 0 === c) return b;
        let { openAll: d, closeAll: e } = c;
        if (-1 !== b.indexOf('\x1b'))
          for (; void 0 !== c; ) ((b = h(b, c.close, c.open)), (c = c.parent));
        let f = b.indexOf('\n');
        return (-1 !== f && (b = i(b, e, d, f)), d + b + e);
      },
      t = (b, ...c) => {
        let [e] = c;
        if (!Array.isArray(e)) return c.join(' ');
        let f = c.slice(1),
          g = [e.raw[0]];
        for (let a = 1; a < e.length; a++)
          g.push(String(f[a - 1]).replace(/[{}\\]/g, '\\$&'), String(e.raw[a]));
        return (void 0 === d && (d = a.r(22426)), d(b, g.join('')));
      };
    Object.defineProperties(n.prototype, k);
    let u = m(void 0);
    ((u.supportsColor = f),
      (u.stderr = m({ level: g ? g.level : 0 })),
      (u.stderr.supportsColor = g),
      (u.Level = {
        None: 0,
        Basic: 1,
        Ansi256: 2,
        TrueColor: 3,
        0: 'None',
        1: 'Basic',
        2: 'Ansi256',
        3: 'TrueColor',
      }),
      (b.exports = u));
  },
  64154,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(14747);
    c.generateValueInjectionRules = function ({ routeManifest: a, nextJsVersion: b }) {
      let c = [],
        e = {},
        f = {},
        g = {};
      return (
        b && (e._sentryNextJsVersion = b),
        a && (f._sentryRouteManifest = JSON.stringify(a)),
        Object.keys(e).length > 0 && ((f = { ...f, ...e }), (g = { ...g, ...e })),
        Object.keys(f).length > 0 &&
          c.push({
            matcher: '**/instrumentation-client.*',
            rule: {
              loaders: [
                {
                  loader: d.resolve(
                    '/ROOT/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/build/cjs/config/turbopack',
                    '..',
                    'loaders',
                    'valueInjectionLoader.js'
                  ),
                  options: { values: f },
                },
              ],
            },
          }),
        Object.keys(g).length > 0 &&
          c.push({
            matcher: '**/instrumentation.*',
            rule: {
              loaders: [
                {
                  loader: d.resolve(
                    '/ROOT/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/build/cjs/config/turbopack',
                    '..',
                    'loaders',
                    'valueInjectionLoader.js'
                  ),
                  options: { values: g },
                },
              ],
            },
          }),
        c
      );
    };
  },
  73705,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(11246),
      f = a.r(64154);
    function g(a, { matcher: b, rule: c }) {
      return a
        ? a[b]
          ? (d.debug.log(
              `${e.cyan('info')} - Turbopack rule already exists for ${b}. Please remove it from your Next.js config in order for Sentry to work properly.`
            ),
            a)
          : { ...a, [b]: c }
        : { [b]: c };
    }
    ((c.constructTurbopackConfig = function ({
      userNextConfig: a,
      routeManifest: b,
      nextJsVersion: c,
    }) {
      let d = { ...a.turbopack };
      for (let { matcher: a, rule: e } of f.generateValueInjectionRules({
        routeManifest: b,
        nextJsVersion: c,
      }))
        d.rules = g(d.rules, { matcher: a, rule: e });
      return d;
    }),
      (c.safelyAddTurbopackRule = g));
  },
  79893,
  (a, b, c) => {
    'use strict';
    b.exports =
      a.r(46786).homedir ||
      function () {
        var a = process.env.HOME,
          b = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;
        return a || (b ? '/Users/' + b : null);
      };
  },
  42138,
  (a, b, c) => {
    b.exports = function () {
      var a = Error.prepareStackTrace;
      Error.prepareStackTrace = function (a, b) {
        return b;
      };
      var b = Error().stack;
      return ((Error.prepareStackTrace = a), b[2].getFileName());
    };
  },
  42767,
  (a, b, c) => {
    'use strict';
    process.platform;
    var d =
        /^(((?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?[\\\/]?)(?:[^\\\/]*[\\\/])*)((\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))[\\\/]*$/,
      e = {};
    e.parse = function (a) {
      if ('string' != typeof a)
        throw TypeError("Parameter 'pathString' must be a string, not " + typeof a);
      var b = d.exec(a).slice(1);
      if (!b || 5 !== b.length) throw TypeError("Invalid path '" + a + "'");
      return {
        root: b[1],
        dir: b[0] === b[1] ? b[0] : b[0].slice(0, -1),
        base: b[2],
        ext: b[4],
        name: b[3],
      };
    };
    var f = /^((\/?)(?:[^\/]*\/)*)((\.{1,2}|[^\/]+?|)(\.[^.\/]*|))[\/]*$/,
      g = {};
    ((g.parse = function (a) {
      if ('string' != typeof a)
        throw TypeError("Parameter 'pathString' must be a string, not " + typeof a);
      var b = f.exec(a).slice(1);
      if (!b || 5 !== b.length) throw TypeError("Invalid path '" + a + "'");
      return { root: b[1], dir: b[0].slice(0, -1), base: b[2], ext: b[4], name: b[3] };
    }),
      (b.exports = g.parse),
      (b.exports.posix = g.parse),
      (b.exports.win32 = e.parse));
  },
  68612,
  (a, b, c) => {
    var d = a.r(14747),
      e = d.parse || a.r(42767),
      f = function (a, b) {
        var c = '/';
        /^([A-Za-z]:)/.test(a) ? (c = '') : /^\\\\/.test(a) && (c = '\\\\');
        for (var f = [a], g = e(a); g.dir !== f[f.length - 1]; ) (f.push(g.dir), (g = e(g.dir)));
        return f.reduce(function (a, e) {
          return a.concat(
            b.map(function (a) {
              return d.resolve(c, e, a);
            })
          );
        }, []);
      };
    b.exports = function (a, b, c) {
      var d = b && b.moduleDirectory ? [].concat(b.moduleDirectory) : ['node_modules'];
      if (b && 'function' == typeof b.paths)
        return b.paths(
          c,
          a,
          function () {
            return f(a, d);
          },
          b
        );
      var e = f(a, d);
      return b && b.paths ? e.concat(b.paths) : e;
    };
  },
  71844,
  (a, b, c) => {
    b.exports = function (a, b) {
      return b || {};
    };
  },
  41300,
  (a, b, c) => {
    'use strict';
    var d = Object.prototype.toString,
      e = Math.max,
      f = function (a, b) {
        for (var c = [], d = 0; d < a.length; d += 1) c[d] = a[d];
        for (var e = 0; e < b.length; e += 1) c[e + a.length] = b[e];
        return c;
      },
      g = function (a, b) {
        for (var c = [], d = b || 0, e = 0; d < a.length; d += 1, e += 1) c[e] = a[d];
        return c;
      },
      h = function (a, b) {
        for (var c = '', d = 0; d < a.length; d += 1) ((c += a[d]), d + 1 < a.length && (c += b));
        return c;
      };
    b.exports = function (a) {
      var b,
        c = this;
      if ('function' != typeof c || '[object Function]' !== d.apply(c))
        throw TypeError('Function.prototype.bind called on incompatible ' + c);
      for (var i = g(arguments, 1), j = e(0, c.length - i.length), k = [], l = 0; l < j; l++)
        k[l] = '$' + l;
      if (
        ((b = Function(
          'binder',
          'return function (' + h(k, ',') + '){ return binder.apply(this,arguments); }'
        )(function () {
          if (this instanceof b) {
            var d = c.apply(this, f(i, arguments));
            return Object(d) === d ? d : this;
          }
          return c.apply(a, f(i, arguments));
        })),
        c.prototype)
      ) {
        var m = function () {};
        ((m.prototype = c.prototype), (b.prototype = new m()), (m.prototype = null));
      }
      return b;
    };
  },
  93244,
  (a, b, c) => {
    'use strict';
    var d = a.r(41300);
    b.exports = Function.prototype.bind || d;
  },
  36886,
  (a, b, c) => {
    'use strict';
    var d = Function.prototype.call,
      e = Object.prototype.hasOwnProperty;
    b.exports = a.r(93244).call(d, e);
  },
  84890,
  (a, b, c) => {
    'use strict';
    var d = a.r(36886);
    function e(a, b) {
      var c = b.split(/ ?&& ?/);
      if (0 === c.length) return !1;
      for (var d = 0; d < c.length; ++d)
        if (
          !(function (a, b) {
            for (
              var c = a.split('.'),
                d = b.split(' '),
                e = d.length > 1 ? d[0] : '=',
                f = (d.length > 1 ? d[1] : d[0]).split('.'),
                g = 0;
              g < 3;
              ++g
            ) {
              var h = parseInt(c[g] || 0, 10),
                i = parseInt(f[g] || 0, 10);
              if (h !== i) {
                if ('<' === e) return h < i;
                if ('>=' === e) return h >= i;
                return !1;
              }
            }
            return '>=' === e;
          })(a, c[d])
        )
          return !1;
      return !0;
    }
    var f = a.r(18314);
    b.exports = function (a, b) {
      return (
        d(f, a) &&
        (function (a, b) {
          if ('boolean' == typeof b) return b;
          var c = void 0 === a ? process.versions && process.versions.node : a;
          if ('string' != typeof c)
            throw TypeError(
              void 0 === a
                ? 'Unable to determine current node version'
                : 'If provided, a valid node version is required'
            );
          if (b && 'object' == typeof b) {
            for (var d = 0; d < b.length; ++d) if (e(c, b[d])) return !0;
            return !1;
          }
          return e(c, b);
        })(b, f[a])
      );
    };
  },
  45814,
  (a, b, c) => {
    var d = a.r(22734),
      e = a.r(79893),
      f = a.r(14747),
      g = a.r(42138),
      h = a.r(68612),
      i = a.r(71844),
      j = a.r(84890),
      k =
        'win32' !== process.platform && d.realpath && 'function' == typeof d.realpath.native
          ? d.realpath.native
          : d.realpath,
      l = e(),
      m = function (a, b) {
        d.stat(a, function (a, c) {
          return a
            ? 'ENOENT' === a.code || 'ENOTDIR' === a.code
              ? b(null, !1)
              : b(a)
            : b(null, c.isFile() || c.isFIFO());
        });
      },
      n = function (a, b) {
        d.stat(a, function (a, c) {
          return a
            ? 'ENOENT' === a.code || 'ENOTDIR' === a.code
              ? b(null, !1)
              : b(a)
            : b(null, c.isDirectory());
        });
      },
      o = function (a, b) {
        k(a, function (c, d) {
          c && 'ENOENT' !== c.code ? b(c) : b(null, c ? a : d);
        });
      },
      p = function (a, b, c, d) {
        c && !1 === c.preserveSymlinks ? a(b, d) : d(null, b);
      },
      q = function (a, b, c) {
        a(b, function (a, b) {
          if (a) c(a);
          else
            try {
              var d = JSON.parse(b);
              c(null, d);
            } catch (a) {
              c(null);
            }
        });
      },
      r = function (a, b, c) {
        for (var d = h(b, c, a), e = 0; e < d.length; e++) d[e] = f.join(d[e], a);
        return d;
      };
    b.exports = function (a, b, c) {
      var e,
        h = c,
        k = b;
      if (('function' == typeof b && ((h = k), (k = {})), 'string' != typeof a)) {
        var s = TypeError('Path must be a string.');
        return process.nextTick(function () {
          h(s);
        });
      }
      var t = (k = i(a, k)).isFile || m,
        u = k.isDirectory || n,
        v = k.readFile || d.readFile,
        w = k.realpath || o,
        x = k.readPackage || q;
      if (k.readFile && k.readPackage) {
        var y = TypeError('`readFile` and `readPackage` are mutually exclusive.');
        return process.nextTick(function () {
          h(y);
        });
      }
      var z = k.packageIterator,
        A = k.extensions || ['.js'],
        B = !1 !== k.includeCoreModules,
        C = k.basedir || f.dirname(g()),
        D = k.filename || C;
      function E(b, c, d) {
        b
          ? h(b)
          : c
            ? h(null, c, d)
            : G(e, function (b, c, d) {
                if (b) h(b);
                else if (c)
                  p(w, c, k, function (a, b) {
                    a ? h(a) : h(null, b, d);
                  });
                else {
                  var e = Error("Cannot find module '" + a + "' from '" + D + "'");
                  ((e.code = 'MODULE_NOT_FOUND'), h(e));
                }
              });
      }
      function F(a, b, c) {
        var d = b,
          e = c;
        ('function' == typeof d && ((e = d), (d = void 0)),
          (function a(b, c, d) {
            if (0 === b.length) return e(null, void 0, d);
            var g = c + b[0],
              h = d;
            function i(d, i, l) {
              if (((h = i), d)) return e(d);
              if (l && h && k.pathFilter) {
                var m = f.relative(l, g),
                  n = m.slice(0, m.length - b[0].length),
                  o = k.pathFilter(h, c, n);
                if (o) return a([''].concat(A.slice()), f.resolve(l, o), h);
              }
              t(g, j);
            }
            function j(d, f) {
              return d ? e(d) : f ? e(null, g, h) : void a(b.slice(1), c, h);
            }
            h
              ? i(null, h)
              : (function a(b, c) {
                  return '' === b ||
                    '/' === b ||
                    ('win32' === process.platform && /^\w:[/\\]*$/.test(b),
                    /[/\\]node_modules[/\\]*$/.test(b))
                    ? c(null)
                    : void p(w, b, k, function (d, e) {
                        if (d) return a(f.dirname(b), c);
                        var g = f.join(e, 'package.json');
                        t(g, function (d, e) {
                          if (!e) return a(f.dirname(b), c);
                          x(v, g, function (a, d) {
                            a && c(a);
                            var e = d;
                            (e && k.packageFilter && (e = k.packageFilter(e, g)), c(null, e, b));
                          });
                        });
                      });
                })(f.dirname(g), i);
          })([''].concat(A), a, d));
      }
      function G(a, b, c) {
        var d = c,
          e = b;
        ('function' == typeof e && ((d = e), (e = k.package)),
          p(w, a, k, function (b, c) {
            if (b) return d(b);
            var g = f.join(c, 'package.json');
            t(g, function (b, c) {
              return b
                ? d(b)
                : c
                  ? void x(v, g, function (b, c) {
                      if (b) return d(b);
                      var e = c;
                      if ((e && k.packageFilter && (e = k.packageFilter(e, g)), e && e.main)) {
                        if ('string' != typeof e.main) {
                          var h = TypeError('package “' + e.name + '” `main` must be a string');
                          return ((h.code = 'INVALID_PACKAGE_MAIN'), d(h));
                        }
                        return (
                          ('.' === e.main || './' === e.main) && (e.main = 'index'),
                          void F(f.resolve(a, e.main), e, function (b, c, e) {
                            return b
                              ? d(b)
                              : c
                                ? d(null, c, e)
                                : e
                                  ? void G(f.resolve(a, e.main), e, function (b, c, e) {
                                      return b
                                        ? d(b)
                                        : c
                                          ? d(null, c, e)
                                          : void F(f.join(a, 'index'), e, d);
                                    })
                                  : F(f.join(a, 'index'), e, d);
                          })
                        );
                      }
                      F(f.join(a, '/index'), e, d);
                    })
                  : F(f.join(a, 'index'), e, d);
            });
          }));
      }
      ((k.paths = k.paths || [f.join(l, '.node_modules'), f.join(l, '.node_libraries')]),
        p(w, f.resolve(C), k, function (b, c) {
          b
            ? h(b)
            : (function (b) {
                if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(a))
                  ((e = f.resolve(b, a)),
                    ('.' === a || '..' === a || '/' === a.slice(-1)) && (e += '/'),
                    /\/$/.test(a) && e === b ? G(e, k.package, E) : F(e, k.package, E));
                else {
                  var c, d, g, i;
                  if (B && j(a)) return h(null, a);
                  ((c = a),
                    (d = b),
                    (g = function (b, c, d) {
                      if (b) h(b);
                      else {
                        if (c)
                          return p(w, c, k, function (a, b) {
                            a ? h(a) : h(null, b, d);
                          });
                        var e = Error("Cannot find module '" + a + "' from '" + D + "'");
                        ((e.code = 'MODULE_NOT_FOUND'), h(e));
                      }
                    }),
                    (i = function () {
                      return r(c, d, k);
                    }),
                    (function a(b, c) {
                      if (0 === c.length) return b(null, void 0);
                      var d = c[0];
                      function e(a, c, e) {
                        return a ? b(a) : c ? b(null, c, e) : void G(d, k.package, g);
                      }
                      function g(d, e, f) {
                        return d ? b(d) : e ? b(null, e, f) : void a(b, c.slice(1));
                      }
                      u(f.dirname(d), function (f, g) {
                        return f ? b(f) : g ? void F(d, k.package, e) : a(b, c.slice(1));
                      });
                    })(g, z ? z(c, d, i, k) : i()));
                }
              })(c);
        }));
    };
  },
  79092,
  (a, b, c) => {
    'use strict';
    var d = a.r(84890),
      e = a.r(28879),
      f = {};
    for (var g in e) Object.prototype.hasOwnProperty.call(e, g) && (f[g] = d(g));
    b.exports = f;
  },
  57598,
  (a, b, c) => {
    var d = a.r(84890);
    b.exports = function (a) {
      return d(a);
    };
  },
  83762,
  (a, b, c) => {
    var d = a.r(84890),
      e = a.r(22734),
      f = a.r(14747),
      g = a.r(79893),
      h = a.r(42138),
      i = a.r(68612),
      j = a.r(71844),
      k =
        'win32' !== process.platform && e.realpathSync && 'function' == typeof e.realpathSync.native
          ? e.realpathSync.native
          : e.realpathSync,
      l = g(),
      m = function (a) {
        try {
          var b = e.statSync(a, { throwIfNoEntry: !1 });
        } catch (a) {
          if (a && ('ENOENT' === a.code || 'ENOTDIR' === a.code)) return !1;
          throw a;
        }
        return !!b && (b.isFile() || b.isFIFO());
      },
      n = function (a) {
        try {
          var b = e.statSync(a, { throwIfNoEntry: !1 });
        } catch (a) {
          if (a && ('ENOENT' === a.code || 'ENOTDIR' === a.code)) return !1;
          throw a;
        }
        return !!b && b.isDirectory();
      },
      o = function (a) {
        try {
          return k(a);
        } catch (a) {
          if ('ENOENT' !== a.code) throw a;
        }
        return a;
      },
      p = function (a, b, c) {
        return c && !1 === c.preserveSymlinks ? a(b) : b;
      },
      q = function (a, b) {
        var c = a(b);
        try {
          return JSON.parse(c);
        } catch (a) {}
      },
      r = function (a, b, c) {
        for (var d = i(b, c, a), e = 0; e < d.length; e++) d[e] = f.join(d[e], a);
        return d;
      };
    b.exports = function (a, b) {
      if ('string' != typeof a) throw TypeError('Path must be a string.');
      var c = j(a, b),
        g = c.isFile || m,
        i = c.readFileSync || e.readFileSync,
        k = c.isDirectory || n,
        s = c.realpathSync || o,
        t = c.readPackageSync || q;
      if (c.readFileSync && c.readPackageSync)
        throw TypeError('`readFileSync` and `readPackageSync` are mutually exclusive.');
      var u = c.packageIterator,
        v = c.extensions || ['.js'],
        w = !1 !== c.includeCoreModules,
        x = c.basedir || f.dirname(h()),
        y = c.filename || x;
      c.paths = c.paths || [f.join(l, '.node_modules'), f.join(l, '.node_libraries')];
      var z = p(s, f.resolve(x), c);
      if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(a)) {
        var A = f.resolve(z, a);
        ('.' === a || '..' === a || '/' === a.slice(-1)) && (A += '/');
        var B = E(A) || F(A);
        if (B) return p(s, B, c);
      } else {
        if (w && d(a)) return a;
        var C = (function (a, b) {
          for (
            var d = function () {
                return r(a, b, c);
              },
              e = u ? u(a, b, d, c) : d(),
              g = 0;
            g < e.length;
            g++
          ) {
            var h = e[g];
            if (k(f.dirname(h))) {
              var i = E(h);
              if (i) return i;
              var j = F(h);
              if (j) return j;
            }
          }
        })(a, z);
        if (C) return p(s, C, c);
      }
      var D = Error("Cannot find module '" + a + "' from '" + y + "'");
      throw ((D.code = 'MODULE_NOT_FOUND'), D);
      function E(a) {
        var b = (function a(b) {
          if (
            '' !== b &&
            '/' !== b &&
            ('win32' === process.platform && /^\w:[/\\]*$/.test(b),
            !/[/\\]node_modules[/\\]*$/.test(b))
          ) {
            var d = f.join(p(s, b, c), 'package.json');
            if (!g(d)) return a(f.dirname(b));
            var e = t(i, d);
            return (e && c.packageFilter && (e = c.packageFilter(e, b)), { pkg: e, dir: b });
          }
        })(f.dirname(a));
        if (b && b.dir && b.pkg && c.pathFilter) {
          var d = f.relative(b.dir, a),
            e = c.pathFilter(b.pkg, a, d);
          e && (a = f.resolve(b.dir, e));
        }
        if (g(a)) return a;
        for (var h = 0; h < v.length; h++) {
          var j = a + v[h];
          if (g(j)) return j;
        }
      }
      function F(a) {
        var b = f.join(p(s, a, c), '/package.json');
        if (g(b)) {
          try {
            var d = t(i, b);
          } catch (a) {}
          if ((d && c.packageFilter && (d = c.packageFilter(d, a)), d && d.main)) {
            if ('string' != typeof d.main) {
              var e = TypeError('package “' + d.name + '” `main` must be a string');
              throw ((e.code = 'INVALID_PACKAGE_MAIN'), e);
            }
            ('.' === d.main || './' === d.main) && (d.main = 'index');
            try {
              var h = E(f.resolve(a, d.main));
              if (h) return h;
              var j = F(f.resolve(a, d.main));
              if (j) return j;
            } catch (a) {}
          }
        }
        return E(f.join(a, '/index'));
      }
    };
  },
  66511,
  (a, b, c) => {
    var d = a.r(45814);
    ((d.core = a.r(79092)), (d.isCore = a.r(57598)), (d.sync = a.r(83762)), (b.exports = d));
  },
  29119,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(22734),
      f = a.r(66511);
    function g() {
      let a = (function () {
        try {
          return f.sync('next/package.json', { basedir: process.cwd() });
        } catch {
          return;
        }
      })();
      if (a)
        try {
          return JSON.parse(e.readFileSync(a, { encoding: 'utf-8' })).version;
        } catch {}
    }
    ((c.getNextjsVersion = g),
      (c.supportsProductionCompileHook = function () {
        let a = g();
        if (!a) return !1;
        let { major: b, minor: c, patch: e } = d.parseSemver(a);
        return (
          void 0 !== b &&
          void 0 !== c &&
          void 0 !== e &&
          (!!(b > 15) || (15 === b && (!!(c > 4) || (4 === c && !!(e >= 1)))) || !1)
        );
      }));
  },
  45651,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(14747);
    c.getWebpackPluginOptions = function (a, b, c) {
      let { isServer: e, config: f, dir: g, nextRuntime: h } = a,
        i = g.replace(/\\/g, '/'),
        j = f.distDir?.replace(/\\/g, '/') ?? '.next',
        k = d.posix.join(i, j),
        l = [],
        m = [];
      return (
        e
          ? l.push(d.posix.join(k, 'server', '**'), d.posix.join(k, 'serverless', '**'))
          : (b.widenClientFileUpload
              ? l.push(d.posix.join(k, 'static', 'chunks', '**'))
              : l.push(
                  d.posix.join(k, 'static', 'chunks', 'pages', '**'),
                  d.posix.join(k, 'static', 'chunks', 'app', '**')
                ),
            b.widenClientFileUpload || m.push(d.posix.join(k, 'static', 'chunks', 'main-*')),
            m.push(
              d.posix.join(k, 'static', 'chunks', 'framework-*'),
              d.posix.join(k, 'static', 'chunks', 'framework.*'),
              d.posix.join(k, 'static', 'chunks', 'polyfills-*'),
              d.posix.join(k, 'static', 'chunks', 'webpack-*')
            )),
        {
          authToken: b.authToken,
          headers: b.headers,
          org: b.org,
          project: b.project,
          telemetry: b.telemetry,
          debug: b.debug,
          errorHandler: b.errorHandler,
          reactComponentAnnotation: {
            ...b.reactComponentAnnotation,
            ...b.unstable_sentryWebpackPluginOptions?.reactComponentAnnotation,
          },
          silent: b.silent,
          url: b.sentryUrl,
          sourcemaps: {
            disable: b.sourcemaps?.disable,
            rewriteSources: (a) =>
              a.startsWith('webpack://_N_E/')
                ? a.replace('webpack://_N_E/', '')
                : a.startsWith('webpack://')
                  ? a.replace('webpack://', '')
                  : a,
            assets: b.sourcemaps?.assets ?? l,
            ignore: b.sourcemaps?.ignore ?? m,
            filesToDeleteAfterUpload: b.sourcemaps?.deleteSourcemapsAfterUpload
              ? [
                  d.posix.join(k, 'static', '**', '*.js.map'),
                  d.posix.join(k, 'static', '**', '*.mjs.map'),
                  d.posix.join(k, 'static', '**', '*.cjs.map'),
                ]
              : void 0,
            ...b.unstable_sentryWebpackPluginOptions?.sourcemaps,
          },
          release:
            void 0 !== c
              ? {
                  inject: !1,
                  name: c,
                  create: b.release?.create,
                  finalize: b.release?.finalize,
                  dist: b.release?.dist,
                  vcsRemote: b.release?.vcsRemote,
                  setCommits: b.release?.setCommits,
                  deploy: b.release?.deploy,
                  ...b.unstable_sentryWebpackPluginOptions?.release,
                }
              : { inject: !1, create: !1, finalize: !1 },
          bundleSizeOptimizations: { ...b.bundleSizeOptimizations },
          _metaOptions: {
            loggerPrefixOverride: `[@sentry/nextjs - ${e ? ('edge' === h ? 'Edge' : 'Node.js') : 'Client'}]`,
            telemetry: { metaFramework: 'nextjs' },
          },
          ...b.unstable_sentryWebpackPluginOptions,
        }
      );
    };
  },
  34429,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(11246),
      f = a.r(22734),
      g = a.r(14747),
      h = a.r(66511),
      i = a.r(29119),
      j = a.r(45651),
      k = !1;
    async function l(a, b) {
      let { dir: c, dev: d } = b,
        e = 'function' == typeof a ? await a() : { ...a },
        h = m(c),
        i = (function (a) {
          for (let b of [
            ['src', 'instrumentation-client.js'],
            ['src', 'instrumentation-client.ts'],
            ['instrumentation-client.js'],
            ['instrumentation-client.ts'],
          ])
            if (f.existsSync(g.resolve(a, ...b))) return g.join(...b);
        })(c),
        j = [];
      for (let a in (h && j.push(`./${h}`), i && j.push(`./${i}`), e))
        ('pages/_app' === a || 'main-app' === a) &&
          (function (a, b, c, d) {
            let e = a[b],
              f = e;
            if ('string' == typeof e || Array.isArray(e)) {
              if ((f = Array.isArray(e) ? e : [e]).some((a) => c.includes(a))) return;
              d ? f.push(...c) : f.unshift(...c);
            } else if ('object' == typeof e && 'import' in e) {
              let a = e.import,
                b = Array.isArray(a) ? a : [a];
              if (b.some((a) => c.includes(a))) return;
              (d ? b.push(...c) : b.unshift(...c), (f = { ...e, import: b }));
            } else
              console.error(
                'Sentry Logger [Error]:',
                `Could not inject SDK initialization code into entry point ${b}, as its current value is not in a recognized format.
`,
                'Expected: string | Array<string> | { [key:string]: any, import: string | Array<string> }\n',
                `Got: ${e}`
              );
            f && (a[b] = f);
          })(e, a, j, d);
      return e;
    }
    function m(a) {
      for (let b of ['sentry.client.config.ts', 'sentry.client.config.js'])
        if (f.existsSync(g.resolve(a, b))) return b;
    }
    let n = [
      'next/dist/client/components/request-async-storage.js',
      'next/dist/client/components/request-async-storage.external.js',
      'next/dist/server/app-render/work-unit-async-storage.external.js',
      'next/dist/client/components/work-unit-async-storage.external.js',
    ];
    c.constructWebpackConfigFunction = function (a = {}, c = {}, o, p, q) {
      return function (r, s) {
        var t;
        let u,
          v,
          { isServer: w, dev: x, dir: y } = s,
          z = w ? ('edge' === s.nextRuntime ? 'edge' : 'server') : 'client',
          A = a.pageExtensions || ['tsx', 'ts', 'jsx', 'js'],
          B = A.map((a) => `.${a}`),
          C = A.map(d.escapeStringForRegex).join('|'),
          D = (function (a, b) {
            for (let c of b.flatMap((a) => [
              ['src', `instrumentation${a}`],
              [`instrumentation${a}`],
            ]))
              try {
                return f.readFileSync(g.resolve(a, ...c), { encoding: 'utf-8' });
              } catch {}
            return null;
          })(y, B.concat(['.ts', '.js']));
        if (
          ('client' !== z &&
            (function (a, b, c) {
              if (
                !(
                  b &&
                  (b.includes('@sentry/') || b.match(/sentry\.(server|edge)\.config(\.(ts|js))?/))
                )
              )
                for (let b of [`sentry.${c}.config.ts`, `sentry.${c}.config.js`])
                  f.existsSync(g.resolve(a, b)) &&
                    console.warn(
                      `[@sentry/nextjs] It appears you've configured a \`${b}\` file. Please ensure to put this file's content into the \`register()\` function of a Next.js instrumentation file instead. To ensure correct functionality of the SDK, \`Sentry.init\` must be called inside of an instrumentation file. Learn more about setting up an instrumentation file in Next.js: https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation. You can safely delete the \`${b}\` file afterward.`
                    );
            })(y, D, z),
          'server' === z)
        ) {
          let a = i.getNextjsVersion(),
            { major: b } = d.parseSemver(a || '');
          b &&
            b >= 15 &&
            (function (a) {
              if (!a) {
                process.env.SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING ||
                  console.warn(
                    e.yellow(
                      '[@sentry/nextjs] Could not find a Next.js instrumentation file. This indicates an incomplete configuration of the Sentry SDK. An instrumentation file is required for the Sentry SDK to be initialized on the server: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#create-initialization-config-files (you can suppress this warning by setting SENTRY_SUPPRESS_INSTRUMENTATION_FILE_WARNING=1 as environment variable)'
                    )
                  );
                return;
              }
              a.includes('onRequestError') ||
                console.warn(
                  e.yellow(
                    '[@sentry/nextjs] Could not find `onRequestError` hook in instrumentation file. This indicates outdated configuration of the Sentry SDK. Use `Sentry.captureRequestError` to instrument the `onRequestError` hook: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#errors-from-nested-react-server-components'
                  )
                );
            })(D);
        }
        let E = { ...r };
        'webpack' in a && 'function' == typeof a.webpack && (E = a.webpack(E, s));
        let F = (((t = E).module = { ...t.module, rules: [...(t.module?.rules || [])] }), t);
        ((function ({
          newConfig: a,
          userNextConfig: b,
          userSentryOptions: c,
          buildContext: d,
          releaseName: e,
          routeManifest: f,
          nextJsVersion: h,
        }) {
          let i = b.assetPrefix || b.basePath || '',
            j = c.release?.create !== !1,
            k = e && j ? e : void 0,
            l = {
              _sentryRewritesTunnelPath:
                void 0 !== c.tunnelRoute &&
                'export' !== b.output &&
                'string' == typeof c.tunnelRoute
                  ? `${b.basePath ?? ''}${c.tunnelRoute}`
                  : void 0,
              SENTRY_RELEASE: k && !d.dev ? { id: k } : void 0,
              _sentryBasePath: d.dev ? b.basePath : void 0,
              _sentryNextJsVersion: h,
            },
            m = { ...l, _sentryRewriteFramesDistDir: b.distDir?.replace(/\\/g, '\\\\') || '.next' },
            n = {
              ...l,
              _sentryRewriteFramesAssetPrefixPath: i
                ? new URL(i, 'http://dogs.are.great').pathname.replace(/\/$/, '')
                : '',
              _sentryAssetPrefix: b.assetPrefix,
              _sentryExperimentalThirdPartyOriginStackFrames: c._experimental
                ?.thirdPartyOriginStackFrames
                ? 'true'
                : void 0,
              _sentryRouteManifest: JSON.stringify(f),
            };
          d.isServer
            ? a.module.rules.push({
                test: /(src[\\/])?instrumentation.(js|ts)/,
                use: [
                  {
                    loader: g.resolve(
                      '/ROOT/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/build/cjs/config',
                      'loaders/valueInjectionLoader.js'
                    ),
                    options: { values: m },
                  },
                ],
              })
            : a.module.rules.push({
                test: /(?:sentry\.client\.config\.(jsx?|tsx?)|(?:src[\\/])?instrumentation-client\.(js|ts))$/,
                use: [
                  {
                    loader: g.resolve(
                      '/ROOT/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/build/cjs/config',
                      'loaders/valueInjectionLoader.js'
                    ),
                    options: { values: n },
                  },
                ],
              });
        })({
          newConfig: F,
          userNextConfig: a,
          userSentryOptions: c,
          buildContext: s,
          releaseName: o,
          routeManifest: p,
          nextJsVersion: q,
        }),
          (function (a) {
            let b = [
              (a, b) => {
                try {
                  if (!a.module) return !1;
                  let c =
                      /@opentelemetry\/instrumentation/.test(
                        a.module.readableIdentifier(b.requestShortener)
                      ) ||
                      /@prisma\/instrumentation/.test(
                        a.module.readableIdentifier(b.requestShortener)
                      ),
                    d = /Critical dependency/.test(a.message);
                  return c && d;
                } catch {
                  return !1;
                }
              },
              { module: /@opentelemetry\/instrumentation/, message: /Critical dependency/ },
              { module: /@prisma\/instrumentation/, message: /Critical dependency/ },
              { module: /require-in-the-middle/, message: /Critical dependency/ },
            ];
            void 0 === a.ignoreWarnings
              ? (a.ignoreWarnings = b)
              : Array.isArray(a.ignoreWarnings) && a.ignoreWarnings.push(...b);
          })(F));
        let G = g.join(y, 'pages'),
          H = g.join(y, 'src', 'pages');
        f.existsSync(G) && f.lstatSync(G).isDirectory()
          ? (u = G)
          : f.existsSync(H) && f.lstatSync(H).isDirectory() && (u = H);
        let I = g.join(y, 'app'),
          J = g.join(y, 'src', 'app');
        f.existsSync(I) && f.lstatSync(I).isDirectory()
          ? (v = I)
          : f.existsSync(J) && f.lstatSync(J).isDirectory() && (v = J);
        let K = u ? g.join(u, 'api') : void 0,
          L = u ? g.join(u, '..') : v ? g.join(v, '..') : y,
          M = {
            appDir: v,
            pagesDir: u,
            pageExtensionRegex: C,
            excludeServerRoutes: c.excludeServerRoutes,
            nextjsRequestAsyncStorageModulePath: (function (a, b) {
              if (void 0 !== b)
                for (let c of b.map((b) => g.resolve(a, b))) {
                  let a = (function (a) {
                    try {
                      return g.dirname(h.sync('next/package.json', { basedir: a }));
                    } catch {
                      return;
                    }
                  })(c);
                  if (a) {
                    let b = n.find((b) => f.existsSync(g.join(a, '..', b)));
                    if (b) return b;
                  }
                }
            })(y, E.resolve?.modules),
          },
          N = (a) => {
            let b;
            return ((b = g.isAbsolute(a) ? a : g.join(y, a)), g.normalize(b));
          },
          O = A.map((a) => g.join(L, `middleware.${a}`));
        if (w && !1 !== c.autoInstrumentServerFunctions) {
          let a;
          F.module.rules.unshift({
            test: (a) => {
              let b = N(a);
              return (
                void 0 !== u &&
                b.startsWith(u + g.sep) &&
                !b.startsWith(K + g.sep) &&
                B.some((a) => b.endsWith(a))
              );
            },
            use: [
              {
                loader: g.resolve(
                  '/ROOT/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/build/cjs/config',
                  'loaders',
                  'wrappingLoader.js'
                ),
                options: { ...M, wrappingTargetKind: 'page' },
              },
            ],
          });
          try {
            process.env.VERCEL &&
              c.automaticVercelMonitors &&
              (a = JSON.parse(
                f.readFileSync(g.join(process.cwd(), 'vercel.json'), 'utf8')
              ).crons) &&
              d.debug.log(
                `${e.cyan('info')} - Creating Sentry cron monitors for your Vercel Cron Jobs. You can disable this feature by setting the ${e.bold.cyan('automaticVercelMonitors')} option to false in you Next.js config.`
              );
          } catch (a) {
            'ENOENT' === a.code ||
              d.debug.error(
                `${e.red('error')} - Sentry failed to read vercel.json for automatic cron job monitoring instrumentation`,
                a
              );
          }
          (F.module.rules.unshift({
            test: (a) => {
              let b = N(a);
              return b.startsWith(K + g.sep) && B.some((a) => b.endsWith(a));
            },
            use: [
              {
                loader: g.resolve(
                  '/ROOT/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/build/cjs/config',
                  'loaders',
                  'wrappingLoader.js'
                ),
                options: { ...M, vercelCronsConfig: a, wrappingTargetKind: 'api-route' },
              },
            ],
          }),
            (c.autoInstrumentMiddleware ?? !0) &&
              F.module.rules.unshift({
                test: (a) => {
                  let b = N(a);
                  return O.includes(b);
                },
                use: [
                  {
                    loader: g.resolve(
                      '/ROOT/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/build/cjs/config',
                      'loaders',
                      'wrappingLoader.js'
                    ),
                    options: { ...M, wrappingTargetKind: 'middleware' },
                  },
                ],
              }));
        }
        if (
          (w &&
            !1 !== c.autoInstrumentAppDirectory &&
            (F.module.rules.unshift({
              test: (a) => {
                let b = N(a);
                return (
                  void 0 !== v &&
                  b.startsWith(v + g.sep) &&
                  !!b.match(RegExp(`[\\\\/](page|layout|loading|head|not-found)\\.(${C})$`))
                );
              },
              use: [
                {
                  loader: g.resolve(
                    '/ROOT/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/build/cjs/config',
                    'loaders',
                    'wrappingLoader.js'
                  ),
                  options: { ...M, wrappingTargetKind: 'server-component' },
                },
              ],
            }),
            F.module.rules.unshift({
              test: (a) => {
                let b = N(a);
                return (
                  void 0 !== v &&
                  b.startsWith(v + g.sep) &&
                  !!b.match(RegExp(`[\\\\/]route\\.(${C})$`))
                );
              },
              use: [
                {
                  loader: g.resolve(
                    '/ROOT/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/build/cjs/config',
                    'loaders',
                    'wrappingLoader.js'
                  ),
                  options: { ...M, wrappingTargetKind: 'route-handler' },
                },
              ],
            })),
          v &&
            (A.map((a) => `global-error.${a}`).some((a) => f.existsSync(g.join(v, a))) ||
              k ||
              process.env.SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING ||
              (console.log(
                `${e.yellow('warn')}  - It seems like you don't have a global error handler set up. It is recommended that you add a ${e.cyan('global-error.js')} file with Sentry instrumentation so that React rendering errors are reported to Sentry. Read more: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#react-render-errors-in-app-router (you can suppress this warning by setting SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1 as environment variable)`
              ),
              (k = !0))),
          !w)
        ) {
          let a = F.entry;
          F.entry = async () => l(a, s);
          let b = m(y);
          b &&
            console.warn(
              `[@sentry/nextjs] DEPRECATION WARNING: It is recommended renaming your \`${b}\` file, or moving its content to \`instrumentation-client.ts\`. When using Turbopack \`${b}\` will no longer work. Read more about the \`instrumentation-client.ts\` file: https://nextjs.org/docs/app/api-reference/file-conventions/instrumentation-client`
            );
        }
        let P = a?.output === 'export';
        if (!(x || (P && w))) {
          let { sentryWebpackPlugin: a } = d.loadModule('@sentry/webpack-plugin', b) ?? {};
          if (a) {
            (!c.sourcemaps?.disable &&
              (F.devtool ||
                (d.debug.log(
                  `[@sentry/nextjs] Automatically enabling source map generation for ${z} build.`
                ),
                w ? (F.devtool = 'source-map') : (F.devtool = 'hidden-source-map')),
              w ||
                c.sourcemaps?.deleteSourcemapsAfterUpload !== void 0 ||
                (d.debug.warn(
                  '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.'
                ),
                (c.sourcemaps = { ...c.sourcemaps, deleteSourcemapsAfterUpload: !0 }))),
              (F.plugins = F.plugins || []));
            let b = a(j.getWebpackPluginOptions(s, c, o));
            ((b._name = 'sentry-webpack-plugin'), F.plugins.push(b));
          }
        }
        return (
          c.disableLogger &&
            ((F.plugins = F.plugins || []),
            F.plugins.push(new s.webpack.DefinePlugin({ __SENTRY_DEBUG__: !1 }))),
          (F.plugins = F.plugins || []),
          F.plugins.push(
            new s.webpack.DefinePlugin({
              __SENTRY_SERVER_MODULES__: JSON.stringify(
                (function (a) {
                  try {
                    let b = g.join(a, 'package.json'),
                      c = f.readFileSync(b, 'utf8'),
                      d = JSON.parse(c);
                    return { ...d.dependencies, ...d.devDependencies };
                  } catch {
                    return {};
                  }
                })(y)
              ),
            })
          ),
          F
        );
      };
    };
  },
  85275,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(76341),
      f = a.r(33405),
      g = a.r(22734),
      h = a.r(14747),
      i = a.r(69326),
      j = a.r(94045),
      k = a.r(73705),
      l = a.r(29119);
    a.r(34429);
    let m = !1,
      n = !1,
      o = [
        'amqplib',
        'connect',
        'dataloader',
        'express',
        'generic-pool',
        'graphql',
        '@hapi/hapi',
        'ioredis',
        'kafkajs',
        'koa',
        'lru-memoizer',
        'mongodb',
        'mongoose',
        'mysql',
        'mysql2',
        'knex',
        'pg',
        'pg-pool',
        '@node-redis/client',
        '@redis/client',
        'redis',
        'tedious',
      ];
    function p(a, b) {
      let c,
        p,
        q =
          b.release?.create !== !1
            ? (b.release?.name ??
              e.getSentryRelease() ??
              (function () {
                let a;
                try {
                  a = f
                    .execSync('git rev-parse HEAD', { stdio: ['ignore', 'pipe', 'ignore'] })
                    .toString()
                    .trim();
                } catch {}
                return a;
              })())
            : b.release?.name;
      if (b?.tunnelRoute)
        if ('export' === a.output)
          m ||
            ((m = !0),
            console.warn(
              '[@sentry/nextjs] The Sentry Next.js SDK `tunnelRoute` option will not work in combination with Next.js static exports. The `tunnelRoute` option uses server-side features that cannot be accessed in export mode. If you still want to tunnel Sentry events, set up your own tunnel: https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option'
            ));
        else {
          let c =
            !0 === b.tunnelRoute
              ? (function () {
                  let a = Math.random().toString(36).substring(2, 10);
                  return `/${a}`;
                })()
              : b.tunnelRoute;
          ((b.tunnelRoute = c || void 0),
            (function (a, b) {
              let c = a.rewrites;
              a.rewrites = async (...a) => {
                let d = {
                    source: `${b}(/?)`,
                    has: [
                      { type: 'query', key: 'o', value: '(?<orgid>\\d*)' },
                      { type: 'query', key: 'p', value: '(?<projectid>\\d*)' },
                    ],
                    destination: 'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0',
                  },
                  e = [
                    {
                      source: `${b}(/?)`,
                      has: [
                        { type: 'query', key: 'o', value: '(?<orgid>\\d*)' },
                        { type: 'query', key: 'p', value: '(?<projectid>\\d*)' },
                        { type: 'query', key: 'r', value: '(?<region>[a-z]{2})' },
                      ],
                      destination:
                        'https://o:orgid.ingest.:region.sentry.io/api/:projectid/envelope/?hsts=0',
                    },
                    d,
                  ];
                if ('function' != typeof c) return e;
                let f = await c(...a);
                return Array.isArray(f)
                  ? [...e, ...f]
                  : { ...f, beforeFiles: [...e, ...(f.beforeFiles || [])] };
              };
            })(a, c));
        }
      if (
        process.argv.includes('--experimental-build-mode') &&
        (n ||
          ((n = !0),
          console.warn(
            '[@sentry/nextjs] The Sentry Next.js SDK does not currently fully support next build --experimental-build-mode'
          )),
        process.argv.includes('generate'))
      )
        return a;
      (b.disableManifestInjection || (c = j.createRouteManifest()),
        (function (a, b, c) {
          let d = a.assetPrefix || a.basePath || '',
            e = a.basePath ?? '',
            f =
              void 0 !== b.tunnelRoute && 'export' !== a.output && 'string' == typeof b.tunnelRoute
                ? `${e}${b.tunnelRoute}`
                : void 0,
            g = {
              _sentryRewriteFramesDistDir: a.distDir?.replace(/\\/g, '\\\\') || '.next',
              _sentryRewriteFramesAssetPrefixPath: d
                ? new URL(d, 'http://dogs.are.great').pathname.replace(/\/$/, '')
                : '',
            };
          (a.assetPrefix && (g._assetsPrefix = a.assetPrefix),
            b._experimental?.thirdPartyOriginStackFrames &&
              (g._experimentalThirdPartyOriginStackFrames = 'true'),
            f && (g._sentryRewritesTunnelPath = f),
            e && (g._sentryBasePath = e),
            a.assetPrefix && (g._sentryAssetPrefix = a.assetPrefix),
            b._experimental?.thirdPartyOriginStackFrames &&
              (g._experimentalThirdPartyOriginStackFrames = 'true'),
            c && (g._sentryRelease = c),
            'object' == typeof a.env
              ? (a.env = { ...g, ...a.env })
              : void 0 === a.env && (a.env = g));
        })(a, b, q));
      let r = l.getNextjsVersion();
      if (r) {
        let { major: b, minor: c } = d.parseSemver(r);
        void 0 !== b &&
          void 0 !== c &&
          (b >= 15 || (14 === b && c >= 3)) &&
          ((a.experimental = a.experimental || {}),
          (a.experimental.clientTraceMetadata = [
            'baggage',
            'sentry-trace',
            ...(a.experimental?.clientTraceMetadata || []),
          ]));
      } else
        console.log(
          "[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, please add `experimental.clientTraceMetadata: ['sentry-trace', 'baggage']` to your Next.js config to enable pageload tracing for App Router."
        );
      if (r) {
        let { major: b, minor: c, patch: e, prerelease: f } = d.parseSemver(r),
          g =
            void 0 !== b &&
            void 0 !== c &&
            void 0 !== e &&
            b >= 15 &&
            ((0 === c && 0 === e && void 0 === f) || c > 0 || e > 0),
          h =
            void 0 !== b &&
            void 0 !== c &&
            void 0 !== e &&
            void 0 !== f &&
            15 === b &&
            0 === c &&
            0 === e &&
            f.startsWith('rc.') &&
            parseInt(f.split('.')[1] || '', 10) > 0,
          i =
            void 0 !== c &&
            void 0 !== e &&
            void 0 !== f &&
            15 === b &&
            0 === c &&
            0 === e &&
            f.startsWith('canary.') &&
            parseInt(f.split('.')[1] || '', 10) >= 124;
        g ||
          h ||
          i ||
          (a.experimental?.instrumentationHook === !1 &&
            console.warn(
              '[@sentry/nextjs] You turned off the `experimental.instrumentationHook` option. Note that Sentry will not be initialized if you did not set it up inside `instrumentation.(js|ts)`.'
            ),
          (a.experimental = { instrumentationHook: !0, ...a.experimental }));
      } else
        a.experimental && 'instrumentationHook' in a.experimental
          ? !1 === a.experimental.instrumentationHook &&
            console.warn(
              '[@sentry/nextjs] You set `experimental.instrumentationHook` to `false`. If you are using Next.js version 15 or greater, you can remove that option. If you are using Next.js version 14 or lower, you need to set `experimental.instrumentationHook` in your `next.config.(js|mjs)` to `true` for the SDK to be properly initialized in combination with `instrumentation.(js|ts)`.'
            )
          : (console.log(
              "[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, Next.js will probably show you a warning about the `experimental.instrumentationHook` being set. To silence Next.js' warning, explicitly set the `experimental.instrumentationHook` option in your `next.config.(js|mjs|ts)` to `undefined`. If you are on Next.js version 14 or lower, you can silence this particular warning by explicitly setting the `experimental.instrumentationHook` option in your `next.config.(js|mjs)` to `true`."
            ),
            (a.experimental = { instrumentationHook: !0, ...a.experimental }));
      let s = (function () {
        for (let a of [
          ['src', 'instrumentation-client.ts'],
          ['src', 'instrumentation-client.js'],
          ['instrumentation-client.ts'],
          ['instrumentation-client.js'],
        ])
          try {
            return g.readFileSync(h.join(process.cwd(), ...a), 'utf-8');
          } catch {}
      })();
      void 0 === s ||
        s.includes('onRouterTransitionStart') ||
        b.suppressOnRouterTransitionStartWarning ||
        console.warn(
          '[@sentry/nextjs] ACTION REQUIRED: To instrument navigations, the Sentry SDK requires you to export an `onRouterTransitionStart` hook from your `instrumentation-client.(js|ts)` file. You can do so by adding `export const onRouterTransitionStart = Sentry.captureRouterTransitionStart;` to the file.'
        );
      let t = !1;
      if (r) {
        let { major: a, minor: b, patch: c, prerelease: e } = d.parseSemver(r);
        p = a;
        let f =
          void 0 !== a &&
          void 0 !== b &&
          void 0 !== c &&
          (a > 15 ||
            (15 === a && b > 3) ||
            (15 === a && 3 === b && 0 === c && void 0 === e) ||
            (15 === a && 3 === b && c > 0));
        ((t = f),
          (void 0 !== a &&
            void 0 !== b &&
            void 0 !== c &&
            void 0 !== e &&
            15 === a &&
            3 === b &&
            0 === c &&
            e.startsWith('canary.') &&
            parseInt(e.split('.')[1] || '', 10) >= 28) ||
            f ||
            console.warn(
              `[@sentry/nextjs] WARNING: You are using the Sentry SDK with Turbopack (\`next build --turbo\`). The Sentry SDK is compatible with Turbopack on Next.js version 15.3.0 or later. You are currently on ${r}. Please upgrade to a newer Next.js version to use the Sentry SDK with Turbopack. Note that as Turbopack is still experimental for production builds, some of the Sentry SDK features like source maps will not work. Follow this issue for progress on Sentry + Turbopack: https://github.com/getsentry/sentry-javascript/issues/8105.`
            ));
      }
      return (
        b?._experimental?.useRunAfterProductionCompileHook === !0 &&
          l.supportsProductionCompileHook() &&
          (a?.compiler?.runAfterProductionCompile === void 0
            ? ((a.compiler ??= {}),
              (a.compiler.runAfterProductionCompile = async ({ distDir: a }) => {
                await i.handleRunAfterProductionCompile(
                  { releaseName: q, distDir: a, buildTool: 'turbopack' },
                  b
                );
              }))
            : 'function' == typeof a.compiler.runAfterProductionCompile
              ? (a.compiler.runAfterProductionCompile = new Proxy(
                  a.compiler.runAfterProductionCompile,
                  {
                    async apply(a, c, d) {
                      let { distDir: e } = d[0] ?? { distDir: '.next' };
                      (await a.apply(c, d),
                        await i.handleRunAfterProductionCompile(
                          { releaseName: q, distDir: e, buildTool: 'turbopack' },
                          b
                        ));
                    },
                  }
                ))
              : console.warn(
                  '[@sentry/nextjs] The configured `compiler.runAfterProductionCompile` option is not a function. Will not run source map and release management logic.'
                )),
        t &&
          !b.sourcemaps?.disable &&
          void 0 === a.productionBrowserSourceMaps &&
          (console.log(
            '[@sentry/nextjs] Automatically enabling browser source map generation for turbopack build.'
          ),
          (a.productionBrowserSourceMaps = !0),
          b.sourcemaps?.deleteSourcemapsAfterUpload === void 0 &&
            (console.warn(
              '[@sentry/nextjs] Source maps will be automatically deleted after being uploaded to Sentry. If you want to keep the source maps, set the `sourcemaps.deleteSourcemapsAfterUpload` option to false in `withSentryConfig()`. If you do not want to generate and upload sourcemaps at all, set the `sourcemaps.disable` option to true.'
            ),
            (b.sourcemaps = { ...b.sourcemaps, deleteSourcemapsAfterUpload: !0 }))),
        {
          ...a,
          ...(p && p >= 15
            ? { serverExternalPackages: [...(a.serverExternalPackages || []), ...o] }
            : {
                experimental: {
                  ...a.experimental,
                  serverComponentsExternalPackages: [
                    ...(a.experimental?.serverComponentsExternalPackages || []),
                    ...o,
                  ],
                },
              }),
          webpack: a.webpack,
          ...(t && 1
            ? {
                turbopack: k.constructTurbopackConfig({
                  userNextConfig: a,
                  routeManifest: c,
                  nextJsVersion: r,
                }),
              }
            : {}),
        }
      );
    }
    ((c.DEFAULT_SERVER_EXTERNAL_PACKAGES = o),
      (c.withSentryConfig = function (a, b = {}) {
        let c = a || {};
        return 'function' == typeof c
          ? function (...a) {
              let e = c.apply(this, a);
              return d.isThenable(e) ? e.then((a) => p(a, b)) : p(e, b);
            }
          : p(c, b);
      }));
  },
  42014,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.DEBUG_BUILD = 'undefined' == typeof __SENTRY_DEBUG__ || __SENTRY_DEBUG__));
  },
  84899,
  (a) => {
    'use strict';
    a.s(['parse', () => c]);
    var b = '<unknown>';
    function c(a) {
      return a.split('\n').reduce(function (a, c) {
        var k,
          l,
          m,
          n =
            (function (a) {
              var c = d.exec(a);
              if (!c) return null;
              var f = c[2] && 0 === c[2].indexOf('native'),
                g = c[2] && 0 === c[2].indexOf('eval'),
                h = e.exec(c[2]);
              return (
                g && null != h && ((c[2] = h[1]), (c[3] = h[2]), (c[4] = h[3])),
                {
                  file: f ? null : c[2],
                  methodName: c[1] || b,
                  arguments: f ? [c[2]] : [],
                  lineNumber: c[3] ? +c[3] : null,
                  column: c[4] ? +c[4] : null,
                }
              );
            })(c) ||
            ((k = f.exec(c))
              ? {
                  file: k[2],
                  methodName: k[1] || b,
                  arguments: [],
                  lineNumber: +k[3],
                  column: k[4] ? +k[4] : null,
                }
              : null) ||
            (function (a) {
              var c = g.exec(a);
              if (!c) return null;
              var d = c[3] && c[3].indexOf(' > eval') > -1,
                e = h.exec(c[3]);
              return (
                d && null != e && ((c[3] = e[1]), (c[4] = e[2]), (c[5] = null)),
                {
                  file: c[3],
                  methodName: c[1] || b,
                  arguments: c[2] ? c[2].split(',') : [],
                  lineNumber: c[4] ? +c[4] : null,
                  column: c[5] ? +c[5] : null,
                }
              );
            })(c) ||
            ((l = j.exec(c))
              ? {
                  file: l[2],
                  methodName: l[1] || b,
                  arguments: [],
                  lineNumber: +l[3],
                  column: l[4] ? +l[4] : null,
                }
              : null) ||
            ((m = i.exec(c))
              ? {
                  file: m[3],
                  methodName: m[1] || b,
                  arguments: [],
                  lineNumber: +m[4],
                  column: m[5] ? +m[5] : null,
                }
              : null);
        return (n && a.push(n), a);
      }, []);
    }
    var d =
        /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,
      e = /\((\S*)(?::(\d+))(?::(\d+))\)/,
      f =
        /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
      g =
        /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i,
      h = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i,
      i = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
      j =
        /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  },
  86069,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(84899),
      f = a.r(42014),
      g = d.GLOBAL_OBJ;
    async function h(a, b) {
      try {
        if (!(a.file?.startsWith('webpack-internal:') || a.file?.startsWith('file:'))) return null;
        let c = new URLSearchParams();
        (c.append('isServer', String(!1)),
          c.append('isEdgeServer', String(!1)),
          c.append('isAppDirectory', String(!0)),
          c.append('errorMessage', b.toString()),
          Object.keys(a).forEach((b) => {
            c.append(b, (a[b] ?? '').toString());
          }));
        let e = process.env._sentryBasePath ?? g._sentryBasePath ?? '';
        '' === e || e.match(/^\//) || (e = `/${e}`);
        let f = new AbortController(),
          h = setTimeout(() => f.abort(), 3e3),
          i = await d.suppressTracing(() =>
            fetch(`http://localhost:3000${e}/__nextjs_original-stack-frame?${c.toString()}`, {
              signal: f.signal,
            }).finally(() => {
              clearTimeout(h);
            })
          );
        if (!i.ok || 204 === i.status) return null;
        let j = await i.json();
        return { originalCodeFrame: j.originalCodeFrame, originalStackFrame: j.originalStackFrame };
      } catch (a) {
        return (
          f.DEBUG_BUILD && d.debug.error('Failed to symbolicate event with Next.js dev server', a),
          null
        );
      }
    }
    async function i(a) {
      try {
        let b = {
            frames: a
              .filter((a) => !!a.file)
              .map(
                (a) => (
                  (a.file = a.file.replace(/^rsc:\/\/React\/[^/]+\//, '').replace(/\?\d+$/, '')),
                  {
                    file: a.file,
                    methodName: a.methodName ?? '<unknown>',
                    arguments: [],
                    lineNumber: a.lineNumber ?? 0,
                    column: a.column ?? 0,
                    line1: a.lineNumber ?? 0,
                    column1: a.column ?? 0,
                  }
                )
              ),
            isServer: !1,
            isEdgeServer: !1,
            isAppDirectory: !0,
          },
          c = process.env._sentryBasePath ?? g._sentryBasePath ?? '';
        '' === c || c.match(/^\//) || (c = `/${c}`);
        let e = new AbortController(),
          f = setTimeout(() => e.abort(), 3e3),
          h = await d.suppressTracing(() =>
            fetch(`http://localhost:3000${c}/__nextjs_original-stack-frames`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              signal: e.signal,
              body: JSON.stringify(b),
            }).finally(() => {
              clearTimeout(f);
            })
          );
        if (!h.ok || 204 === h.status) return null;
        return (await h.json()).map((a) => ({
          originalCodeFrame: a.value.originalCodeFrame,
          originalStackFrame: a.value.originalStackFrame,
        }));
      } catch (a) {
        return (
          f.DEBUG_BUILD && d.debug.error('Failed to symbolicate event with Next.js dev server', a),
          null
        );
      }
    }
    c.devErrorSymbolicationEventProcessor = async function a(a, b) {
      'transaction' === a.type &&
        (a.spans = a.spans?.filter((a) => {
          let b = a.data?.['http.url'];
          return 'string' != typeof b || !b.includes('__nextjs_original-stack-frame');
        }));
      try {
        if (
          b.originalException &&
          b.originalException instanceof Error &&
          b.originalException.stack
        ) {
          let c,
            f = e.parse(b.originalException.stack),
            j = g._sentryNextJsVersion;
          if (!j) return a;
          let k = d.parseSemver(j);
          if (k.major > 15 || (15 === k.major && k.minor >= 2)) {
            let b = await i(f);
            if (null === b) return a;
            c = b;
          } else c = await Promise.all(f.map((a) => h(a, b.originalException)));
          a.exception?.values?.[0]?.stacktrace?.frames &&
            (a.exception.values[0].stacktrace.frames = a.exception.values[0].stacktrace.frames.map(
              (a, b, d) => {
                let e = c[d.length - 1 - b];
                if (!e?.originalStackFrame || !e.originalCodeFrame)
                  return {
                    ...a,
                    platform: a.filename?.startsWith('node:internal') ? 'nodejs' : void 0,
                    in_app: !1,
                  };
                let {
                  contextLine: f,
                  preContextLines: g,
                  postContextLines: h,
                } = (function (a) {
                  let b,
                    c = a
                      .replace(
                        /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,
                        ''
                      )
                      .split('\n')
                      .filter((a) => !a.match(/^\s*\|/))
                      .map((a) => ({ line: a, isErrorLine: !!a.match(/^>/) }))
                      .map((a) => ({ ...a, line: a.line.replace(/^.*\|/, '') })),
                    d = [],
                    e = [],
                    f = !1;
                  for (let a of c)
                    a.isErrorLine ? ((b = a.line), (f = !0)) : f ? e.push(a.line) : d.push(a.line);
                  return { contextLine: b, preContextLines: d, postContextLines: e };
                })(e.originalCodeFrame);
                return {
                  ...a,
                  pre_context: g,
                  context_line: f,
                  post_context: h,
                  function: e.originalStackFrame.methodName,
                  filename: e.originalStackFrame.file
                    ? (function (a) {
                        if (!a) return a;
                        let b = a.match(/^webpack-internal:(?:\/+)?(?:\([^)]*\)\/)?(.+)$/);
                        return b ? b[1] : a;
                      })(e.originalStackFrame.file)
                    : void 0,
                  lineno: e.originalStackFrame.lineNumber || e.originalStackFrame.line1 || void 0,
                  colno: e.originalStackFrame.column || e.originalStackFrame.column1 || void 0,
                };
              }
            ));
        }
      } catch {}
      return a;
    };
  },
  27766,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.getVercelEnv = function (a) {
        let b = a ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;
        return b ? `vercel-${b}` : void 0;
      }));
  },
  74020,
  (a, b, c) => {
    (Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' }),
      (c.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill'),
      (c.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill'),
      (c.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction'));
  },
  21337,
  (a, b, c) => {
    'use strict';
    c._ = function (a) {
      return a && a.__esModule ? a : { default: a };
    };
  },
  66216,
  (a, b, c) => {
    'use strict';
    b.exports = ['chrome 64', 'edge 79', 'firefox 67', 'opera 51', 'safari 12'];
  },
  63736,
  (a, b, c) => {
    'use strict';
    (Object.defineProperty(c, '__esModule', { value: !0 }),
      !(function (a, b) {
        for (var c in b) Object.defineProperty(a, c, { enumerable: !0, get: b[c] });
      })(c, {
        APP_BUILD_MANIFEST: function () {
          return u;
        },
        APP_CLIENT_INTERNALS: function () {
          return _;
        },
        APP_PATHS_MANIFEST: function () {
          return r;
        },
        APP_PATH_ROUTES_MANIFEST: function () {
          return s;
        },
        AdapterOutputType: function () {
          return f;
        },
        BARREL_OPTIMIZATION_PREFIX: function () {
          return S;
        },
        BLOCKED_PAGES: function () {
          return N;
        },
        BUILD_ID_FILE: function () {
          return M;
        },
        BUILD_MANIFEST: function () {
          return t;
        },
        CLIENT_PUBLIC_FILES_PATH: function () {
          return O;
        },
        CLIENT_REFERENCE_MANIFEST: function () {
          return T;
        },
        CLIENT_STATIC_FILES_PATH: function () {
          return P;
        },
        CLIENT_STATIC_FILES_RUNTIME_AMP: function () {
          return ab;
        },
        CLIENT_STATIC_FILES_RUNTIME_MAIN: function () {
          return Z;
        },
        CLIENT_STATIC_FILES_RUNTIME_MAIN_APP: function () {
          return $;
        },
        CLIENT_STATIC_FILES_RUNTIME_POLYFILLS: function () {
          return ad;
        },
        CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL: function () {
          return ae;
        },
        CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH: function () {
          return aa;
        },
        CLIENT_STATIC_FILES_RUNTIME_WEBPACK: function () {
          return ac;
        },
        COMPILER_INDEXES: function () {
          return g;
        },
        COMPILER_NAMES: function () {
          return e;
        },
        CONFIG_FILES: function () {
          return L;
        },
        DEFAULT_RUNTIME_WEBPACK: function () {
          return af;
        },
        DEFAULT_SANS_SERIF_FONT: function () {
          return ak;
        },
        DEFAULT_SERIF_FONT: function () {
          return aj;
        },
        DEV_CLIENT_MIDDLEWARE_MANIFEST: function () {
          return I;
        },
        DEV_CLIENT_PAGES_MANIFEST: function () {
          return E;
        },
        DYNAMIC_CSS_MANIFEST: function () {
          return Y;
        },
        EDGE_RUNTIME_WEBPACK: function () {
          return ag;
        },
        EDGE_UNSUPPORTED_NODE_APIS: function () {
          return ap;
        },
        EXPORT_DETAIL: function () {
          return z;
        },
        EXPORT_MARKER: function () {
          return y;
        },
        FUNCTIONS_CONFIG_MANIFEST: function () {
          return v;
        },
        IMAGES_MANIFEST: function () {
          return C;
        },
        INTERCEPTION_ROUTE_REWRITE_MANIFEST: function () {
          return X;
        },
        MIDDLEWARE_BUILD_MANIFEST: function () {
          return V;
        },
        MIDDLEWARE_MANIFEST: function () {
          return F;
        },
        MIDDLEWARE_REACT_LOADABLE_MANIFEST: function () {
          return W;
        },
        MODERN_BROWSERSLIST_TARGET: function () {
          return d.default;
        },
        NEXT_BUILTIN_DOCUMENT: function () {
          return R;
        },
        NEXT_FONT_MANIFEST: function () {
          return x;
        },
        PAGES_MANIFEST: function () {
          return p;
        },
        PHASE_DEVELOPMENT_SERVER: function () {
          return m;
        },
        PHASE_EXPORT: function () {
          return j;
        },
        PHASE_INFO: function () {
          return o;
        },
        PHASE_PRODUCTION_BUILD: function () {
          return k;
        },
        PHASE_PRODUCTION_SERVER: function () {
          return l;
        },
        PHASE_TEST: function () {
          return n;
        },
        PRERENDER_MANIFEST: function () {
          return A;
        },
        REACT_LOADABLE_MANIFEST: function () {
          return J;
        },
        ROUTES_MANIFEST: function () {
          return B;
        },
        RSC_MODULE_TYPES: function () {
          return ao;
        },
        SERVER_DIRECTORY: function () {
          return K;
        },
        SERVER_FILES_MANIFEST: function () {
          return D;
        },
        SERVER_PROPS_ID: function () {
          return ai;
        },
        SERVER_REFERENCE_MANIFEST: function () {
          return U;
        },
        STATIC_PROPS_ID: function () {
          return ah;
        },
        STATIC_STATUS_PAGES: function () {
          return al;
        },
        STRING_LITERAL_DROP_BUNDLE: function () {
          return Q;
        },
        SUBRESOURCE_INTEGRITY_MANIFEST: function () {
          return w;
        },
        SYSTEM_ENTRYPOINTS: function () {
          return aq;
        },
        TRACE_OUTPUT_VERSION: function () {
          return am;
        },
        TURBOPACK_CLIENT_BUILD_MANIFEST: function () {
          return H;
        },
        TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST: function () {
          return G;
        },
        TURBO_TRACE_DEFAULT_MEMORY_LIMIT: function () {
          return an;
        },
        UNDERSCORE_NOT_FOUND_ROUTE: function () {
          return h;
        },
        UNDERSCORE_NOT_FOUND_ROUTE_ENTRY: function () {
          return i;
        },
        WEBPACK_STATS: function () {
          return q;
        },
      }));
    let d = a.r(21337)._(a.r(66216)),
      e = { client: 'client', server: 'server', edgeServer: 'edge-server' };
    var f = (function (a) {
      return (
        (a.PAGES = 'PAGES'),
        (a.PAGES_API = 'PAGES_API'),
        (a.APP_PAGE = 'APP_PAGE'),
        (a.APP_ROUTE = 'APP_ROUTE'),
        (a.PRERENDER = 'PRERENDER'),
        (a.STATIC_FILE = 'STATIC_FILE'),
        (a.MIDDLEWARE = 'MIDDLEWARE'),
        a
      );
    })({});
    let g = { [e.client]: 0, [e.server]: 1, [e.edgeServer]: 2 },
      h = '/_not-found',
      i = '' + h + '/page',
      j = 'phase-export',
      k = 'phase-production-build',
      l = 'phase-production-server',
      m = 'phase-development-server',
      n = 'phase-test',
      o = 'phase-info',
      p = 'pages-manifest.json',
      q = 'webpack-stats.json',
      r = 'app-paths-manifest.json',
      s = 'app-path-routes-manifest.json',
      t = 'build-manifest.json',
      u = 'app-build-manifest.json',
      v = 'functions-config-manifest.json',
      w = 'subresource-integrity-manifest',
      x = 'next-font-manifest',
      y = 'export-marker.json',
      z = 'export-detail.json',
      A = 'prerender-manifest.json',
      B = 'routes-manifest.json',
      C = 'images-manifest.json',
      D = 'required-server-files.json',
      E = '_devPagesManifest.json',
      F = 'middleware-manifest.json',
      G = '_clientMiddlewareManifest.json',
      H = 'client-build-manifest.json',
      I = '_devMiddlewareManifest.json',
      J = 'react-loadable-manifest.json',
      K = 'server',
      L = ['next.config.js', 'next.config.mjs', 'next.config.ts'],
      M = 'BUILD_ID',
      N = ['/_document', '/_app', '/_error'],
      O = 'public',
      P = 'static',
      Q = '__NEXT_DROP_CLIENT_FILE__',
      R = '__NEXT_BUILTIN_DOCUMENT__',
      S = '__barrel_optimize__',
      T = 'client-reference-manifest',
      U = 'server-reference-manifest',
      V = 'middleware-build-manifest',
      W = 'middleware-react-loadable-manifest',
      X = 'interception-route-rewrite-manifest',
      Y = 'dynamic-css-manifest',
      Z = 'main',
      $ = '' + Z + '-app',
      _ = 'app-pages-internals',
      aa = 'react-refresh',
      ab = 'amp',
      ac = 'webpack',
      ad = 'polyfills',
      ae = Symbol(ad),
      af = 'webpack-runtime',
      ag = 'edge-runtime-webpack',
      ah = '__N_SSG',
      ai = '__N_SSP',
      aj = {
        name: 'Times New Roman',
        xAvgCharWidth: 821,
        azAvgWidth: 854.3953488372093,
        unitsPerEm: 2048,
      },
      ak = { name: 'Arial', xAvgCharWidth: 904, azAvgWidth: 934.5116279069767, unitsPerEm: 2048 },
      al = ['/500'],
      am = 1,
      an = 6e3,
      ao = { client: 'client', server: 'server' },
      ap = [
        'clearImmediate',
        'setImmediate',
        'BroadcastChannel',
        'ByteLengthQueuingStrategy',
        'CompressionStream',
        'CountQueuingStrategy',
        'DecompressionStream',
        'DomException',
        'MessageChannel',
        'MessageEvent',
        'MessagePort',
        'ReadableByteStreamController',
        'ReadableStreamBYOBRequest',
        'ReadableStreamDefaultController',
        'TransformStreamDefaultController',
        'WritableStreamDefaultController',
      ],
      aq = new Set([Z, aa, ab, $]);
    ('function' == typeof c.default || ('object' == typeof c.default && null !== c.default)) &&
      void 0 === c.default.__esModule &&
      (Object.defineProperty(c.default, '__esModule', { value: !0 }),
      Object.assign(c.default, c),
      (b.exports = c.default));
  },
  32828,
  (a, b, c) => {
    b.exports = a.r(63736);
  },
  78768,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32828);
    c.isBuild = function () {
      return process.env.NEXT_PHASE === d.PHASE_PRODUCTION_BUILD;
    };
  },
  69461,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(14747);
    c.distDirRewriteFramesIntegration = d.defineIntegration(({ distDirName: a }) => {
      let b = e.resolve(a).replace(/(\/|\\)$/, ''),
        c = new RegExp(d.escapeStringForRegex(b));
      return {
        ...d.rewriteFramesIntegration({
          iteratee: (a) => ((a.filename = a.filename?.replace(c, 'app:///_next')), a),
        }),
        name: 'DistDirRewriteFrames',
      };
    });
  },
  8811,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(42014);
    c.flushSafelyWithTimeout = async function () {
      try {
        (e.DEBUG_BUILD && d.debug.log('Flushing events...'),
          await d.flush(2e3),
          e.DEBUG_BUILD && d.debug.log('Done flushing events'));
      } catch (a) {
        e.DEBUG_BUILD && d.debug.log('Error while flushing events:\n', a);
      }
    };
  },
  3960,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(8811);
    c.captureUnderscoreErrorException = async function (a) {
      let { req: b, res: c, err: f } = a,
        g = c?.statusCode || a.statusCode;
      if ((g && g < 500) || !a.pathname) return Promise.resolve();
      (d.withScope((a) => {
        if (b) {
          let c = d.httpRequestToRequestData(b);
          a.setSDKProcessingMetadata({ normalizedRequest: c });
        }
        d.captureException(f || `_error.js called with falsy error (${f})`, {
          mechanism: {
            type: 'instrument',
            handled: !1,
            data: { function: '_error.getInitialProps' },
          },
        });
      }),
        d.vercelWaitUntil(e.flushSafelyWithTimeout()));
    };
  },
  1659,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(74020);
    ((c.callDataFetcherTraced = async function a(a, b) {
      try {
        return await a(...b);
      } catch (a) {
        throw (d.captureException(a, { mechanism: { handled: !1 } }), a);
      }
    }),
      (c.maybeExtractSynchronousParamsAndSearchParams = function (a) {
        let b = a && 'object' == typeof a && 'params' in a ? a.params : void 0;
        d.isThenable(b) && (b = void 0);
        let c = a && 'object' == typeof a && 'searchParams' in a ? a.searchParams : void 0;
        return (d.isThenable(c) && (c = void 0), { params: b, searchParams: c });
      }),
      (c.withErrorInstrumentation = function (a) {
        return async function (...b) {
          try {
            return await a.apply(this, b);
          } catch (a) {
            throw (d.captureException(a, { mechanism: { handled: !1 } }), a);
          }
        };
      }),
      (c.withTracedServerSideDataFetcher = function (a, b, c, f) {
        return async function (...c) {
          let g = d.httpRequestToRequestData(b);
          (d
            .getCurrentScope()
            .setTransactionName(`${f.dataFetchingMethodName} (${f.dataFetcherRouteName})`),
            d.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest: g }));
          let h = d.getActiveSpan();
          h &&
            '/_error' !== f.requestedRouteName &&
            d
              .getRootSpan(h)
              .setAttribute(e.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, f.requestedRouteName);
          let { 'sentry-trace': i, baggage: j } = d.getTraceData();
          return { sentryTrace: i, baggage: j, data: await a.apply(this, c) };
        };
      }));
  },
  44006,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78768),
      e = a.r(1659);
    c.wrapGetStaticPropsWithSentry = function (a, b) {
      return new Proxy(a, {
        apply: async (a, b, c) => {
          if (d.isBuild()) return a.apply(b, c);
          let f = e.withErrorInstrumentation(a);
          return e.callDataFetcherTraced(f, c);
        },
      });
    };
  },
  74700,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78768),
      e = a.r(1659);
    c.wrapGetInitialPropsWithSentry = function (a) {
      return new Proxy(a, {
        apply: async (a, b, c) => {
          if (d.isBuild()) return a.apply(b, c);
          let [f] = c,
            { req: g, res: h } = f,
            i = e.withErrorInstrumentation(a);
          if (!g || !h) return i.apply(b, c);
          {
            let a = e.withTracedServerSideDataFetcher(i, g, h, {
                dataFetcherRouteName: f.pathname,
                requestedRouteName: f.pathname,
                dataFetchingMethodName: 'getInitialProps',
              }),
              { data: d, baggage: j, sentryTrace: k } = (await a.apply(b, c)) ?? {};
            return (
              'object' == typeof d &&
                null !== d &&
                (k && (d._sentryTraceData = k), j && (d._sentryBaggage = j)),
              d
            );
          }
        },
      });
    };
  },
  68379,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78768),
      e = a.r(1659);
    c.wrapAppGetInitialPropsWithSentry = function (a) {
      return new Proxy(a, {
        apply: async (a, b, c) => {
          if (d.isBuild()) return a.apply(b, c);
          let [f] = c,
            { req: g, res: h } = f.ctx,
            i = e.withErrorInstrumentation(a);
          if (!g || !h) return i.apply(b, c);
          {
            let a = e.withTracedServerSideDataFetcher(i, g, h, {
                dataFetcherRouteName: '/_app',
                requestedRouteName: f.ctx.pathname,
                dataFetchingMethodName: 'getInitialProps',
              }),
              { data: d, sentryTrace: j, baggage: k } = await a.apply(b, c);
            return (
              'object' == typeof d &&
                null !== d &&
                (d.pageProps || (d.pageProps = {}),
                j && (d.pageProps._sentryTraceData = j),
                k && (d.pageProps._sentryBaggage = k)),
              d
            );
          }
        },
      });
    };
  },
  19353,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78768),
      e = a.r(1659);
    c.wrapDocumentGetInitialPropsWithSentry = function (a) {
      return new Proxy(a, {
        apply: async (a, b, c) => {
          if (d.isBuild()) return a.apply(b, c);
          let [f] = c,
            { req: g, res: h } = f,
            i = e.withErrorInstrumentation(a);
          if (!g || !h) return i.apply(b, c);
          {
            let a = e.withTracedServerSideDataFetcher(i, g, h, {
                dataFetcherRouteName: '/_document',
                requestedRouteName: f.pathname,
                dataFetchingMethodName: 'getInitialProps',
              }),
              { data: d } = await a.apply(b, c);
            return d;
          }
        },
      });
    };
  },
  43173,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78768),
      e = a.r(1659);
    c.wrapErrorGetInitialPropsWithSentry = function (a) {
      return new Proxy(a, {
        apply: async (a, b, c) => {
          if (d.isBuild()) return a.apply(b, c);
          let [f] = c,
            { req: g, res: h } = f,
            i = e.withErrorInstrumentation(a);
          if (!g || !h) return i.apply(b, c);
          {
            let a = e.withTracedServerSideDataFetcher(i, g, h, {
                dataFetcherRouteName: '/_error',
                requestedRouteName: f.pathname,
                dataFetchingMethodName: 'getInitialProps',
              }),
              { data: d, baggage: j, sentryTrace: k } = await a.apply(b, c);
            return (
              'object' == typeof d &&
                null !== d &&
                (k && (d._sentryTraceData = k), j && (d._sentryBaggage = j)),
              d
            );
          }
        },
      });
    };
  },
  47869,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(78768),
      e = a.r(1659);
    c.wrapGetServerSidePropsWithSentry = function (a, b) {
      return new Proxy(a, {
        apply: async (a, c, f) => {
          if (d.isBuild()) return a.apply(c, f);
          let [g] = f,
            { req: h, res: i } = g,
            j = e.withErrorInstrumentation(a),
            k = e.withTracedServerSideDataFetcher(j, h, i, {
              dataFetcherRouteName: b,
              requestedRouteName: b,
              dataFetchingMethodName: 'getServerSideProps',
            }),
            { data: l, baggage: m, sentryTrace: n } = await k.apply(c, f);
          return (
            'object' == typeof l &&
              null !== l &&
              'props' in l &&
              (n && (l.props._sentryTraceData = n), m && (l.props._sentryBaggage = m)),
            l
          );
        },
      });
    };
  },
  48787,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723);
    ((c.isNotFoundNavigationError = function (a) {
      return d.isError(a) && ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(a.digest);
    }),
      (c.isRedirectNavigationError = function (a) {
        return d.isError(a) && 'string' == typeof a.digest && a.digest.startsWith('NEXT_REDIRECT;');
      }));
  },
  1104,
  (a, b, c) => {
    let d;
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let e = a.r(32723),
      f = a.r(42014),
      g = a.r(74020),
      h = new WeakMap(),
      i = new WeakMap();
    ((c.commonObjectToIsolationScope = function (a) {
      if ('object' != typeof a || !a) return new e.Scope();
      {
        let b = i.get(a);
        if (b) return b;
        {
          let b = new e.Scope();
          return (i.set(a, b), b);
        }
      }
    }),
      (c.commonObjectToPropagationContext = function (a, b) {
        if ('object' != typeof a || !a) return b;
        {
          let c = h.get(a);
          return c || (h.set(a, b), b);
        }
      }),
      (c.dropNextjsRootContext = function () {
        let a = e.getActiveSpan();
        if (a) {
          let b = e.getRootSpan(a),
            c = e.spanToJSON(b).data;
          c?.['next.span_type'] &&
            e.getRootSpan(a)?.setAttribute(g.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, !0);
        }
      }),
      (c.escapeNextjsTracing = function (a) {
        let b = e.GLOBAL_OBJ.AsyncLocalStorage;
        return b
          ? (d || (d = new b()), d.getStore())
            ? a()
            : e.startNewTrace(() => d.run(!0, () => a()))
          : (f.DEBUG_BUILD &&
              e.debug.warn(
                "Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage."
              ),
            a());
      }));
  },
  91700,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = {
        FORWARDED_PROTO: 'x-forwarded-proto',
        FORWARDED_HOST: 'x-forwarded-host',
        HOST: 'host',
        REFERER: 'referer',
      };
    function f(a, b) {
      if (!b || 'object' != typeof b) return a;
      let c = a;
      for (let [a, d] of Object.entries(b)) c = c.split(`[${a}]`).join(encodeURIComponent(d));
      return c;
    }
    function g(a) {
      let b = a.split('/').filter((a) => a && !(a.startsWith('(') && a.endsWith(')')));
      return b.length > 0 ? `/${b.join('/')}` : '/';
    }
    function h(a, b, c, h) {
      let i = f(a, b),
        j = h ?? g(i),
        k = c?.[e.FORWARDED_PROTO],
        l = c?.[e.FORWARDED_HOST] || c?.[e.HOST];
      if (!k || !l) return j;
      let m = `${k}://${l}${j}`,
        n = d.parseStringToURLObject(m);
      return n ? d.getSanitizedUrlStringFromUrlObject(n) : j;
    }
    function i(a) {
      let b = a?.[e.REFERER];
      if (b)
        try {
          let a = new URL(b);
          return d.getSanitizedUrlStringFromUrlObject(a);
        } catch {
          return;
        }
    }
    ((c.buildUrlFromComponentRoute = h),
      (c.extractSanitizedUrlFromRefererHeader = i),
      (c.getSanitizedRequestUrl = function (a, b, c, d) {
        let e = i(c);
        return e || h(a, b, c, d);
      }),
      (c.sanitizeRoutePath = g),
      (c.substituteRouteParams = f));
  },
  15619,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(48787),
      f = a.r(8811),
      g = a.r(74020),
      h = a.r(1104),
      i = a.r(91700),
      j = a.r(1659);
    c.wrapServerComponentWithSentry = function (a, b) {
      let { componentRoute: c, componentType: k } = b;
      return new Proxy(a, {
        apply: (a, l, m) => {
          let n, o;
          d.getActiveSpan()?.spanContext().traceId;
          let p = h.commonObjectToIsolationScope(b.headers),
            q = d.getActiveSpan();
          if (q) {
            let a = d.getRootSpan(q),
              { scope: b } = d.getCapturedScopesOnSpan(a);
            d.setCapturedScopesOnSpan(a, b ?? new d.Scope(), p);
            let c = d.spanToJSON(a);
            c.data && 'http.target' in c.data && (n = c.data['http.target']?.toString());
          }
          let r = b.headers ? d.winterCGHeadersToDict(b.headers) : void 0;
          if (d.getClient()?.getOptions().sendDefaultPii) {
            let a = m[0],
              { params: b } = j.maybeExtractSynchronousParamsAndSearchParams(a);
            o = b;
          }
          return (
            p.setSDKProcessingMetadata({
              normalizedRequest: { headers: r, url: i.getSanitizedRequestUrl(c, o, r, n) },
            }),
            d.withIsolationScope(p, () =>
              d.withScope((b) => {
                b.setTransactionName(`${k} Server Component (${c})`);
                let h = d.getActiveSpan();
                if (h) {
                  let a = d.getRootSpan(h),
                    b = r?.['sentry-trace'];
                  b && a.setAttribute(g.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, b);
                }
                return d.startSpanManual(
                  {
                    op: 'function.nextjs',
                    name: `${k} Server Component (${c})`,
                    attributes: {
                      [d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',
                      [d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',
                      'sentry.nextjs.ssr.function.type': k,
                      'sentry.nextjs.ssr.function.route': c,
                    },
                  },
                  (b) =>
                    d.handleCallbackErrors(
                      () => a.apply(l, m),
                      (a) => {
                        e.isNotFoundNavigationError(a)
                          ? b.setStatus({ code: d.SPAN_STATUS_ERROR, message: 'not_found' })
                          : e.isRedirectNavigationError(a)
                            ? b.setStatus({ code: d.SPAN_STATUS_OK })
                            : (b.setStatus({
                                code: d.SPAN_STATUS_ERROR,
                                message: 'internal_error',
                              }),
                              d.captureException(a, { mechanism: { handled: !1 } }));
                      },
                      () => {
                        (b.end(), d.vercelWaitUntil(f.flushSafelyWithTimeout()));
                      }
                    )
                );
              })
            )
          );
        },
      });
    };
  },
  74140,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(48787),
      f = a.r(8811);
    (a.r(1104),
      (c.wrapRouteHandlerWithSentry = function (a, b) {
        let { method: c, parameterizedRoute: g, headers: h } = b;
        return new Proxy(a, {
          apply: async (a, b, h) => {
            let i = d.getActiveSpan(),
              j = i ? d.getRootSpan(i) : void 0;
            return d.withIsolationScope(d.getIsolationScope(), () =>
              d.withScope(async (k) => {
                k.setTransactionName(`${c} ${g}`);
                let l = await d.handleCallbackErrors(
                  () => a.apply(b, h),
                  (a) => {
                    e.isRedirectNavigationError(a) ||
                      (e.isNotFoundNavigationError(a)
                        ? (i && d.setHttpStatus(i, 404), j && d.setHttpStatus(j, 404))
                        : d.captureException(a, { mechanism: { handled: !1 } }));
                  },
                  () => {
                    d.vercelWaitUntil(f.flushSafelyWithTimeout());
                  }
                );
                try {
                  l.status &&
                    (i && d.setHttpStatus(i, l.status), j && d.setHttpStatus(j, l.status));
                } catch {}
                return l;
              })
            );
          },
        });
      }));
  },
  99203,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723);
    c.wrapApiHandlerWithSentryVercelCrons = function (a, b) {
      return new Proxy(a, {
        apply: (a, c, e) => {
          let f;
          if (!e?.[0]) return a.apply(c, e);
          let [g] = e,
            h = 'nextUrl' in g ? g.nextUrl.pathname : g.url,
            i = 'nextUrl' in g ? g.headers.get('user-agent') : g.headers['user-agent'];
          if (!b || !i?.includes('vercel-cron')) return a.apply(c, e);
          let j = b.find((a) => a.path === h);
          if (!j?.path || !j.schedule) return a.apply(c, e);
          let k = j.path,
            l = d.captureCheckIn(
              { monitorSlug: k, status: 'in_progress' },
              { maxRuntime: 720, schedule: { type: 'crontab', value: j.schedule } }
            ),
            m = Date.now() / 1e3,
            n = () => {
              d.captureCheckIn({
                checkInId: l,
                monitorSlug: k,
                status: 'error',
                duration: Date.now() / 1e3 - m,
              });
            };
          try {
            f = a.apply(c, e);
          } catch (a) {
            throw (n(), a);
          }
          return (
            'object' == typeof f && null !== f && 'then' in f
              ? Promise.resolve(f).then(
                  () => {
                    d.captureCheckIn({
                      checkInId: l,
                      monitorSlug: k,
                      status: 'ok',
                      duration: Date.now() / 1e3 - m,
                    });
                  },
                  () => {
                    n();
                  }
                )
              : d.captureCheckIn({
                  checkInId: l,
                  monitorSlug: k,
                  status: 'ok',
                  duration: Date.now() / 1e3 - m,
                }),
            f
          );
        },
      });
    };
  },
  82307,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(8811);
    c.wrapMiddlewareWithSentry = function (a) {
      return new Proxy(a, {
        apply: async (a, b, c) => {
          let f =
            '_sentryRewritesTunnelPath' in globalThis
              ? globalThis._sentryRewritesTunnelPath
              : void 0;
          if (f && 'string' == typeof f) {
            let a = c[0];
            if (a instanceof Request && new URL(a.url).pathname.startsWith(f))
              return new Response(null, { status: 200, headers: { 'x-middleware-next': '1' } });
          }
          return d.withIsolationScope((f) => {
            let g,
              h,
              i = c[0],
              j = d.getCurrentScope();
            (i instanceof Request
              ? (f.setSDKProcessingMetadata({
                  normalizedRequest: d.winterCGRequestToRequestData(i),
                }),
                (g = `middleware ${i.method} ${new URL(i.url).pathname}`),
                (h = 'url'))
              : ((g = 'middleware'), (h = 'component')),
              j.setTransactionName(g));
            let k = d.getActiveSpan();
            if (k) {
              ((g = 'middleware'), (h = 'component'));
              let a = d.getRootSpan(k);
              a && d.setCapturedScopesOnSpan(a, j, f);
            }
            return d.startSpan(
              {
                name: g,
                op: 'http.server.middleware',
                attributes: {
                  [d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: h,
                  [d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]:
                    'auto.function.nextjs.wrapMiddlewareWithSentry',
                },
              },
              () =>
                d.handleCallbackErrors(
                  () => a.apply(b, c),
                  (a) => {
                    d.captureException(a, { mechanism: { type: 'instrument', handled: !1 } });
                  },
                  () => {
                    d.vercelWaitUntil(e.flushSafelyWithTimeout());
                  }
                )
            );
          });
        },
      });
    };
  },
  21183,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723);
    c.wrapPageComponentWithSentry = function (a) {
      return 'function' == typeof a && a?.prototype?.isReactComponent
        ? class extends a {
            render(...a) {
              return d.withIsolationScope(() => {
                let b = d.getCurrentScope(),
                  c =
                    'object' == typeof this.props &&
                    null !== this.props &&
                    '_sentryTraceData' in this.props &&
                    'string' == typeof this.props._sentryTraceData
                      ? this.props._sentryTraceData
                      : void 0;
                if (c) {
                  let a = d.extractTraceparentData(c);
                  b.setContext('trace', { span_id: a?.parentSpanId, trace_id: a?.traceId });
                }
                try {
                  return super.render(...a);
                } catch (a) {
                  throw (d.captureException(a, { mechanism: { handled: !1 } }), a);
                }
              });
            }
          }
        : 'function' == typeof a
          ? new Proxy(a, {
              apply: (a, b, c) =>
                d.withIsolationScope(() => {
                  let e = d.getCurrentScope(),
                    f = c?.[0]?._sentryTraceData;
                  if (f) {
                    let a = d.extractTraceparentData(f);
                    e.setContext('trace', { span_id: a?.parentSpanId, trace_id: a?.traceId });
                  }
                  try {
                    return a.apply(b, c);
                  } catch (a) {
                    throw (d.captureException(a, { mechanism: { handled: !1 } }), a);
                  }
                }),
            })
          : a;
    };
  },
  96935,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(48787),
      f = a.r(74020),
      g = a.r(1104),
      h = a.r(91700),
      i = a.r(1659);
    c.wrapGenerationFunctionWithSentry = function (a, b) {
      let {
        requestAsyncStorage: c,
        componentRoute: j,
        componentType: k,
        generationFunctionIdentifier: l,
      } = b;
      return new Proxy(a, {
        apply: (a, b, m) => {
          let n,
            o,
            p,
            q = d.getActiveSpan()?.spanContext().traceId;
          try {
            n = c?.getStore()?.headers;
          } catch {}
          let r = g.commonObjectToIsolationScope(n),
            s = d.getActiveSpan();
          if (s) {
            let a = d.getRootSpan(s),
              { scope: b } = d.getCapturedScopesOnSpan(a);
            d.setCapturedScopesOnSpan(a, b ?? new d.Scope(), r);
            let c = d.spanToJSON(a);
            c.data && 'http.target' in c.data && (o = c.data['http.target']);
          }
          let t = n ? d.winterCGHeadersToDict(n) : void 0;
          if (d.getClient()?.getOptions().sendDefaultPii) {
            let a = m[0],
              { params: b, searchParams: c } = i.maybeExtractSynchronousParamsAndSearchParams(a);
            p = { params: b, searchParams: c };
          }
          return d.withIsolationScope(r, () =>
            d.withScope((c) => {
              (c.setTransactionName(`${k}.${l} (${j})`),
                r.setSDKProcessingMetadata({
                  normalizedRequest: {
                    headers: t,
                    url: h.getSanitizedRequestUrl(j, p?.params, t, o),
                  },
                }));
              let i = d.getActiveSpan();
              if (i) {
                let a = d.getRootSpan(i),
                  b = t?.['sentry-trace'];
                b && a.setAttribute(f.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, b);
              }
              let s = g.commonObjectToPropagationContext(
                n,
                d.propagationContextFromHeaders(t?.['sentry-trace'], t?.baggage)
              );
              return (
                q && (s.traceId = q),
                c.setPropagationContext(s),
                c.setExtra('route_data', p),
                d.startSpanManual(
                  {
                    op: 'function.nextjs',
                    name: `${k}.${l} (${j})`,
                    attributes: {
                      [d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',
                      [d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',
                      'sentry.nextjs.ssr.function.type': l,
                      'sentry.nextjs.ssr.function.route': j,
                    },
                  },
                  (c) =>
                    d.handleCallbackErrors(
                      () => a.apply(b, m),
                      (a) => {
                        e.isNotFoundNavigationError(a)
                          ? (c.setStatus({ code: d.SPAN_STATUS_ERROR, message: 'not_found' }),
                            d
                              .getRootSpan(c)
                              .setStatus({ code: d.SPAN_STATUS_ERROR, message: 'not_found' }))
                          : e.isRedirectNavigationError(a)
                            ? c.setStatus({ code: d.SPAN_STATUS_OK })
                            : (c.setStatus({
                                code: d.SPAN_STATUS_ERROR,
                                message: 'internal_error',
                              }),
                              d
                                .getRootSpan(c)
                                .setStatus({
                                  code: d.SPAN_STATUS_ERROR,
                                  message: 'internal_error',
                                }),
                              d.captureException(a, { mechanism: { handled: !1 } }));
                      },
                      () => {
                        c.end();
                      }
                    )
                )
              );
            })
          );
        },
      });
    };
  },
  3708,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(8811),
      f = a.r(42014),
      g = a.r(48787);
    async function h(a, b, c) {
      return d.withIsolationScope(async (h) => {
        let i,
          j,
          k = d.getClient()?.getOptions().sendDefaultPii,
          l = {};
        try {
          let a = await b.headers;
          ((i = a?.get('sentry-trace') ?? void 0),
            (j = a?.get('baggage')),
            a?.forEach((a, b) => {
              l[b] = a;
            }));
        } catch {
          f.DEBUG_BUILD &&
            d.debug.warn(
              "Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request."
            );
        }
        return (
          h.setTransactionName(`serverAction/${a}`),
          h.setSDKProcessingMetadata({ normalizedRequest: { headers: l } }),
          (d.getActiveSpan() ? (a, b) => b() : d.continueTrace)(
            { sentryTrace: i, baggage: j },
            async () => {
              try {
                return await d.startSpan(
                  {
                    op: 'function.server_action',
                    name: `serverAction/${a}`,
                    forceTransaction: !0,
                    attributes: { [d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route' },
                  },
                  async (a) => {
                    let e = await d.handleCallbackErrors(c, (b) => {
                      g.isNotFoundNavigationError(b)
                        ? a.setStatus({ code: d.SPAN_STATUS_ERROR, message: 'not_found' })
                        : g.isRedirectNavigationError(b) ||
                          (a.setStatus({ code: d.SPAN_STATUS_ERROR, message: 'internal_error' }),
                          d.captureException(b, { mechanism: { handled: !1 } }));
                    });
                    return (
                      (void 0 !== b.recordResponse ? b.recordResponse : k) &&
                        d.getIsolationScope().setExtra('server_action_result', e),
                      b.formData &&
                        b.formData.forEach((a, b) => {
                          d.getIsolationScope().setExtra(
                            `server_action_form_data.${b}`,
                            'string' == typeof a ? a : '[non-string value]'
                          );
                        }),
                      e
                    );
                  }
                );
              } finally {
                d.vercelWaitUntil(e.flushSafelyWithTimeout());
              }
            }
          )
        );
      });
    }
    c.withServerActionInstrumentation = function (...a) {
      if ('function' == typeof a[1]) {
        let [b, c] = a;
        return h(b, {}, c);
      }
      {
        let [b, c, d] = a;
        return h(b, c, d);
      }
    };
  },
  85419,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(8811);
    c.captureRequestError = function (a, b, c) {
      d.withScope((f) => {
        (f.setSDKProcessingMetadata({
          normalizedRequest: { headers: d.headersToDict(b.headers), method: b.method },
        }),
          f.setContext('nextjs', {
            request_path: b.path,
            router_kind: c.routerKind,
            router_path: c.routePath,
            route_type: c.routeType,
          }),
          f.setTransactionName(c.routePath),
          d.captureException(a, { mechanism: { handled: !1 } }),
          d.vercelWaitUntil(e.flushSafelyWithTimeout()));
      });
    };
  },
  55046,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(32723),
      e = a.r(8811),
      f = a.r(1104);
    c.wrapApiHandlerWithSentry = function (a, b) {
      return new Proxy(a, {
        apply: (a, c, g) => (
          f.dropNextjsRootContext(),
          f.escapeNextjsTracing(() => {
            let [f, h] = g;
            return f
              ? h
                ? f.__withSentry_applied__
                  ? a.apply(c, g)
                  : ((f.__withSentry_applied__ = !0),
                    d.withIsolationScope((i) =>
                      (d.getActiveSpan() ? (a, b) => b() : d.continueTrace)(
                        {
                          sentryTrace:
                            f.headers && d.isString(f.headers['sentry-trace'])
                              ? f.headers['sentry-trace']
                              : void 0,
                          baggage: f.headers?.baggage,
                        },
                        () => {
                          let j = `${(f.method || 'GET').toUpperCase()} `,
                            k = d.httpRequestToRequestData(f);
                          return (
                            i.setSDKProcessingMetadata({ normalizedRequest: k }),
                            i.setTransactionName(`${j}${b}`),
                            d.startSpanManual(
                              {
                                name: `${j}${b}`,
                                op: 'http.server',
                                forceTransaction: !0,
                                attributes: {
                                  [d.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',
                                  [d.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.nextjs',
                                },
                              },
                              async (b) => {
                                h.end = new Proxy(h.end, {
                                  apply: (a, c, f) => (
                                    d.setHttpStatus(b, h.statusCode),
                                    b.end(),
                                    d.vercelWaitUntil(e.flushSafelyWithTimeout()),
                                    a.apply(c, f)
                                  ),
                                });
                                try {
                                  return await a.apply(c, g);
                                } catch (f) {
                                  let c = d.objectify(f);
                                  throw (
                                    d.captureException(c, {
                                      mechanism: {
                                        type: 'instrument',
                                        handled: !1,
                                        data: { wrapped_handler: a.name, function: 'withSentry' },
                                      },
                                    }),
                                    d.setHttpStatus(b, 500),
                                    b.end(),
                                    await e.flushSafelyWithTimeout(),
                                    c
                                  );
                                }
                              }
                            )
                          );
                        }
                      )
                    ))
                : (d.debug.log(
                    `Wrapped API handler on route "${b}" was not passed a response object. Will not instrument.`
                  ),
                  a.apply(c, g))
              : (d.debug.log(
                  `Wrapped API handler on route "${b}" was not passed a request object. Will not instrument.`
                ),
                a.apply(c, g));
          })
        ),
      });
    };
  },
  15700,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(77674),
      e = a.r(79154),
      f = a.r(32723),
      g = a.r(76341),
      h = a.r(39786),
      i = a.r(42014);
    a.r(86069);
    let j = a.r(27766),
      k = a.r(74020),
      l = a.r(78768),
      m = a.r(69461),
      n = a.r(3960),
      o = a.r(44006),
      p = a.r(74700),
      q = a.r(68379),
      r = a.r(19353),
      s = a.r(43173),
      t = a.r(47869),
      u = a.r(15619),
      v = a.r(74140),
      w = a.r(99203),
      x = a.r(82307),
      y = a.r(21183),
      z = a.r(96935),
      A = a.r(3708),
      B = a.r(85419),
      C = a.r(55046),
      D = f.GLOBAL_OBJ;
    ((c.captureUnderscoreErrorException = n.captureUnderscoreErrorException),
      (c.wrapGetStaticPropsWithSentry = o.wrapGetStaticPropsWithSentry),
      (c.wrapGetInitialPropsWithSentry = p.wrapGetInitialPropsWithSentry),
      (c.wrapAppGetInitialPropsWithSentry = q.wrapAppGetInitialPropsWithSentry),
      (c.wrapDocumentGetInitialPropsWithSentry = r.wrapDocumentGetInitialPropsWithSentry),
      (c.wrapErrorGetInitialPropsWithSentry = s.wrapErrorGetInitialPropsWithSentry),
      (c.wrapGetServerSidePropsWithSentry = t.wrapGetServerSidePropsWithSentry),
      (c.wrapServerComponentWithSentry = u.wrapServerComponentWithSentry),
      (c.wrapRouteHandlerWithSentry = v.wrapRouteHandlerWithSentry),
      (c.wrapApiHandlerWithSentryVercelCrons = w.wrapApiHandlerWithSentryVercelCrons),
      (c.wrapMiddlewareWithSentry = x.wrapMiddlewareWithSentry),
      (c.wrapPageComponentWithSentry = y.wrapPageComponentWithSentry),
      (c.wrapGenerationFunctionWithSentry = z.wrapGenerationFunctionWithSentry),
      (c.withServerActionInstrumentation = A.withServerActionInstrumentation),
      (c.captureRequestError = B.captureRequestError),
      (c.wrapApiHandlerWithSentry = C.wrapApiHandlerWithSentry),
      (c.ErrorBoundary = (a) =>
        a.children ? ('function' == typeof a.children ? a.children() : a.children) : null),
      (c.createReduxEnhancer = function () {
        return (a) => a;
      }),
      (c.init = function (a) {
        if (l.isBuild()) return;
        let b = g
          .getDefaultIntegrations(a)
          .filter((a) => 'Http' !== a.name)
          .concat(g.httpIntegration({ disableIncomingRequestSpans: !0 }));
        ((process.env.NEXT_OTEL_FETCH_DISABLED = '1'),
          b.push(m.distDirRewriteFramesIntegration({ distDirName: '.next' })));
        let c = {
          environment: process.env.SENTRY_ENVIRONMENT || j.getVercelEnv(!1) || 'production',
          release: '00ee10857f6757b115ef0e493e592c555dbd4df8',
          defaultIntegrations: b,
          ...a,
        };
        if (
          (i.DEBUG_BUILD && c.debug && f.debug.enable(),
          i.DEBUG_BUILD && f.debug.log('Initializing SDK...'),
          f.getClient())
        ) {
          i.DEBUG_BUILD && f.debug.log('SDK already initialized');
          return;
        }
        f.applySdkMetadata(c, 'nextjs', ['nextjs', 'node']);
        let n = g.init(c);
        (n?.on('beforeSampling', ({ spanAttributes: a }, b) => {
          (('string' == typeof a[e.SEMATTRS_HTTP_TARGET] &&
            a[e.SEMATTRS_HTTP_TARGET].includes('sentry_key') &&
            a[e.SEMATTRS_HTTP_TARGET].includes('sentry_client')) ||
            ('string' == typeof a[e.ATTR_URL_QUERY] &&
              a[e.ATTR_URL_QUERY].includes('sentry_key') &&
              a[e.ATTR_URL_QUERY].includes('sentry_client'))) &&
            (b.decision = !1);
        }),
          n?.on('spanStart', (a) => {
            let b = f.spanToJSON(a).data;
            if ('string' == typeof b?.['next.route']) {
              let c = f.getRootSpan(a),
                d = f.spanToJSON(c).data;
              if (
                (d?.[e.ATTR_HTTP_REQUEST_METHOD] || d?.[e.SEMATTRS_HTTP_METHOD]) &&
                !d?.[e.ATTR_HTTP_ROUTE]
              ) {
                let a = b['next.route'].replace(/\/route$/, '');
                (c.updateName(a),
                  c.setAttribute(e.ATTR_HTTP_ROUTE, a),
                  c.setAttribute('next.route', a));
              }
            }
            if (
              (b?.['next.span_type'] !== void 0 &&
                a.setAttribute(f.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto'),
              b?.['next.span_type'] === 'BaseServer.handleRequest' && a === f.getRootSpan(a))
            ) {
              let b = f.getCapturedScopesOnSpan(a),
                c = (b.isolationScope || f.getIsolationScope()).clone(),
                e = b.scope || f.getCurrentScope(),
                g = h.getScopesFromContext(d.context.active());
              (g && (g.isolationScope = c), f.setCapturedScopesOnSpan(a, e, c));
            }
          }),
          f.getGlobalScope().addEventProcessor(
            Object.assign(
              (a) => {
                if ('transaction' !== a.type) return a;
                if (
                  a.transaction?.match(/^GET (\/.*)?\/_next\/static\//) ||
                  (D._sentryRewritesTunnelPath &&
                    a.transaction === `POST ${D._sentryRewritesTunnelPath}`) ||
                  (process.env._sentryRewritesTunnelPath &&
                    a.transaction === `POST ${process.env._sentryRewritesTunnelPath}`) ||
                  a.transaction?.match(/\/__nextjs_original-stack-frame/) ||
                  '/404' === a.transaction ||
                  a.transaction?.match(
                    /^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH) \/(404|_not-found)$/
                  ) ||
                  a.contexts?.trace?.data?.[k.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION] ||
                  'NextServer.getRequestHandler' === a.transaction
                )
                  return null;
                if (
                  'string' ==
                  typeof a.contexts?.trace?.data?.[k.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]
                ) {
                  let b = f.extractTraceparentData(
                    a.contexts.trace.data[k.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]
                  );
                  if (b?.parentSampled === !1) return null;
                }
                return a;
              },
              { id: 'NextLowQualityTransactionsFilter' }
            )
          ),
          f.getGlobalScope().addEventProcessor(
            Object.assign(
              (a, b) => {
                if (void 0 !== a.type) return a;
                let c = b.originalException;
                if (
                  'object' == typeof c &&
                  null !== c &&
                  '$$typeof' in c &&
                  c.$$typeof === Symbol.for('react.postpone')
                )
                  return null;
                let d = a.exception?.values?.[0]?.value;
                return d?.includes('Suspense Exception: This is not a real error!') ||
                  d?.includes('Suspense Exception: This is not a real error, and should not leak')
                  ? null
                  : a;
              },
              { id: 'DropReactControlFlowErrors' }
            )
          ),
          n?.on('preprocessEvent', (a) => {
            if (
              'transaction' === a.type &&
              a.contexts?.trace?.data?.['next.span_type'] === 'BaseServer.handleRequest'
            ) {
              ((a.contexts.trace.data[f.SEMANTIC_ATTRIBUTE_SENTRY_OP] = 'http.server'),
                (a.contexts.trace.op = 'http.server'),
                a.transaction && (a.transaction = f.stripUrlQueryAndFragment(a.transaction)));
              let b = a.contexts.trace.data[e.SEMATTRS_HTTP_METHOD],
                c = a.contexts?.trace?.data?.[e.SEMATTRS_HTTP_TARGET],
                d = a.contexts.trace.data[e.ATTR_HTTP_ROUTE] || a.contexts.trace.data['next.route'];
              if ('string' == typeof b && 'string' == typeof d) {
                let c = d.replace(/\/route$/, '');
                ((a.transaction = `${b} ${c}`),
                  (a.contexts.trace.data[f.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route'),
                  (a.contexts.trace.data['next.route'] = c));
              }
              (a.contexts.trace.data[k.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL] &&
                'GET /_app' !== a.transaction &&
                (a.transaction = `${b} ${a.contexts.trace.data[k.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL]}`),
                'GET /_error' === a.transaction &&
                  c &&
                  (a.transaction = `${b ? `${b} ` : ''}${c}`));
            }
            if (
              'transaction' === a.type &&
              'string' == typeof a.contexts?.trace?.data?.[k.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]
            ) {
              let b = f.extractTraceparentData(
                a.contexts.trace.data[k.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]
              );
              (b?.traceId && (a.contexts.trace.trace_id = b.traceId),
                b?.parentSpanId && (a.contexts.trace.parent_span_id = b.parentSpanId));
            }
          }));
        try {
          f.getGlobalScope().setTag('turbopack', !0);
        } catch {}
        return (i.DEBUG_BUILD && f.debug.log('SDK successfully initialized'), n);
      }),
      (c.showReportDialog = function () {}),
      (c.withErrorBoundary = function (a) {
        return a;
      }),
      Object.prototype.hasOwnProperty.call(g, '__proto__') &&
        !Object.prototype.hasOwnProperty.call(c, '__proto__') &&
        Object.defineProperty(c, '__proto__', { enumerable: !0, value: g.__proto__ }),
      Object.keys(g).forEach((a) => {
        'default' === a || Object.prototype.hasOwnProperty.call(c, a) || (c[a] = g[a]);
      }));
  },
  79090,
  (a, b, c) => {
    Object.defineProperty(c, Symbol.toStringTag, { value: 'Module' });
    let d = a.r(85275),
      e = a.r(15700),
      f = a.r(3960),
      g = a.r(55046),
      h = a.r(44006),
      i = a.r(74700),
      j = a.r(68379),
      k = a.r(19353),
      l = a.r(43173),
      m = a.r(47869),
      n = a.r(15619),
      o = a.r(74140),
      p = a.r(99203),
      q = a.r(82307),
      r = a.r(21183),
      s = a.r(96935),
      t = a.r(3708),
      u = a.r(85419),
      v = a.r(76341);
    ((c.withSentryConfig = d.withSentryConfig),
      (c.ErrorBoundary = e.ErrorBoundary),
      (c.createReduxEnhancer = e.createReduxEnhancer),
      (c.init = e.init),
      (c.showReportDialog = e.showReportDialog),
      (c.withErrorBoundary = e.withErrorBoundary),
      (c.captureUnderscoreErrorException = f.captureUnderscoreErrorException),
      (c.wrapApiHandlerWithSentry = g.wrapApiHandlerWithSentry),
      (c.wrapGetStaticPropsWithSentry = h.wrapGetStaticPropsWithSentry),
      (c.wrapGetInitialPropsWithSentry = i.wrapGetInitialPropsWithSentry),
      (c.wrapAppGetInitialPropsWithSentry = j.wrapAppGetInitialPropsWithSentry),
      (c.wrapDocumentGetInitialPropsWithSentry = k.wrapDocumentGetInitialPropsWithSentry),
      (c.wrapErrorGetInitialPropsWithSentry = l.wrapErrorGetInitialPropsWithSentry),
      (c.wrapGetServerSidePropsWithSentry = m.wrapGetServerSidePropsWithSentry),
      (c.wrapServerComponentWithSentry = n.wrapServerComponentWithSentry),
      (c.wrapRouteHandlerWithSentry = o.wrapRouteHandlerWithSentry),
      (c.wrapApiHandlerWithSentryVercelCrons = p.wrapApiHandlerWithSentryVercelCrons),
      (c.wrapMiddlewareWithSentry = q.wrapMiddlewareWithSentry),
      (c.wrapPageComponentWithSentry = r.wrapPageComponentWithSentry),
      (c.wrapGenerationFunctionWithSentry = s.wrapGenerationFunctionWithSentry),
      (c.withServerActionInstrumentation = t.withServerActionInstrumentation),
      (c.captureRequestError = u.captureRequestError),
      Object.prototype.hasOwnProperty.call(v, '__proto__') &&
        !Object.prototype.hasOwnProperty.call(c, '__proto__') &&
        Object.defineProperty(c, '__proto__', { enumerable: !0, value: v.__proto__ }),
      Object.keys(v).forEach((a) => {
        'default' === a || Object.prototype.hasOwnProperty.call(c, a) || (c[a] = v[a]);
      }));
  },
  55343,
  (a) => {
    'use strict';
    a.s(['default', () => jp], 55343);
    var b,
      c = a.i(27473),
      d = a.i(79090);
    function e(a, b) {
      if (a instanceof Promise) throw Error(b);
    }
    (a.s(
      [
        '$brand',
        () => h,
        '$input',
        () => ev,
        '$output',
        () => eu,
        'NEVER',
        () => f,
        'TimePrecision',
        () => eX,
        'ZodAny',
        () => hT,
        'ZodArray',
        () => h1,
        'ZodBase64',
        () => hl,
        'ZodBase64URL',
        () => hn,
        'ZodBigInt',
        () => hI,
        'ZodBigIntFormat',
        () => hK,
        'ZodBoolean',
        () => hG,
        'ZodCIDRv4',
        () => hh,
        'ZodCIDRv6',
        () => hj,
        'ZodCUID',
        () => g3,
        'ZodCUID2',
        () => g5,
        'ZodCatch',
        () => iL,
        'ZodCodec',
        () => iR,
        'ZodCustom',
        () => i1,
        'ZodCustomStringFormat',
        () => ht,
        'ZodDate',
        () => h_,
        'ZodDefault',
        () => iD,
        'ZodDiscriminatedUnion',
        () => ia,
        'ZodE164',
        () => hp,
        'ZodEmail',
        () => gP,
        'ZodEmoji',
        () => g_,
        'ZodEnum',
        () => ip,
        'ZodError',
        () => gw,
        'ZodFile',
        () => iu,
        'ZodFirstPartyTypeKind',
        () => b,
        'ZodFunction',
        () => i_,
        'ZodGUID',
        () => gR,
        'ZodIPv4',
        () => hd,
        'ZodIPv6',
        () => hf,
        'ZodISODate',
        () => gp,
        'ZodISODateTime',
        () => gn,
        'ZodISODuration',
        () => gt,
        'ZodISOTime',
        () => gr,
        'ZodIntersection',
        () => ic,
        'ZodIssueCode',
        () => ja,
        'ZodJWT',
        () => hr,
        'ZodKSUID',
        () => hb,
        'ZodLazy',
        () => iX,
        'ZodLiteral',
        () => is,
        'ZodMap',
        () => ik,
        'ZodNaN',
        () => iN,
        'ZodNanoID',
        () => g1,
        'ZodNever',
        () => hX,
        'ZodNonOptional',
        () => iH,
        'ZodNull',
        () => hR,
        'ZodNullable',
        () => iA,
        'ZodNumber',
        () => hy,
        'ZodNumberFormat',
        () => hA,
        'ZodObject',
        () => h4,
        'ZodOptional',
        () => iy,
        'ZodPipe',
        () => iP,
        'ZodPrefault',
        () => iF,
        'ZodPromise',
        () => iZ,
        'ZodReadonly',
        () => iT,
        'ZodRealError',
        () => gx,
        'ZodRecord',
        () => ih,
        'ZodSet',
        () => im,
        'ZodString',
        () => gM,
        'ZodStringFormat',
        () => gO,
        'ZodSuccess',
        () => iJ,
        'ZodSymbol',
        () => hN,
        'ZodTemplateLiteral',
        () => iV,
        'ZodTransform',
        () => iw,
        'ZodTuple',
        () => ie,
        'ZodType',
        () => gK,
        'ZodULID',
        () => g7,
        'ZodURL',
        () => gY,
        'ZodUUID',
        () => gT,
        'ZodUndefined',
        () => hP,
        'ZodUnion',
        () => h8,
        'ZodUnknown',
        () => hV,
        'ZodVoid',
        () => hZ,
        'ZodXID',
        () => g9,
        '_ZodString',
        () => gL,
        '_default',
        () => iE,
        '_function',
        () => i0,
        'any',
        () => hU,
        'array',
        () => h2,
        'base64',
        () => hm,
        'base64url',
        () => ho,
        'bigint',
        () => hJ,
        'boolean',
        () => hH,
        'catch',
        () => iM,
        'check',
        () => i2,
        'cidrv4',
        () => hi,
        'cidrv6',
        () => hk,
        'clone',
        () => S,
        'codec',
        () => iS,
        'coerce',
        () => jk,
        'config',
        () => l,
        'core',
        () => gk,
        'cuid',
        () => g4,
        'cuid2',
        () => g6,
        'custom',
        () => i3,
        'date',
        () => h0,
        'decode',
        () => gD,
        'decodeAsync',
        () => gF,
        'discriminatedUnion',
        () => ib,
        'e164',
        () => hq,
        'email',
        () => gQ,
        'emoji',
        () => g0,
        'encode',
        () => gC,
        'encodeAsync',
        () => gE,
        'endsWith',
        () => fH,
        'enum',
        () => iq,
        'file',
        () => iv,
        'flattenError',
        () => ax,
        'float32',
        () => hC,
        'float64',
        () => hD,
        'formatError',
        () => ay,
        'function',
        () => i0,
        'getErrorMap',
        () => jc,
        'globalRegistry',
        () => ey,
        'gt',
        () => fp,
        'gte',
        () => fq,
        'guid',
        () => gS,
        'hash',
        () => hx,
        'hex',
        () => hw,
        'hostname',
        () => hv,
        'httpUrl',
        () => g$,
        'includes',
        () => fF,
        'instanceof',
        () => i6,
        'int',
        () => hB,
        'int32',
        () => hE,
        'int64',
        () => hL,
        'intersection',
        () => id,
        'ipv4',
        () => he,
        'ipv6',
        () => hg,
        'iso',
        () => je,
        'json',
        () => i8,
        'jwt',
        () => hs,
        'keyof',
        () => h3,
        'ksuid',
        () => hc,
        'lazy',
        () => iY,
        'length',
        () => fB,
        'literal',
        () => it,
        'locales',
        () => jd,
        'looseObject',
        () => h7,
        'lowercase',
        () => fD,
        'lt',
        () => fn,
        'lte',
        () => fo,
        'map',
        () => il,
        'maxLength',
        () => fz,
        'maxSize',
        () => fw,
        'mime',
        () => fJ,
        'minLength',
        () => fA,
        'minSize',
        () => fx,
        'multipleOf',
        () => fv,
        'nan',
        () => iO,
        'nanoid',
        () => g2,
        'nativeEnum',
        () => ir,
        'negative',
        () => fs,
        'never',
        () => hY,
        'nonnegative',
        () => fu,
        'nonoptional',
        () => iI,
        'nonpositive',
        () => ft,
        'normalize',
        () => fL,
        'null',
        () => hS,
        'nullable',
        () => iB,
        'nullish',
        () => iC,
        'number',
        () => hz,
        'object',
        () => h5,
        'optional',
        () => iz,
        'overwrite',
        () => fK,
        'parse',
        () => gy,
        'parseAsync',
        () => gz,
        'partialRecord',
        () => ij,
        'pipe',
        () => iQ,
        'positive',
        () => fr,
        'prefault',
        () => iG,
        'preprocess',
        () => i9,
        'prettifyError',
        () => aB,
        'promise',
        () => i$,
        'property',
        () => fI,
        'readonly',
        () => iU,
        'record',
        () => ii,
        'refine',
        () => i4,
        'regex',
        () => fC,
        'regexes',
        () => gl,
        'registry',
        () => ex,
        'safeDecode',
        () => gH,
        'safeDecodeAsync',
        () => gJ,
        'safeEncode',
        () => gG,
        'safeEncodeAsync',
        () => gI,
        'safeParse',
        () => gA,
        'safeParseAsync',
        () => gB,
        'set',
        () => io,
        'setErrorMap',
        () => jb,
        'size',
        () => fy,
        'startsWith',
        () => fG,
        'strictObject',
        () => h6,
        'string',
        () => gN,
        'stringFormat',
        () => hu,
        'stringbool',
        () => i7,
        'success',
        () => iK,
        'superRefine',
        () => i5,
        'symbol',
        () => hO,
        'templateLiteral',
        () => iW,
        'toJSONSchema',
        () => gi,
        'toLowerCase',
        () => fN,
        'toUpperCase',
        () => fO,
        'transform',
        () => ix,
        'treeifyError',
        () => az,
        'trim',
        () => fM,
        'tuple',
        () => ig,
        'uint32',
        () => hF,
        'uint64',
        () => hM,
        'ulid',
        () => g8,
        'undefined',
        () => hQ,
        'union',
        () => h9,
        'unknown',
        () => hW,
        'uppercase',
        () => fE,
        'url',
        () => gZ,
        'util',
        () => gm,
        'uuid',
        () => gU,
        'uuidv4',
        () => gV,
        'uuidv6',
        () => gW,
        'uuidv7',
        () => gX,
        'void',
        () => h$,
        'xid',
        () => ha,
      ],
      99333
    ),
      a.s([], 83783),
      a.s(
        [
          '$ZodAsyncError',
          () => i,
          '$ZodEncodeError',
          () => j,
          '$brand',
          () => h,
          '$constructor',
          () => g,
          'NEVER',
          () => f,
          'config',
          () => l,
          'globalConfig',
          () => k,
        ],
        937
      ));
    let f = Object.freeze({ status: 'aborted' });
    function g(a, b, c) {
      function d(c, d) {
        var e;
        for (let f in (Object.defineProperty(c, '_zod', { value: c._zod ?? {}, enumerable: !1 }),
        (e = c._zod).traits ?? (e.traits = new Set()),
        c._zod.traits.add(a),
        b(c, d),
        g.prototype))
          f in c || Object.defineProperty(c, f, { value: g.prototype[f].bind(c) });
        ((c._zod.constr = g), (c._zod.def = d));
      }
      let e = c?.Parent ?? Object;
      class f extends e {}
      function g(a) {
        var b;
        let e = c?.Parent ? new f() : this;
        for (let c of (d(e, a), (b = e._zod).deferred ?? (b.deferred = []), e._zod.deferred)) c();
        return e;
      }
      return (
        Object.defineProperty(f, 'name', { value: a }),
        Object.defineProperty(g, 'init', { value: d }),
        Object.defineProperty(g, Symbol.hasInstance, {
          value: (b) => (!!c?.Parent && b instanceof c.Parent) || b?._zod?.traits?.has(a),
        }),
        Object.defineProperty(g, 'name', { value: a }),
        g
      );
    }
    let h = Symbol('zod_brand');
    class i extends Error {
      constructor() {
        super('Encountered Promise during synchronous parse. Use .parseAsync() instead.');
      }
    }
    class j extends Error {
      constructor(a) {
        (super(`Encountered unidirectional transform during encode: ${a}`),
          (this.name = 'ZodEncodeError'));
      }
    }
    let k = {};
    function l(a) {
      return (a && Object.assign(k, a), k);
    }
    function m(a) {
      return a;
    }
    function n(a) {
      return a;
    }
    function o(a) {}
    function p(a) {
      throw Error();
    }
    function q(a) {}
    function r(a) {
      let b = Object.values(a).filter((a) => 'number' == typeof a);
      return Object.entries(a)
        .filter(([a, c]) => -1 === b.indexOf(+a))
        .map(([a, b]) => b);
    }
    function s(a, b = '|') {
      return a.map((a) => V(a)).join(b);
    }
    function t(a, b) {
      return 'bigint' == typeof b ? b.toString() : b;
    }
    function u(a) {
      return {
        get value() {
          {
            let b = a();
            return (Object.defineProperty(this, 'value', { value: b }), b);
          }
        },
      };
    }
    function v(a) {
      return null == a;
    }
    function w(a) {
      let b = +!!a.startsWith('^'),
        c = a.endsWith('$') ? a.length - 1 : a.length;
      return a.slice(b, c);
    }
    function x(a, b) {
      let c = (a.toString().split('.')[1] || '').length,
        d = b.toString(),
        e = (d.split('.')[1] || '').length;
      if (0 === e && /\d?e-\d?/.test(d)) {
        let a = d.match(/\d?e-(\d?)/);
        a?.[1] && (e = Number.parseInt(a[1]));
      }
      let f = c > e ? c : e;
      return (
        (Number.parseInt(a.toFixed(f).replace('.', '')) %
          Number.parseInt(b.toFixed(f).replace('.', ''))) /
        10 ** f
      );
    }
    a.s(
      [
        'BIGINT_FORMAT_RANGES',
        () => Y,
        'Class',
        () => as,
        'NUMBER_FORMAT_RANGES',
        () => X,
        'aborted',
        () => ae,
        'allowsEval',
        () => K,
        'assert',
        () => q,
        'assertEqual',
        () => m,
        'assertIs',
        () => o,
        'assertNever',
        () => p,
        'assertNotEqual',
        () => n,
        'assignProp',
        () => B,
        'base64ToUint8Array',
        () => am,
        'base64urlToUint8Array',
        () => ao,
        'cached',
        () => u,
        'captureStackTrace',
        () => I,
        'cleanEnum',
        () => al,
        'cleanRegex',
        () => w,
        'clone',
        () => S,
        'cloneDef',
        () => D,
        'createTransparentProxy',
        () => U,
        'defineLazy',
        () => z,
        'esc',
        () => H,
        'escapeRegex',
        () => R,
        'extend',
        () => _,
        'finalizeIssue',
        () => ah,
        'floatSafeRemainder',
        () => x,
        'getElementAtPath',
        () => E,
        'getEnumValues',
        () => r,
        'getLengthableOrigin',
        () => aj,
        'getParsedType',
        () => O,
        'getSizableOrigin',
        () => ai,
        'hexToUint8Array',
        () => aq,
        'isObject',
        () => J,
        'isPlainObject',
        () => L,
        'issue',
        () => ak,
        'joinValues',
        () => s,
        'jsonStringifyReplacer',
        () => t,
        'merge',
        () => ab,
        'mergeDefs',
        () => C,
        'normalizeParams',
        () => T,
        'nullish',
        () => v,
        'numKeys',
        () => N,
        'objectClone',
        () => A,
        'omit',
        () => $,
        'optionalKeys',
        () => W,
        'partial',
        () => ac,
        'pick',
        () => Z,
        'prefixIssues',
        () => af,
        'primitiveTypes',
        () => Q,
        'promiseAllObject',
        () => F,
        'propertyKeyTypes',
        () => P,
        'randomString',
        () => G,
        'required',
        () => ad,
        'safeExtend',
        () => aa,
        'shallowClone',
        () => M,
        'stringifyPrimitive',
        () => V,
        'uint8ArrayToBase64',
        () => an,
        'uint8ArrayToBase64url',
        () => ap,
        'uint8ArrayToHex',
        () => ar,
        'unwrapMessage',
        () => ag,
      ],
      9346
    );
    let y = Symbol('evaluating');
    function z(a, b, c) {
      let d;
      Object.defineProperty(a, b, {
        get() {
          if (d !== y) return (void 0 === d && ((d = y), (d = c())), d);
        },
        set(c) {
          Object.defineProperty(a, b, { value: c });
        },
        configurable: !0,
      });
    }
    function A(a) {
      return Object.create(Object.getPrototypeOf(a), Object.getOwnPropertyDescriptors(a));
    }
    function B(a, b, c) {
      Object.defineProperty(a, b, { value: c, writable: !0, enumerable: !0, configurable: !0 });
    }
    function C(...a) {
      let b = {};
      for (let c of a) Object.assign(b, Object.getOwnPropertyDescriptors(c));
      return Object.defineProperties({}, b);
    }
    function D(a) {
      return C(a._zod.def);
    }
    function E(a, b) {
      return b ? b.reduce((a, b) => a?.[b], a) : a;
    }
    function F(a) {
      let b = Object.keys(a);
      return Promise.all(b.map((b) => a[b])).then((a) => {
        let c = {};
        for (let d = 0; d < b.length; d++) c[b[d]] = a[d];
        return c;
      });
    }
    function G(a = 10) {
      let b = 'abcdefghijklmnopqrstuvwxyz',
        c = '';
      for (let d = 0; d < a; d++) c += b[Math.floor(Math.random() * b.length)];
      return c;
    }
    function H(a) {
      return JSON.stringify(a);
    }
    let I = 'captureStackTrace' in Error ? Error.captureStackTrace : (...a) => {};
    function J(a) {
      return 'object' == typeof a && null !== a && !Array.isArray(a);
    }
    let K = u(() => {
      if ('undefined' != typeof navigator && navigator?.userAgent?.includes('Cloudflare'))
        return !1;
      try {
        return (Function(''), !0);
      } catch (a) {
        return !1;
      }
    });
    function L(a) {
      if (!1 === J(a)) return !1;
      let b = a.constructor;
      if (void 0 === b) return !0;
      let c = b.prototype;
      return !1 !== J(c) && !1 !== Object.prototype.hasOwnProperty.call(c, 'isPrototypeOf');
    }
    function M(a) {
      return L(a) ? { ...a } : a;
    }
    function N(a) {
      let b = 0;
      for (let c in a) Object.prototype.hasOwnProperty.call(a, c) && b++;
      return b;
    }
    let O = (a) => {
        let b = typeof a;
        switch (b) {
          case 'undefined':
            return 'undefined';
          case 'string':
            return 'string';
          case 'number':
            return Number.isNaN(a) ? 'nan' : 'number';
          case 'boolean':
            return 'boolean';
          case 'function':
            return 'function';
          case 'bigint':
            return 'bigint';
          case 'symbol':
            return 'symbol';
          case 'object':
            if (Array.isArray(a)) return 'array';
            if (null === a) return 'null';
            if (a.then && 'function' == typeof a.then && a.catch && 'function' == typeof a.catch)
              return 'promise';
            if ('undefined' != typeof Map && a instanceof Map) return 'map';
            if ('undefined' != typeof Set && a instanceof Set) return 'set';
            if ('undefined' != typeof Date && a instanceof Date) return 'date';
            if ('undefined' != typeof File && a instanceof File) return 'file';
            return 'object';
          default:
            throw Error(`Unknown data type: ${b}`);
        }
      },
      P = new Set(['string', 'number', 'symbol']),
      Q = new Set(['string', 'number', 'bigint', 'boolean', 'symbol', 'undefined']);
    function R(a) {
      return a.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    function S(a, b, c) {
      let d = new a._zod.constr(b ?? a._zod.def);
      return ((!b || c?.parent) && (d._zod.parent = a), d);
    }
    function T(a) {
      if (!a) return {};
      if ('string' == typeof a) return { error: () => a };
      if (a?.message !== void 0) {
        if (a?.error !== void 0) throw Error('Cannot specify both `message` and `error` params');
        a.error = a.message;
      }
      return (delete a.message, 'string' == typeof a.error) ? { ...a, error: () => a.error } : a;
    }
    function U(a) {
      let b;
      return new Proxy(
        {},
        {
          get: (c, d, e) => (b ?? (b = a()), Reflect.get(b, d, e)),
          set: (c, d, e, f) => (b ?? (b = a()), Reflect.set(b, d, e, f)),
          has: (c, d) => (b ?? (b = a()), Reflect.has(b, d)),
          deleteProperty: (c, d) => (b ?? (b = a()), Reflect.deleteProperty(b, d)),
          ownKeys: (c) => (b ?? (b = a()), Reflect.ownKeys(b)),
          getOwnPropertyDescriptor: (c, d) => (
            b ?? (b = a()),
            Reflect.getOwnPropertyDescriptor(b, d)
          ),
          defineProperty: (c, d, e) => (b ?? (b = a()), Reflect.defineProperty(b, d, e)),
        }
      );
    }
    function V(a) {
      return 'bigint' == typeof a ? a.toString() + 'n' : 'string' == typeof a ? `"${a}"` : `${a}`;
    }
    function W(a) {
      return Object.keys(a).filter(
        (b) => 'optional' === a[b]._zod.optin && 'optional' === a[b]._zod.optout
      );
    }
    let X = {
        safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],
        int32: [-0x80000000, 0x7fffffff],
        uint32: [0, 0xffffffff],
        float32: [-34028234663852886e22, 34028234663852886e22],
        float64: [-Number.MAX_VALUE, Number.MAX_VALUE],
      },
      Y = {
        int64: [BigInt('-9223372036854775808'), BigInt('9223372036854775807')],
        uint64: [BigInt(0), BigInt('18446744073709551615')],
      };
    function Z(a, b) {
      let c = a._zod.def,
        d = C(a._zod.def, {
          get shape() {
            let a = {};
            for (let d in b) {
              if (!(d in c.shape)) throw Error(`Unrecognized key: "${d}"`);
              b[d] && (a[d] = c.shape[d]);
            }
            return (B(this, 'shape', a), a);
          },
          checks: [],
        });
      return S(a, d);
    }
    function $(a, b) {
      let c = a._zod.def,
        d = C(a._zod.def, {
          get shape() {
            let d = { ...a._zod.def.shape };
            for (let a in b) {
              if (!(a in c.shape)) throw Error(`Unrecognized key: "${a}"`);
              b[a] && delete d[a];
            }
            return (B(this, 'shape', d), d);
          },
          checks: [],
        });
      return S(a, d);
    }
    function _(a, b) {
      if (!L(b)) throw Error('Invalid input to extend: expected a plain object');
      let c = a._zod.def.checks;
      if (c && c.length > 0)
        throw Error(
          'Object schemas containing refinements cannot be extended. Use `.safeExtend()` instead.'
        );
      let d = C(a._zod.def, {
        get shape() {
          let c = { ...a._zod.def.shape, ...b };
          return (B(this, 'shape', c), c);
        },
        checks: [],
      });
      return S(a, d);
    }
    function aa(a, b) {
      if (!L(b)) throw Error('Invalid input to safeExtend: expected a plain object');
      let c = {
        ...a._zod.def,
        get shape() {
          let c = { ...a._zod.def.shape, ...b };
          return (B(this, 'shape', c), c);
        },
        checks: a._zod.def.checks,
      };
      return S(a, c);
    }
    function ab(a, b) {
      let c = C(a._zod.def, {
        get shape() {
          let c = { ...a._zod.def.shape, ...b._zod.def.shape };
          return (B(this, 'shape', c), c);
        },
        get catchall() {
          return b._zod.def.catchall;
        },
        checks: [],
      });
      return S(a, c);
    }
    function ac(a, b, c) {
      let d = C(b._zod.def, {
        get shape() {
          let d = b._zod.def.shape,
            e = { ...d };
          if (c)
            for (let b in c) {
              if (!(b in d)) throw Error(`Unrecognized key: "${b}"`);
              c[b] && (e[b] = a ? new a({ type: 'optional', innerType: d[b] }) : d[b]);
            }
          else for (let b in d) e[b] = a ? new a({ type: 'optional', innerType: d[b] }) : d[b];
          return (B(this, 'shape', e), e);
        },
        checks: [],
      });
      return S(b, d);
    }
    function ad(a, b, c) {
      let d = C(b._zod.def, {
        get shape() {
          let d = b._zod.def.shape,
            e = { ...d };
          if (c)
            for (let b in c) {
              if (!(b in e)) throw Error(`Unrecognized key: "${b}"`);
              c[b] && (e[b] = new a({ type: 'nonoptional', innerType: d[b] }));
            }
          else for (let b in d) e[b] = new a({ type: 'nonoptional', innerType: d[b] });
          return (B(this, 'shape', e), e);
        },
        checks: [],
      });
      return S(b, d);
    }
    function ae(a, b = 0) {
      if (!0 === a.aborted) return !0;
      for (let c = b; c < a.issues.length; c++) if (a.issues[c]?.continue !== !0) return !0;
      return !1;
    }
    function af(a, b) {
      return b.map((b) => (b.path ?? (b.path = []), b.path.unshift(a), b));
    }
    function ag(a) {
      return 'string' == typeof a ? a : a?.message;
    }
    function ah(a, b, c) {
      let d = { ...a, path: a.path ?? [] };
      return (
        a.message ||
          (d.message =
            ag(a.inst?._zod.def?.error?.(a)) ??
            ag(b?.error?.(a)) ??
            ag(c.customError?.(a)) ??
            ag(c.localeError?.(a)) ??
            'Invalid input'),
        delete d.inst,
        delete d.continue,
        b?.reportInput || delete d.input,
        d
      );
    }
    function ai(a) {
      return a instanceof Set
        ? 'set'
        : a instanceof Map
          ? 'map'
          : a instanceof File
            ? 'file'
            : 'unknown';
    }
    function aj(a) {
      return Array.isArray(a) ? 'array' : 'string' == typeof a ? 'string' : 'unknown';
    }
    function ak(...a) {
      let [b, c, d] = a;
      return 'string' == typeof b ? { message: b, code: 'custom', input: c, inst: d } : { ...b };
    }
    function al(a) {
      return Object.entries(a)
        .filter(([a, b]) => Number.isNaN(Number.parseInt(a, 10)))
        .map((a) => a[1]);
    }
    function am(a) {
      let b = atob(a),
        c = new Uint8Array(b.length);
      for (let a = 0; a < b.length; a++) c[a] = b.charCodeAt(a);
      return c;
    }
    function an(a) {
      let b = '';
      for (let c = 0; c < a.length; c++) b += String.fromCharCode(a[c]);
      return btoa(b);
    }
    function ao(a) {
      let b = a.replace(/-/g, '+').replace(/_/g, '/'),
        c = '='.repeat((4 - (b.length % 4)) % 4);
      return am(b + c);
    }
    function ap(a) {
      return an(a).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
    }
    function aq(a) {
      let b = a.replace(/^0x/, '');
      if (b.length % 2 != 0) throw Error('Invalid hex string length');
      let c = new Uint8Array(b.length / 2);
      for (let a = 0; a < b.length; a += 2) c[a / 2] = Number.parseInt(b.slice(a, a + 2), 16);
      return c;
    }
    function ar(a) {
      return Array.from(a)
        .map((a) => a.toString(16).padStart(2, '0'))
        .join('');
    }
    class as {
      constructor(...a) {}
    }
    function at() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'characters', verb: 'to have' },
              file: { unit: 'bytes', verb: 'to have' },
              array: { unit: 'items', verb: 'to have' },
              set: { unit: 'items', verb: 'to have' },
            },
            b = {
              regex: 'input',
              email: 'email address',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO datetime',
              date: 'ISO date',
              time: 'ISO time',
              duration: 'ISO duration',
              ipv4: 'IPv4 address',
              ipv6: 'IPv6 address',
              cidrv4: 'IPv4 range',
              cidrv6: 'IPv6 range',
              base64: 'base64-encoded string',
              base64url: 'base64url-encoded string',
              json_string: 'JSON string',
              e164: 'E.164 number',
              jwt: 'JWT',
              template_literal: 'input',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Invalid input: expected ${c.expected}, received ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Invalid input: expected ${V(c.values[0])}`;
                return `Invalid option: expected one of ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Too big: expected ${c.origin ?? 'value'} to have ${b}${c.maximum.toString()} ${d.unit ?? 'elements'}`;
                return `Too big: expected ${c.origin ?? 'value'} to be ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Too small: expected ${c.origin} to have ${b}${c.minimum.toString()} ${d.unit}`;
                return `Too small: expected ${c.origin} to be ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Invalid string: must start with "${c.prefix}"`;
                if ('ends_with' === c.format) return `Invalid string: must end with "${c.suffix}"`;
                if ('includes' === c.format) return `Invalid string: must include "${c.includes}"`;
                if ('regex' === c.format) return `Invalid string: must match pattern ${c.pattern}`;
                return `Invalid ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Invalid number: must be a multiple of ${c.divisor}`;
              case 'unrecognized_keys':
                return `Unrecognized key${c.keys.length > 1 ? 's' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Invalid key in ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Invalid input';
              case 'invalid_element':
                return `Invalid value in ${c.origin}`;
            }
          };
        })(),
      };
    }
    (l(at()),
      a.i(83783),
      a.s(
        [
          '$ZodAny',
          () => cX,
          '$ZodArray',
          () => c1,
          '$ZodAsyncError',
          () => i,
          '$ZodBase64',
          () => cI,
          '$ZodBase64URL',
          () => cK,
          '$ZodBigInt',
          () => cS,
          '$ZodBigIntFormat',
          () => cT,
          '$ZodBoolean',
          () => cR,
          '$ZodCIDRv4',
          () => cF,
          '$ZodCIDRv6',
          () => cG,
          '$ZodCUID',
          () => cu,
          '$ZodCUID2',
          () => cv,
          '$ZodCatch',
          () => dx,
          '$ZodCheck',
          () => bX,
          '$ZodCheckBigIntFormat',
          () => b1,
          '$ZodCheckEndsWith',
          () => ce,
          '$ZodCheckGreaterThan',
          () => b$,
          '$ZodCheckIncludes',
          () => cc,
          '$ZodCheckLengthEquals',
          () => b7,
          '$ZodCheckLessThan',
          () => bZ,
          '$ZodCheckLowerCase',
          () => ca,
          '$ZodCheckMaxLength',
          () => b5,
          '$ZodCheckMaxSize',
          () => b2,
          '$ZodCheckMimeType',
          () => ch,
          '$ZodCheckMinLength',
          () => b6,
          '$ZodCheckMinSize',
          () => b3,
          '$ZodCheckMultipleOf',
          () => b_,
          '$ZodCheckNumberFormat',
          () => b0,
          '$ZodCheckOverwrite',
          () => ci,
          '$ZodCheckProperty',
          () => cg,
          '$ZodCheckRegex',
          () => b9,
          '$ZodCheckSizeEquals',
          () => b4,
          '$ZodCheckStartsWith',
          () => cd,
          '$ZodCheckStringFormat',
          () => b8,
          '$ZodCheckUpperCase',
          () => cb,
          '$ZodCodec',
          () => dB,
          '$ZodCustom',
          () => dK,
          '$ZodCustomStringFormat',
          () => cO,
          '$ZodDate',
          () => c_,
          '$ZodDefault',
          () => dr,
          '$ZodDiscriminatedUnion',
          () => c9,
          '$ZodE164',
          () => cL,
          '$ZodEmail',
          () => cq,
          '$ZodEmoji',
          () => cs,
          '$ZodEncodeError',
          () => j,
          '$ZodEnum',
          () => dj,
          '$ZodError',
          () => av,
          '$ZodFile',
          () => dl,
          '$ZodFunction',
          () => dH,
          '$ZodGUID',
          () => co,
          '$ZodIPv4',
          () => cD,
          '$ZodIPv6',
          () => cE,
          '$ZodISODate',
          () => cA,
          '$ZodISODateTime',
          () => cz,
          '$ZodISODuration',
          () => cC,
          '$ZodISOTime',
          () => cB,
          '$ZodIntersection',
          () => da,
          '$ZodJWT',
          () => cN,
          '$ZodKSUID',
          () => cy,
          '$ZodLazy',
          () => dJ,
          '$ZodLiteral',
          () => dk,
          '$ZodMap',
          () => df,
          '$ZodNaN',
          () => dy,
          '$ZodNanoID',
          () => ct,
          '$ZodNever',
          () => cZ,
          '$ZodNonOptional',
          () => du,
          '$ZodNull',
          () => cW,
          '$ZodNullable',
          () => dq,
          '$ZodNumber',
          () => cP,
          '$ZodNumberFormat',
          () => cQ,
          '$ZodObject',
          () => c5,
          '$ZodObjectJIT',
          () => c6,
          '$ZodOptional',
          () => dp,
          '$ZodPipe',
          () => dz,
          '$ZodPrefault',
          () => dt,
          '$ZodPromise',
          () => dI,
          '$ZodReadonly',
          () => dE,
          '$ZodRealError',
          () => aw,
          '$ZodRecord',
          () => de,
          '$ZodRegistry',
          () => ew,
          '$ZodSet',
          () => dh,
          '$ZodString',
          () => cm,
          '$ZodStringFormat',
          () => cn,
          '$ZodSuccess',
          () => dw,
          '$ZodSymbol',
          () => cU,
          '$ZodTemplateLiteral',
          () => dG,
          '$ZodTransform',
          () => dm,
          '$ZodTuple',
          () => dc,
          '$ZodType',
          () => cl,
          '$ZodULID',
          () => cw,
          '$ZodURL',
          () => cr,
          '$ZodUUID',
          () => cp,
          '$ZodUndefined',
          () => cV,
          '$ZodUnion',
          () => c8,
          '$ZodUnknown',
          () => cY,
          '$ZodVoid',
          () => c$,
          '$ZodXID',
          () => cx,
          '$brand',
          () => h,
          '$constructor',
          () => g,
          '$input',
          () => ev,
          '$output',
          () => eu,
          'Doc',
          () => cj,
          'JSONSchema',
          () => gj,
          'JSONSchemaGenerator',
          () => gh,
          'NEVER',
          () => f,
          'TimePrecision',
          () => eX,
          '_any',
          () => fg,
          '_array',
          () => fP,
          '_base64',
          () => eT,
          '_base64url',
          () => eU,
          '_bigint',
          () => e9,
          '_boolean',
          () => e7,
          '_catch',
          () => f5,
          '_check',
          () => ge,
          '_cidrv4',
          () => eR,
          '_cidrv6',
          () => eS,
          '_coercedBigint',
          () => fa,
          '_coercedBoolean',
          () => e8,
          '_coercedDate',
          () => fl,
          '_coercedNumber',
          () => e1,
          '_coercedString',
          () => eA,
          '_cuid',
          () => eK,
          '_cuid2',
          () => eL,
          '_custom',
          () => gb,
          '_date',
          () => fk,
          '_decode',
          () => aM,
          '_decodeAsync',
          () => aQ,
          '_default',
          () => f2,
          '_discriminatedUnion',
          () => fR,
          '_e164',
          () => eV,
          '_email',
          () => eB,
          '_emoji',
          () => eI,
          '_encode',
          () => aK,
          '_encodeAsync',
          () => aO,
          '_endsWith',
          () => fH,
          '_enum',
          () => fX,
          '_file',
          () => f$,
          '_float32',
          () => e3,
          '_float64',
          () => e4,
          '_gt',
          () => fp,
          '_gte',
          () => fq,
          '_guid',
          () => eC,
          '_includes',
          () => fF,
          '_int',
          () => e2,
          '_int32',
          () => e5,
          '_int64',
          () => fb,
          '_intersection',
          () => fS,
          '_ipv4',
          () => eP,
          '_ipv6',
          () => eQ,
          '_isoDate',
          () => eZ,
          '_isoDateTime',
          () => eY,
          '_isoDuration',
          () => e_,
          '_isoTime',
          () => e$,
          '_jwt',
          () => eW,
          '_ksuid',
          () => eO,
          '_lazy',
          () => f9,
          '_length',
          () => fB,
          '_literal',
          () => fZ,
          '_lowercase',
          () => fD,
          '_lt',
          () => fn,
          '_lte',
          () => fo,
          '_map',
          () => fV,
          '_max',
          () => fo,
          '_maxLength',
          () => fz,
          '_maxSize',
          () => fw,
          '_mime',
          () => fJ,
          '_min',
          () => fq,
          '_minLength',
          () => fA,
          '_minSize',
          () => fx,
          '_multipleOf',
          () => fv,
          '_nan',
          () => fm,
          '_nanoid',
          () => eJ,
          '_nativeEnum',
          () => fY,
          '_negative',
          () => fs,
          '_never',
          () => fi,
          '_nonnegative',
          () => fu,
          '_nonoptional',
          () => f3,
          '_nonpositive',
          () => ft,
          '_normalize',
          () => fL,
          '_null',
          () => ff,
          '_nullable',
          () => f1,
          '_number',
          () => e0,
          '_optional',
          () => f0,
          '_overwrite',
          () => fK,
          '_parse',
          () => aC,
          '_parseAsync',
          () => aE,
          '_pipe',
          () => f6,
          '_positive',
          () => fr,
          '_promise',
          () => ga,
          '_property',
          () => fI,
          '_readonly',
          () => f7,
          '_record',
          () => fU,
          '_refine',
          () => gc,
          '_regex',
          () => fC,
          '_safeDecode',
          () => aU,
          '_safeDecodeAsync',
          () => aY,
          '_safeEncode',
          () => aS,
          '_safeEncodeAsync',
          () => aW,
          '_safeParse',
          () => aG,
          '_safeParseAsync',
          () => aI,
          '_set',
          () => fW,
          '_size',
          () => fy,
          '_startsWith',
          () => fG,
          '_string',
          () => ez,
          '_stringFormat',
          () => gg,
          '_stringbool',
          () => gf,
          '_success',
          () => f4,
          '_superRefine',
          () => gd,
          '_symbol',
          () => fd,
          '_templateLiteral',
          () => f8,
          '_toLowerCase',
          () => fN,
          '_toUpperCase',
          () => fO,
          '_transform',
          () => f_,
          '_trim',
          () => fM,
          '_tuple',
          () => fT,
          '_uint32',
          () => e6,
          '_uint64',
          () => fc,
          '_ulid',
          () => eM,
          '_undefined',
          () => fe,
          '_union',
          () => fQ,
          '_unknown',
          () => fh,
          '_uppercase',
          () => fE,
          '_url',
          () => eH,
          '_uuid',
          () => eD,
          '_uuidv4',
          () => eE,
          '_uuidv6',
          () => eF,
          '_uuidv7',
          () => eG,
          '_void',
          () => fj,
          '_xid',
          () => eN,
          'clone',
          () => S,
          'config',
          () => l,
          'decode',
          () => aN,
          'decodeAsync',
          () => aR,
          'encode',
          () => aL,
          'encodeAsync',
          () => aP,
          'flattenError',
          () => ax,
          'formatError',
          () => ay,
          'globalConfig',
          () => k,
          'globalRegistry',
          () => ey,
          'isValidBase64',
          () => cH,
          'isValidBase64URL',
          () => cJ,
          'isValidJWT',
          () => cM,
          'locales',
          () => et,
          'parse',
          () => aD,
          'parseAsync',
          () => aF,
          'prettifyError',
          () => aB,
          'regexes',
          () => dN,
          'registry',
          () => ex,
          'safeDecode',
          () => aV,
          'safeDecodeAsync',
          () => aZ,
          'safeEncode',
          () => aT,
          'safeEncodeAsync',
          () => aX,
          'safeParse',
          () => aH,
          'safeParseAsync',
          () => aJ,
          'toDotPath',
          () => aA,
          'toJSONSchema',
          () => gi,
          'treeifyError',
          () => az,
          'util',
          () => dM,
          'version',
          () => ck,
        ],
        98051
      ),
      a.s([], 5699),
      a.i(5699),
      a.i(937),
      a.s(
        [
          '_decode',
          () => aM,
          '_decodeAsync',
          () => aQ,
          '_encode',
          () => aK,
          '_encodeAsync',
          () => aO,
          '_parse',
          () => aC,
          '_parseAsync',
          () => aE,
          '_safeDecode',
          () => aU,
          '_safeDecodeAsync',
          () => aY,
          '_safeEncode',
          () => aS,
          '_safeEncodeAsync',
          () => aW,
          '_safeParse',
          () => aG,
          '_safeParseAsync',
          () => aI,
          'decode',
          () => aN,
          'decodeAsync',
          () => aR,
          'encode',
          () => aL,
          'encodeAsync',
          () => aP,
          'parse',
          () => aD,
          'parseAsync',
          () => aF,
          'safeDecode',
          () => aV,
          'safeDecodeAsync',
          () => aZ,
          'safeEncode',
          () => aT,
          'safeEncodeAsync',
          () => aX,
          'safeParse',
          () => aH,
          'safeParseAsync',
          () => aJ,
        ],
        37799
      ),
      a.s(
        [
          '$ZodError',
          () => av,
          '$ZodRealError',
          () => aw,
          'flattenError',
          () => ax,
          'formatError',
          () => ay,
          'prettifyError',
          () => aB,
          'toDotPath',
          () => aA,
          'treeifyError',
          () => az,
        ],
        74477
      ));
    let au = (a, b) => {
        ((a.name = '$ZodError'),
          Object.defineProperty(a, '_zod', { value: a._zod, enumerable: !1 }),
          Object.defineProperty(a, 'issues', { value: b, enumerable: !1 }),
          (a.message = JSON.stringify(b, t, 2)),
          Object.defineProperty(a, 'toString', { value: () => a.message, enumerable: !1 }));
      },
      av = g('$ZodError', au),
      aw = g('$ZodError', au, { Parent: Error });
    function ax(a, b = (a) => a.message) {
      let c = {},
        d = [];
      for (let e of a.issues)
        e.path.length > 0
          ? ((c[e.path[0]] = c[e.path[0]] || []), c[e.path[0]].push(b(e)))
          : d.push(b(e));
      return { formErrors: d, fieldErrors: c };
    }
    function ay(a, b) {
      let c =
          b ||
          function (a) {
            return a.message;
          },
        d = { _errors: [] },
        e = (a) => {
          for (let b of a.issues)
            if ('invalid_union' === b.code && b.errors.length)
              b.errors.map((a) => e({ issues: a }));
            else if ('invalid_key' === b.code) e({ issues: b.issues });
            else if ('invalid_element' === b.code) e({ issues: b.issues });
            else if (0 === b.path.length) d._errors.push(c(b));
            else {
              let a = d,
                e = 0;
              for (; e < b.path.length; ) {
                let d = b.path[e];
                (e === b.path.length - 1
                  ? ((a[d] = a[d] || { _errors: [] }), a[d]._errors.push(c(b)))
                  : (a[d] = a[d] || { _errors: [] }),
                  (a = a[d]),
                  e++);
              }
            }
        };
      return (e(a), d);
    }
    function az(a, b) {
      let c =
          b ||
          function (a) {
            return a.message;
          },
        d = { errors: [] },
        e = (a, b = []) => {
          var f, g;
          for (let h of a.issues)
            if ('invalid_union' === h.code && h.errors.length)
              h.errors.map((a) => e({ issues: a }, h.path));
            else if ('invalid_key' === h.code) e({ issues: h.issues }, h.path);
            else if ('invalid_element' === h.code) e({ issues: h.issues }, h.path);
            else {
              let a = [...b, ...h.path];
              if (0 === a.length) {
                d.errors.push(c(h));
                continue;
              }
              let e = d,
                i = 0;
              for (; i < a.length; ) {
                let b = a[i],
                  d = i === a.length - 1;
                ('string' == typeof b
                  ? (e.properties ?? (e.properties = {}),
                    (f = e.properties)[b] ?? (f[b] = { errors: [] }),
                    (e = e.properties[b]))
                  : (e.items ?? (e.items = []),
                    (g = e.items)[b] ?? (g[b] = { errors: [] }),
                    (e = e.items[b])),
                  d && e.errors.push(c(h)),
                  i++);
              }
            }
        };
      return (e(a), d);
    }
    function aA(a) {
      let b = [];
      for (let c of a.map((a) => ('object' == typeof a ? a.key : a)))
        'number' == typeof c
          ? b.push(`[${c}]`)
          : 'symbol' == typeof c
            ? b.push(`[${JSON.stringify(String(c))}]`)
            : /[^\w$]/.test(c)
              ? b.push(`[${JSON.stringify(c)}]`)
              : (b.length && b.push('.'), b.push(c));
      return b.join('');
    }
    function aB(a) {
      let b = [];
      for (let c of [...a.issues].sort((a, b) => (a.path ?? []).length - (b.path ?? []).length))
        (b.push(`✖ ${c.message}`), c.path?.length && b.push(`  → at ${aA(c.path)}`));
      return b.join('\n');
    }
    let aC = (a) => (b, c, d, e) => {
        let f = d ? Object.assign(d, { async: !1 }) : { async: !1 },
          g = b._zod.run({ value: c, issues: [] }, f);
        if (g instanceof Promise) throw new i();
        if (g.issues.length) {
          let b = new (e?.Err ?? a)(g.issues.map((a) => ah(a, f, l())));
          throw (I(b, e?.callee), b);
        }
        return g.value;
      },
      aD = aC(aw),
      aE = (a) => async (b, c, d, e) => {
        let f = d ? Object.assign(d, { async: !0 }) : { async: !0 },
          g = b._zod.run({ value: c, issues: [] }, f);
        if ((g instanceof Promise && (g = await g), g.issues.length)) {
          let b = new (e?.Err ?? a)(g.issues.map((a) => ah(a, f, l())));
          throw (I(b, e?.callee), b);
        }
        return g.value;
      },
      aF = aE(aw),
      aG = (a) => (b, c, d) => {
        let e = d ? { ...d, async: !1 } : { async: !1 },
          f = b._zod.run({ value: c, issues: [] }, e);
        if (f instanceof Promise) throw new i();
        return f.issues.length
          ? { success: !1, error: new (a ?? av)(f.issues.map((a) => ah(a, e, l()))) }
          : { success: !0, data: f.value };
      },
      aH = aG(aw),
      aI = (a) => async (b, c, d) => {
        let e = d ? Object.assign(d, { async: !0 }) : { async: !0 },
          f = b._zod.run({ value: c, issues: [] }, e);
        return (
          f instanceof Promise && (f = await f),
          f.issues.length
            ? { success: !1, error: new a(f.issues.map((a) => ah(a, e, l()))) }
            : { success: !0, data: f.value }
        );
      },
      aJ = aI(aw),
      aK = (a) => (b, c, d) => {
        let e = d ? Object.assign(d, { direction: 'backward' }) : { direction: 'backward' };
        return aC(a)(b, c, e);
      },
      aL = aK(aw),
      aM = (a) => (b, c, d) => aC(a)(b, c, d),
      aN = aM(aw),
      aO = (a) => async (b, c, d) => {
        let e = d ? Object.assign(d, { direction: 'backward' }) : { direction: 'backward' };
        return aE(a)(b, c, e);
      },
      aP = aO(aw),
      aQ = (a) => async (b, c, d) => aE(a)(b, c, d),
      aR = aQ(aw),
      aS = (a) => (b, c, d) => {
        let e = d ? Object.assign(d, { direction: 'backward' }) : { direction: 'backward' };
        return aG(a)(b, c, e);
      },
      aT = aS(aw),
      aU = (a) => (b, c, d) => aG(a)(b, c, d),
      aV = aU(aw),
      aW = (a) => async (b, c, d) => {
        let e = d ? Object.assign(d, { direction: 'backward' }) : { direction: 'backward' };
        return aI(a)(b, c, e);
      },
      aX = aW(aw),
      aY = (a) => async (b, c, d) => aI(a)(b, c, d),
      aZ = aY(aw);
    (a.i(37799),
      a.i(74477),
      a.s(
        [
          '$ZodAny',
          () => cX,
          '$ZodArray',
          () => c1,
          '$ZodBase64',
          () => cI,
          '$ZodBase64URL',
          () => cK,
          '$ZodBigInt',
          () => cS,
          '$ZodBigIntFormat',
          () => cT,
          '$ZodBoolean',
          () => cR,
          '$ZodCIDRv4',
          () => cF,
          '$ZodCIDRv6',
          () => cG,
          '$ZodCUID',
          () => cu,
          '$ZodCUID2',
          () => cv,
          '$ZodCatch',
          () => dx,
          '$ZodCodec',
          () => dB,
          '$ZodCustom',
          () => dK,
          '$ZodCustomStringFormat',
          () => cO,
          '$ZodDate',
          () => c_,
          '$ZodDefault',
          () => dr,
          '$ZodDiscriminatedUnion',
          () => c9,
          '$ZodE164',
          () => cL,
          '$ZodEmail',
          () => cq,
          '$ZodEmoji',
          () => cs,
          '$ZodEnum',
          () => dj,
          '$ZodFile',
          () => dl,
          '$ZodFunction',
          () => dH,
          '$ZodGUID',
          () => co,
          '$ZodIPv4',
          () => cD,
          '$ZodIPv6',
          () => cE,
          '$ZodISODate',
          () => cA,
          '$ZodISODateTime',
          () => cz,
          '$ZodISODuration',
          () => cC,
          '$ZodISOTime',
          () => cB,
          '$ZodIntersection',
          () => da,
          '$ZodJWT',
          () => cN,
          '$ZodKSUID',
          () => cy,
          '$ZodLazy',
          () => dJ,
          '$ZodLiteral',
          () => dk,
          '$ZodMap',
          () => df,
          '$ZodNaN',
          () => dy,
          '$ZodNanoID',
          () => ct,
          '$ZodNever',
          () => cZ,
          '$ZodNonOptional',
          () => du,
          '$ZodNull',
          () => cW,
          '$ZodNullable',
          () => dq,
          '$ZodNumber',
          () => cP,
          '$ZodNumberFormat',
          () => cQ,
          '$ZodObject',
          () => c5,
          '$ZodObjectJIT',
          () => c6,
          '$ZodOptional',
          () => dp,
          '$ZodPipe',
          () => dz,
          '$ZodPrefault',
          () => dt,
          '$ZodPromise',
          () => dI,
          '$ZodReadonly',
          () => dE,
          '$ZodRecord',
          () => de,
          '$ZodSet',
          () => dh,
          '$ZodString',
          () => cm,
          '$ZodStringFormat',
          () => cn,
          '$ZodSuccess',
          () => dw,
          '$ZodSymbol',
          () => cU,
          '$ZodTemplateLiteral',
          () => dG,
          '$ZodTransform',
          () => dm,
          '$ZodTuple',
          () => dc,
          '$ZodType',
          () => cl,
          '$ZodULID',
          () => cw,
          '$ZodURL',
          () => cr,
          '$ZodUUID',
          () => cp,
          '$ZodUndefined',
          () => cV,
          '$ZodUnion',
          () => c8,
          '$ZodUnknown',
          () => cY,
          '$ZodVoid',
          () => c$,
          '$ZodXID',
          () => cx,
          'clone',
          () => S,
          'isValidBase64',
          () => cH,
          'isValidBase64URL',
          () => cJ,
          'isValidJWT',
          () => cM,
        ],
        60009
      ),
      a.s(
        [
          '$ZodAny',
          () => cX,
          '$ZodArray',
          () => c1,
          '$ZodBase64',
          () => cI,
          '$ZodBase64URL',
          () => cK,
          '$ZodBigInt',
          () => cS,
          '$ZodBigIntFormat',
          () => cT,
          '$ZodBoolean',
          () => cR,
          '$ZodCIDRv4',
          () => cF,
          '$ZodCIDRv6',
          () => cG,
          '$ZodCUID',
          () => cu,
          '$ZodCUID2',
          () => cv,
          '$ZodCatch',
          () => dx,
          '$ZodCodec',
          () => dB,
          '$ZodCustom',
          () => dK,
          '$ZodCustomStringFormat',
          () => cO,
          '$ZodDate',
          () => c_,
          '$ZodDefault',
          () => dr,
          '$ZodDiscriminatedUnion',
          () => c9,
          '$ZodE164',
          () => cL,
          '$ZodEmail',
          () => cq,
          '$ZodEmoji',
          () => cs,
          '$ZodEnum',
          () => dj,
          '$ZodFile',
          () => dl,
          '$ZodFunction',
          () => dH,
          '$ZodGUID',
          () => co,
          '$ZodIPv4',
          () => cD,
          '$ZodIPv6',
          () => cE,
          '$ZodISODate',
          () => cA,
          '$ZodISODateTime',
          () => cz,
          '$ZodISODuration',
          () => cC,
          '$ZodISOTime',
          () => cB,
          '$ZodIntersection',
          () => da,
          '$ZodJWT',
          () => cN,
          '$ZodKSUID',
          () => cy,
          '$ZodLazy',
          () => dJ,
          '$ZodLiteral',
          () => dk,
          '$ZodMap',
          () => df,
          '$ZodNaN',
          () => dy,
          '$ZodNanoID',
          () => ct,
          '$ZodNever',
          () => cZ,
          '$ZodNonOptional',
          () => du,
          '$ZodNull',
          () => cW,
          '$ZodNullable',
          () => dq,
          '$ZodNumber',
          () => cP,
          '$ZodNumberFormat',
          () => cQ,
          '$ZodObject',
          () => c5,
          '$ZodObjectJIT',
          () => c6,
          '$ZodOptional',
          () => dp,
          '$ZodPipe',
          () => dz,
          '$ZodPrefault',
          () => dt,
          '$ZodPromise',
          () => dI,
          '$ZodReadonly',
          () => dE,
          '$ZodRecord',
          () => de,
          '$ZodSet',
          () => dh,
          '$ZodString',
          () => cm,
          '$ZodStringFormat',
          () => cn,
          '$ZodSuccess',
          () => dw,
          '$ZodSymbol',
          () => cU,
          '$ZodTemplateLiteral',
          () => dG,
          '$ZodTransform',
          () => dm,
          '$ZodTuple',
          () => dc,
          '$ZodType',
          () => cl,
          '$ZodULID',
          () => cw,
          '$ZodURL',
          () => cr,
          '$ZodUUID',
          () => cp,
          '$ZodUndefined',
          () => cV,
          '$ZodUnion',
          () => c8,
          '$ZodUnknown',
          () => cY,
          '$ZodVoid',
          () => c$,
          '$ZodXID',
          () => cx,
          'isValidBase64',
          () => cH,
          'isValidBase64URL',
          () => cJ,
          'isValidJWT',
          () => cM,
        ],
        96686
      ),
      a.s(
        [
          '$ZodCheck',
          () => bX,
          '$ZodCheckBigIntFormat',
          () => b1,
          '$ZodCheckEndsWith',
          () => ce,
          '$ZodCheckGreaterThan',
          () => b$,
          '$ZodCheckIncludes',
          () => cc,
          '$ZodCheckLengthEquals',
          () => b7,
          '$ZodCheckLessThan',
          () => bZ,
          '$ZodCheckLowerCase',
          () => ca,
          '$ZodCheckMaxLength',
          () => b5,
          '$ZodCheckMaxSize',
          () => b2,
          '$ZodCheckMimeType',
          () => ch,
          '$ZodCheckMinLength',
          () => b6,
          '$ZodCheckMinSize',
          () => b3,
          '$ZodCheckMultipleOf',
          () => b_,
          '$ZodCheckNumberFormat',
          () => b0,
          '$ZodCheckOverwrite',
          () => ci,
          '$ZodCheckProperty',
          () => cg,
          '$ZodCheckRegex',
          () => b9,
          '$ZodCheckSizeEquals',
          () => b4,
          '$ZodCheckStartsWith',
          () => cd,
          '$ZodCheckStringFormat',
          () => b8,
          '$ZodCheckUpperCase',
          () => cb,
        ],
        2381
      ),
      a.s(
        [
          'base64',
          () => bm,
          'base64url',
          () => bn,
          'bigint',
          () => bx,
          'boolean',
          () => bA,
          'browserEmail',
          () => bg,
          'cidrv4',
          () => bk,
          'cidrv6',
          () => bl,
          'cuid',
          () => a$,
          'cuid2',
          () => a_,
          'date',
          () => bs,
          'datetime',
          () => bv,
          'domain',
          () => bp,
          'duration',
          () => a4,
          'e164',
          () => bq,
          'email',
          () => bb,
          'emoji',
          () => bh,
          'extendedDuration',
          () => a5,
          'guid',
          () => a6,
          'hex',
          () => bF,
          'hostname',
          () => bo,
          'html5Email',
          () => bc,
          'idnEmail',
          () => bf,
          'integer',
          () => by,
          'ipv4',
          () => bi,
          'ipv6',
          () => bj,
          'ksuid',
          () => a2,
          'lowercase',
          () => bD,
          'md5_base64',
          () => bJ,
          'md5_base64url',
          () => bK,
          'md5_hex',
          () => bI,
          'nanoid',
          () => a3,
          'null',
          () => bB,
          'number',
          () => bz,
          'rfc5322Email',
          () => bd,
          'sha1_base64',
          () => bM,
          'sha1_base64url',
          () => bN,
          'sha1_hex',
          () => bL,
          'sha256_base64',
          () => bP,
          'sha256_base64url',
          () => bQ,
          'sha256_hex',
          () => bO,
          'sha384_base64',
          () => bS,
          'sha384_base64url',
          () => bT,
          'sha384_hex',
          () => bR,
          'sha512_base64',
          () => bV,
          'sha512_base64url',
          () => bW,
          'sha512_hex',
          () => bU,
          'string',
          () => bw,
          'time',
          () => bu,
          'ulid',
          () => a0,
          'undefined',
          () => bC,
          'unicodeEmail',
          () => be,
          'uppercase',
          () => bE,
          'uuid',
          () => a7,
          'uuid4',
          () => a8,
          'uuid6',
          () => a9,
          'uuid7',
          () => ba,
          'xid',
          () => a1,
        ],
        10395
      ));
    let a$ = /^[cC][^\s-]{8,}$/,
      a_ = /^[0-9a-z]+$/,
      a0 = /^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/,
      a1 = /^[0-9a-vA-V]{20}$/,
      a2 = /^[A-Za-z0-9]{27}$/,
      a3 = /^[a-zA-Z0-9_-]{21}$/,
      a4 =
        /^P(?:(\d+W)|(?!.*W)(?=\d|T\d)(\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+([.,]\d+)?S)?)?)$/,
      a5 =
        /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,
      a6 = /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/,
      a7 = (a) =>
        a
          ? RegExp(
              `^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${a}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`
            )
          : /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/,
      a8 = a7(4),
      a9 = a7(6),
      ba = a7(7),
      bb =
        /^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$/,
      bc =
        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
      bd =
        /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
      be = /^[^\s@"]{1,64}@[^\s@]{1,255}$/u,
      bf = /^[^\s@"]{1,64}@[^\s@]{1,255}$/u,
      bg =
        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    function bh() {
      return RegExp('^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$', 'u');
    }
    let bi =
        /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
      bj =
        /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})$/,
      bk =
        /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/([0-9]|[1-2][0-9]|3[0-2])$/,
      bl =
        /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
      bm = /^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/,
      bn = /^[A-Za-z0-9_-]*$/,
      bo =
        /^(?=.{1,253}\.?$)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[-0-9a-zA-Z]{0,61}[0-9a-zA-Z])?)*\.?$/,
      bp = /^([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/,
      bq = /^\+(?:[0-9]){6,14}[0-9]$/,
      br =
        '(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))',
      bs = RegExp(`^${br}$`);
    function bt(a) {
      let b = '(?:[01]\\d|2[0-3]):[0-5]\\d';
      return 'number' == typeof a.precision
        ? -1 === a.precision
          ? `${b}`
          : 0 === a.precision
            ? `${b}:[0-5]\\d`
            : `${b}:[0-5]\\d\\.\\d{${a.precision}}`
        : `${b}(?::[0-5]\\d(?:\\.\\d+)?)?`;
    }
    function bu(a) {
      return RegExp(`^${bt(a)}$`);
    }
    function bv(a) {
      let b = bt({ precision: a.precision }),
        c = ['Z'];
      (a.local && c.push(''), a.offset && c.push('([+-](?:[01]\\d|2[0-3]):[0-5]\\d)'));
      let d = `${b}(?:${c.join('|')})`;
      return RegExp(`^${br}T(?:${d})$`);
    }
    let bw = (a) => {
        let b = a ? `[\\s\\S]{${a?.minimum ?? 0},${a?.maximum ?? ''}}` : '[\\s\\S]*';
        return RegExp(`^${b}$`);
      },
      bx = /^\d+n?$/,
      by = /^\d+$/,
      bz = /^-?\d+(?:\.\d+)?/i,
      bA = /true|false/i,
      bB = /null/i,
      bC = /undefined/i,
      bD = /^[^A-Z]*$/,
      bE = /^[^a-z]*$/,
      bF = /^[0-9a-fA-F]*$/;
    function bG(a, b) {
      return RegExp(`^[A-Za-z0-9+/]{${a}}${b}$`);
    }
    function bH(a) {
      return RegExp(`^[A-Za-z0-9-_]{${a}}$`);
    }
    let bI = /^[0-9a-fA-F]{32}$/,
      bJ = bG(22, '=='),
      bK = bH(22),
      bL = /^[0-9a-fA-F]{40}$/,
      bM = bG(27, '='),
      bN = bH(27),
      bO = /^[0-9a-fA-F]{64}$/,
      bP = bG(43, '='),
      bQ = bH(43),
      bR = /^[0-9a-fA-F]{96}$/,
      bS = bG(64, ''),
      bT = bH(64),
      bU = /^[0-9a-fA-F]{128}$/,
      bV = bG(86, '=='),
      bW = bH(86),
      bX = g('$ZodCheck', (a, b) => {
        var c;
        (a._zod ?? (a._zod = {}), (a._zod.def = b), (c = a._zod).onattach ?? (c.onattach = []));
      }),
      bY = { number: 'number', bigint: 'bigint', object: 'date' },
      bZ = g('$ZodCheckLessThan', (a, b) => {
        bX.init(a, b);
        let c = bY[typeof b.value];
        (a._zod.onattach.push((a) => {
          let c = a._zod.bag,
            d = (b.inclusive ? c.maximum : c.exclusiveMaximum) ?? 1 / 0;
          b.value < d && (b.inclusive ? (c.maximum = b.value) : (c.exclusiveMaximum = b.value));
        }),
          (a._zod.check = (d) => {
            (b.inclusive ? d.value <= b.value : d.value < b.value) ||
              d.issues.push({
                origin: c,
                code: 'too_big',
                maximum: b.value,
                input: d.value,
                inclusive: b.inclusive,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      b$ = g('$ZodCheckGreaterThan', (a, b) => {
        bX.init(a, b);
        let c = bY[typeof b.value];
        (a._zod.onattach.push((a) => {
          let c = a._zod.bag,
            d = (b.inclusive ? c.minimum : c.exclusiveMinimum) ?? -1 / 0;
          b.value > d && (b.inclusive ? (c.minimum = b.value) : (c.exclusiveMinimum = b.value));
        }),
          (a._zod.check = (d) => {
            (b.inclusive ? d.value >= b.value : d.value > b.value) ||
              d.issues.push({
                origin: c,
                code: 'too_small',
                minimum: b.value,
                input: d.value,
                inclusive: b.inclusive,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      b_ = g('$ZodCheckMultipleOf', (a, b) => {
        (bX.init(a, b),
          a._zod.onattach.push((a) => {
            var c;
            (c = a._zod.bag).multipleOf ?? (c.multipleOf = b.value);
          }),
          (a._zod.check = (c) => {
            if (typeof c.value != typeof b.value)
              throw Error('Cannot mix number and bigint in multiple_of check.');
            ('bigint' == typeof c.value
              ? c.value % b.value === BigInt(0)
              : 0 === x(c.value, b.value)) ||
              c.issues.push({
                origin: typeof c.value,
                code: 'not_multiple_of',
                divisor: b.value,
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      b0 = g('$ZodCheckNumberFormat', (a, b) => {
        (bX.init(a, b), (b.format = b.format || 'float64'));
        let c = b.format?.includes('int'),
          d = c ? 'int' : 'number',
          [e, f] = X[b.format];
        (a._zod.onattach.push((a) => {
          let d = a._zod.bag;
          ((d.format = b.format), (d.minimum = e), (d.maximum = f), c && (d.pattern = by));
        }),
          (a._zod.check = (g) => {
            let h = g.value;
            if (c) {
              if (!Number.isInteger(h))
                return void g.issues.push({
                  expected: d,
                  format: b.format,
                  code: 'invalid_type',
                  continue: !1,
                  input: h,
                  inst: a,
                });
              if (!Number.isSafeInteger(h))
                return void (h > 0
                  ? g.issues.push({
                      input: h,
                      code: 'too_big',
                      maximum: Number.MAX_SAFE_INTEGER,
                      note: 'Integers must be within the safe integer range.',
                      inst: a,
                      origin: d,
                      continue: !b.abort,
                    })
                  : g.issues.push({
                      input: h,
                      code: 'too_small',
                      minimum: Number.MIN_SAFE_INTEGER,
                      note: 'Integers must be within the safe integer range.',
                      inst: a,
                      origin: d,
                      continue: !b.abort,
                    }));
            }
            (h < e &&
              g.issues.push({
                origin: 'number',
                input: h,
                code: 'too_small',
                minimum: e,
                inclusive: !0,
                inst: a,
                continue: !b.abort,
              }),
              h > f &&
                g.issues.push({
                  origin: 'number',
                  input: h,
                  code: 'too_big',
                  maximum: f,
                  inst: a,
                }));
          }));
      }),
      b1 = g('$ZodCheckBigIntFormat', (a, b) => {
        bX.init(a, b);
        let [c, d] = Y[b.format];
        (a._zod.onattach.push((a) => {
          let e = a._zod.bag;
          ((e.format = b.format), (e.minimum = c), (e.maximum = d));
        }),
          (a._zod.check = (e) => {
            let f = e.value;
            (f < c &&
              e.issues.push({
                origin: 'bigint',
                input: f,
                code: 'too_small',
                minimum: c,
                inclusive: !0,
                inst: a,
                continue: !b.abort,
              }),
              f > d &&
                e.issues.push({
                  origin: 'bigint',
                  input: f,
                  code: 'too_big',
                  maximum: d,
                  inst: a,
                }));
          }));
      }),
      b2 = g('$ZodCheckMaxSize', (a, b) => {
        var c;
        (bX.init(a, b),
          (c = a._zod.def).when ??
            (c.when = (a) => {
              let b = a.value;
              return !v(b) && void 0 !== b.size;
            }),
          a._zod.onattach.push((a) => {
            let c = a._zod.bag.maximum ?? 1 / 0;
            b.maximum < c && (a._zod.bag.maximum = b.maximum);
          }),
          (a._zod.check = (c) => {
            let d = c.value;
            d.size <= b.maximum ||
              c.issues.push({
                origin: ai(d),
                code: 'too_big',
                maximum: b.maximum,
                inclusive: !0,
                input: d,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      b3 = g('$ZodCheckMinSize', (a, b) => {
        var c;
        (bX.init(a, b),
          (c = a._zod.def).when ??
            (c.when = (a) => {
              let b = a.value;
              return !v(b) && void 0 !== b.size;
            }),
          a._zod.onattach.push((a) => {
            let c = a._zod.bag.minimum ?? -1 / 0;
            b.minimum > c && (a._zod.bag.minimum = b.minimum);
          }),
          (a._zod.check = (c) => {
            let d = c.value;
            d.size >= b.minimum ||
              c.issues.push({
                origin: ai(d),
                code: 'too_small',
                minimum: b.minimum,
                inclusive: !0,
                input: d,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      b4 = g('$ZodCheckSizeEquals', (a, b) => {
        var c;
        (bX.init(a, b),
          (c = a._zod.def).when ??
            (c.when = (a) => {
              let b = a.value;
              return !v(b) && void 0 !== b.size;
            }),
          a._zod.onattach.push((a) => {
            let c = a._zod.bag;
            ((c.minimum = b.size), (c.maximum = b.size), (c.size = b.size));
          }),
          (a._zod.check = (c) => {
            let d = c.value,
              e = d.size;
            if (e === b.size) return;
            let f = e > b.size;
            c.issues.push({
              origin: ai(d),
              ...(f
                ? { code: 'too_big', maximum: b.size }
                : { code: 'too_small', minimum: b.size }),
              inclusive: !0,
              exact: !0,
              input: c.value,
              inst: a,
              continue: !b.abort,
            });
          }));
      }),
      b5 = g('$ZodCheckMaxLength', (a, b) => {
        var c;
        (bX.init(a, b),
          (c = a._zod.def).when ??
            (c.when = (a) => {
              let b = a.value;
              return !v(b) && void 0 !== b.length;
            }),
          a._zod.onattach.push((a) => {
            let c = a._zod.bag.maximum ?? 1 / 0;
            b.maximum < c && (a._zod.bag.maximum = b.maximum);
          }),
          (a._zod.check = (c) => {
            let d = c.value;
            if (d.length <= b.maximum) return;
            let e = aj(d);
            c.issues.push({
              origin: e,
              code: 'too_big',
              maximum: b.maximum,
              inclusive: !0,
              input: d,
              inst: a,
              continue: !b.abort,
            });
          }));
      }),
      b6 = g('$ZodCheckMinLength', (a, b) => {
        var c;
        (bX.init(a, b),
          (c = a._zod.def).when ??
            (c.when = (a) => {
              let b = a.value;
              return !v(b) && void 0 !== b.length;
            }),
          a._zod.onattach.push((a) => {
            let c = a._zod.bag.minimum ?? -1 / 0;
            b.minimum > c && (a._zod.bag.minimum = b.minimum);
          }),
          (a._zod.check = (c) => {
            let d = c.value;
            if (d.length >= b.minimum) return;
            let e = aj(d);
            c.issues.push({
              origin: e,
              code: 'too_small',
              minimum: b.minimum,
              inclusive: !0,
              input: d,
              inst: a,
              continue: !b.abort,
            });
          }));
      }),
      b7 = g('$ZodCheckLengthEquals', (a, b) => {
        var c;
        (bX.init(a, b),
          (c = a._zod.def).when ??
            (c.when = (a) => {
              let b = a.value;
              return !v(b) && void 0 !== b.length;
            }),
          a._zod.onattach.push((a) => {
            let c = a._zod.bag;
            ((c.minimum = b.length), (c.maximum = b.length), (c.length = b.length));
          }),
          (a._zod.check = (c) => {
            let d = c.value,
              e = d.length;
            if (e === b.length) return;
            let f = aj(d),
              g = e > b.length;
            c.issues.push({
              origin: f,
              ...(g
                ? { code: 'too_big', maximum: b.length }
                : { code: 'too_small', minimum: b.length }),
              inclusive: !0,
              exact: !0,
              input: c.value,
              inst: a,
              continue: !b.abort,
            });
          }));
      }),
      b8 = g('$ZodCheckStringFormat', (a, b) => {
        var c, d;
        (bX.init(a, b),
          a._zod.onattach.push((a) => {
            let c = a._zod.bag;
            ((c.format = b.format),
              b.pattern && (c.patterns ?? (c.patterns = new Set()), c.patterns.add(b.pattern)));
          }),
          b.pattern
            ? ((c = a._zod).check ??
              (c.check = (c) => {
                ((b.pattern.lastIndex = 0),
                  b.pattern.test(c.value) ||
                    c.issues.push({
                      origin: 'string',
                      code: 'invalid_format',
                      format: b.format,
                      input: c.value,
                      ...(b.pattern ? { pattern: b.pattern.toString() } : {}),
                      inst: a,
                      continue: !b.abort,
                    }));
              }))
            : ((d = a._zod).check ?? (d.check = () => {})));
      }),
      b9 = g('$ZodCheckRegex', (a, b) => {
        (b8.init(a, b),
          (a._zod.check = (c) => {
            ((b.pattern.lastIndex = 0),
              b.pattern.test(c.value) ||
                c.issues.push({
                  origin: 'string',
                  code: 'invalid_format',
                  format: 'regex',
                  input: c.value,
                  pattern: b.pattern.toString(),
                  inst: a,
                  continue: !b.abort,
                }));
          }));
      }),
      ca = g('$ZodCheckLowerCase', (a, b) => {
        (b.pattern ?? (b.pattern = bD), b8.init(a, b));
      }),
      cb = g('$ZodCheckUpperCase', (a, b) => {
        (b.pattern ?? (b.pattern = bE), b8.init(a, b));
      }),
      cc = g('$ZodCheckIncludes', (a, b) => {
        bX.init(a, b);
        let c = R(b.includes),
          d = new RegExp('number' == typeof b.position ? `^.{${b.position}}${c}` : c);
        ((b.pattern = d),
          a._zod.onattach.push((a) => {
            let b = a._zod.bag;
            (b.patterns ?? (b.patterns = new Set()), b.patterns.add(d));
          }),
          (a._zod.check = (c) => {
            c.value.includes(b.includes, b.position) ||
              c.issues.push({
                origin: 'string',
                code: 'invalid_format',
                format: 'includes',
                includes: b.includes,
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      cd = g('$ZodCheckStartsWith', (a, b) => {
        bX.init(a, b);
        let c = RegExp(`^${R(b.prefix)}.*`);
        (b.pattern ?? (b.pattern = c),
          a._zod.onattach.push((a) => {
            let b = a._zod.bag;
            (b.patterns ?? (b.patterns = new Set()), b.patterns.add(c));
          }),
          (a._zod.check = (c) => {
            c.value.startsWith(b.prefix) ||
              c.issues.push({
                origin: 'string',
                code: 'invalid_format',
                format: 'starts_with',
                prefix: b.prefix,
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      ce = g('$ZodCheckEndsWith', (a, b) => {
        bX.init(a, b);
        let c = RegExp(`.*${R(b.suffix)}$`);
        (b.pattern ?? (b.pattern = c),
          a._zod.onattach.push((a) => {
            let b = a._zod.bag;
            (b.patterns ?? (b.patterns = new Set()), b.patterns.add(c));
          }),
          (a._zod.check = (c) => {
            c.value.endsWith(b.suffix) ||
              c.issues.push({
                origin: 'string',
                code: 'invalid_format',
                format: 'ends_with',
                suffix: b.suffix,
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
          }));
      });
    function cf(a, b, c) {
      a.issues.length && b.issues.push(...af(c, a.issues));
    }
    let cg = g('$ZodCheckProperty', (a, b) => {
        (bX.init(a, b),
          (a._zod.check = (a) => {
            let c = b.schema._zod.run({ value: a.value[b.property], issues: [] }, {});
            if (c instanceof Promise) return c.then((c) => cf(c, a, b.property));
            cf(c, a, b.property);
          }));
      }),
      ch = g('$ZodCheckMimeType', (a, b) => {
        bX.init(a, b);
        let c = new Set(b.mime);
        (a._zod.onattach.push((a) => {
          a._zod.bag.mime = b.mime;
        }),
          (a._zod.check = (d) => {
            c.has(d.value.type) ||
              d.issues.push({
                code: 'invalid_value',
                values: b.mime,
                input: d.value.type,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      ci = g('$ZodCheckOverwrite', (a, b) => {
        (bX.init(a, b),
          (a._zod.check = (a) => {
            a.value = b.tx(a.value);
          }));
      });
    a.s(['Doc', () => cj], 26553);
    class cj {
      constructor(a = []) {
        ((this.content = []), (this.indent = 0), this && (this.args = a));
      }
      indented(a) {
        ((this.indent += 1), a(this), (this.indent -= 1));
      }
      write(a) {
        if ('function' == typeof a) {
          (a(this, { execution: 'sync' }), a(this, { execution: 'async' }));
          return;
        }
        let b = a.split('\n').filter((a) => a),
          c = Math.min(...b.map((a) => a.length - a.trimStart().length));
        for (let a of b.map((a) => a.slice(c)).map((a) => ' '.repeat(2 * this.indent) + a))
          this.content.push(a);
      }
      compile() {
        return Function(
          ...this?.args,
          [...(this?.content ?? ['']).map((a) => `  ${a}`)].join('\n')
        );
      }
    }
    a.s(['version', () => ck], 23215);
    let ck = { major: 4, minor: 1, patch: 5 },
      cl = g('$ZodType', (a, b) => {
        var c;
        (a ?? (a = {}), (a._zod.def = b), (a._zod.bag = a._zod.bag || {}), (a._zod.version = ck));
        let d = [...(a._zod.def.checks ?? [])];
        for (let b of (a._zod.traits.has('$ZodCheck') && d.unshift(a), d))
          for (let c of b._zod.onattach) c(a);
        if (0 === d.length)
          ((c = a._zod).deferred ?? (c.deferred = []),
            a._zod.deferred?.push(() => {
              a._zod.run = a._zod.parse;
            }));
        else {
          let b = (a, b, c) => {
              let d,
                e = ae(a);
              for (let f of b) {
                if (f._zod.def.when) {
                  if (!f._zod.def.when(a)) continue;
                } else if (e) continue;
                let b = a.issues.length,
                  g = f._zod.check(a);
                if (g instanceof Promise && c?.async === !1) throw new i();
                if (d || g instanceof Promise)
                  d = (d ?? Promise.resolve()).then(async () => {
                    (await g, a.issues.length !== b && (e || (e = ae(a, b))));
                  });
                else {
                  if (a.issues.length === b) continue;
                  e || (e = ae(a, b));
                }
              }
              return d ? d.then(() => a) : a;
            },
            c = (c, e, f) => {
              if (ae(c)) return ((c.aborted = !0), c);
              let g = b(e, d, f);
              if (g instanceof Promise) {
                if (!1 === f.async) throw new i();
                return g.then((b) => a._zod.parse(b, f));
              }
              return a._zod.parse(g, f);
            };
          a._zod.run = (e, f) => {
            if (f.skipChecks) return a._zod.parse(e, f);
            if ('backward' === f.direction) {
              let b = a._zod.parse({ value: e.value, issues: [] }, { ...f, skipChecks: !0 });
              return b instanceof Promise ? b.then((a) => c(a, e, f)) : c(b, e, f);
            }
            let g = a._zod.parse(e, f);
            if (g instanceof Promise) {
              if (!1 === f.async) throw new i();
              return g.then((a) => b(a, d, f));
            }
            return b(g, d, f);
          };
        }
        a['~standard'] = {
          validate: (b) => {
            try {
              let c = aH(a, b);
              return c.success ? { value: c.data } : { issues: c.error?.issues };
            } catch (c) {
              return aJ(a, b).then((a) =>
                a.success ? { value: a.data } : { issues: a.error?.issues }
              );
            }
          },
          vendor: 'zod',
          version: 1,
        };
      }),
      cm = g('$ZodString', (a, b) => {
        (cl.init(a, b),
          (a._zod.pattern = [...(a?._zod.bag?.patterns ?? [])].pop() ?? bw(a._zod.bag)),
          (a._zod.parse = (c, d) => {
            if (b.coerce)
              try {
                c.value = String(c.value);
              } catch (a) {}
            return (
              'string' == typeof c.value ||
                c.issues.push({
                  expected: 'string',
                  code: 'invalid_type',
                  input: c.value,
                  inst: a,
                }),
              c
            );
          }));
      }),
      cn = g('$ZodStringFormat', (a, b) => {
        (b8.init(a, b), cm.init(a, b));
      }),
      co = g('$ZodGUID', (a, b) => {
        (b.pattern ?? (b.pattern = a6), cn.init(a, b));
      }),
      cp = g('$ZodUUID', (a, b) => {
        if (b.version) {
          let a = { v1: 1, v2: 2, v3: 3, v4: 4, v5: 5, v6: 6, v7: 7, v8: 8 }[b.version];
          if (void 0 === a) throw Error(`Invalid UUID version: "${b.version}"`);
          b.pattern ?? (b.pattern = a7(a));
        } else b.pattern ?? (b.pattern = a7());
        cn.init(a, b);
      }),
      cq = g('$ZodEmail', (a, b) => {
        (b.pattern ?? (b.pattern = bb), cn.init(a, b));
      }),
      cr = g('$ZodURL', (a, b) => {
        (cn.init(a, b),
          (a._zod.check = (c) => {
            try {
              let d = c.value.trim(),
                e = new URL(d);
              (b.hostname &&
                ((b.hostname.lastIndex = 0),
                b.hostname.test(e.hostname) ||
                  c.issues.push({
                    code: 'invalid_format',
                    format: 'url',
                    note: 'Invalid hostname',
                    pattern: bo.source,
                    input: c.value,
                    inst: a,
                    continue: !b.abort,
                  })),
                b.protocol &&
                  ((b.protocol.lastIndex = 0),
                  b.protocol.test(
                    e.protocol.endsWith(':') ? e.protocol.slice(0, -1) : e.protocol
                  ) ||
                    c.issues.push({
                      code: 'invalid_format',
                      format: 'url',
                      note: 'Invalid protocol',
                      pattern: b.protocol.source,
                      input: c.value,
                      inst: a,
                      continue: !b.abort,
                    })),
                b.normalize ? (c.value = e.href) : (c.value = d));
              return;
            } catch (d) {
              c.issues.push({
                code: 'invalid_format',
                format: 'url',
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
            }
          }));
      }),
      cs = g('$ZodEmoji', (a, b) => {
        (b.pattern ?? (b.pattern = bh()), cn.init(a, b));
      }),
      ct = g('$ZodNanoID', (a, b) => {
        (b.pattern ?? (b.pattern = a3), cn.init(a, b));
      }),
      cu = g('$ZodCUID', (a, b) => {
        (b.pattern ?? (b.pattern = a$), cn.init(a, b));
      }),
      cv = g('$ZodCUID2', (a, b) => {
        (b.pattern ?? (b.pattern = a_), cn.init(a, b));
      }),
      cw = g('$ZodULID', (a, b) => {
        (b.pattern ?? (b.pattern = a0), cn.init(a, b));
      }),
      cx = g('$ZodXID', (a, b) => {
        (b.pattern ?? (b.pattern = a1), cn.init(a, b));
      }),
      cy = g('$ZodKSUID', (a, b) => {
        (b.pattern ?? (b.pattern = a2), cn.init(a, b));
      }),
      cz = g('$ZodISODateTime', (a, b) => {
        (b.pattern ?? (b.pattern = bv(b)), cn.init(a, b));
      }),
      cA = g('$ZodISODate', (a, b) => {
        (b.pattern ?? (b.pattern = bs), cn.init(a, b));
      }),
      cB = g('$ZodISOTime', (a, b) => {
        (b.pattern ?? (b.pattern = bu(b)), cn.init(a, b));
      }),
      cC = g('$ZodISODuration', (a, b) => {
        (b.pattern ?? (b.pattern = a4), cn.init(a, b));
      }),
      cD = g('$ZodIPv4', (a, b) => {
        (b.pattern ?? (b.pattern = bi),
          cn.init(a, b),
          a._zod.onattach.push((a) => {
            a._zod.bag.format = 'ipv4';
          }));
      }),
      cE = g('$ZodIPv6', (a, b) => {
        (b.pattern ?? (b.pattern = bj),
          cn.init(a, b),
          a._zod.onattach.push((a) => {
            a._zod.bag.format = 'ipv6';
          }),
          (a._zod.check = (c) => {
            try {
              new URL(`http://[${c.value}]`);
            } catch {
              c.issues.push({
                code: 'invalid_format',
                format: 'ipv6',
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
            }
          }));
      }),
      cF = g('$ZodCIDRv4', (a, b) => {
        (b.pattern ?? (b.pattern = bk), cn.init(a, b));
      }),
      cG = g('$ZodCIDRv6', (a, b) => {
        (b.pattern ?? (b.pattern = bl),
          cn.init(a, b),
          (a._zod.check = (c) => {
            let [d, e] = c.value.split('/');
            try {
              if (!e) throw Error();
              let a = Number(e);
              if (`${a}` !== e || a < 0 || a > 128) throw Error();
              new URL(`http://[${d}]`);
            } catch {
              c.issues.push({
                code: 'invalid_format',
                format: 'cidrv6',
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
            }
          }));
      });
    function cH(a) {
      if ('' === a) return !0;
      if (a.length % 4 != 0) return !1;
      try {
        return (atob(a), !0);
      } catch {
        return !1;
      }
    }
    let cI = g('$ZodBase64', (a, b) => {
      (b.pattern ?? (b.pattern = bm),
        cn.init(a, b),
        a._zod.onattach.push((a) => {
          a._zod.bag.contentEncoding = 'base64';
        }),
        (a._zod.check = (c) => {
          cH(c.value) ||
            c.issues.push({
              code: 'invalid_format',
              format: 'base64',
              input: c.value,
              inst: a,
              continue: !b.abort,
            });
        }));
    });
    function cJ(a) {
      if (!bn.test(a)) return !1;
      let b = a.replace(/[-_]/g, (a) => ('-' === a ? '+' : '/'));
      return cH(b.padEnd(4 * Math.ceil(b.length / 4), '='));
    }
    let cK = g('$ZodBase64URL', (a, b) => {
        (b.pattern ?? (b.pattern = bn),
          cn.init(a, b),
          a._zod.onattach.push((a) => {
            a._zod.bag.contentEncoding = 'base64url';
          }),
          (a._zod.check = (c) => {
            cJ(c.value) ||
              c.issues.push({
                code: 'invalid_format',
                format: 'base64url',
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      cL = g('$ZodE164', (a, b) => {
        (b.pattern ?? (b.pattern = bq), cn.init(a, b));
      });
    function cM(a, b = null) {
      try {
        let c = a.split('.');
        if (3 !== c.length) return !1;
        let [d] = c;
        if (!d) return !1;
        let e = JSON.parse(atob(d));
        if (('typ' in e && e?.typ !== 'JWT') || !e.alg || (b && (!('alg' in e) || e.alg !== b)))
          return !1;
        return !0;
      } catch {
        return !1;
      }
    }
    let cN = g('$ZodJWT', (a, b) => {
        (cn.init(a, b),
          (a._zod.check = (c) => {
            cM(c.value, b.alg) ||
              c.issues.push({
                code: 'invalid_format',
                format: 'jwt',
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      cO = g('$ZodCustomStringFormat', (a, b) => {
        (cn.init(a, b),
          (a._zod.check = (c) => {
            b.fn(c.value) ||
              c.issues.push({
                code: 'invalid_format',
                format: b.format,
                input: c.value,
                inst: a,
                continue: !b.abort,
              });
          }));
      }),
      cP = g('$ZodNumber', (a, b) => {
        (cl.init(a, b),
          (a._zod.pattern = a._zod.bag.pattern ?? bz),
          (a._zod.parse = (c, d) => {
            if (b.coerce)
              try {
                c.value = Number(c.value);
              } catch (a) {}
            let e = c.value;
            if ('number' == typeof e && !Number.isNaN(e) && Number.isFinite(e)) return c;
            let f =
              'number' == typeof e
                ? Number.isNaN(e)
                  ? 'NaN'
                  : Number.isFinite(e)
                    ? void 0
                    : 'Infinity'
                : void 0;
            return (
              c.issues.push({
                expected: 'number',
                code: 'invalid_type',
                input: e,
                inst: a,
                ...(f ? { received: f } : {}),
              }),
              c
            );
          }));
      }),
      cQ = g('$ZodNumber', (a, b) => {
        (b0.init(a, b), cP.init(a, b));
      }),
      cR = g('$ZodBoolean', (a, b) => {
        (cl.init(a, b),
          (a._zod.pattern = bA),
          (a._zod.parse = (c, d) => {
            if (b.coerce)
              try {
                c.value = !!c.value;
              } catch (a) {}
            let e = c.value;
            return (
              'boolean' == typeof e ||
                c.issues.push({ expected: 'boolean', code: 'invalid_type', input: e, inst: a }),
              c
            );
          }));
      }),
      cS = g('$ZodBigInt', (a, b) => {
        (cl.init(a, b),
          (a._zod.pattern = bx),
          (a._zod.parse = (c, d) => {
            if (b.coerce)
              try {
                c.value = BigInt(c.value);
              } catch (a) {}
            return (
              'bigint' == typeof c.value ||
                c.issues.push({
                  expected: 'bigint',
                  code: 'invalid_type',
                  input: c.value,
                  inst: a,
                }),
              c
            );
          }));
      }),
      cT = g('$ZodBigInt', (a, b) => {
        (b1.init(a, b), cS.init(a, b));
      }),
      cU = g('$ZodSymbol', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (b, c) => {
            let d = b.value;
            return (
              'symbol' == typeof d ||
                b.issues.push({ expected: 'symbol', code: 'invalid_type', input: d, inst: a }),
              b
            );
          }));
      }),
      cV = g('$ZodUndefined', (a, b) => {
        (cl.init(a, b),
          (a._zod.pattern = bC),
          (a._zod.values = new Set([void 0])),
          (a._zod.optin = 'optional'),
          (a._zod.optout = 'optional'),
          (a._zod.parse = (b, c) => {
            let d = b.value;
            return (
              void 0 === d ||
                b.issues.push({ expected: 'undefined', code: 'invalid_type', input: d, inst: a }),
              b
            );
          }));
      }),
      cW = g('$ZodNull', (a, b) => {
        (cl.init(a, b),
          (a._zod.pattern = bB),
          (a._zod.values = new Set([null])),
          (a._zod.parse = (b, c) => {
            let d = b.value;
            return (
              null === d ||
                b.issues.push({ expected: 'null', code: 'invalid_type', input: d, inst: a }),
              b
            );
          }));
      }),
      cX = g('$ZodAny', (a, b) => {
        (cl.init(a, b), (a._zod.parse = (a) => a));
      }),
      cY = g('$ZodUnknown', (a, b) => {
        (cl.init(a, b), (a._zod.parse = (a) => a));
      }),
      cZ = g('$ZodNever', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (b, c) => (
            b.issues.push({ expected: 'never', code: 'invalid_type', input: b.value, inst: a }),
            b
          )));
      }),
      c$ = g('$ZodVoid', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (b, c) => {
            let d = b.value;
            return (
              void 0 === d ||
                b.issues.push({ expected: 'void', code: 'invalid_type', input: d, inst: a }),
              b
            );
          }));
      }),
      c_ = g('$ZodDate', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (c, d) => {
            if (b.coerce)
              try {
                c.value = new Date(c.value);
              } catch (a) {}
            let e = c.value,
              f = e instanceof Date;
            return (
              (f && !Number.isNaN(e.getTime())) ||
                c.issues.push({
                  expected: 'date',
                  code: 'invalid_type',
                  input: e,
                  ...(f ? { received: 'Invalid Date' } : {}),
                  inst: a,
                }),
              c
            );
          }));
      });
    function c0(a, b, c) {
      (a.issues.length && b.issues.push(...af(c, a.issues)), (b.value[c] = a.value));
    }
    let c1 = g('$ZodArray', (a, b) => {
      (cl.init(a, b),
        (a._zod.parse = (c, d) => {
          let e = c.value;
          if (!Array.isArray(e))
            return (
              c.issues.push({ expected: 'array', code: 'invalid_type', input: e, inst: a }),
              c
            );
          c.value = Array(e.length);
          let f = [];
          for (let a = 0; a < e.length; a++) {
            let g = e[a],
              h = b.element._zod.run({ value: g, issues: [] }, d);
            h instanceof Promise ? f.push(h.then((b) => c0(b, c, a))) : c0(h, c, a);
          }
          return f.length ? Promise.all(f).then(() => c) : c;
        }));
    });
    function c2(a, b, c, d) {
      (a.issues.length && b.issues.push(...af(c, a.issues)),
        void 0 === a.value ? c in d && (b.value[c] = void 0) : (b.value[c] = a.value));
    }
    function c3(a) {
      let b = Object.keys(a.shape);
      for (let c of b)
        if (!a.shape[c]._zod.traits.has('$ZodType'))
          throw Error(`Invalid element at key "${c}": expected a Zod schema`);
      let c = W(a.shape);
      return { ...a, keys: b, keySet: new Set(b), numKeys: b.length, optionalKeys: new Set(c) };
    }
    function c4(a, b, c, d, e, f) {
      let g = [],
        h = e.keySet,
        i = e.catchall._zod,
        j = i.def.type;
      for (let e of Object.keys(b)) {
        if (h.has(e)) continue;
        if ('never' === j) {
          g.push(e);
          continue;
        }
        let f = i.run({ value: b[e], issues: [] }, d);
        f instanceof Promise ? a.push(f.then((a) => c2(a, c, e, b))) : c2(f, c, e, b);
      }
      return (g.length && c.issues.push({ code: 'unrecognized_keys', keys: g, input: b, inst: f }),
      a.length)
        ? Promise.all(a).then(() => c)
        : c;
    }
    let c5 = g('$ZodObject', (a, b) => {
        let c;
        cl.init(a, b);
        let d = u(() => c3(b));
        z(a._zod, 'propValues', () => {
          let a = b.shape,
            c = {};
          for (let b in a) {
            let d = a[b]._zod;
            if (d.values) for (let a of (c[b] ?? (c[b] = new Set()), d.values)) c[b].add(a);
          }
          return c;
        });
        let e = b.catchall;
        a._zod.parse = (b, f) => {
          c ?? (c = d.value);
          let g = b.value;
          if (!J(g))
            return (
              b.issues.push({ expected: 'object', code: 'invalid_type', input: g, inst: a }),
              b
            );
          b.value = {};
          let h = [],
            i = c.shape;
          for (let a of c.keys) {
            let c = i[a]._zod.run({ value: g[a], issues: [] }, f);
            c instanceof Promise ? h.push(c.then((c) => c2(c, b, a, g))) : c2(c, b, a, g);
          }
          return e ? c4(h, g, b, f, d.value, a) : h.length ? Promise.all(h).then(() => b) : b;
        };
      }),
      c6 = g('$ZodObjectJIT', (a, b) => {
        let c, d;
        c5.init(a, b);
        let e = a._zod.parse,
          f = u(() => c3(b)),
          g = !k.jitless,
          h = g && K.value,
          i = b.catchall;
        a._zod.parse = (j, k) => {
          d ?? (d = f.value);
          let l = j.value;
          return J(l)
            ? g && h && k?.async === !1 && !0 !== k.jitless
              ? (c ||
                  (c = ((a) => {
                    let b = new cj(['shape', 'payload', 'ctx']),
                      c = f.value,
                      d = (a) => {
                        let b = H(a);
                        return `shape[${b}]._zod.run({ value: input[${b}], issues: [] }, ctx)`;
                      };
                    b.write('const input = payload.value;');
                    let e = Object.create(null),
                      g = 0;
                    for (let a of c.keys) e[a] = `key_${g++}`;
                    for (let a of (b.write('const newResult = {}'), c.keys)) {
                      let c = e[a],
                        f = H(a);
                      (b.write(`const ${c} = ${d(a)};`),
                        b.write(`
        if (${c}.issues.length) {
          payload.issues = payload.issues.concat(${c}.issues.map(iss => ({
            ...iss,
            path: iss.path ? [${f}, ...iss.path] : [${f}]
          })));
        }
        
        if (${c}.value === undefined) {
          if (${f} in input) {
            newResult[${f}] = undefined;
          }
        } else {
          newResult[${f}] = ${c}.value;
        }
      `));
                    }
                    (b.write('payload.value = newResult;'), b.write('return payload;'));
                    let h = b.compile();
                    return (b, c) => h(a, b, c);
                  })(b.shape)),
                (j = c(j, k)),
                i)
                ? c4([], l, j, k, d, a)
                : j
              : e(j, k)
            : (j.issues.push({ expected: 'object', code: 'invalid_type', input: l, inst: a }), j);
        };
      });
    function c7(a, b, c, d) {
      for (let c of a) if (0 === c.issues.length) return ((b.value = c.value), b);
      let e = a.filter((a) => !ae(a));
      return 1 === e.length
        ? ((b.value = e[0].value), e[0])
        : (b.issues.push({
            code: 'invalid_union',
            input: b.value,
            inst: c,
            errors: a.map((a) => a.issues.map((a) => ah(a, d, l()))),
          }),
          b);
    }
    let c8 = g('$ZodUnion', (a, b) => {
        (cl.init(a, b),
          z(a._zod, 'optin', () =>
            b.options.some((a) => 'optional' === a._zod.optin) ? 'optional' : void 0
          ),
          z(a._zod, 'optout', () =>
            b.options.some((a) => 'optional' === a._zod.optout) ? 'optional' : void 0
          ),
          z(a._zod, 'values', () => {
            if (b.options.every((a) => a._zod.values))
              return new Set(b.options.flatMap((a) => Array.from(a._zod.values)));
          }),
          z(a._zod, 'pattern', () => {
            if (b.options.every((a) => a._zod.pattern)) {
              let a = b.options.map((a) => a._zod.pattern);
              return RegExp(`^(${a.map((a) => w(a.source)).join('|')})$`);
            }
          }));
        let c = 1 === b.options.length,
          d = b.options[0]._zod.run;
        a._zod.parse = (e, f) => {
          if (c) return d(e, f);
          let g = !1,
            h = [];
          for (let a of b.options) {
            let b = a._zod.run({ value: e.value, issues: [] }, f);
            if (b instanceof Promise) (h.push(b), (g = !0));
            else {
              if (0 === b.issues.length) return b;
              h.push(b);
            }
          }
          return g ? Promise.all(h).then((b) => c7(b, e, a, f)) : c7(h, e, a, f);
        };
      }),
      c9 = g('$ZodDiscriminatedUnion', (a, b) => {
        c8.init(a, b);
        let c = a._zod.parse;
        z(a._zod, 'propValues', () => {
          let a = {};
          for (let c of b.options) {
            let d = c._zod.propValues;
            if (!d || 0 === Object.keys(d).length)
              throw Error(`Invalid discriminated union option at index "${b.options.indexOf(c)}"`);
            for (let [b, c] of Object.entries(d))
              for (let d of (a[b] || (a[b] = new Set()), c)) a[b].add(d);
          }
          return a;
        });
        let d = u(() => {
          let a = b.options,
            c = new Map();
          for (let d of a) {
            let a = d._zod.propValues?.[b.discriminator];
            if (!a || 0 === a.size)
              throw Error(`Invalid discriminated union option at index "${b.options.indexOf(d)}"`);
            for (let b of a) {
              if (c.has(b)) throw Error(`Duplicate discriminator value "${String(b)}"`);
              c.set(b, d);
            }
          }
          return c;
        });
        a._zod.parse = (e, f) => {
          let g = e.value;
          if (!J(g))
            return (
              e.issues.push({ code: 'invalid_type', expected: 'object', input: g, inst: a }),
              e
            );
          let h = d.value.get(g?.[b.discriminator]);
          return h
            ? h._zod.run(e, f)
            : b.unionFallback
              ? c(e, f)
              : (e.issues.push({
                  code: 'invalid_union',
                  errors: [],
                  note: 'No matching discriminator',
                  discriminator: b.discriminator,
                  input: g,
                  path: [b.discriminator],
                  inst: a,
                }),
                e);
        };
      }),
      da = g('$ZodIntersection', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (a, c) => {
            let d = a.value,
              e = b.left._zod.run({ value: d, issues: [] }, c),
              f = b.right._zod.run({ value: d, issues: [] }, c);
            return e instanceof Promise || f instanceof Promise
              ? Promise.all([e, f]).then(([b, c]) => db(a, b, c))
              : db(a, e, f);
          }));
      });
    function db(a, b, c) {
      if (
        (b.issues.length && a.issues.push(...b.issues),
        c.issues.length && a.issues.push(...c.issues),
        ae(a))
      )
        return a;
      let d = (function a(b, c) {
        if (b === c || (b instanceof Date && c instanceof Date && +b == +c))
          return { valid: !0, data: b };
        if (L(b) && L(c)) {
          let d = Object.keys(c),
            e = Object.keys(b).filter((a) => -1 !== d.indexOf(a)),
            f = { ...b, ...c };
          for (let d of e) {
            let e = a(b[d], c[d]);
            if (!e.valid) return { valid: !1, mergeErrorPath: [d, ...e.mergeErrorPath] };
            f[d] = e.data;
          }
          return { valid: !0, data: f };
        }
        if (Array.isArray(b) && Array.isArray(c)) {
          if (b.length !== c.length) return { valid: !1, mergeErrorPath: [] };
          let d = [];
          for (let e = 0; e < b.length; e++) {
            let f = a(b[e], c[e]);
            if (!f.valid) return { valid: !1, mergeErrorPath: [e, ...f.mergeErrorPath] };
            d.push(f.data);
          }
          return { valid: !0, data: d };
        }
        return { valid: !1, mergeErrorPath: [] };
      })(b.value, c.value);
      if (!d.valid)
        throw Error(`Unmergable intersection. Error path: ${JSON.stringify(d.mergeErrorPath)}`);
      return ((a.value = d.data), a);
    }
    let dc = g('$ZodTuple', (a, b) => {
      cl.init(a, b);
      let c = b.items,
        d = c.length - [...c].reverse().findIndex((a) => 'optional' !== a._zod.optin);
      a._zod.parse = (e, f) => {
        let g = e.value;
        if (!Array.isArray(g))
          return (e.issues.push({ input: g, inst: a, expected: 'tuple', code: 'invalid_type' }), e);
        e.value = [];
        let h = [];
        if (!b.rest) {
          let b = g.length > c.length,
            f = g.length < d - 1;
          if (b || f)
            return (
              e.issues.push({
                ...(b
                  ? { code: 'too_big', maximum: c.length }
                  : { code: 'too_small', minimum: c.length }),
                input: g,
                inst: a,
                origin: 'array',
              }),
              e
            );
        }
        let i = -1;
        for (let a of c) {
          if (++i >= g.length && i >= d) continue;
          let b = a._zod.run({ value: g[i], issues: [] }, f);
          b instanceof Promise ? h.push(b.then((a) => dd(a, e, i))) : dd(b, e, i);
        }
        if (b.rest)
          for (let a of g.slice(c.length)) {
            i++;
            let c = b.rest._zod.run({ value: a, issues: [] }, f);
            c instanceof Promise ? h.push(c.then((a) => dd(a, e, i))) : dd(c, e, i);
          }
        return h.length ? Promise.all(h).then(() => e) : e;
      };
    });
    function dd(a, b, c) {
      (a.issues.length && b.issues.push(...af(c, a.issues)), (b.value[c] = a.value));
    }
    let de = g('$ZodRecord', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (c, d) => {
            let e = c.value;
            if (!L(e))
              return (
                c.issues.push({ expected: 'record', code: 'invalid_type', input: e, inst: a }),
                c
              );
            let f = [];
            if (b.keyType._zod.values) {
              let g,
                h = b.keyType._zod.values;
              for (let a of ((c.value = {}), h))
                if ('string' == typeof a || 'number' == typeof a || 'symbol' == typeof a) {
                  let g = b.valueType._zod.run({ value: e[a], issues: [] }, d);
                  g instanceof Promise
                    ? f.push(
                        g.then((b) => {
                          (b.issues.length && c.issues.push(...af(a, b.issues)),
                            (c.value[a] = b.value));
                        })
                      )
                    : (g.issues.length && c.issues.push(...af(a, g.issues)),
                      (c.value[a] = g.value));
                }
              for (let a in e) h.has(a) || (g = g ?? []).push(a);
              g &&
                g.length > 0 &&
                c.issues.push({ code: 'unrecognized_keys', input: e, inst: a, keys: g });
            } else
              for (let g of ((c.value = {}), Reflect.ownKeys(e))) {
                if ('__proto__' === g) continue;
                let h = b.keyType._zod.run({ value: g, issues: [] }, d);
                if (h instanceof Promise)
                  throw Error('Async schemas not supported in object keys currently');
                if (h.issues.length) {
                  (c.issues.push({
                    code: 'invalid_key',
                    origin: 'record',
                    issues: h.issues.map((a) => ah(a, d, l())),
                    input: g,
                    path: [g],
                    inst: a,
                  }),
                    (c.value[h.value] = h.value));
                  continue;
                }
                let i = b.valueType._zod.run({ value: e[g], issues: [] }, d);
                i instanceof Promise
                  ? f.push(
                      i.then((a) => {
                        (a.issues.length && c.issues.push(...af(g, a.issues)),
                          (c.value[h.value] = a.value));
                      })
                    )
                  : (i.issues.length && c.issues.push(...af(g, i.issues)),
                    (c.value[h.value] = i.value));
              }
            return f.length ? Promise.all(f).then(() => c) : c;
          }));
      }),
      df = g('$ZodMap', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (c, d) => {
            let e = c.value;
            if (!(e instanceof Map))
              return (
                c.issues.push({ expected: 'map', code: 'invalid_type', input: e, inst: a }),
                c
              );
            let f = [];
            for (let [g, h] of ((c.value = new Map()), e)) {
              let i = b.keyType._zod.run({ value: g, issues: [] }, d),
                j = b.valueType._zod.run({ value: h, issues: [] }, d);
              i instanceof Promise || j instanceof Promise
                ? f.push(
                    Promise.all([i, j]).then(([b, f]) => {
                      dg(b, f, c, g, e, a, d);
                    })
                  )
                : dg(i, j, c, g, e, a, d);
            }
            return f.length ? Promise.all(f).then(() => c) : c;
          }));
      });
    function dg(a, b, c, d, e, f, g) {
      (a.issues.length &&
        (P.has(typeof d)
          ? c.issues.push(...af(d, a.issues))
          : c.issues.push({
              code: 'invalid_key',
              origin: 'map',
              input: e,
              inst: f,
              issues: a.issues.map((a) => ah(a, g, l())),
            })),
        b.issues.length &&
          (P.has(typeof d)
            ? c.issues.push(...af(d, b.issues))
            : c.issues.push({
                origin: 'map',
                code: 'invalid_element',
                input: e,
                inst: f,
                key: d,
                issues: b.issues.map((a) => ah(a, g, l())),
              })),
        c.value.set(a.value, b.value));
    }
    let dh = g('$ZodSet', (a, b) => {
      (cl.init(a, b),
        (a._zod.parse = (c, d) => {
          let e = c.value;
          if (!(e instanceof Set))
            return (c.issues.push({ input: e, inst: a, expected: 'set', code: 'invalid_type' }), c);
          let f = [];
          for (let a of ((c.value = new Set()), e)) {
            let e = b.valueType._zod.run({ value: a, issues: [] }, d);
            e instanceof Promise ? f.push(e.then((a) => di(a, c))) : di(e, c);
          }
          return f.length ? Promise.all(f).then(() => c) : c;
        }));
    });
    function di(a, b) {
      (a.issues.length && b.issues.push(...a.issues), b.value.add(a.value));
    }
    let dj = g('$ZodEnum', (a, b) => {
        cl.init(a, b);
        let c = r(b.entries),
          d = new Set(c);
        ((a._zod.values = d),
          (a._zod.pattern = RegExp(
            `^(${c
              .filter((a) => P.has(typeof a))
              .map((a) => ('string' == typeof a ? R(a) : a.toString()))
              .join('|')})$`
          )),
          (a._zod.parse = (b, e) => {
            let f = b.value;
            return (
              d.has(f) || b.issues.push({ code: 'invalid_value', values: c, input: f, inst: a }),
              b
            );
          }));
      }),
      dk = g('$ZodLiteral', (a, b) => {
        if ((cl.init(a, b), 0 === b.values.length))
          throw Error('Cannot create literal schema with no valid values');
        ((a._zod.values = new Set(b.values)),
          (a._zod.pattern = RegExp(
            `^(${b.values.map((a) => ('string' == typeof a ? R(a) : a ? R(a.toString()) : String(a))).join('|')})$`
          )),
          (a._zod.parse = (c, d) => {
            let e = c.value;
            return (
              a._zod.values.has(e) ||
                c.issues.push({ code: 'invalid_value', values: b.values, input: e, inst: a }),
              c
            );
          }));
      }),
      dl = g('$ZodFile', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (b, c) => {
            let d = b.value;
            return (
              d instanceof File ||
                b.issues.push({ expected: 'file', code: 'invalid_type', input: d, inst: a }),
              b
            );
          }));
      }),
      dm = g('$ZodTransform', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (c, d) => {
            if ('backward' === d.direction) throw new j(a.constructor.name);
            let e = b.transform(c.value, c);
            if (d.async)
              return (e instanceof Promise ? e : Promise.resolve(e)).then(
                (a) => ((c.value = a), c)
              );
            if (e instanceof Promise) throw new i();
            return ((c.value = e), c);
          }));
      });
    function dn(a, b) {
      return a.issues.length && void 0 === b ? { issues: [], value: void 0 } : a;
    }
    let dp = g('$ZodOptional', (a, b) => {
        (cl.init(a, b),
          (a._zod.optin = 'optional'),
          (a._zod.optout = 'optional'),
          z(a._zod, 'values', () =>
            b.innerType._zod.values ? new Set([...b.innerType._zod.values, void 0]) : void 0
          ),
          z(a._zod, 'pattern', () => {
            let a = b.innerType._zod.pattern;
            return a ? RegExp(`^(${w(a.source)})?$`) : void 0;
          }),
          (a._zod.parse = (a, c) => {
            if ('optional' === b.innerType._zod.optin) {
              let d = b.innerType._zod.run(a, c);
              return d instanceof Promise ? d.then((b) => dn(b, a.value)) : dn(d, a.value);
            }
            return void 0 === a.value ? a : b.innerType._zod.run(a, c);
          }));
      }),
      dq = g('$ZodNullable', (a, b) => {
        (cl.init(a, b),
          z(a._zod, 'optin', () => b.innerType._zod.optin),
          z(a._zod, 'optout', () => b.innerType._zod.optout),
          z(a._zod, 'pattern', () => {
            let a = b.innerType._zod.pattern;
            return a ? RegExp(`^(${w(a.source)}|null)$`) : void 0;
          }),
          z(a._zod, 'values', () =>
            b.innerType._zod.values ? new Set([...b.innerType._zod.values, null]) : void 0
          ),
          (a._zod.parse = (a, c) => (null === a.value ? a : b.innerType._zod.run(a, c))));
      }),
      dr = g('$ZodDefault', (a, b) => {
        (cl.init(a, b),
          (a._zod.optin = 'optional'),
          z(a._zod, 'values', () => b.innerType._zod.values),
          (a._zod.parse = (a, c) => {
            if ('backward' === c.direction) return b.innerType._zod.run(a, c);
            if (void 0 === a.value) return ((a.value = b.defaultValue), a);
            let d = b.innerType._zod.run(a, c);
            return d instanceof Promise ? d.then((a) => ds(a, b)) : ds(d, b);
          }));
      });
    function ds(a, b) {
      return (void 0 === a.value && (a.value = b.defaultValue), a);
    }
    let dt = g('$ZodPrefault', (a, b) => {
        (cl.init(a, b),
          (a._zod.optin = 'optional'),
          z(a._zod, 'values', () => b.innerType._zod.values),
          (a._zod.parse = (a, c) => (
            'backward' === c.direction || (void 0 === a.value && (a.value = b.defaultValue)),
            b.innerType._zod.run(a, c)
          )));
      }),
      du = g('$ZodNonOptional', (a, b) => {
        (cl.init(a, b),
          z(a._zod, 'values', () => {
            let a = b.innerType._zod.values;
            return a ? new Set([...a].filter((a) => void 0 !== a)) : void 0;
          }),
          (a._zod.parse = (c, d) => {
            let e = b.innerType._zod.run(c, d);
            return e instanceof Promise ? e.then((b) => dv(b, a)) : dv(e, a);
          }));
      });
    function dv(a, b) {
      return (
        a.issues.length ||
          void 0 !== a.value ||
          a.issues.push({ code: 'invalid_type', expected: 'nonoptional', input: a.value, inst: b }),
        a
      );
    }
    let dw = g('$ZodSuccess', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (a, c) => {
            if ('backward' === c.direction) throw new j('ZodSuccess');
            let d = b.innerType._zod.run(a, c);
            return d instanceof Promise
              ? d.then((b) => ((a.value = 0 === b.issues.length), a))
              : ((a.value = 0 === d.issues.length), a);
          }));
      }),
      dx = g('$ZodCatch', (a, b) => {
        (cl.init(a, b),
          z(a._zod, 'optin', () => b.innerType._zod.optin),
          z(a._zod, 'optout', () => b.innerType._zod.optout),
          z(a._zod, 'values', () => b.innerType._zod.values),
          (a._zod.parse = (a, c) => {
            if ('backward' === c.direction) return b.innerType._zod.run(a, c);
            let d = b.innerType._zod.run(a, c);
            return d instanceof Promise
              ? d.then(
                  (d) => (
                    (a.value = d.value),
                    d.issues.length &&
                      ((a.value = b.catchValue({
                        ...a,
                        error: { issues: d.issues.map((a) => ah(a, c, l())) },
                        input: a.value,
                      })),
                      (a.issues = [])),
                    a
                  )
                )
              : ((a.value = d.value),
                d.issues.length &&
                  ((a.value = b.catchValue({
                    ...a,
                    error: { issues: d.issues.map((a) => ah(a, c, l())) },
                    input: a.value,
                  })),
                  (a.issues = [])),
                a);
          }));
      }),
      dy = g('$ZodNaN', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (b, c) => (
            ('number' == typeof b.value && Number.isNaN(b.value)) ||
              b.issues.push({ input: b.value, inst: a, expected: 'nan', code: 'invalid_type' }),
            b
          )));
      }),
      dz = g('$ZodPipe', (a, b) => {
        (cl.init(a, b),
          z(a._zod, 'values', () => b.in._zod.values),
          z(a._zod, 'optin', () => b.in._zod.optin),
          z(a._zod, 'optout', () => b.out._zod.optout),
          z(a._zod, 'propValues', () => b.in._zod.propValues),
          (a._zod.parse = (a, c) => {
            if ('backward' === c.direction) {
              let d = b.out._zod.run(a, c);
              return d instanceof Promise ? d.then((a) => dA(a, b.in, c)) : dA(d, b.in, c);
            }
            let d = b.in._zod.run(a, c);
            return d instanceof Promise ? d.then((a) => dA(a, b.out, c)) : dA(d, b.out, c);
          }));
      });
    function dA(a, b, c) {
      return a.issues.length
        ? ((a.aborted = !0), a)
        : b._zod.run({ value: a.value, issues: a.issues }, c);
    }
    let dB = g('$ZodCodec', (a, b) => {
      (cl.init(a, b),
        z(a._zod, 'values', () => b.in._zod.values),
        z(a._zod, 'optin', () => b.in._zod.optin),
        z(a._zod, 'optout', () => b.out._zod.optout),
        z(a._zod, 'propValues', () => b.in._zod.propValues),
        (a._zod.parse = (a, c) => {
          if ('forward' === (c.direction || 'forward')) {
            let d = b.in._zod.run(a, c);
            return d instanceof Promise ? d.then((a) => dC(a, b, c)) : dC(d, b, c);
          }
          {
            let d = b.out._zod.run(a, c);
            return d instanceof Promise ? d.then((a) => dC(a, b, c)) : dC(d, b, c);
          }
        }));
    });
    function dC(a, b, c) {
      if (a.issues.length) return ((a.aborted = !0), a);
      if ('forward' === (c.direction || 'forward')) {
        let d = b.transform(a.value, a);
        return d instanceof Promise ? d.then((d) => dD(a, d, b.out, c)) : dD(a, d, b.out, c);
      }
      {
        let d = b.reverseTransform(a.value, a);
        return d instanceof Promise ? d.then((d) => dD(a, d, b.in, c)) : dD(a, d, b.in, c);
      }
    }
    function dD(a, b, c, d) {
      return a.issues.length
        ? ((a.aborted = !0), a)
        : c._zod.run({ value: b, issues: a.issues }, d);
    }
    let dE = g('$ZodReadonly', (a, b) => {
      (cl.init(a, b),
        z(a._zod, 'propValues', () => b.innerType._zod.propValues),
        z(a._zod, 'values', () => b.innerType._zod.values),
        z(a._zod, 'optin', () => b.innerType._zod.optin),
        z(a._zod, 'optout', () => b.innerType._zod.optout),
        (a._zod.parse = (a, c) => {
          if ('backward' === c.direction) return b.innerType._zod.run(a, c);
          let d = b.innerType._zod.run(a, c);
          return d instanceof Promise ? d.then(dF) : dF(d);
        }));
    });
    function dF(a) {
      return ((a.value = Object.freeze(a.value)), a);
    }
    let dG = g('$ZodTemplateLiteral', (a, b) => {
        cl.init(a, b);
        let c = [];
        for (let a of b.parts)
          if ('object' == typeof a && null !== a) {
            if (!a._zod.pattern)
              throw Error(
                `Invalid template literal part, no pattern found: ${[...a._zod.traits].shift()}`
              );
            let b = a._zod.pattern instanceof RegExp ? a._zod.pattern.source : a._zod.pattern;
            if (!b) throw Error(`Invalid template literal part: ${a._zod.traits}`);
            let d = +!!b.startsWith('^'),
              e = b.endsWith('$') ? b.length - 1 : b.length;
            c.push(b.slice(d, e));
          } else if (null === a || Q.has(typeof a)) c.push(R(`${a}`));
          else throw Error(`Invalid template literal part: ${a}`);
        ((a._zod.pattern = RegExp(`^${c.join('')}$`)),
          (a._zod.parse = (c, d) => (
            'string' != typeof c.value
              ? c.issues.push({
                  input: c.value,
                  inst: a,
                  expected: 'template_literal',
                  code: 'invalid_type',
                })
              : ((a._zod.pattern.lastIndex = 0),
                a._zod.pattern.test(c.value) ||
                  c.issues.push({
                    input: c.value,
                    inst: a,
                    code: 'invalid_format',
                    format: b.format ?? 'template_literal',
                    pattern: a._zod.pattern.source,
                  })),
            c
          )));
      }),
      dH = g(
        '$ZodFunction',
        (a, b) => (
          cl.init(a, b),
          (a._def = b),
          (a._zod.def = b),
          (a.implement = (b) => {
            if ('function' != typeof b) throw Error('implement() must be called with a function');
            return function (...c) {
              let d = Reflect.apply(b, this, a._def.input ? aD(a._def.input, c) : c);
              return a._def.output ? aD(a._def.output, d) : d;
            };
          }),
          (a.implementAsync = (b) => {
            if ('function' != typeof b)
              throw Error('implementAsync() must be called with a function');
            return async function (...c) {
              let d = a._def.input ? await aF(a._def.input, c) : c,
                e = await Reflect.apply(b, this, d);
              return a._def.output ? await aF(a._def.output, e) : e;
            };
          }),
          (a._zod.parse = (b, c) => (
            'function' != typeof b.value
              ? b.issues.push({
                  code: 'invalid_type',
                  expected: 'function',
                  input: b.value,
                  inst: a,
                })
              : a._def.output && 'promise' === a._def.output._zod.def.type
                ? (b.value = a.implementAsync(b.value))
                : (b.value = a.implement(b.value)),
            b
          )),
          (a.input = (...b) => {
            let c = a.constructor;
            return new c(
              Array.isArray(b[0])
                ? {
                    type: 'function',
                    input: new dc({ type: 'tuple', items: b[0], rest: b[1] }),
                    output: a._def.output,
                  }
                : { type: 'function', input: b[0], output: a._def.output }
            );
          }),
          (a.output = (b) =>
            new a.constructor({ type: 'function', input: a._def.input, output: b })),
          a
        )
      ),
      dI = g('$ZodPromise', (a, b) => {
        (cl.init(a, b),
          (a._zod.parse = (a, c) =>
            Promise.resolve(a.value).then((a) =>
              b.innerType._zod.run({ value: a, issues: [] }, c)
            )));
      }),
      dJ = g('$ZodLazy', (a, b) => {
        (cl.init(a, b),
          z(a._zod, 'innerType', () => b.getter()),
          z(a._zod, 'pattern', () => a._zod.innerType._zod.pattern),
          z(a._zod, 'propValues', () => a._zod.innerType._zod.propValues),
          z(a._zod, 'optin', () => a._zod.innerType._zod.optin ?? void 0),
          z(a._zod, 'optout', () => a._zod.innerType._zod.optout ?? void 0),
          (a._zod.parse = (b, c) => a._zod.innerType._zod.run(b, c)));
      }),
      dK = g('$ZodCustom', (a, b) => {
        (bX.init(a, b),
          cl.init(a, b),
          (a._zod.parse = (a, b) => a),
          (a._zod.check = (c) => {
            let d = c.value,
              e = b.fn(d);
            if (e instanceof Promise) return e.then((b) => dL(b, c, d, a));
            dL(e, c, d, a);
          }));
      });
    function dL(a, b, c, d) {
      if (!a) {
        let a = {
          code: 'custom',
          input: c,
          inst: d,
          path: [...(d._zod.def.path ?? [])],
          continue: !d._zod.def.abort,
        };
        (d._zod.def.params && (a.params = d._zod.def.params), b.issues.push(ak(a)));
      }
    }
    (a.i(96686), a.i(60009), a.i(2381), a.i(23215));
    var dM = a.i(9346),
      dN = a.i(10395);
    function dO() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'حرف', verb: 'أن يحوي' },
              file: { unit: 'بايت', verb: 'أن يحوي' },
              array: { unit: 'عنصر', verb: 'أن يحوي' },
              set: { unit: 'عنصر', verb: 'أن يحوي' },
            },
            b = {
              regex: 'مدخل',
              email: 'بريد إلكتروني',
              url: 'رابط',
              emoji: 'إيموجي',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'تاريخ ووقت بمعيار ISO',
              date: 'تاريخ بمعيار ISO',
              time: 'وقت بمعيار ISO',
              duration: 'مدة بمعيار ISO',
              ipv4: 'عنوان IPv4',
              ipv6: 'عنوان IPv6',
              cidrv4: 'مدى عناوين بصيغة IPv4',
              cidrv6: 'مدى عناوين بصيغة IPv6',
              base64: 'نَص بترميز base64-encoded',
              base64url: 'نَص بترميز base64url-encoded',
              json_string: 'نَص على هيئة JSON',
              e164: 'رقم هاتف بمعيار E.164',
              jwt: 'JWT',
              template_literal: 'مدخل',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `مدخلات غير مقبولة: يفترض إدخال ${c.expected}، ولكن تم إدخال ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `مدخلات غير مقبولة: يفترض إدخال ${V(c.values[0])}`;
                return `اختيار غير مقبول: يتوقع انتقاء أحد هذه الخيارات: ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return ` أكبر من اللازم: يفترض أن تكون ${c.origin ?? 'القيمة'} ${b} ${c.maximum.toString()} ${d.unit ?? 'عنصر'}`;
                return `أكبر من اللازم: يفترض أن تكون ${c.origin ?? 'القيمة'} ${b} ${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `أصغر من اللازم: يفترض لـ ${c.origin} أن يكون ${b} ${c.minimum.toString()} ${d.unit}`;
                return `أصغر من اللازم: يفترض لـ ${c.origin} أن يكون ${b} ${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `نَص غير مقبول: يجب أن يبدأ بـ "${c.prefix}"`;
                if ('ends_with' === c.format) return `نَص غير مقبول: يجب أن ينتهي بـ "${c.suffix}"`;
                if ('includes' === c.format) return `نَص غير مقبول: يجب أن يتضمَّن "${c.includes}"`;
                if ('regex' === c.format) return `نَص غير مقبول: يجب أن يطابق النمط ${c.pattern}`;
                return `${b[c.format] ?? c.format} غير مقبول`;
              case 'not_multiple_of':
                return `رقم غير مقبول: يجب أن يكون من مضاعفات ${c.divisor}`;
              case 'unrecognized_keys':
                return `معرف${c.keys.length > 1 ? 'ات' : ''} غريب${c.keys.length > 1 ? 'ة' : ''}: ${s(c.keys, '، ')}`;
              case 'invalid_key':
                return `معرف غير مقبول في ${c.origin}`;
              case 'invalid_union':
              default:
                return 'مدخل غير مقبول';
              case 'invalid_element':
                return `مدخل غير مقبول في ${c.origin}`;
            }
          };
        })(),
      };
    }
    function dP() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'simvol', verb: 'olmalıdır' },
              file: { unit: 'bayt', verb: 'olmalıdır' },
              array: { unit: 'element', verb: 'olmalıdır' },
              set: { unit: 'element', verb: 'olmalıdır' },
            },
            b = {
              regex: 'input',
              email: 'email address',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO datetime',
              date: 'ISO date',
              time: 'ISO time',
              duration: 'ISO duration',
              ipv4: 'IPv4 address',
              ipv6: 'IPv6 address',
              cidrv4: 'IPv4 range',
              cidrv6: 'IPv6 range',
              base64: 'base64-encoded string',
              base64url: 'base64url-encoded string',
              json_string: 'JSON string',
              e164: 'E.164 number',
              jwt: 'JWT',
              template_literal: 'input',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Yanlış dəyər: g\xf6zlənilən ${c.expected}, daxil olan ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Yanlış dəyər: g\xf6zlənilən ${V(c.values[0])}`;
                return `Yanlış se\xe7im: aşağıdakılardan biri olmalıdır: ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `\xc7ox b\xf6y\xfck: g\xf6zlənilən ${c.origin ?? 'dəyər'} ${b}${c.maximum.toString()} ${d.unit ?? 'element'}`;
                return `\xc7ox b\xf6y\xfck: g\xf6zlənilən ${c.origin ?? 'dəyər'} ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `\xc7ox ki\xe7ik: g\xf6zlənilən ${c.origin} ${b}${c.minimum.toString()} ${d.unit}`;
                return `\xc7ox ki\xe7ik: g\xf6zlənilən ${c.origin} ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Yanlış mətn: "${c.prefix}" ilə başlamalıdır`;
                if ('ends_with' === c.format) return `Yanlış mətn: "${c.suffix}" ilə bitməlidir`;
                if ('includes' === c.format) return `Yanlış mətn: "${c.includes}" daxil olmalıdır`;
                if ('regex' === c.format)
                  return `Yanlış mətn: ${c.pattern} şablonuna uyğun olmalıdır`;
                return `Yanlış ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Yanlış ədəd: ${c.divisor} ilə b\xf6l\xfcnə bilən olmalıdır`;
              case 'unrecognized_keys':
                return `Tanınmayan a\xe7ar${c.keys.length > 1 ? 'lar' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `${c.origin} daxilində yanlış a\xe7ar`;
              case 'invalid_union':
                return 'Yanlış dəyər';
              case 'invalid_element':
                return `${c.origin} daxilində yanlış dəyər`;
              default:
                return `Yanlış dəyər`;
            }
          };
        })(),
      };
    }
    function dQ(a, b, c, d) {
      let e = Math.abs(a),
        f = e % 10,
        g = e % 100;
      return g >= 11 && g <= 19 ? d : 1 === f ? b : f >= 2 && f <= 4 ? c : d;
    }
    function dR() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: { one: 'сімвал', few: 'сімвалы', many: 'сімвалаў' }, verb: 'мець' },
              array: { unit: { one: 'элемент', few: 'элементы', many: 'элементаў' }, verb: 'мець' },
              set: { unit: { one: 'элемент', few: 'элементы', many: 'элементаў' }, verb: 'мець' },
              file: { unit: { one: 'байт', few: 'байты', many: 'байтаў' }, verb: 'мець' },
            },
            b = {
              regex: 'увод',
              email: 'email адрас',
              url: 'URL',
              emoji: 'эмодзі',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO дата і час',
              date: 'ISO дата',
              time: 'ISO час',
              duration: 'ISO працягласць',
              ipv4: 'IPv4 адрас',
              ipv6: 'IPv6 адрас',
              cidrv4: 'IPv4 дыяпазон',
              cidrv6: 'IPv6 дыяпазон',
              base64: 'радок у фармаце base64',
              base64url: 'радок у фармаце base64url',
              json_string: 'JSON радок',
              e164: 'нумар E.164',
              jwt: 'JWT',
              template_literal: 'увод',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Няправільны ўвод: чакаўся ${c.expected}, атрымана ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'лік';
                    case 'object':
                      if (Array.isArray(a)) return 'масіў';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Няправільны ўвод: чакалася ${V(c.values[0])}`;
                return `Няправільны варыянт: чакаўся адзін з ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d) {
                  let a = dQ(Number(c.maximum), d.unit.one, d.unit.few, d.unit.many);
                  return `Занадта вялікі: чакалася, што ${c.origin ?? 'значэнне'} павінна ${d.verb} ${b}${c.maximum.toString()} ${a}`;
                }
                return `Занадта вялікі: чакалася, што ${c.origin ?? 'значэнне'} павінна быць ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d) {
                  let a = dQ(Number(c.minimum), d.unit.one, d.unit.few, d.unit.many);
                  return `Занадта малы: чакалася, што ${c.origin} павінна ${d.verb} ${b}${c.minimum.toString()} ${a}`;
                }
                return `Занадта малы: чакалася, што ${c.origin} павінна быць ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Няправільны радок: павінен пачынацца з "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Няправільны радок: павінен заканчвацца на "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Няправільны радок: павінен змяшчаць "${c.includes}"`;
                if ('regex' === c.format)
                  return `Няправільны радок: павінен адпавядаць шаблону ${c.pattern}`;
                return `Няправільны ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Няправільны лік: павінен быць кратным ${c.divisor}`;
              case 'unrecognized_keys':
                return `Нераспазнаны ${c.keys.length > 1 ? 'ключы' : 'ключ'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Няправільны ключ у ${c.origin}`;
              case 'invalid_union':
                return 'Няправільны ўвод';
              case 'invalid_element':
                return `Няправільнае значэнне ў ${c.origin}`;
              default:
                return `Няправільны ўвод`;
            }
          };
        })(),
      };
    }
    function dS() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'caràcters', verb: 'contenir' },
              file: { unit: 'bytes', verb: 'contenir' },
              array: { unit: 'elements', verb: 'contenir' },
              set: { unit: 'elements', verb: 'contenir' },
            },
            b = {
              regex: 'entrada',
              email: 'adreça electrònica',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'data i hora ISO',
              date: 'data ISO',
              time: 'hora ISO',
              duration: 'durada ISO',
              ipv4: 'adreça IPv4',
              ipv6: 'adreça IPv6',
              cidrv4: 'rang IPv4',
              cidrv6: 'rang IPv6',
              base64: 'cadena codificada en base64',
              base64url: 'cadena codificada en base64url',
              json_string: 'cadena JSON',
              e164: 'número E.164',
              jwt: 'JWT',
              template_literal: 'entrada',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Tipus inv\xe0lid: s'esperava ${c.expected}, s'ha rebut ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Valor inv\xe0lid: s'esperava ${V(c.values[0])}`;
                return `Opci\xf3 inv\xe0lida: s'esperava una de ${s(c.values, ' o ')}`;
              case 'too_big': {
                let b = c.inclusive ? 'com a màxim' : 'menys de',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Massa gran: s'esperava que ${c.origin ?? 'el valor'} contingu\xe9s ${b} ${c.maximum.toString()} ${d.unit ?? 'elements'}`;
                return `Massa gran: s'esperava que ${c.origin ?? 'el valor'} fos ${b} ${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? 'com a mínim' : 'més de',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Massa petit: s'esperava que ${c.origin} contingu\xe9s ${b} ${c.minimum.toString()} ${d.unit}`;
                return `Massa petit: s'esperava que ${c.origin} fos ${b} ${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Format inv\xe0lid: ha de comen\xe7ar amb "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Format inv\xe0lid: ha d'acabar amb "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Format inv\xe0lid: ha d'incloure "${c.includes}"`;
                if ('regex' === c.format)
                  return `Format inv\xe0lid: ha de coincidir amb el patr\xf3 ${c.pattern}`;
                return `Format inv\xe0lid per a ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `N\xfamero inv\xe0lid: ha de ser m\xfaltiple de ${c.divisor}`;
              case 'unrecognized_keys':
                return `Clau${c.keys.length > 1 ? 's' : ''} no reconeguda${c.keys.length > 1 ? 's' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Clau inv\xe0lida a ${c.origin}`;
              case 'invalid_union':
                return 'Entrada invàlida';
              case 'invalid_element':
                return `Element inv\xe0lid a ${c.origin}`;
              default:
                return `Entrada inv\xe0lida`;
            }
          };
        })(),
      };
    }
    function dT() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'znaků', verb: 'mít' },
              file: { unit: 'bajtů', verb: 'mít' },
              array: { unit: 'prvků', verb: 'mít' },
              set: { unit: 'prvků', verb: 'mít' },
            },
            b = {
              regex: 'regulární výraz',
              email: 'e-mailová adresa',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'datum a čas ve formátu ISO',
              date: 'datum ve formátu ISO',
              time: 'čas ve formátu ISO',
              duration: 'doba trvání ISO',
              ipv4: 'IPv4 adresa',
              ipv6: 'IPv6 adresa',
              cidrv4: 'rozsah IPv4',
              cidrv6: 'rozsah IPv6',
              base64: 'řetězec zakódovaný ve formátu base64',
              base64url: 'řetězec zakódovaný ve formátu base64url',
              json_string: 'řetězec ve formátu JSON',
              e164: 'číslo E.164',
              jwt: 'JWT',
              template_literal: 'vstup',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Neplatn\xfd vstup: oček\xe1v\xe1no ${c.expected}, obdrženo ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'číslo';
                    case 'string':
                      return 'řetězec';
                    case 'boolean':
                      return 'boolean';
                    case 'bigint':
                      return 'bigint';
                    case 'function':
                      return 'funkce';
                    case 'symbol':
                      return 'symbol';
                    case 'undefined':
                      return 'undefined';
                    case 'object':
                      if (Array.isArray(a)) return 'pole';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `Neplatn\xfd vstup: oček\xe1v\xe1no ${V(c.values[0])}`;
                return `Neplatn\xe1 možnost: oček\xe1v\xe1na jedna z hodnot ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Hodnota je př\xedliš velk\xe1: ${c.origin ?? 'hodnota'} mus\xed m\xedt ${b}${c.maximum.toString()} ${d.unit ?? 'prvků'}`;
                return `Hodnota je př\xedliš velk\xe1: ${c.origin ?? 'hodnota'} mus\xed b\xfdt ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Hodnota je př\xedliš mal\xe1: ${c.origin ?? 'hodnota'} mus\xed m\xedt ${b}${c.minimum.toString()} ${d.unit ?? 'prvků'}`;
                return `Hodnota je př\xedliš mal\xe1: ${c.origin ?? 'hodnota'} mus\xed b\xfdt ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Neplatn\xfd řetězec: mus\xed zač\xednat na "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Neplatn\xfd řetězec: mus\xed končit na "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Neplatn\xfd řetězec: mus\xed obsahovat "${c.includes}"`;
                if ('regex' === c.format)
                  return `Neplatn\xfd řetězec: mus\xed odpov\xeddat vzoru ${c.pattern}`;
                return `Neplatn\xfd form\xe1t ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Neplatn\xe9 č\xedslo: mus\xed b\xfdt n\xe1sobkem ${c.divisor}`;
              case 'unrecognized_keys':
                return `Nezn\xe1m\xe9 kl\xedče: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Neplatn\xfd kl\xedč v ${c.origin}`;
              case 'invalid_union':
                return 'Neplatný vstup';
              case 'invalid_element':
                return `Neplatn\xe1 hodnota v ${c.origin}`;
              default:
                return `Neplatn\xfd vstup`;
            }
          };
        })(),
      };
    }
    function dU() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'tegn', verb: 'havde' },
              file: { unit: 'bytes', verb: 'havde' },
              array: { unit: 'elementer', verb: 'indeholdt' },
              set: { unit: 'elementer', verb: 'indeholdt' },
            },
            b = {
              string: 'streng',
              number: 'tal',
              boolean: 'boolean',
              array: 'liste',
              object: 'objekt',
              set: 'sæt',
              file: 'fil',
            },
            c = {
              regex: 'input',
              email: 'e-mailadresse',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO dato- og klokkeslæt',
              date: 'ISO-dato',
              time: 'ISO-klokkeslæt',
              duration: 'ISO-varighed',
              ipv4: 'IPv4-område',
              ipv6: 'IPv6-område',
              cidrv4: 'IPv4-spektrum',
              cidrv6: 'IPv6-spektrum',
              base64: 'base64-kodet streng',
              base64url: 'base64url-kodet streng',
              json_string: 'JSON-streng',
              e164: 'E.164-nummer',
              jwt: 'JWT',
              template_literal: 'input',
            };
          return (d) => {
            var e, f, g, h;
            switch (d.code) {
              case 'invalid_type':
                return `Ugyldigt input: forventede ${b[(e = d.expected)] ?? e}, fik ${
                  b[
                    (f = ((a) => {
                      let b = typeof a;
                      switch (b) {
                        case 'number':
                          return Number.isNaN(a) ? 'NaN' : 'tal';
                        case 'object':
                          if (Array.isArray(a)) return 'liste';
                          if (null === a) return 'null';
                          if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                            return a.constructor.name;
                          return 'objekt';
                      }
                      return b;
                    })(d.input))
                  ] ?? f
                }`;
              case 'invalid_value':
                if (1 === d.values.length) return `Ugyldig v\xe6rdi: forventede ${V(d.values[0])}`;
                return `Ugyldigt valg: forventede en af f\xf8lgende ${s(d.values, '|')}`;
              case 'too_big': {
                let c = d.inclusive ? '<=' : '<',
                  e = a[d.origin] ?? null,
                  f = b[(g = d.origin)] ?? g;
                if (e)
                  return `For stor: forventede ${f ?? 'value'} ${e.verb} ${c} ${d.maximum.toString()} ${e.unit ?? 'elementer'}`;
                return `For stor: forventede ${f ?? 'value'} havde ${c} ${d.maximum.toString()}`;
              }
              case 'too_small': {
                let c = d.inclusive ? '>=' : '>',
                  e = a[d.origin] ?? null,
                  f = b[(h = d.origin)] ?? h;
                if (e)
                  return `For lille: forventede ${f} ${e.verb} ${c} ${d.minimum.toString()} ${e.unit}`;
                return `For lille: forventede ${f} havde ${c} ${d.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === d.format)
                  return `Ugyldig streng: skal starte med "${d.prefix}"`;
                if ('ends_with' === d.format) return `Ugyldig streng: skal ende med "${d.suffix}"`;
                if ('includes' === d.format)
                  return `Ugyldig streng: skal indeholde "${d.includes}"`;
                if ('regex' === d.format)
                  return `Ugyldig streng: skal matche m\xf8nsteret ${d.pattern}`;
                return `Ugyldig ${c[d.format] ?? d.format}`;
              case 'not_multiple_of':
                return `Ugyldigt tal: skal v\xe6re deleligt med ${d.divisor}`;
              case 'unrecognized_keys':
                return `${d.keys.length > 1 ? 'Ukendte nøgler' : 'Ukendt nøgle'}: ${s(d.keys, ', ')}`;
              case 'invalid_key':
                return `Ugyldig n\xf8gle i ${d.origin}`;
              case 'invalid_union':
                return 'Ugyldigt input: matcher ingen af de tilladte typer';
              case 'invalid_element':
                return `Ugyldig v\xe6rdi i ${d.origin}`;
              default:
                return 'Ugyldigt input';
            }
          };
        })(),
      };
    }
    function dV() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'Zeichen', verb: 'zu haben' },
              file: { unit: 'Bytes', verb: 'zu haben' },
              array: { unit: 'Elemente', verb: 'zu haben' },
              set: { unit: 'Elemente', verb: 'zu haben' },
            },
            b = {
              regex: 'Eingabe',
              email: 'E-Mail-Adresse',
              url: 'URL',
              emoji: 'Emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO-Datum und -Uhrzeit',
              date: 'ISO-Datum',
              time: 'ISO-Uhrzeit',
              duration: 'ISO-Dauer',
              ipv4: 'IPv4-Adresse',
              ipv6: 'IPv6-Adresse',
              cidrv4: 'IPv4-Bereich',
              cidrv6: 'IPv6-Bereich',
              base64: 'Base64-codierter String',
              base64url: 'Base64-URL-codierter String',
              json_string: 'JSON-String',
              e164: 'E.164-Nummer',
              jwt: 'JWT',
              template_literal: 'Eingabe',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Ung\xfcltige Eingabe: erwartet ${c.expected}, erhalten ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'Zahl';
                    case 'object':
                      if (Array.isArray(a)) return 'Array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `Ung\xfcltige Eingabe: erwartet ${V(c.values[0])}`;
                return `Ung\xfcltige Option: erwartet eine von ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Zu gro\xdf: erwartet, dass ${c.origin ?? 'Wert'} ${b}${c.maximum.toString()} ${d.unit ?? 'Elemente'} hat`;
                return `Zu gro\xdf: erwartet, dass ${c.origin ?? 'Wert'} ${b}${c.maximum.toString()} ist`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Zu klein: erwartet, dass ${c.origin} ${b}${c.minimum.toString()} ${d.unit} hat`;
                return `Zu klein: erwartet, dass ${c.origin} ${b}${c.minimum.toString()} ist`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Ung\xfcltiger String: muss mit "${c.prefix}" beginnen`;
                if ('ends_with' === c.format)
                  return `Ung\xfcltiger String: muss mit "${c.suffix}" enden`;
                if ('includes' === c.format)
                  return `Ung\xfcltiger String: muss "${c.includes}" enthalten`;
                if ('regex' === c.format)
                  return `Ung\xfcltiger String: muss dem Muster ${c.pattern} entsprechen`;
                return `Ung\xfcltig: ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Ung\xfcltige Zahl: muss ein Vielfaches von ${c.divisor} sein`;
              case 'unrecognized_keys':
                return `${c.keys.length > 1 ? 'Unbekannte Schlüssel' : 'Unbekannter Schlüssel'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Ung\xfcltiger Schl\xfcssel in ${c.origin}`;
              case 'invalid_union':
                return 'Ungültige Eingabe';
              case 'invalid_element':
                return `Ung\xfcltiger Wert in ${c.origin}`;
              default:
                return `Ung\xfcltige Eingabe`;
            }
          };
        })(),
      };
    }
    function dW() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'karaktrojn', verb: 'havi' },
              file: { unit: 'bajtojn', verb: 'havi' },
              array: { unit: 'elementojn', verb: 'havi' },
              set: { unit: 'elementojn', verb: 'havi' },
            },
            b = {
              regex: 'enigo',
              email: 'retadreso',
              url: 'URL',
              emoji: 'emoĝio',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO-datotempo',
              date: 'ISO-dato',
              time: 'ISO-tempo',
              duration: 'ISO-daŭro',
              ipv4: 'IPv4-adreso',
              ipv6: 'IPv6-adreso',
              cidrv4: 'IPv4-rango',
              cidrv6: 'IPv6-rango',
              base64: '64-ume kodita karaktraro',
              base64url: 'URL-64-ume kodita karaktraro',
              json_string: 'JSON-karaktraro',
              e164: 'E.164-nombro',
              jwt: 'JWT',
              template_literal: 'enigo',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Nevalida enigo: atendiĝis ${c.expected}, riceviĝis ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'nombro';
                    case 'object':
                      if (Array.isArray(a)) return 'tabelo';
                      if (null === a) return 'senvalora';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Nevalida enigo: atendiĝis ${V(c.values[0])}`;
                return `Nevalida opcio: atendiĝis unu el ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Tro granda: atendiĝis ke ${c.origin ?? 'valoro'} havu ${b}${c.maximum.toString()} ${d.unit ?? 'elementojn'}`;
                return `Tro granda: atendiĝis ke ${c.origin ?? 'valoro'} havu ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Tro malgranda: atendiĝis ke ${c.origin} havu ${b}${c.minimum.toString()} ${d.unit}`;
                return `Tro malgranda: atendiĝis ke ${c.origin} estu ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Nevalida karaktraro: devas komenciĝi per "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Nevalida karaktraro: devas finiĝi per "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Nevalida karaktraro: devas inkluzivi "${c.includes}"`;
                if ('regex' === c.format)
                  return `Nevalida karaktraro: devas kongrui kun la modelo ${c.pattern}`;
                return `Nevalida ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Nevalida nombro: devas esti oblo de ${c.divisor}`;
              case 'unrecognized_keys':
                return `Nekonata${c.keys.length > 1 ? 'j' : ''} ŝlosilo${c.keys.length > 1 ? 'j' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Nevalida ŝlosilo en ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Nevalida enigo';
              case 'invalid_element':
                return `Nevalida valoro en ${c.origin}`;
            }
          };
        })(),
      };
    }
    function dX() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'caracteres', verb: 'tener' },
              file: { unit: 'bytes', verb: 'tener' },
              array: { unit: 'elementos', verb: 'tener' },
              set: { unit: 'elementos', verb: 'tener' },
            },
            b = {
              regex: 'entrada',
              email: 'dirección de correo electrónico',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'fecha y hora ISO',
              date: 'fecha ISO',
              time: 'hora ISO',
              duration: 'duración ISO',
              ipv4: 'dirección IPv4',
              ipv6: 'dirección IPv6',
              cidrv4: 'rango IPv4',
              cidrv6: 'rango IPv6',
              base64: 'cadena codificada en base64',
              base64url: 'URL codificada en base64',
              json_string: 'cadena JSON',
              e164: 'número E.164',
              jwt: 'JWT',
              template_literal: 'entrada',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Entrada inv\xe1lida: se esperaba ${c.expected}, recibido ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'número';
                    case 'object':
                      if (Array.isArray(a)) return 'arreglo';
                      if (null === a) return 'nulo';
                      if (Object.getPrototypeOf(a) !== Object.prototype) return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `Entrada inv\xe1lida: se esperaba ${V(c.values[0])}`;
                return `Opci\xf3n inv\xe1lida: se esperaba una de ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Demasiado grande: se esperaba que ${c.origin ?? 'valor'} tuviera ${b}${c.maximum.toString()} ${d.unit ?? 'elementos'}`;
                return `Demasiado grande: se esperaba que ${c.origin ?? 'valor'} fuera ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Demasiado peque\xf1o: se esperaba que ${c.origin} tuviera ${b}${c.minimum.toString()} ${d.unit}`;
                return `Demasiado peque\xf1o: se esperaba que ${c.origin} fuera ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Cadena inv\xe1lida: debe comenzar con "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Cadena inv\xe1lida: debe terminar en "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Cadena inv\xe1lida: debe incluir "${c.includes}"`;
                if ('regex' === c.format)
                  return `Cadena inv\xe1lida: debe coincidir con el patr\xf3n ${c.pattern}`;
                return `Inv\xe1lido ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `N\xfamero inv\xe1lido: debe ser m\xfaltiplo de ${c.divisor}`;
              case 'unrecognized_keys':
                return `Llave${c.keys.length > 1 ? 's' : ''} desconocida${c.keys.length > 1 ? 's' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Llave inv\xe1lida en ${c.origin}`;
              case 'invalid_union':
                return 'Entrada inválida';
              case 'invalid_element':
                return `Valor inv\xe1lido en ${c.origin}`;
              default:
                return `Entrada inv\xe1lida`;
            }
          };
        })(),
      };
    }
    function dY() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'کاراکتر', verb: 'داشته باشد' },
              file: { unit: 'بایت', verb: 'داشته باشد' },
              array: { unit: 'آیتم', verb: 'داشته باشد' },
              set: { unit: 'آیتم', verb: 'داشته باشد' },
            },
            b = {
              regex: 'ورودی',
              email: 'آدرس ایمیل',
              url: 'URL',
              emoji: 'ایموجی',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'تاریخ و زمان ایزو',
              date: 'تاریخ ایزو',
              time: 'زمان ایزو',
              duration: 'مدت زمان ایزو',
              ipv4: 'IPv4 آدرس',
              ipv6: 'IPv6 آدرس',
              cidrv4: 'IPv4 دامنه',
              cidrv6: 'IPv6 دامنه',
              base64: 'base64-encoded رشته',
              base64url: 'base64url-encoded رشته',
              json_string: 'JSON رشته',
              e164: 'E.164 عدد',
              jwt: 'JWT',
              template_literal: 'ورودی',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `ورودی نامعتبر: می‌بایست ${c.expected} می‌بود، ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'عدد';
                    case 'object':
                      if (Array.isArray(a)) return 'آرایه';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)} دریافت شد`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `ورودی نامعتبر: می‌بایست ${V(c.values[0])} می‌بود`;
                return `گزینه نامعتبر: می‌بایست یکی از ${s(c.values, '|')} می‌بود`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `خیلی بزرگ: ${c.origin ?? 'مقدار'} باید ${b}${c.maximum.toString()} ${d.unit ?? 'عنصر'} باشد`;
                return `خیلی بزرگ: ${c.origin ?? 'مقدار'} باید ${b}${c.maximum.toString()} باشد`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `خیلی کوچک: ${c.origin} باید ${b}${c.minimum.toString()} ${d.unit} باشد`;
                return `خیلی کوچک: ${c.origin} باید ${b}${c.minimum.toString()} باشد`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `رشته نامعتبر: باید با "${c.prefix}" شروع شود`;
                if ('ends_with' === c.format) return `رشته نامعتبر: باید با "${c.suffix}" تمام شود`;
                if ('includes' === c.format) return `رشته نامعتبر: باید شامل "${c.includes}" باشد`;
                if ('regex' === c.format)
                  return `رشته نامعتبر: باید با الگوی ${c.pattern} مطابقت داشته باشد`;
                return `${b[c.format] ?? c.format} نامعتبر`;
              case 'not_multiple_of':
                return `عدد نامعتبر: باید مضرب ${c.divisor} باشد`;
              case 'unrecognized_keys':
                return `کلید${c.keys.length > 1 ? 'های' : ''} ناشناس: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `کلید ناشناس در ${c.origin}`;
              case 'invalid_union':
              default:
                return `ورودی نامعتبر`;
              case 'invalid_element':
                return `مقدار نامعتبر در ${c.origin}`;
            }
          };
        })(),
      };
    }
    function dZ() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'merkkiä', subject: 'merkkijonon' },
              file: { unit: 'tavua', subject: 'tiedoston' },
              array: { unit: 'alkiota', subject: 'listan' },
              set: { unit: 'alkiota', subject: 'joukon' },
              number: { unit: '', subject: 'luvun' },
              bigint: { unit: '', subject: 'suuren kokonaisluvun' },
              int: { unit: '', subject: 'kokonaisluvun' },
              date: { unit: '', subject: 'päivämäärän' },
            },
            b = {
              regex: 'säännöllinen lauseke',
              email: 'sähköpostiosoite',
              url: 'URL-osoite',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO-aikaleima',
              date: 'ISO-päivämäärä',
              time: 'ISO-aika',
              duration: 'ISO-kesto',
              ipv4: 'IPv4-osoite',
              ipv6: 'IPv6-osoite',
              cidrv4: 'IPv4-alue',
              cidrv6: 'IPv6-alue',
              base64: 'base64-koodattu merkkijono',
              base64url: 'base64url-koodattu merkkijono',
              json_string: 'JSON-merkkijono',
              e164: 'E.164-luku',
              jwt: 'JWT',
              template_literal: 'templaattimerkkijono',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Virheellinen tyyppi: odotettiin ${c.expected}, oli ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `Virheellinen sy\xf6te: t\xe4ytyy olla ${V(c.values[0])}`;
                return `Virheellinen valinta: t\xe4ytyy olla yksi seuraavista: ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Liian suuri: ${d.subject} t\xe4ytyy olla ${b}${c.maximum.toString()} ${d.unit}`.trim();
                return `Liian suuri: arvon t\xe4ytyy olla ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Liian pieni: ${d.subject} t\xe4ytyy olla ${b}${c.minimum.toString()} ${d.unit}`.trim();
                return `Liian pieni: arvon t\xe4ytyy olla ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Virheellinen sy\xf6te: t\xe4ytyy alkaa "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Virheellinen sy\xf6te: t\xe4ytyy loppua "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Virheellinen sy\xf6te: t\xe4ytyy sis\xe4lt\xe4\xe4 "${c.includes}"`;
                if ('regex' === c.format)
                  return `Virheellinen sy\xf6te: t\xe4ytyy vastata s\xe4\xe4nn\xf6llist\xe4 lauseketta ${c.pattern}`;
                return `Virheellinen ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Virheellinen luku: t\xe4ytyy olla luvun ${c.divisor} monikerta`;
              case 'unrecognized_keys':
                return `${c.keys.length > 1 ? 'Tuntemattomat avaimet' : 'Tuntematon avain'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return 'Virheellinen avain tietueessa';
              case 'invalid_union':
                return 'Virheellinen unioni';
              case 'invalid_element':
                return 'Virheellinen arvo joukossa';
              default:
                return `Virheellinen sy\xf6te`;
            }
          };
        })(),
      };
    }
    function d$() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'caractères', verb: 'avoir' },
              file: { unit: 'octets', verb: 'avoir' },
              array: { unit: 'éléments', verb: 'avoir' },
              set: { unit: 'éléments', verb: 'avoir' },
            },
            b = {
              regex: 'entrée',
              email: 'adresse e-mail',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'date et heure ISO',
              date: 'date ISO',
              time: 'heure ISO',
              duration: 'durée ISO',
              ipv4: 'adresse IPv4',
              ipv6: 'adresse IPv6',
              cidrv4: 'plage IPv4',
              cidrv6: 'plage IPv6',
              base64: 'chaîne encodée en base64',
              base64url: 'chaîne encodée en base64url',
              json_string: 'chaîne JSON',
              e164: 'numéro E.164',
              jwt: 'JWT',
              template_literal: 'entrée',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Entr\xe9e invalide : ${c.expected} attendu, ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'nombre';
                    case 'object':
                      if (Array.isArray(a)) return 'tableau';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)} re\xe7u`;
              case 'invalid_value':
                if (1 === c.values.length) return `Entr\xe9e invalide : ${V(c.values[0])} attendu`;
                return `Option invalide : une valeur parmi ${s(c.values, '|')} attendue`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Trop grand : ${c.origin ?? 'valeur'} doit ${d.verb} ${b}${c.maximum.toString()} ${d.unit ?? 'élément(s)'}`;
                return `Trop grand : ${c.origin ?? 'valeur'} doit \xeatre ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Trop petit : ${c.origin} doit ${d.verb} ${b}${c.minimum.toString()} ${d.unit}`;
                return `Trop petit : ${c.origin} doit \xeatre ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Cha\xeene invalide : doit commencer par "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Cha\xeene invalide : doit se terminer par "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Cha\xeene invalide : doit inclure "${c.includes}"`;
                if ('regex' === c.format)
                  return `Cha\xeene invalide : doit correspondre au mod\xe8le ${c.pattern}`;
                return `${b[c.format] ?? c.format} invalide`;
              case 'not_multiple_of':
                return `Nombre invalide : doit \xeatre un multiple de ${c.divisor}`;
              case 'unrecognized_keys':
                return `Cl\xe9${c.keys.length > 1 ? 's' : ''} non reconnue${c.keys.length > 1 ? 's' : ''} : ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Cl\xe9 invalide dans ${c.origin}`;
              case 'invalid_union':
                return 'Entrée invalide';
              case 'invalid_element':
                return `Valeur invalide dans ${c.origin}`;
              default:
                return `Entr\xe9e invalide`;
            }
          };
        })(),
      };
    }
    function d_() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'caractères', verb: 'avoir' },
              file: { unit: 'octets', verb: 'avoir' },
              array: { unit: 'éléments', verb: 'avoir' },
              set: { unit: 'éléments', verb: 'avoir' },
            },
            b = {
              regex: 'entrée',
              email: 'adresse courriel',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'date-heure ISO',
              date: 'date ISO',
              time: 'heure ISO',
              duration: 'durée ISO',
              ipv4: 'adresse IPv4',
              ipv6: 'adresse IPv6',
              cidrv4: 'plage IPv4',
              cidrv6: 'plage IPv6',
              base64: 'chaîne encodée en base64',
              base64url: 'chaîne encodée en base64url',
              json_string: 'chaîne JSON',
              e164: 'numéro E.164',
              jwt: 'JWT',
              template_literal: 'entrée',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Entr\xe9e invalide : attendu ${c.expected}, re\xe7u ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Entr\xe9e invalide : attendu ${V(c.values[0])}`;
                return `Option invalide : attendu l'une des valeurs suivantes ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '≤' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Trop grand : attendu que ${c.origin ?? 'la valeur'} ait ${b}${c.maximum.toString()} ${d.unit}`;
                return `Trop grand : attendu que ${c.origin ?? 'la valeur'} soit ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '≥' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Trop petit : attendu que ${c.origin} ait ${b}${c.minimum.toString()} ${d.unit}`;
                return `Trop petit : attendu que ${c.origin} soit ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Cha\xeene invalide : doit commencer par "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Cha\xeene invalide : doit se terminer par "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Cha\xeene invalide : doit inclure "${c.includes}"`;
                if ('regex' === c.format)
                  return `Cha\xeene invalide : doit correspondre au motif ${c.pattern}`;
                return `${b[c.format] ?? c.format} invalide`;
              case 'not_multiple_of':
                return `Nombre invalide : doit \xeatre un multiple de ${c.divisor}`;
              case 'unrecognized_keys':
                return `Cl\xe9${c.keys.length > 1 ? 's' : ''} non reconnue${c.keys.length > 1 ? 's' : ''} : ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Cl\xe9 invalide dans ${c.origin}`;
              case 'invalid_union':
                return 'Entrée invalide';
              case 'invalid_element':
                return `Valeur invalide dans ${c.origin}`;
              default:
                return `Entr\xe9e invalide`;
            }
          };
        })(),
      };
    }
    function d0() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'אותיות', verb: 'לכלול' },
              file: { unit: 'בייטים', verb: 'לכלול' },
              array: { unit: 'פריטים', verb: 'לכלול' },
              set: { unit: 'פריטים', verb: 'לכלול' },
            },
            b = {
              regex: 'קלט',
              email: 'כתובת אימייל',
              url: 'כתובת רשת',
              emoji: "אימוג'י",
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'תאריך וזמן ISO',
              date: 'תאריך ISO',
              time: 'זמן ISO',
              duration: 'משך זמן ISO',
              ipv4: 'כתובת IPv4',
              ipv6: 'כתובת IPv6',
              cidrv4: 'טווח IPv4',
              cidrv6: 'טווח IPv6',
              base64: 'מחרוזת בבסיס 64',
              base64url: 'מחרוזת בבסיס 64 לכתובות רשת',
              json_string: 'מחרוזת JSON',
              e164: 'מספר E.164',
              jwt: 'JWT',
              template_literal: 'קלט',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `קלט לא תקין: צריך ${c.expected}, התקבל ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `קלט לא תקין: צריך ${V(c.values[0])}`;
                return `קלט לא תקין: צריך אחת מהאפשרויות  ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `גדול מדי: ${c.origin ?? 'value'} צריך להיות ${b}${c.maximum.toString()} ${d.unit ?? 'elements'}`;
                return `גדול מדי: ${c.origin ?? 'value'} צריך להיות ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `קטן מדי: ${c.origin} צריך להיות ${b}${c.minimum.toString()} ${d.unit}`;
                return `קטן מדי: ${c.origin} צריך להיות ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `מחרוזת לא תקינה: חייבת להתחיל ב"${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `מחרוזת לא תקינה: חייבת להסתיים ב "${c.suffix}"`;
                if ('includes' === c.format) return `מחרוזת לא תקינה: חייבת לכלול "${c.includes}"`;
                if ('regex' === c.format)
                  return `מחרוזת לא תקינה: חייבת להתאים לתבנית ${c.pattern}`;
                return `${b[c.format] ?? c.format} לא תקין`;
              case 'not_multiple_of':
                return `מספר לא תקין: חייב להיות מכפלה של ${c.divisor}`;
              case 'unrecognized_keys':
                return `מפתח${c.keys.length > 1 ? 'ות' : ''} לא מזוה${c.keys.length > 1 ? 'ים' : 'ה'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `מפתח לא תקין ב${c.origin}`;
              case 'invalid_union':
                return 'קלט לא תקין';
              case 'invalid_element':
                return `ערך לא תקין ב${c.origin}`;
              default:
                return `קלט לא תקין`;
            }
          };
        })(),
      };
    }
    function d1() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'karakter', verb: 'legyen' },
              file: { unit: 'byte', verb: 'legyen' },
              array: { unit: 'elem', verb: 'legyen' },
              set: { unit: 'elem', verb: 'legyen' },
            },
            b = {
              regex: 'bemenet',
              email: 'email cím',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO időbélyeg',
              date: 'ISO dátum',
              time: 'ISO idő',
              duration: 'ISO időintervallum',
              ipv4: 'IPv4 cím',
              ipv6: 'IPv6 cím',
              cidrv4: 'IPv4 tartomány',
              cidrv6: 'IPv6 tartomány',
              base64: 'base64-kódolt string',
              base64url: 'base64url-kódolt string',
              json_string: 'JSON string',
              e164: 'E.164 szám',
              jwt: 'JWT',
              template_literal: 'bemenet',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `\xc9rv\xe9nytelen bemenet: a v\xe1rt \xe9rt\xe9k ${c.expected}, a kapott \xe9rt\xe9k ${((
                  a
                ) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'szám';
                    case 'object':
                      if (Array.isArray(a)) return 'tömb';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `\xc9rv\xe9nytelen bemenet: a v\xe1rt \xe9rt\xe9k ${V(c.values[0])}`;
                return `\xc9rv\xe9nytelen opci\xf3: valamelyik \xe9rt\xe9k v\xe1rt ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `T\xfal nagy: ${c.origin ?? 'érték'} m\xe9rete t\xfal nagy ${b}${c.maximum.toString()} ${d.unit ?? 'elem'}`;
                return `T\xfal nagy: a bemeneti \xe9rt\xe9k ${c.origin ?? 'érték'} t\xfal nagy: ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `T\xfal kicsi: a bemeneti \xe9rt\xe9k ${c.origin} m\xe9rete t\xfal kicsi ${b}${c.minimum.toString()} ${d.unit}`;
                return `T\xfal kicsi: a bemeneti \xe9rt\xe9k ${c.origin} t\xfal kicsi ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `\xc9rv\xe9nytelen string: "${c.prefix}" \xe9rt\xe9kkel kell kezdődnie`;
                if ('ends_with' === c.format)
                  return `\xc9rv\xe9nytelen string: "${c.suffix}" \xe9rt\xe9kkel kell v\xe9gződnie`;
                if ('includes' === c.format)
                  return `\xc9rv\xe9nytelen string: "${c.includes}" \xe9rt\xe9ket kell tartalmaznia`;
                if ('regex' === c.format)
                  return `\xc9rv\xe9nytelen string: ${c.pattern} mint\xe1nak kell megfelelnie`;
                return `\xc9rv\xe9nytelen ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `\xc9rv\xe9nytelen sz\xe1m: ${c.divisor} t\xf6bbsz\xf6r\xf6s\xe9nek kell lennie`;
              case 'unrecognized_keys':
                return `Ismeretlen kulcs${c.keys.length > 1 ? 's' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `\xc9rv\xe9nytelen kulcs ${c.origin}`;
              case 'invalid_union':
                return 'Érvénytelen bemenet';
              case 'invalid_element':
                return `\xc9rv\xe9nytelen \xe9rt\xe9k: ${c.origin}`;
              default:
                return `\xc9rv\xe9nytelen bemenet`;
            }
          };
        })(),
      };
    }
    function d2() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'karakter', verb: 'memiliki' },
              file: { unit: 'byte', verb: 'memiliki' },
              array: { unit: 'item', verb: 'memiliki' },
              set: { unit: 'item', verb: 'memiliki' },
            },
            b = {
              regex: 'input',
              email: 'alamat email',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'tanggal dan waktu format ISO',
              date: 'tanggal format ISO',
              time: 'jam format ISO',
              duration: 'durasi format ISO',
              ipv4: 'alamat IPv4',
              ipv6: 'alamat IPv6',
              cidrv4: 'rentang alamat IPv4',
              cidrv6: 'rentang alamat IPv6',
              base64: 'string dengan enkode base64',
              base64url: 'string dengan enkode base64url',
              json_string: 'string JSON',
              e164: 'angka E.164',
              jwt: 'JWT',
              template_literal: 'input',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Input tidak valid: diharapkan ${c.expected}, diterima ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Input tidak valid: diharapkan ${V(c.values[0])}`;
                return `Pilihan tidak valid: diharapkan salah satu dari ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Terlalu besar: diharapkan ${c.origin ?? 'value'} memiliki ${b}${c.maximum.toString()} ${d.unit ?? 'elemen'}`;
                return `Terlalu besar: diharapkan ${c.origin ?? 'value'} menjadi ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Terlalu kecil: diharapkan ${c.origin} memiliki ${b}${c.minimum.toString()} ${d.unit}`;
                return `Terlalu kecil: diharapkan ${c.origin} menjadi ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `String tidak valid: harus dimulai dengan "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `String tidak valid: harus berakhir dengan "${c.suffix}"`;
                if ('includes' === c.format)
                  return `String tidak valid: harus menyertakan "${c.includes}"`;
                if ('regex' === c.format)
                  return `String tidak valid: harus sesuai pola ${c.pattern}`;
                return `${b[c.format] ?? c.format} tidak valid`;
              case 'not_multiple_of':
                return `Angka tidak valid: harus kelipatan dari ${c.divisor}`;
              case 'unrecognized_keys':
                return `Kunci tidak dikenali ${c.keys.length > 1 ? 's' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Kunci tidak valid di ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Input tidak valid';
              case 'invalid_element':
                return `Nilai tidak valid di ${c.origin}`;
            }
          };
        })(),
      };
    }
    function d3() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'stafi', verb: 'að hafa' },
              file: { unit: 'bæti', verb: 'að hafa' },
              array: { unit: 'hluti', verb: 'að hafa' },
              set: { unit: 'hluti', verb: 'að hafa' },
            },
            b = {
              regex: 'gildi',
              email: 'netfang',
              url: 'vefslóð',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO dagsetning og tími',
              date: 'ISO dagsetning',
              time: 'ISO tími',
              duration: 'ISO tímalengd',
              ipv4: 'IPv4 address',
              ipv6: 'IPv6 address',
              cidrv4: 'IPv4 range',
              cidrv6: 'IPv6 range',
              base64: 'base64-encoded strengur',
              base64url: 'base64url-encoded strengur',
              json_string: 'JSON strengur',
              e164: 'E.164 tölugildi',
              jwt: 'JWT',
              template_literal: 'gildi',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Rangt gildi: \xde\xfa sl\xf3st inn ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'númer';
                    case 'object':
                      if (Array.isArray(a)) return 'fylki';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)} \xfear sem \xe1 a\xf0 vera ${c.expected}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `Rangt gildi: gert r\xe1\xf0 fyrir ${V(c.values[0])}`;
                return `\xd3gilt val: m\xe1 vera eitt af eftirfarandi ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Of st\xf3rt: gert er r\xe1\xf0 fyrir a\xf0 ${c.origin ?? 'gildi'} hafi ${b}${c.maximum.toString()} ${d.unit ?? 'hluti'}`;
                return `Of st\xf3rt: gert er r\xe1\xf0 fyrir a\xf0 ${c.origin ?? 'gildi'} s\xe9 ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Of l\xedti\xf0: gert er r\xe1\xf0 fyrir a\xf0 ${c.origin} hafi ${b}${c.minimum.toString()} ${d.unit}`;
                return `Of l\xedti\xf0: gert er r\xe1\xf0 fyrir a\xf0 ${c.origin} s\xe9 ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `\xd3gildur strengur: ver\xf0ur a\xf0 byrja \xe1 "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `\xd3gildur strengur: ver\xf0ur a\xf0 enda \xe1 "${c.suffix}"`;
                if ('includes' === c.format)
                  return `\xd3gildur strengur: ver\xf0ur a\xf0 innihalda "${c.includes}"`;
                if ('regex' === c.format)
                  return `\xd3gildur strengur: ver\xf0ur a\xf0 fylgja mynstri ${c.pattern}`;
                return `Rangt ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `R\xf6ng tala: ver\xf0ur a\xf0 vera margfeldi af ${c.divisor}`;
              case 'unrecognized_keys':
                return `\xd3\xfeekkt ${c.keys.length > 1 ? 'ir lyklar' : 'ur lykill'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Rangur lykill \xed ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Rangt gildi';
              case 'invalid_element':
                return `Rangt gildi \xed ${c.origin}`;
            }
          };
        })(),
      };
    }
    function d4() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'caratteri', verb: 'avere' },
              file: { unit: 'byte', verb: 'avere' },
              array: { unit: 'elementi', verb: 'avere' },
              set: { unit: 'elementi', verb: 'avere' },
            },
            b = {
              regex: 'input',
              email: 'indirizzo email',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'data e ora ISO',
              date: 'data ISO',
              time: 'ora ISO',
              duration: 'durata ISO',
              ipv4: 'indirizzo IPv4',
              ipv6: 'indirizzo IPv6',
              cidrv4: 'intervallo IPv4',
              cidrv6: 'intervallo IPv6',
              base64: 'stringa codificata in base64',
              base64url: 'URL codificata in base64',
              json_string: 'stringa JSON',
              e164: 'numero E.164',
              jwt: 'JWT',
              template_literal: 'input',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Input non valido: atteso ${c.expected}, ricevuto ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'numero';
                    case 'object':
                      if (Array.isArray(a)) return 'vettore';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Input non valido: atteso ${V(c.values[0])}`;
                return `Opzione non valida: atteso uno tra ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Troppo grande: ${c.origin ?? 'valore'} deve avere ${b}${c.maximum.toString()} ${d.unit ?? 'elementi'}`;
                return `Troppo grande: ${c.origin ?? 'valore'} deve essere ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Troppo piccolo: ${c.origin} deve avere ${b}${c.minimum.toString()} ${d.unit}`;
                return `Troppo piccolo: ${c.origin} deve essere ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Stringa non valida: deve iniziare con "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Stringa non valida: deve terminare con "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Stringa non valida: deve includere "${c.includes}"`;
                if ('regex' === c.format)
                  return `Stringa non valida: deve corrispondere al pattern ${c.pattern}`;
                return `Invalid ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Numero non valido: deve essere un multiplo di ${c.divisor}`;
              case 'unrecognized_keys':
                return `Chiav${c.keys.length > 1 ? 'i' : 'e'} non riconosciut${c.keys.length > 1 ? 'e' : 'a'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Chiave non valida in ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Input non valido';
              case 'invalid_element':
                return `Valore non valido in ${c.origin}`;
            }
          };
        })(),
      };
    }
    function d5() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: '文字', verb: 'である' },
              file: { unit: 'バイト', verb: 'である' },
              array: { unit: '要素', verb: 'である' },
              set: { unit: '要素', verb: 'である' },
            },
            b = {
              regex: '入力値',
              email: 'メールアドレス',
              url: 'URL',
              emoji: '絵文字',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO日時',
              date: 'ISO日付',
              time: 'ISO時刻',
              duration: 'ISO期間',
              ipv4: 'IPv4アドレス',
              ipv6: 'IPv6アドレス',
              cidrv4: 'IPv4範囲',
              cidrv6: 'IPv6範囲',
              base64: 'base64エンコード文字列',
              base64url: 'base64urlエンコード文字列',
              json_string: 'JSON文字列',
              e164: 'E.164番号',
              jwt: 'JWT',
              template_literal: '入力値',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `無効な入力: ${c.expected}が期待されましたが、${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : '数値';
                    case 'object':
                      if (Array.isArray(a)) return '配列';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}が入力されました`;
              case 'invalid_value':
                if (1 === c.values.length) return `無効な入力: ${V(c.values[0])}が期待されました`;
                return `無効な選択: ${s(c.values, '、')}のいずれかである必要があります`;
              case 'too_big': {
                let b = c.inclusive ? '以下である' : 'より小さい',
                  d = a[c.origin] ?? null;
                if (d)
                  return `大きすぎる値: ${c.origin ?? '値'}は${c.maximum.toString()}${d.unit ?? '要素'}${b}必要があります`;
                return `大きすぎる値: ${c.origin ?? '値'}は${c.maximum.toString()}${b}必要があります`;
              }
              case 'too_small': {
                let b = c.inclusive ? '以上である' : 'より大きい',
                  d = a[c.origin] ?? null;
                if (d)
                  return `小さすぎる値: ${c.origin}は${c.minimum.toString()}${d.unit}${b}必要があります`;
                return `小さすぎる値: ${c.origin}は${c.minimum.toString()}${b}必要があります`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `無効な文字列: "${c.prefix}"で始まる必要があります`;
                if ('ends_with' === c.format)
                  return `無効な文字列: "${c.suffix}"で終わる必要があります`;
                if ('includes' === c.format)
                  return `無効な文字列: "${c.includes}"を含む必要があります`;
                if ('regex' === c.format)
                  return `無効な文字列: パターン${c.pattern}に一致する必要があります`;
                return `無効な${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `無効な数値: ${c.divisor}の倍数である必要があります`;
              case 'unrecognized_keys':
                return `認識されていないキー${c.keys.length > 1 ? '群' : ''}: ${s(c.keys, '、')}`;
              case 'invalid_key':
                return `${c.origin}内の無効なキー`;
              case 'invalid_union':
                return '無効な入力';
              case 'invalid_element':
                return `${c.origin}内の無効な値`;
              default:
                return `無効な入力`;
            }
          };
        })(),
      };
    }
    function d6() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'តួអក្សរ', verb: 'គួរមាន' },
              file: { unit: 'បៃ', verb: 'គួរមាន' },
              array: { unit: 'ធាតុ', verb: 'គួរមាន' },
              set: { unit: 'ធាតុ', verb: 'គួរមាន' },
            },
            b = {
              regex: 'ទិន្នន័យបញ្ចូល',
              email: 'អាសយដ្ឋានអ៊ីមែល',
              url: 'URL',
              emoji: 'សញ្ញាអារម្មណ៍',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'កាលបរិច្ឆេទ និងម៉ោង ISO',
              date: 'កាលបរិច្ឆេទ ISO',
              time: 'ម៉ោង ISO',
              duration: 'រយៈពេល ISO',
              ipv4: 'អាសយដ្ឋាន IPv4',
              ipv6: 'អាសយដ្ឋាន IPv6',
              cidrv4: 'ដែនអាសយដ្ឋាន IPv4',
              cidrv6: 'ដែនអាសយដ្ឋាន IPv6',
              base64: 'ខ្សែអក្សរអ៊ិកូដ base64',
              base64url: 'ខ្សែអក្សរអ៊ិកូដ base64url',
              json_string: 'ខ្សែអក្សរ JSON',
              e164: 'លេខ E.164',
              jwt: 'JWT',
              template_literal: 'ទិន្នន័យបញ្ចូល',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `ទិន្នន័យបញ្ចូលមិនត្រឹមត្រូវ៖ ត្រូវការ ${c.expected} ប៉ុន្តែទទួលបាន ${((
                  a
                ) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'មិនមែនជាលេខ (NaN)' : 'លេខ';
                    case 'object':
                      if (Array.isArray(a)) return 'អារេ (Array)';
                      if (null === a) return 'គ្មានតម្លៃ (null)';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `ទិន្នន័យបញ្ចូលមិនត្រឹមត្រូវ៖ ត្រូវការ ${V(c.values[0])}`;
                return `ជម្រើសមិនត្រឹមត្រូវ៖ ត្រូវជាមួយក្នុងចំណោម ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `ធំពេក៖ ត្រូវការ ${c.origin ?? 'តម្លៃ'} ${b} ${c.maximum.toString()} ${d.unit ?? 'ធាតុ'}`;
                return `ធំពេក៖ ត្រូវការ ${c.origin ?? 'តម្លៃ'} ${b} ${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d) return `តូចពេក៖ ត្រូវការ ${c.origin} ${b} ${c.minimum.toString()} ${d.unit}`;
                return `តូចពេក៖ ត្រូវការ ${c.origin} ${b} ${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវចាប់ផ្តើមដោយ "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវបញ្ចប់ដោយ "${c.suffix}"`;
                if ('includes' === c.format)
                  return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវមាន "${c.includes}"`;
                if ('regex' === c.format)
                  return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវតែផ្គូផ្គងនឹងទម្រង់ដែលបានកំណត់ ${c.pattern}`;
                return `មិនត្រឹមត្រូវ៖ ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `លេខមិនត្រឹមត្រូវ៖ ត្រូវតែជាពហុគុណនៃ ${c.divisor}`;
              case 'unrecognized_keys':
                return `រកឃើញសោមិនស្គាល់៖ ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `សោមិនត្រឹមត្រូវនៅក្នុង ${c.origin}`;
              case 'invalid_union':
              default:
                return `ទិន្នន័យមិនត្រឹមត្រូវ`;
              case 'invalid_element':
                return `ទិន្នន័យមិនត្រឹមត្រូវនៅក្នុង ${c.origin}`;
            }
          };
        })(),
      };
    }
    function d7() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: '문자', verb: 'to have' },
              file: { unit: '바이트', verb: 'to have' },
              array: { unit: '개', verb: 'to have' },
              set: { unit: '개', verb: 'to have' },
            },
            b = {
              regex: '입력',
              email: '이메일 주소',
              url: 'URL',
              emoji: '이모지',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO 날짜시간',
              date: 'ISO 날짜',
              time: 'ISO 시간',
              duration: 'ISO 기간',
              ipv4: 'IPv4 주소',
              ipv6: 'IPv6 주소',
              cidrv4: 'IPv4 범위',
              cidrv6: 'IPv6 범위',
              base64: 'base64 인코딩 문자열',
              base64url: 'base64url 인코딩 문자열',
              json_string: 'JSON 문자열',
              e164: 'E.164 번호',
              jwt: 'JWT',
              template_literal: '입력',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `잘못된 입력: 예상 타입은 ${c.expected}, 받은 타입은 ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}입니다`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `잘못된 입력: 값은 ${V(c.values[0])} 이어야 합니다`;
                return `잘못된 옵션: ${s(c.values, '또는 ')} 중 하나여야 합니다`;
              case 'too_big': {
                let b = c.inclusive ? '이하' : '미만',
                  d = '미만' === b ? '이어야 합니다' : '여야 합니다',
                  e = a[c.origin] ?? null,
                  f = e?.unit ?? '요소';
                if (e)
                  return `${c.origin ?? '값'}이 너무 큽니다: ${c.maximum.toString()}${f} ${b}${d}`;
                return `${c.origin ?? '값'}이 너무 큽니다: ${c.maximum.toString()} ${b}${d}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '이상' : '초과',
                  d = '이상' === b ? '이어야 합니다' : '여야 합니다',
                  e = a[c.origin] ?? null,
                  f = e?.unit ?? '요소';
                if (e)
                  return `${c.origin ?? '값'}이 너무 작습니다: ${c.minimum.toString()}${f} ${b}${d}`;
                return `${c.origin ?? '값'}이 너무 작습니다: ${c.minimum.toString()} ${b}${d}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `잘못된 문자열: "${c.prefix}"(으)로 시작해야 합니다`;
                if ('ends_with' === c.format)
                  return `잘못된 문자열: "${c.suffix}"(으)로 끝나야 합니다`;
                if ('includes' === c.format)
                  return `잘못된 문자열: "${c.includes}"을(를) 포함해야 합니다`;
                if ('regex' === c.format)
                  return `잘못된 문자열: 정규식 ${c.pattern} 패턴과 일치해야 합니다`;
                return `잘못된 ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `잘못된 숫자: ${c.divisor}의 배수여야 합니다`;
              case 'unrecognized_keys':
                return `인식할 수 없는 키: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `잘못된 키: ${c.origin}`;
              case 'invalid_union':
              default:
                return `잘못된 입력`;
              case 'invalid_element':
                return `잘못된 값: ${c.origin}`;
            }
          };
        })(),
      };
    }
    function d8() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'знаци', verb: 'да имаат' },
              file: { unit: 'бајти', verb: 'да имаат' },
              array: { unit: 'ставки', verb: 'да имаат' },
              set: { unit: 'ставки', verb: 'да имаат' },
            },
            b = {
              regex: 'внес',
              email: 'адреса на е-пошта',
              url: 'URL',
              emoji: 'емоџи',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO датум и време',
              date: 'ISO датум',
              time: 'ISO време',
              duration: 'ISO времетраење',
              ipv4: 'IPv4 адреса',
              ipv6: 'IPv6 адреса',
              cidrv4: 'IPv4 опсег',
              cidrv6: 'IPv6 опсег',
              base64: 'base64-енкодирана низа',
              base64url: 'base64url-енкодирана низа',
              json_string: 'JSON низа',
              e164: 'E.164 број',
              jwt: 'JWT',
              template_literal: 'внес',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Грешен внес: се очекува ${c.expected}, примено ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'број';
                    case 'object':
                      if (Array.isArray(a)) return 'низа';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Invalid input: expected ${V(c.values[0])}`;
                return `Грешана опција: се очекува една ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Премногу голем: се очекува ${c.origin ?? 'вредноста'} да има ${b}${c.maximum.toString()} ${d.unit ?? 'елементи'}`;
                return `Премногу голем: се очекува ${c.origin ?? 'вредноста'} да биде ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Премногу мал: се очекува ${c.origin} да има ${b}${c.minimum.toString()} ${d.unit}`;
                return `Премногу мал: се очекува ${c.origin} да биде ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Неважечка низа: мора да започнува со "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Неважечка низа: мора да завршува со "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Неважечка низа: мора да вклучува "${c.includes}"`;
                if ('regex' === c.format)
                  return `Неважечка низа: мора да одгоара на патернот ${c.pattern}`;
                return `Invalid ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Грешен број: мора да биде делив со ${c.divisor}`;
              case 'unrecognized_keys':
                return `${c.keys.length > 1 ? 'Непрепознаени клучеви' : 'Непрепознаен клуч'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Грешен клуч во ${c.origin}`;
              case 'invalid_union':
                return 'Грешен внес';
              case 'invalid_element':
                return `Грешна вредност во ${c.origin}`;
              default:
                return `Грешен внес`;
            }
          };
        })(),
      };
    }
    function d9() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'aksara', verb: 'mempunyai' },
              file: { unit: 'bait', verb: 'mempunyai' },
              array: { unit: 'elemen', verb: 'mempunyai' },
              set: { unit: 'elemen', verb: 'mempunyai' },
            },
            b = {
              regex: 'input',
              email: 'alamat e-mel',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'tarikh masa ISO',
              date: 'tarikh ISO',
              time: 'masa ISO',
              duration: 'tempoh ISO',
              ipv4: 'alamat IPv4',
              ipv6: 'alamat IPv6',
              cidrv4: 'julat IPv4',
              cidrv6: 'julat IPv6',
              base64: 'string dikodkan base64',
              base64url: 'string dikodkan base64url',
              json_string: 'string JSON',
              e164: 'nombor E.164',
              jwt: 'JWT',
              template_literal: 'input',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Input tidak sah: dijangka ${c.expected}, diterima ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'nombor';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Input tidak sah: dijangka ${V(c.values[0])}`;
                return `Pilihan tidak sah: dijangka salah satu daripada ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Terlalu besar: dijangka ${c.origin ?? 'nilai'} ${d.verb} ${b}${c.maximum.toString()} ${d.unit ?? 'elemen'}`;
                return `Terlalu besar: dijangka ${c.origin ?? 'nilai'} adalah ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Terlalu kecil: dijangka ${c.origin} ${d.verb} ${b}${c.minimum.toString()} ${d.unit}`;
                return `Terlalu kecil: dijangka ${c.origin} adalah ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `String tidak sah: mesti bermula dengan "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `String tidak sah: mesti berakhir dengan "${c.suffix}"`;
                if ('includes' === c.format)
                  return `String tidak sah: mesti mengandungi "${c.includes}"`;
                if ('regex' === c.format)
                  return `String tidak sah: mesti sepadan dengan corak ${c.pattern}`;
                return `${b[c.format] ?? c.format} tidak sah`;
              case 'not_multiple_of':
                return `Nombor tidak sah: perlu gandaan ${c.divisor}`;
              case 'unrecognized_keys':
                return `Kunci tidak dikenali: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Kunci tidak sah dalam ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Input tidak sah';
              case 'invalid_element':
                return `Nilai tidak sah dalam ${c.origin}`;
            }
          };
        })(),
      };
    }
    function ea() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'tekens' },
              file: { unit: 'bytes' },
              array: { unit: 'elementen' },
              set: { unit: 'elementen' },
            },
            b = {
              regex: 'invoer',
              email: 'emailadres',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO datum en tijd',
              date: 'ISO datum',
              time: 'ISO tijd',
              duration: 'ISO duur',
              ipv4: 'IPv4-adres',
              ipv6: 'IPv6-adres',
              cidrv4: 'IPv4-bereik',
              cidrv6: 'IPv6-bereik',
              base64: 'base64-gecodeerde tekst',
              base64url: 'base64 URL-gecodeerde tekst',
              json_string: 'JSON string',
              e164: 'E.164-nummer',
              jwt: 'JWT',
              template_literal: 'invoer',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Ongeldige invoer: verwacht ${c.expected}, ontving ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'getal';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Ongeldige invoer: verwacht ${V(c.values[0])}`;
                return `Ongeldige optie: verwacht \xe9\xe9n van ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Te lang: verwacht dat ${c.origin ?? 'waarde'} ${b}${c.maximum.toString()} ${d.unit ?? 'elementen'} bevat`;
                return `Te lang: verwacht dat ${c.origin ?? 'waarde'} ${b}${c.maximum.toString()} is`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Te kort: verwacht dat ${c.origin} ${b}${c.minimum.toString()} ${d.unit} bevat`;
                return `Te kort: verwacht dat ${c.origin} ${b}${c.minimum.toString()} is`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Ongeldige tekst: moet met "${c.prefix}" beginnen`;
                if ('ends_with' === c.format)
                  return `Ongeldige tekst: moet op "${c.suffix}" eindigen`;
                if ('includes' === c.format)
                  return `Ongeldige tekst: moet "${c.includes}" bevatten`;
                if ('regex' === c.format)
                  return `Ongeldige tekst: moet overeenkomen met patroon ${c.pattern}`;
                return `Ongeldig: ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Ongeldig getal: moet een veelvoud van ${c.divisor} zijn`;
              case 'unrecognized_keys':
                return `Onbekende key${c.keys.length > 1 ? 's' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Ongeldige key in ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Ongeldige invoer';
              case 'invalid_element':
                return `Ongeldige waarde in ${c.origin}`;
            }
          };
        })(),
      };
    }
    function eb() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'tegn', verb: 'å ha' },
              file: { unit: 'bytes', verb: 'å ha' },
              array: { unit: 'elementer', verb: 'å inneholde' },
              set: { unit: 'elementer', verb: 'å inneholde' },
            },
            b = {
              regex: 'input',
              email: 'e-postadresse',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO dato- og klokkeslett',
              date: 'ISO-dato',
              time: 'ISO-klokkeslett',
              duration: 'ISO-varighet',
              ipv4: 'IPv4-område',
              ipv6: 'IPv6-område',
              cidrv4: 'IPv4-spekter',
              cidrv6: 'IPv6-spekter',
              base64: 'base64-enkodet streng',
              base64url: 'base64url-enkodet streng',
              json_string: 'JSON-streng',
              e164: 'E.164-nummer',
              jwt: 'JWT',
              template_literal: 'input',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Ugyldig input: forventet ${c.expected}, fikk ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'tall';
                    case 'object':
                      if (Array.isArray(a)) return 'liste';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Ugyldig verdi: forventet ${V(c.values[0])}`;
                return `Ugyldig valg: forventet en av ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `For stor(t): forventet ${c.origin ?? 'value'} til \xe5 ha ${b}${c.maximum.toString()} ${d.unit ?? 'elementer'}`;
                return `For stor(t): forventet ${c.origin ?? 'value'} til \xe5 ha ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `For lite(n): forventet ${c.origin} til \xe5 ha ${b}${c.minimum.toString()} ${d.unit}`;
                return `For lite(n): forventet ${c.origin} til \xe5 ha ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Ugyldig streng: m\xe5 starte med "${c.prefix}"`;
                if ('ends_with' === c.format) return `Ugyldig streng: m\xe5 ende med "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Ugyldig streng: m\xe5 inneholde "${c.includes}"`;
                if ('regex' === c.format)
                  return `Ugyldig streng: m\xe5 matche m\xf8nsteret ${c.pattern}`;
                return `Ugyldig ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Ugyldig tall: m\xe5 v\xe6re et multiplum av ${c.divisor}`;
              case 'unrecognized_keys':
                return `${c.keys.length > 1 ? 'Ukjente nøkler' : 'Ukjent nøkkel'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Ugyldig n\xf8kkel i ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Ugyldig input';
              case 'invalid_element':
                return `Ugyldig verdi i ${c.origin}`;
            }
          };
        })(),
      };
    }
    function ec() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'harf', verb: 'olmalıdır' },
              file: { unit: 'bayt', verb: 'olmalıdır' },
              array: { unit: 'unsur', verb: 'olmalıdır' },
              set: { unit: 'unsur', verb: 'olmalıdır' },
            },
            b = {
              regex: 'giren',
              email: 'epostagâh',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO hengâmı',
              date: 'ISO tarihi',
              time: 'ISO zamanı',
              duration: 'ISO müddeti',
              ipv4: 'IPv4 nişânı',
              ipv6: 'IPv6 nişânı',
              cidrv4: 'IPv4 menzili',
              cidrv6: 'IPv6 menzili',
              base64: 'base64-şifreli metin',
              base64url: 'base64url-şifreli metin',
              json_string: 'JSON metin',
              e164: 'E.164 sayısı',
              jwt: 'JWT',
              template_literal: 'giren',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `F\xe2sit giren: umulan ${c.expected}, alınan ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'numara';
                    case 'object':
                      if (Array.isArray(a)) return 'saf';
                      if (null === a) return 'gayb';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `F\xe2sit giren: umulan ${V(c.values[0])}`;
                return `F\xe2sit tercih: m\xfbteberler ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Fazla b\xfcy\xfck: ${c.origin ?? 'value'}, ${b}${c.maximum.toString()} ${d.unit ?? 'elements'} sahip olmalıydı.`;
                return `Fazla b\xfcy\xfck: ${c.origin ?? 'value'}, ${b}${c.maximum.toString()} olmalıydı.`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Fazla k\xfc\xe7\xfck: ${c.origin}, ${b}${c.minimum.toString()} ${d.unit} sahip olmalıydı.`;
                return `Fazla k\xfc\xe7\xfck: ${c.origin}, ${b}${c.minimum.toString()} olmalıydı.`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `F\xe2sit metin: "${c.prefix}" ile başlamalı.`;
                if ('ends_with' === c.format) return `F\xe2sit metin: "${c.suffix}" ile bitmeli.`;
                if ('includes' === c.format)
                  return `F\xe2sit metin: "${c.includes}" ihtiv\xe2 etmeli.`;
                if ('regex' === c.format) return `F\xe2sit metin: ${c.pattern} nakşına uymalı.`;
                return `F\xe2sit ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `F\xe2sit sayı: ${c.divisor} katı olmalıydı.`;
              case 'unrecognized_keys':
                return `Tanınmayan anahtar ${c.keys.length > 1 ? 's' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `${c.origin} i\xe7in tanınmayan anahtar var.`;
              case 'invalid_union':
                return 'Giren tanınamadı.';
              case 'invalid_element':
                return `${c.origin} i\xe7in tanınmayan kıymet var.`;
              default:
                return `Kıymet tanınamadı.`;
            }
          };
        })(),
      };
    }
    function ed() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'توکي', verb: 'ولري' },
              file: { unit: 'بایټس', verb: 'ولري' },
              array: { unit: 'توکي', verb: 'ولري' },
              set: { unit: 'توکي', verb: 'ولري' },
            },
            b = {
              regex: 'ورودي',
              email: 'بریښنالیک',
              url: 'یو آر ال',
              emoji: 'ایموجي',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'نیټه او وخت',
              date: 'نېټه',
              time: 'وخت',
              duration: 'موده',
              ipv4: 'د IPv4 پته',
              ipv6: 'د IPv6 پته',
              cidrv4: 'د IPv4 ساحه',
              cidrv6: 'د IPv6 ساحه',
              base64: 'base64-encoded متن',
              base64url: 'base64url-encoded متن',
              json_string: 'JSON متن',
              e164: 'د E.164 شمېره',
              jwt: 'JWT',
              template_literal: 'ورودي',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `ناسم ورودي: باید ${c.expected} وای, مګر ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'عدد';
                    case 'object':
                      if (Array.isArray(a)) return 'ارې';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)} ترلاسه شو`;
              case 'invalid_value':
                if (1 === c.values.length) return `ناسم ورودي: باید ${V(c.values[0])} وای`;
                return `ناسم انتخاب: باید یو له ${s(c.values, '|')} څخه وای`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `ډیر لوی: ${c.origin ?? 'ارزښت'} باید ${b}${c.maximum.toString()} ${d.unit ?? 'عنصرونه'} ولري`;
                return `ډیر لوی: ${c.origin ?? 'ارزښت'} باید ${b}${c.maximum.toString()} وي`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `ډیر کوچنی: ${c.origin} باید ${b}${c.minimum.toString()} ${d.unit} ولري`;
                return `ډیر کوچنی: ${c.origin} باید ${b}${c.minimum.toString()} وي`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format) return `ناسم متن: باید د "${c.prefix}" سره پیل شي`;
                if ('ends_with' === c.format)
                  return `ناسم متن: باید د "${c.suffix}" سره پای ته ورسيږي`;
                if ('includes' === c.format) return `ناسم متن: باید "${c.includes}" ولري`;
                if ('regex' === c.format) return `ناسم متن: باید د ${c.pattern} سره مطابقت ولري`;
                return `${b[c.format] ?? c.format} ناسم دی`;
              case 'not_multiple_of':
                return `ناسم عدد: باید د ${c.divisor} مضرب وي`;
              case 'unrecognized_keys':
                return `ناسم ${c.keys.length > 1 ? 'کلیډونه' : 'کلیډ'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `ناسم کلیډ په ${c.origin} کې`;
              case 'invalid_union':
              default:
                return `ناسمه ورودي`;
              case 'invalid_element':
                return `ناسم عنصر په ${c.origin} کې`;
            }
          };
        })(),
      };
    }
    function ee() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'znaków', verb: 'mieć' },
              file: { unit: 'bajtów', verb: 'mieć' },
              array: { unit: 'elementów', verb: 'mieć' },
              set: { unit: 'elementów', verb: 'mieć' },
            },
            b = {
              regex: 'wyrażenie',
              email: 'adres email',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'data i godzina w formacie ISO',
              date: 'data w formacie ISO',
              time: 'godzina w formacie ISO',
              duration: 'czas trwania ISO',
              ipv4: 'adres IPv4',
              ipv6: 'adres IPv6',
              cidrv4: 'zakres IPv4',
              cidrv6: 'zakres IPv6',
              base64: 'ciąg znaków zakodowany w formacie base64',
              base64url: 'ciąg znaków zakodowany w formacie base64url',
              json_string: 'ciąg znaków w formacie JSON',
              e164: 'liczba E.164',
              jwt: 'JWT',
              template_literal: 'wejście',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Nieprawidłowe dane wejściowe: oczekiwano ${c.expected}, otrzymano ${((
                  a
                ) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'liczba';
                    case 'object':
                      if (Array.isArray(a)) return 'tablica';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `Nieprawidłowe dane wejściowe: oczekiwano ${V(c.values[0])}`;
                return `Nieprawidłowa opcja: oczekiwano jednej z wartości ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Za duża wartość: oczekiwano, że ${c.origin ?? 'wartość'} będzie mieć ${b}${c.maximum.toString()} ${d.unit ?? 'elementów'}`;
                return `Zbyt duż(y/a/e): oczekiwano, że ${c.origin ?? 'wartość'} będzie wynosić ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Za mała wartość: oczekiwano, że ${c.origin ?? 'wartość'} będzie mieć ${b}${c.minimum.toString()} ${d.unit ?? 'elementów'}`;
                return `Zbyt mał(y/a/e): oczekiwano, że ${c.origin ?? 'wartość'} będzie wynosić ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Nieprawidłowy ciąg znak\xf3w: musi zaczynać się od "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Nieprawidłowy ciąg znak\xf3w: musi kończyć się na "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Nieprawidłowy ciąg znak\xf3w: musi zawierać "${c.includes}"`;
                if ('regex' === c.format)
                  return `Nieprawidłowy ciąg znak\xf3w: musi odpowiadać wzorcowi ${c.pattern}`;
                return `Nieprawidłow(y/a/e) ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Nieprawidłowa liczba: musi być wielokrotnością ${c.divisor}`;
              case 'unrecognized_keys':
                return `Nierozpoznane klucze${c.keys.length > 1 ? 's' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Nieprawidłowy klucz w ${c.origin}`;
              case 'invalid_union':
                return 'Nieprawidłowe dane wejściowe';
              case 'invalid_element':
                return `Nieprawidłowa wartość w ${c.origin}`;
              default:
                return `Nieprawidłowe dane wejściowe`;
            }
          };
        })(),
      };
    }
    function ef() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'caracteres', verb: 'ter' },
              file: { unit: 'bytes', verb: 'ter' },
              array: { unit: 'itens', verb: 'ter' },
              set: { unit: 'itens', verb: 'ter' },
            },
            b = {
              regex: 'padrão',
              email: 'endereço de e-mail',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'data e hora ISO',
              date: 'data ISO',
              time: 'hora ISO',
              duration: 'duração ISO',
              ipv4: 'endereço IPv4',
              ipv6: 'endereço IPv6',
              cidrv4: 'faixa de IPv4',
              cidrv6: 'faixa de IPv6',
              base64: 'texto codificado em base64',
              base64url: 'URL codificada em base64',
              json_string: 'texto JSON',
              e164: 'número E.164',
              jwt: 'JWT',
              template_literal: 'entrada',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Tipo inv\xe1lido: esperado ${c.expected}, recebido ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'número';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'nulo';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Entrada inv\xe1lida: esperado ${V(c.values[0])}`;
                return `Op\xe7\xe3o inv\xe1lida: esperada uma das ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Muito grande: esperado que ${c.origin ?? 'valor'} tivesse ${b}${c.maximum.toString()} ${d.unit ?? 'elementos'}`;
                return `Muito grande: esperado que ${c.origin ?? 'valor'} fosse ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Muito pequeno: esperado que ${c.origin} tivesse ${b}${c.minimum.toString()} ${d.unit}`;
                return `Muito pequeno: esperado que ${c.origin} fosse ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Texto inv\xe1lido: deve come\xe7ar com "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Texto inv\xe1lido: deve terminar com "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Texto inv\xe1lido: deve incluir "${c.includes}"`;
                if ('regex' === c.format)
                  return `Texto inv\xe1lido: deve corresponder ao padr\xe3o ${c.pattern}`;
                return `${b[c.format] ?? c.format} inv\xe1lido`;
              case 'not_multiple_of':
                return `N\xfamero inv\xe1lido: deve ser m\xfaltiplo de ${c.divisor}`;
              case 'unrecognized_keys':
                return `Chave${c.keys.length > 1 ? 's' : ''} desconhecida${c.keys.length > 1 ? 's' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Chave inv\xe1lida em ${c.origin}`;
              case 'invalid_union':
                return 'Entrada inválida';
              case 'invalid_element':
                return `Valor inv\xe1lido em ${c.origin}`;
              default:
                return `Campo inv\xe1lido`;
            }
          };
        })(),
      };
    }
    function eg(a, b, c, d) {
      let e = Math.abs(a),
        f = e % 10,
        g = e % 100;
      return g >= 11 && g <= 19 ? d : 1 === f ? b : f >= 2 && f <= 4 ? c : d;
    }
    function eh() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: { one: 'символ', few: 'символа', many: 'символов' }, verb: 'иметь' },
              file: { unit: { one: 'байт', few: 'байта', many: 'байт' }, verb: 'иметь' },
              array: {
                unit: { one: 'элемент', few: 'элемента', many: 'элементов' },
                verb: 'иметь',
              },
              set: { unit: { one: 'элемент', few: 'элемента', many: 'элементов' }, verb: 'иметь' },
            },
            b = {
              regex: 'ввод',
              email: 'email адрес',
              url: 'URL',
              emoji: 'эмодзи',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO дата и время',
              date: 'ISO дата',
              time: 'ISO время',
              duration: 'ISO длительность',
              ipv4: 'IPv4 адрес',
              ipv6: 'IPv6 адрес',
              cidrv4: 'IPv4 диапазон',
              cidrv6: 'IPv6 диапазон',
              base64: 'строка в формате base64',
              base64url: 'строка в формате base64url',
              json_string: 'JSON строка',
              e164: 'номер E.164',
              jwt: 'JWT',
              template_literal: 'ввод',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Неверный ввод: ожидалось ${c.expected}, получено ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'число';
                    case 'object':
                      if (Array.isArray(a)) return 'массив';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Неверный ввод: ожидалось ${V(c.values[0])}`;
                return `Неверный вариант: ожидалось одно из ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d) {
                  let a = eg(Number(c.maximum), d.unit.one, d.unit.few, d.unit.many);
                  return `Слишком большое значение: ожидалось, что ${c.origin ?? 'значение'} будет иметь ${b}${c.maximum.toString()} ${a}`;
                }
                return `Слишком большое значение: ожидалось, что ${c.origin ?? 'значение'} будет ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d) {
                  let a = eg(Number(c.minimum), d.unit.one, d.unit.few, d.unit.many);
                  return `Слишком маленькое значение: ожидалось, что ${c.origin} будет иметь ${b}${c.minimum.toString()} ${a}`;
                }
                return `Слишком маленькое значение: ожидалось, что ${c.origin} будет ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Неверная строка: должна начинаться с "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Неверная строка: должна заканчиваться на "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Неверная строка: должна содержать "${c.includes}"`;
                if ('regex' === c.format)
                  return `Неверная строка: должна соответствовать шаблону ${c.pattern}`;
                return `Неверный ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Неверное число: должно быть кратным ${c.divisor}`;
              case 'unrecognized_keys':
                return `Нераспознанн${c.keys.length > 1 ? 'ые' : 'ый'} ключ${c.keys.length > 1 ? 'и' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Неверный ключ в ${c.origin}`;
              case 'invalid_union':
                return 'Неверные входные данные';
              case 'invalid_element':
                return `Неверное значение в ${c.origin}`;
              default:
                return `Неверные входные данные`;
            }
          };
        })(),
      };
    }
    function ei() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'znakov', verb: 'imeti' },
              file: { unit: 'bajtov', verb: 'imeti' },
              array: { unit: 'elementov', verb: 'imeti' },
              set: { unit: 'elementov', verb: 'imeti' },
            },
            b = {
              regex: 'vnos',
              email: 'e-poštni naslov',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO datum in čas',
              date: 'ISO datum',
              time: 'ISO čas',
              duration: 'ISO trajanje',
              ipv4: 'IPv4 naslov',
              ipv6: 'IPv6 naslov',
              cidrv4: 'obseg IPv4',
              cidrv6: 'obseg IPv6',
              base64: 'base64 kodiran niz',
              base64url: 'base64url kodiran niz',
              json_string: 'JSON niz',
              e164: 'E.164 številka',
              jwt: 'JWT',
              template_literal: 'vnos',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Neveljaven vnos: pričakovano ${c.expected}, prejeto ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'število';
                    case 'object':
                      if (Array.isArray(a)) return 'tabela';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Neveljaven vnos: pričakovano ${V(c.values[0])}`;
                return `Neveljavna možnost: pričakovano eno izmed ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Preveliko: pričakovano, da bo ${c.origin ?? 'vrednost'} imelo ${b}${c.maximum.toString()} ${d.unit ?? 'elementov'}`;
                return `Preveliko: pričakovano, da bo ${c.origin ?? 'vrednost'} ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Premajhno: pričakovano, da bo ${c.origin} imelo ${b}${c.minimum.toString()} ${d.unit}`;
                return `Premajhno: pričakovano, da bo ${c.origin} ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Neveljaven niz: mora se začeti z "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Neveljaven niz: mora se končati z "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Neveljaven niz: mora vsebovati "${c.includes}"`;
                if ('regex' === c.format)
                  return `Neveljaven niz: mora ustrezati vzorcu ${c.pattern}`;
                return `Neveljaven ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Neveljavno število: mora biti večkratnik ${c.divisor}`;
              case 'unrecognized_keys':
                return `Neprepoznan${c.keys.length > 1 ? 'i ključi' : ' ključ'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Neveljaven ključ v ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Neveljaven vnos';
              case 'invalid_element':
                return `Neveljavna vrednost v ${c.origin}`;
            }
          };
        })(),
      };
    }
    function ej() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'tecken', verb: 'att ha' },
              file: { unit: 'bytes', verb: 'att ha' },
              array: { unit: 'objekt', verb: 'att innehålla' },
              set: { unit: 'objekt', verb: 'att innehålla' },
            },
            b = {
              regex: 'reguljärt uttryck',
              email: 'e-postadress',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO-datum och tid',
              date: 'ISO-datum',
              time: 'ISO-tid',
              duration: 'ISO-varaktighet',
              ipv4: 'IPv4-intervall',
              ipv6: 'IPv6-intervall',
              cidrv4: 'IPv4-spektrum',
              cidrv6: 'IPv6-spektrum',
              base64: 'base64-kodad sträng',
              base64url: 'base64url-kodad sträng',
              json_string: 'JSON-sträng',
              e164: 'E.164-nummer',
              jwt: 'JWT',
              template_literal: 'mall-literal',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Ogiltig inmatning: f\xf6rv\xe4ntat ${c.expected}, fick ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'antal';
                    case 'object':
                      if (Array.isArray(a)) return 'lista';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `Ogiltig inmatning: f\xf6rv\xe4ntat ${V(c.values[0])}`;
                return `Ogiltigt val: f\xf6rv\xe4ntade en av ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `F\xf6r stor(t): f\xf6rv\xe4ntade ${c.origin ?? 'värdet'} att ha ${b}${c.maximum.toString()} ${d.unit ?? 'element'}`;
                return `F\xf6r stor(t): f\xf6rv\xe4ntat ${c.origin ?? 'värdet'} att ha ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `F\xf6r lite(t): f\xf6rv\xe4ntade ${c.origin ?? 'värdet'} att ha ${b}${c.minimum.toString()} ${d.unit}`;
                return `F\xf6r lite(t): f\xf6rv\xe4ntade ${c.origin ?? 'värdet'} att ha ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Ogiltig str\xe4ng: m\xe5ste b\xf6rja med "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Ogiltig str\xe4ng: m\xe5ste sluta med "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Ogiltig str\xe4ng: m\xe5ste inneh\xe5lla "${c.includes}"`;
                if ('regex' === c.format)
                  return `Ogiltig str\xe4ng: m\xe5ste matcha m\xf6nstret "${c.pattern}"`;
                return `Ogiltig(t) ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Ogiltigt tal: m\xe5ste vara en multipel av ${c.divisor}`;
              case 'unrecognized_keys':
                return `${c.keys.length > 1 ? 'Okända nycklar' : 'Okänd nyckel'}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Ogiltig nyckel i ${c.origin ?? 'värdet'}`;
              case 'invalid_union':
              default:
                return 'Ogiltig input';
              case 'invalid_element':
                return `Ogiltigt v\xe4rde i ${c.origin ?? 'värdet'}`;
            }
          };
        })(),
      };
    }
    function ek() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'எழுத்துக்கள்', verb: 'கொண்டிருக்க வேண்டும்' },
              file: { unit: 'பைட்டுகள்', verb: 'கொண்டிருக்க வேண்டும்' },
              array: { unit: 'உறுப்புகள்', verb: 'கொண்டிருக்க வேண்டும்' },
              set: { unit: 'உறுப்புகள்', verb: 'கொண்டிருக்க வேண்டும்' },
            },
            b = {
              regex: 'உள்ளீடு',
              email: 'மின்னஞ்சல் முகவரி',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO தேதி நேரம்',
              date: 'ISO தேதி',
              time: 'ISO நேரம்',
              duration: 'ISO கால அளவு',
              ipv4: 'IPv4 முகவரி',
              ipv6: 'IPv6 முகவரி',
              cidrv4: 'IPv4 வரம்பு',
              cidrv6: 'IPv6 வரம்பு',
              base64: 'base64-encoded சரம்',
              base64url: 'base64url-encoded சரம்',
              json_string: 'JSON சரம்',
              e164: 'E.164 எண்',
              jwt: 'JWT',
              template_literal: 'input',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${c.expected}, பெறப்பட்டது ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'எண் அல்லாதது' : 'எண்';
                    case 'object':
                      if (Array.isArray(a)) return 'அணி';
                      if (null === a) return 'வெறுமை';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${V(c.values[0])}`;
                return `தவறான விருப்பம்: எதிர்பார்க்கப்பட்டது ${s(c.values, '|')} இல் ஒன்று`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${c.origin ?? 'மதிப்பு'} ${b}${c.maximum.toString()} ${d.unit ?? 'உறுப்புகள்'} ஆக இருக்க வேண்டும்`;
                return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${c.origin ?? 'மதிப்பு'} ${b}${c.maximum.toString()} ஆக இருக்க வேண்டும்`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${c.origin} ${b}${c.minimum.toString()} ${d.unit} ஆக இருக்க வேண்டும்`;
                return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${c.origin} ${b}${c.minimum.toString()} ஆக இருக்க வேண்டும்`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `தவறான சரம்: "${c.prefix}" இல் தொடங்க வேண்டும்`;
                if ('ends_with' === c.format)
                  return `தவறான சரம்: "${c.suffix}" இல் முடிவடைய வேண்டும்`;
                if ('includes' === c.format)
                  return `தவறான சரம்: "${c.includes}" ஐ உள்ளடக்க வேண்டும்`;
                if ('regex' === c.format)
                  return `தவறான சரம்: ${c.pattern} முறைபாட்டுடன் பொருந்த வேண்டும்`;
                return `தவறான ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `தவறான எண்: ${c.divisor} இன் பலமாக இருக்க வேண்டும்`;
              case 'unrecognized_keys':
                return `அடையாளம் தெரியாத விசை${c.keys.length > 1 ? 'கள்' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `${c.origin} இல் தவறான விசை`;
              case 'invalid_union':
                return 'தவறான உள்ளீடு';
              case 'invalid_element':
                return `${c.origin} இல் தவறான மதிப்பு`;
              default:
                return `தவறான உள்ளீடு`;
            }
          };
        })(),
      };
    }
    function el() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'ตัวอักษร', verb: 'ควรมี' },
              file: { unit: 'ไบต์', verb: 'ควรมี' },
              array: { unit: 'รายการ', verb: 'ควรมี' },
              set: { unit: 'รายการ', verb: 'ควรมี' },
            },
            b = {
              regex: 'ข้อมูลที่ป้อน',
              email: 'ที่อยู่อีเมล',
              url: 'URL',
              emoji: 'อิโมจิ',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'วันที่เวลาแบบ ISO',
              date: 'วันที่แบบ ISO',
              time: 'เวลาแบบ ISO',
              duration: 'ช่วงเวลาแบบ ISO',
              ipv4: 'ที่อยู่ IPv4',
              ipv6: 'ที่อยู่ IPv6',
              cidrv4: 'ช่วง IP แบบ IPv4',
              cidrv6: 'ช่วง IP แบบ IPv6',
              base64: 'ข้อความแบบ Base64',
              base64url: 'ข้อความแบบ Base64 สำหรับ URL',
              json_string: 'ข้อความแบบ JSON',
              e164: 'เบอร์โทรศัพท์ระหว่างประเทศ (E.164)',
              jwt: 'โทเคน JWT',
              template_literal: 'ข้อมูลที่ป้อน',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `ประเภทข้อมูลไม่ถูกต้อง: ควรเป็น ${c.expected} แต่ได้รับ ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'ไม่ใช่ตัวเลข (NaN)' : 'ตัวเลข';
                    case 'object':
                      if (Array.isArray(a)) return 'อาร์เรย์ (Array)';
                      if (null === a) return 'ไม่มีค่า (null)';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `ค่าไม่ถูกต้อง: ควรเป็น ${V(c.values[0])}`;
                return `ตัวเลือกไม่ถูกต้อง: ควรเป็นหนึ่งใน ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? 'ไม่เกิน' : 'น้อยกว่า',
                  d = a[c.origin] ?? null;
                if (d)
                  return `เกินกำหนด: ${c.origin ?? 'ค่า'} ควรมี${b} ${c.maximum.toString()} ${d.unit ?? 'รายการ'}`;
                return `เกินกำหนด: ${c.origin ?? 'ค่า'} ควรมี${b} ${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? 'อย่างน้อย' : 'มากกว่า',
                  d = a[c.origin] ?? null;
                if (d)
                  return `น้อยกว่ากำหนด: ${c.origin} ควรมี${b} ${c.minimum.toString()} ${d.unit}`;
                return `น้อยกว่ากำหนด: ${c.origin} ควรมี${b} ${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `รูปแบบไม่ถูกต้อง: ข้อความต้องขึ้นต้นด้วย "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `รูปแบบไม่ถูกต้อง: ข้อความต้องลงท้ายด้วย "${c.suffix}"`;
                if ('includes' === c.format)
                  return `รูปแบบไม่ถูกต้อง: ข้อความต้องมี "${c.includes}" อยู่ในข้อความ`;
                if ('regex' === c.format)
                  return `รูปแบบไม่ถูกต้อง: ต้องตรงกับรูปแบบที่กำหนด ${c.pattern}`;
                return `รูปแบบไม่ถูกต้อง: ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `ตัวเลขไม่ถูกต้อง: ต้องเป็นจำนวนที่หารด้วย ${c.divisor} ได้ลงตัว`;
              case 'unrecognized_keys':
                return `พบคีย์ที่ไม่รู้จัก: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `คีย์ไม่ถูกต้องใน ${c.origin}`;
              case 'invalid_union':
                return 'ข้อมูลไม่ถูกต้อง: ไม่ตรงกับรูปแบบยูเนียนที่กำหนดไว้';
              case 'invalid_element':
                return `ข้อมูลไม่ถูกต้องใน ${c.origin}`;
              default:
                return `ข้อมูลไม่ถูกต้อง`;
            }
          };
        })(),
      };
    }
    function em() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'karakter', verb: 'olmalı' },
              file: { unit: 'bayt', verb: 'olmalı' },
              array: { unit: 'öğe', verb: 'olmalı' },
              set: { unit: 'öğe', verb: 'olmalı' },
            },
            b = {
              regex: 'girdi',
              email: 'e-posta adresi',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO tarih ve saat',
              date: 'ISO tarih',
              time: 'ISO saat',
              duration: 'ISO süre',
              ipv4: 'IPv4 adresi',
              ipv6: 'IPv6 adresi',
              cidrv4: 'IPv4 aralığı',
              cidrv6: 'IPv6 aralığı',
              base64: 'base64 ile şifrelenmiş metin',
              base64url: 'base64url ile şifrelenmiş metin',
              json_string: 'JSON dizesi',
              e164: 'E.164 sayısı',
              jwt: 'JWT',
              template_literal: 'Şablon dizesi',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Ge\xe7ersiz değer: beklenen ${c.expected}, alınan ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `Ge\xe7ersiz değer: beklenen ${V(c.values[0])}`;
                return `Ge\xe7ersiz se\xe7enek: aşağıdakilerden biri olmalı: ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `\xc7ok b\xfcy\xfck: beklenen ${c.origin ?? 'değer'} ${b}${c.maximum.toString()} ${d.unit ?? 'öğe'}`;
                return `\xc7ok b\xfcy\xfck: beklenen ${c.origin ?? 'değer'} ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `\xc7ok k\xfc\xe7\xfck: beklenen ${c.origin} ${b}${c.minimum.toString()} ${d.unit}`;
                return `\xc7ok k\xfc\xe7\xfck: beklenen ${c.origin} ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Ge\xe7ersiz metin: "${c.prefix}" ile başlamalı`;
                if ('ends_with' === c.format) return `Ge\xe7ersiz metin: "${c.suffix}" ile bitmeli`;
                if ('includes' === c.format)
                  return `Ge\xe7ersiz metin: "${c.includes}" i\xe7ermeli`;
                if ('regex' === c.format) return `Ge\xe7ersiz metin: ${c.pattern} desenine uymalı`;
                return `Ge\xe7ersiz ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Ge\xe7ersiz sayı: ${c.divisor} ile tam b\xf6l\xfcnebilmeli`;
              case 'unrecognized_keys':
                return `Tanınmayan anahtar${c.keys.length > 1 ? 'lar' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `${c.origin} i\xe7inde ge\xe7ersiz anahtar`;
              case 'invalid_union':
                return 'Geçersiz değer';
              case 'invalid_element':
                return `${c.origin} i\xe7inde ge\xe7ersiz değer`;
              default:
                return `Ge\xe7ersiz değer`;
            }
          };
        })(),
      };
    }
    function en() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'символів', verb: 'матиме' },
              file: { unit: 'байтів', verb: 'матиме' },
              array: { unit: 'елементів', verb: 'матиме' },
              set: { unit: 'елементів', verb: 'матиме' },
            },
            b = {
              regex: 'вхідні дані',
              email: 'адреса електронної пошти',
              url: 'URL',
              emoji: 'емодзі',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'дата та час ISO',
              date: 'дата ISO',
              time: 'час ISO',
              duration: 'тривалість ISO',
              ipv4: 'адреса IPv4',
              ipv6: 'адреса IPv6',
              cidrv4: 'діапазон IPv4',
              cidrv6: 'діапазон IPv6',
              base64: 'рядок у кодуванні base64',
              base64url: 'рядок у кодуванні base64url',
              json_string: 'рядок JSON',
              e164: 'номер E.164',
              jwt: 'JWT',
              template_literal: 'вхідні дані',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Неправильні вхідні дані: очікується ${c.expected}, отримано ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'число';
                    case 'object':
                      if (Array.isArray(a)) return 'масив';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `Неправильні вхідні дані: очікується ${V(c.values[0])}`;
                return `Неправильна опція: очікується одне з ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Занадто велике: очікується, що ${c.origin ?? 'значення'} ${d.verb} ${b}${c.maximum.toString()} ${d.unit ?? 'елементів'}`;
                return `Занадто велике: очікується, що ${c.origin ?? 'значення'} буде ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Занадто мале: очікується, що ${c.origin} ${d.verb} ${b}${c.minimum.toString()} ${d.unit}`;
                return `Занадто мале: очікується, що ${c.origin} буде ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Неправильний рядок: повинен починатися з "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Неправильний рядок: повинен закінчуватися на "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Неправильний рядок: повинен містити "${c.includes}"`;
                if ('regex' === c.format)
                  return `Неправильний рядок: повинен відповідати шаблону ${c.pattern}`;
                return `Неправильний ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Неправильне число: повинно бути кратним ${c.divisor}`;
              case 'unrecognized_keys':
                return `Нерозпізнаний ключ${c.keys.length > 1 ? 'і' : ''}: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Неправильний ключ у ${c.origin}`;
              case 'invalid_union':
                return 'Неправильні вхідні дані';
              case 'invalid_element':
                return `Неправильне значення у ${c.origin}`;
              default:
                return `Неправильні вхідні дані`;
            }
          };
        })(),
      };
    }
    function eo() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'حروف', verb: 'ہونا' },
              file: { unit: 'بائٹس', verb: 'ہونا' },
              array: { unit: 'آئٹمز', verb: 'ہونا' },
              set: { unit: 'آئٹمز', verb: 'ہونا' },
            },
            b = {
              regex: 'ان پٹ',
              email: 'ای میل ایڈریس',
              url: 'یو آر ایل',
              emoji: 'ایموجی',
              uuid: 'یو یو آئی ڈی',
              uuidv4: 'یو یو آئی ڈی وی 4',
              uuidv6: 'یو یو آئی ڈی وی 6',
              nanoid: 'نینو آئی ڈی',
              guid: 'جی یو آئی ڈی',
              cuid: 'سی یو آئی ڈی',
              cuid2: 'سی یو آئی ڈی 2',
              ulid: 'یو ایل آئی ڈی',
              xid: 'ایکس آئی ڈی',
              ksuid: 'کے ایس یو آئی ڈی',
              datetime: 'آئی ایس او ڈیٹ ٹائم',
              date: 'آئی ایس او تاریخ',
              time: 'آئی ایس او وقت',
              duration: 'آئی ایس او مدت',
              ipv4: 'آئی پی وی 4 ایڈریس',
              ipv6: 'آئی پی وی 6 ایڈریس',
              cidrv4: 'آئی پی وی 4 رینج',
              cidrv6: 'آئی پی وی 6 رینج',
              base64: 'بیس 64 ان کوڈڈ سٹرنگ',
              base64url: 'بیس 64 یو آر ایل ان کوڈڈ سٹرنگ',
              json_string: 'جے ایس او این سٹرنگ',
              e164: 'ای 164 نمبر',
              jwt: 'جے ڈبلیو ٹی',
              template_literal: 'ان پٹ',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `غلط ان پٹ: ${c.expected} متوقع تھا، ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'نمبر';
                    case 'object':
                      if (Array.isArray(a)) return 'آرے';
                      if (null === a) return 'نل';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)} موصول ہوا`;
              case 'invalid_value':
                if (1 === c.values.length) return `غلط ان پٹ: ${V(c.values[0])} متوقع تھا`;
                return `غلط آپشن: ${s(c.values, '|')} میں سے ایک متوقع تھا`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `بہت بڑا: ${c.origin ?? 'ویلیو'} کے ${b}${c.maximum.toString()} ${d.unit ?? 'عناصر'} ہونے متوقع تھے`;
                return `بہت بڑا: ${c.origin ?? 'ویلیو'} کا ${b}${c.maximum.toString()} ہونا متوقع تھا`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `بہت چھوٹا: ${c.origin} کے ${b}${c.minimum.toString()} ${d.unit} ہونے متوقع تھے`;
                return `بہت چھوٹا: ${c.origin} کا ${b}${c.minimum.toString()} ہونا متوقع تھا`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `غلط سٹرنگ: "${c.prefix}" سے شروع ہونا چاہیے`;
                if ('ends_with' === c.format) return `غلط سٹرنگ: "${c.suffix}" پر ختم ہونا چاہیے`;
                if ('includes' === c.format) return `غلط سٹرنگ: "${c.includes}" شامل ہونا چاہیے`;
                if ('regex' === c.format) return `غلط سٹرنگ: پیٹرن ${c.pattern} سے میچ ہونا چاہیے`;
                return `غلط ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `غلط نمبر: ${c.divisor} کا مضاعف ہونا چاہیے`;
              case 'unrecognized_keys':
                return `غیر تسلیم شدہ کی${c.keys.length > 1 ? 'ز' : ''}: ${s(c.keys, '، ')}`;
              case 'invalid_key':
                return `${c.origin} میں غلط کی`;
              case 'invalid_union':
                return 'غلط ان پٹ';
              case 'invalid_element':
                return `${c.origin} میں غلط ویلیو`;
              default:
                return `غلط ان پٹ`;
            }
          };
        })(),
      };
    }
    function ep() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'ký tự', verb: 'có' },
              file: { unit: 'byte', verb: 'có' },
              array: { unit: 'phần tử', verb: 'có' },
              set: { unit: 'phần tử', verb: 'có' },
            },
            b = {
              regex: 'đầu vào',
              email: 'địa chỉ email',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ngày giờ ISO',
              date: 'ngày ISO',
              time: 'giờ ISO',
              duration: 'khoảng thời gian ISO',
              ipv4: 'địa chỉ IPv4',
              ipv6: 'địa chỉ IPv6',
              cidrv4: 'dải IPv4',
              cidrv6: 'dải IPv6',
              base64: 'chuỗi mã hóa base64',
              base64url: 'chuỗi mã hóa base64url',
              json_string: 'chuỗi JSON',
              e164: 'số E.164',
              jwt: 'JWT',
              template_literal: 'đầu vào',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `Đầu v\xe0o kh\xf4ng hợp lệ: mong đợi ${c.expected}, nhận được ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'số';
                    case 'object':
                      if (Array.isArray(a)) return 'mảng';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `Đầu v\xe0o kh\xf4ng hợp lệ: mong đợi ${V(c.values[0])}`;
                return `T\xf9y chọn kh\xf4ng hợp lệ: mong đợi một trong c\xe1c gi\xe1 trị ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Qu\xe1 lớn: mong đợi ${c.origin ?? 'giá trị'} ${d.verb} ${b}${c.maximum.toString()} ${d.unit ?? 'phần tử'}`;
                return `Qu\xe1 lớn: mong đợi ${c.origin ?? 'giá trị'} ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `Qu\xe1 nhỏ: mong đợi ${c.origin} ${d.verb} ${b}${c.minimum.toString()} ${d.unit}`;
                return `Qu\xe1 nhỏ: mong đợi ${c.origin} ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Chuỗi kh\xf4ng hợp lệ: phải bắt đầu bằng "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Chuỗi kh\xf4ng hợp lệ: phải kết th\xfac bằng "${c.suffix}"`;
                if ('includes' === c.format)
                  return `Chuỗi kh\xf4ng hợp lệ: phải bao gồm "${c.includes}"`;
                if ('regex' === c.format)
                  return `Chuỗi kh\xf4ng hợp lệ: phải khớp với mẫu ${c.pattern}`;
                return `${b[c.format] ?? c.format} kh\xf4ng hợp lệ`;
              case 'not_multiple_of':
                return `Số kh\xf4ng hợp lệ: phải l\xe0 bội số của ${c.divisor}`;
              case 'unrecognized_keys':
                return `Kh\xf3a kh\xf4ng được nhận dạng: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Kh\xf3a kh\xf4ng hợp lệ trong ${c.origin}`;
              case 'invalid_union':
                return 'Đầu vào không hợp lệ';
              case 'invalid_element':
                return `Gi\xe1 trị kh\xf4ng hợp lệ trong ${c.origin}`;
              default:
                return `Đầu v\xe0o kh\xf4ng hợp lệ`;
            }
          };
        })(),
      };
    }
    function eq() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: '字符', verb: '包含' },
              file: { unit: '字节', verb: '包含' },
              array: { unit: '项', verb: '包含' },
              set: { unit: '项', verb: '包含' },
            },
            b = {
              regex: '输入',
              email: '电子邮件',
              url: 'URL',
              emoji: '表情符号',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO日期时间',
              date: 'ISO日期',
              time: 'ISO时间',
              duration: 'ISO时长',
              ipv4: 'IPv4地址',
              ipv6: 'IPv6地址',
              cidrv4: 'IPv4网段',
              cidrv6: 'IPv6网段',
              base64: 'base64编码字符串',
              base64url: 'base64url编码字符串',
              json_string: 'JSON字符串',
              e164: 'E.164号码',
              jwt: 'JWT',
              template_literal: '输入',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `无效输入：期望 ${c.expected}，实际接收 ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? '非数字(NaN)' : '数字';
                    case 'object':
                      if (Array.isArray(a)) return '数组';
                      if (null === a) return '空值(null)';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `无效输入：期望 ${V(c.values[0])}`;
                return `无效选项：期望以下之一 ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `数值过大：期望 ${c.origin ?? '值'} ${b}${c.maximum.toString()} ${d.unit ?? '个元素'}`;
                return `数值过大：期望 ${c.origin ?? '值'} ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d) return `数值过小：期望 ${c.origin} ${b}${c.minimum.toString()} ${d.unit}`;
                return `数值过小：期望 ${c.origin} ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format) return `无效字符串：必须以 "${c.prefix}" 开头`;
                if ('ends_with' === c.format) return `无效字符串：必须以 "${c.suffix}" 结尾`;
                if ('includes' === c.format) return `无效字符串：必须包含 "${c.includes}"`;
                if ('regex' === c.format) return `无效字符串：必须满足正则表达式 ${c.pattern}`;
                return `无效${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `无效数字：必须是 ${c.divisor} 的倍数`;
              case 'unrecognized_keys':
                return `出现未知的键(key): ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `${c.origin} 中的键(key)无效`;
              case 'invalid_union':
                return '无效输入';
              case 'invalid_element':
                return `${c.origin} 中包含无效值(value)`;
              default:
                return `无效输入`;
            }
          };
        })(),
      };
    }
    function er() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: '字元', verb: '擁有' },
              file: { unit: '位元組', verb: '擁有' },
              array: { unit: '項目', verb: '擁有' },
              set: { unit: '項目', verb: '擁有' },
            },
            b = {
              regex: '輸入',
              email: '郵件地址',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'ISO 日期時間',
              date: 'ISO 日期',
              time: 'ISO 時間',
              duration: 'ISO 期間',
              ipv4: 'IPv4 位址',
              ipv6: 'IPv6 位址',
              cidrv4: 'IPv4 範圍',
              cidrv6: 'IPv6 範圍',
              base64: 'base64 編碼字串',
              base64url: 'base64url 編碼字串',
              json_string: 'JSON 字串',
              e164: 'E.164 數值',
              jwt: 'JWT',
              template_literal: '輸入',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `無效的輸入值：預期為 ${c.expected}，但收到 ${((a) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'number';
                    case 'object':
                      if (Array.isArray(a)) return 'array';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length) return `無效的輸入值：預期為 ${V(c.values[0])}`;
                return `無效的選項：預期為以下其中之一 ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `數值過大：預期 ${c.origin ?? '值'} 應為 ${b}${c.maximum.toString()} ${d.unit ?? '個元素'}`;
                return `數值過大：預期 ${c.origin ?? '值'} 應為 ${b}${c.maximum.toString()}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `數值過小：預期 ${c.origin} 應為 ${b}${c.minimum.toString()} ${d.unit}`;
                return `數值過小：預期 ${c.origin} 應為 ${b}${c.minimum.toString()}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format) return `無效的字串：必須以 "${c.prefix}" 開頭`;
                if ('ends_with' === c.format) return `無效的字串：必須以 "${c.suffix}" 結尾`;
                if ('includes' === c.format) return `無效的字串：必須包含 "${c.includes}"`;
                if ('regex' === c.format) return `無效的字串：必須符合格式 ${c.pattern}`;
                return `無效的 ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `無效的數字：必須為 ${c.divisor} 的倍數`;
              case 'unrecognized_keys':
                return `無法識別的鍵值${c.keys.length > 1 ? '們' : ''}：${s(c.keys, '、')}`;
              case 'invalid_key':
                return `${c.origin} 中有無效的鍵值`;
              case 'invalid_union':
                return '無效的輸入值';
              case 'invalid_element':
                return `${c.origin} 中有無效的值`;
              default:
                return `無效的輸入值`;
            }
          };
        })(),
      };
    }
    function es() {
      return {
        localeError: (() => {
          let a = {
              string: { unit: 'àmi', verb: 'ní' },
              file: { unit: 'bytes', verb: 'ní' },
              array: { unit: 'nkan', verb: 'ní' },
              set: { unit: 'nkan', verb: 'ní' },
            },
            b = {
              regex: 'ẹ̀rọ ìbáwọlé',
              email: 'àdírẹ́sì ìmẹ́lì',
              url: 'URL',
              emoji: 'emoji',
              uuid: 'UUID',
              uuidv4: 'UUIDv4',
              uuidv6: 'UUIDv6',
              nanoid: 'nanoid',
              guid: 'GUID',
              cuid: 'cuid',
              cuid2: 'cuid2',
              ulid: 'ULID',
              xid: 'XID',
              ksuid: 'KSUID',
              datetime: 'àkókò ISO',
              date: 'ọjọ́ ISO',
              time: 'àkókò ISO',
              duration: 'àkókò tó pé ISO',
              ipv4: 'àdírẹ́sì IPv4',
              ipv6: 'àdírẹ́sì IPv6',
              cidrv4: 'àgbègbè IPv4',
              cidrv6: 'àgbègbè IPv6',
              base64: 'ọ̀rọ̀ tí a kọ́ ní base64',
              base64url: 'ọ̀rọ̀ base64url',
              json_string: 'ọ̀rọ̀ JSON',
              e164: 'nọ́mbà E.164',
              jwt: 'JWT',
              template_literal: 'ẹ̀rọ ìbáwọlé',
            };
          return (c) => {
            switch (c.code) {
              case 'invalid_type':
                return `\xccb\xe1wọl\xe9 aṣ\xecṣe: a n\xed l\xe1ti fi ${c.expected}, \xe0mọ̀ a r\xed ${((
                  a
                ) => {
                  let b = typeof a;
                  switch (b) {
                    case 'number':
                      return Number.isNaN(a) ? 'NaN' : 'nọ́mbà';
                    case 'object':
                      if (Array.isArray(a)) return 'akopọ';
                      if (null === a) return 'null';
                      if (Object.getPrototypeOf(a) !== Object.prototype && a.constructor)
                        return a.constructor.name;
                  }
                  return b;
                })(c.input)}`;
              case 'invalid_value':
                if (1 === c.values.length)
                  return `\xccb\xe1wọl\xe9 aṣ\xecṣe: a n\xed l\xe1ti fi ${V(c.values[0])}`;
                return `\xc0ṣ\xe0y\xe0n aṣ\xecṣe: yan ọ̀kan l\xe1ra ${s(c.values, '|')}`;
              case 'too_big': {
                let b = c.inclusive ? '<=' : '<',
                  d = a[c.origin] ?? null;
                if (d)
                  return `T\xf3 pọ̀ j\xf9: a n\xed l\xe1ti jẹ́ p\xe9 ${c.origin ?? 'iye'} ${d.verb} ${b}${c.maximum} ${d.unit}`;
                return `T\xf3 pọ̀ j\xf9: a n\xed l\xe1ti jẹ́ ${b}${c.maximum}`;
              }
              case 'too_small': {
                let b = c.inclusive ? '>=' : '>',
                  d = a[c.origin] ?? null;
                if (d)
                  return `K\xe9r\xe9 ju: a n\xed l\xe1ti jẹ́ p\xe9 ${c.origin} ${d.verb} ${b}${c.minimum} ${d.unit}`;
                return `K\xe9r\xe9 ju: a n\xed l\xe1ti jẹ́ ${b}${c.minimum}`;
              }
              case 'invalid_format':
                if ('starts_with' === c.format)
                  return `Ọ̀rọ̀ aṣ\xecṣe: gbọ́dọ̀ bẹ̀rẹ̀ pẹ̀l\xfa "${c.prefix}"`;
                if ('ends_with' === c.format)
                  return `Ọ̀rọ̀ aṣ\xecṣe: gbọ́dọ̀ par\xed pẹ̀l\xfa "${c.suffix}"`;
                if ('includes' === c.format) return `Ọ̀rọ̀ aṣ\xecṣe: gbọ́dọ̀ n\xed "${c.includes}"`;
                if ('regex' === c.format)
                  return `Ọ̀rọ̀ aṣ\xecṣe: gbọ́dọ̀ b\xe1 \xe0pẹẹrẹ mu ${c.pattern}`;
                return `Aṣ\xecṣe: ${b[c.format] ?? c.format}`;
              case 'not_multiple_of':
                return `Nọ́mb\xe0 aṣ\xecṣe: gbọ́dọ̀ jẹ́ \xe8y\xe0 p\xedp\xedn ti ${c.divisor}`;
              case 'unrecognized_keys':
                return `Bọt\xecn\xec \xe0\xecmọ̀: ${s(c.keys, ', ')}`;
              case 'invalid_key':
                return `Bọt\xecn\xec aṣ\xecṣe n\xedn\xfa ${c.origin}`;
              case 'invalid_union':
              default:
                return 'Ìbáwọlé aṣìṣe';
              case 'invalid_element':
                return `Iye aṣ\xecṣe n\xedn\xfa ${c.origin}`;
            }
          };
        })(),
      };
    }
    (a.s(
      [
        'ar',
        () => dO,
        'az',
        () => dP,
        'be',
        () => dR,
        'ca',
        () => dS,
        'cs',
        () => dT,
        'da',
        () => dU,
        'de',
        () => dV,
        'en',
        () => at,
        'eo',
        () => dW,
        'es',
        () => dX,
        'fa',
        () => dY,
        'fi',
        () => dZ,
        'fr',
        () => d$,
        'frCA',
        () => d_,
        'he',
        () => d0,
        'hu',
        () => d1,
        'id',
        () => d2,
        'is',
        () => d3,
        'it',
        () => d4,
        'ja',
        () => d5,
        'kh',
        () => d6,
        'ko',
        () => d7,
        'mk',
        () => d8,
        'ms',
        () => d9,
        'nl',
        () => ea,
        'no',
        () => eb,
        'ota',
        () => ec,
        'pl',
        () => ee,
        'ps',
        () => ed,
        'pt',
        () => ef,
        'ru',
        () => eh,
        'sl',
        () => ei,
        'sv',
        () => ej,
        'ta',
        () => ek,
        'th',
        () => el,
        'tr',
        () => em,
        'ua',
        () => en,
        'ur',
        () => eo,
        'vi',
        () => ep,
        'yo',
        () => es,
        'zhCN',
        () => eq,
        'zhTW',
        () => er,
      ],
      97840
    ),
      a.s([], 55828),
      a.i(55828));
    var et = a.i(97840);
    a.s(
      [
        '$ZodRegistry',
        () => ew,
        '$input',
        () => ev,
        '$output',
        () => eu,
        'globalRegistry',
        () => ey,
        'registry',
        () => ex,
      ],
      598
    );
    let eu = Symbol('ZodOutput'),
      ev = Symbol('ZodInput');
    class ew {
      constructor() {
        ((this._map = new Map()), (this._idmap = new Map()));
      }
      add(a, ...b) {
        let c = b[0];
        if ((this._map.set(a, c), c && 'object' == typeof c && 'id' in c)) {
          if (this._idmap.has(c.id)) throw Error(`ID ${c.id} already exists in the registry`);
          this._idmap.set(c.id, a);
        }
        return this;
      }
      clear() {
        return ((this._map = new Map()), (this._idmap = new Map()), this);
      }
      remove(a) {
        let b = this._map.get(a);
        return (
          b && 'object' == typeof b && 'id' in b && this._idmap.delete(b.id),
          this._map.delete(a),
          this
        );
      }
      get(a) {
        let b = a._zod.parent;
        if (b) {
          let c = { ...(this.get(b) ?? {}) };
          delete c.id;
          let d = { ...c, ...this._map.get(a) };
          return Object.keys(d).length ? d : void 0;
        }
        return this._map.get(a);
      }
      has(a) {
        return this._map.has(a);
      }
    }
    function ex() {
      return new ew();
    }
    let ey = ex();
    function ez(a, b) {
      return new a({ type: 'string', ...T(b) });
    }
    function eA(a, b) {
      return new a({ type: 'string', coerce: !0, ...T(b) });
    }
    function eB(a, b) {
      return new a({ type: 'string', format: 'email', check: 'string_format', abort: !1, ...T(b) });
    }
    function eC(a, b) {
      return new a({ type: 'string', format: 'guid', check: 'string_format', abort: !1, ...T(b) });
    }
    function eD(a, b) {
      return new a({ type: 'string', format: 'uuid', check: 'string_format', abort: !1, ...T(b) });
    }
    function eE(a, b) {
      return new a({
        type: 'string',
        format: 'uuid',
        check: 'string_format',
        abort: !1,
        version: 'v4',
        ...T(b),
      });
    }
    function eF(a, b) {
      return new a({
        type: 'string',
        format: 'uuid',
        check: 'string_format',
        abort: !1,
        version: 'v6',
        ...T(b),
      });
    }
    function eG(a, b) {
      return new a({
        type: 'string',
        format: 'uuid',
        check: 'string_format',
        abort: !1,
        version: 'v7',
        ...T(b),
      });
    }
    function eH(a, b) {
      return new a({ type: 'string', format: 'url', check: 'string_format', abort: !1, ...T(b) });
    }
    function eI(a, b) {
      return new a({ type: 'string', format: 'emoji', check: 'string_format', abort: !1, ...T(b) });
    }
    function eJ(a, b) {
      return new a({
        type: 'string',
        format: 'nanoid',
        check: 'string_format',
        abort: !1,
        ...T(b),
      });
    }
    function eK(a, b) {
      return new a({ type: 'string', format: 'cuid', check: 'string_format', abort: !1, ...T(b) });
    }
    function eL(a, b) {
      return new a({ type: 'string', format: 'cuid2', check: 'string_format', abort: !1, ...T(b) });
    }
    function eM(a, b) {
      return new a({ type: 'string', format: 'ulid', check: 'string_format', abort: !1, ...T(b) });
    }
    function eN(a, b) {
      return new a({ type: 'string', format: 'xid', check: 'string_format', abort: !1, ...T(b) });
    }
    function eO(a, b) {
      return new a({ type: 'string', format: 'ksuid', check: 'string_format', abort: !1, ...T(b) });
    }
    function eP(a, b) {
      return new a({ type: 'string', format: 'ipv4', check: 'string_format', abort: !1, ...T(b) });
    }
    function eQ(a, b) {
      return new a({ type: 'string', format: 'ipv6', check: 'string_format', abort: !1, ...T(b) });
    }
    function eR(a, b) {
      return new a({
        type: 'string',
        format: 'cidrv4',
        check: 'string_format',
        abort: !1,
        ...T(b),
      });
    }
    function eS(a, b) {
      return new a({
        type: 'string',
        format: 'cidrv6',
        check: 'string_format',
        abort: !1,
        ...T(b),
      });
    }
    function eT(a, b) {
      return new a({
        type: 'string',
        format: 'base64',
        check: 'string_format',
        abort: !1,
        ...T(b),
      });
    }
    function eU(a, b) {
      return new a({
        type: 'string',
        format: 'base64url',
        check: 'string_format',
        abort: !1,
        ...T(b),
      });
    }
    function eV(a, b) {
      return new a({ type: 'string', format: 'e164', check: 'string_format', abort: !1, ...T(b) });
    }
    function eW(a, b) {
      return new a({ type: 'string', format: 'jwt', check: 'string_format', abort: !1, ...T(b) });
    }
    (a.i(598),
      a.i(26553),
      a.s(
        [
          'TimePrecision',
          () => eX,
          '_any',
          () => fg,
          '_array',
          () => fP,
          '_base64',
          () => eT,
          '_base64url',
          () => eU,
          '_bigint',
          () => e9,
          '_boolean',
          () => e7,
          '_catch',
          () => f5,
          '_check',
          () => ge,
          '_cidrv4',
          () => eR,
          '_cidrv6',
          () => eS,
          '_coercedBigint',
          () => fa,
          '_coercedBoolean',
          () => e8,
          '_coercedDate',
          () => fl,
          '_coercedNumber',
          () => e1,
          '_coercedString',
          () => eA,
          '_cuid',
          () => eK,
          '_cuid2',
          () => eL,
          '_custom',
          () => gb,
          '_date',
          () => fk,
          '_default',
          () => f2,
          '_discriminatedUnion',
          () => fR,
          '_e164',
          () => eV,
          '_email',
          () => eB,
          '_emoji',
          () => eI,
          '_endsWith',
          () => fH,
          '_enum',
          () => fX,
          '_file',
          () => f$,
          '_float32',
          () => e3,
          '_float64',
          () => e4,
          '_gt',
          () => fp,
          '_gte',
          () => fq,
          '_guid',
          () => eC,
          '_includes',
          () => fF,
          '_int',
          () => e2,
          '_int32',
          () => e5,
          '_int64',
          () => fb,
          '_intersection',
          () => fS,
          '_ipv4',
          () => eP,
          '_ipv6',
          () => eQ,
          '_isoDate',
          () => eZ,
          '_isoDateTime',
          () => eY,
          '_isoDuration',
          () => e_,
          '_isoTime',
          () => e$,
          '_jwt',
          () => eW,
          '_ksuid',
          () => eO,
          '_lazy',
          () => f9,
          '_length',
          () => fB,
          '_literal',
          () => fZ,
          '_lowercase',
          () => fD,
          '_lt',
          () => fn,
          '_lte',
          () => fo,
          '_map',
          () => fV,
          '_max',
          () => fo,
          '_maxLength',
          () => fz,
          '_maxSize',
          () => fw,
          '_mime',
          () => fJ,
          '_min',
          () => fq,
          '_minLength',
          () => fA,
          '_minSize',
          () => fx,
          '_multipleOf',
          () => fv,
          '_nan',
          () => fm,
          '_nanoid',
          () => eJ,
          '_nativeEnum',
          () => fY,
          '_negative',
          () => fs,
          '_never',
          () => fi,
          '_nonnegative',
          () => fu,
          '_nonoptional',
          () => f3,
          '_nonpositive',
          () => ft,
          '_normalize',
          () => fL,
          '_null',
          () => ff,
          '_nullable',
          () => f1,
          '_number',
          () => e0,
          '_optional',
          () => f0,
          '_overwrite',
          () => fK,
          '_pipe',
          () => f6,
          '_positive',
          () => fr,
          '_promise',
          () => ga,
          '_property',
          () => fI,
          '_readonly',
          () => f7,
          '_record',
          () => fU,
          '_refine',
          () => gc,
          '_regex',
          () => fC,
          '_set',
          () => fW,
          '_size',
          () => fy,
          '_startsWith',
          () => fG,
          '_string',
          () => ez,
          '_stringFormat',
          () => gg,
          '_stringbool',
          () => gf,
          '_success',
          () => f4,
          '_superRefine',
          () => gd,
          '_symbol',
          () => fd,
          '_templateLiteral',
          () => f8,
          '_toLowerCase',
          () => fN,
          '_toUpperCase',
          () => fO,
          '_transform',
          () => f_,
          '_trim',
          () => fM,
          '_tuple',
          () => fT,
          '_uint32',
          () => e6,
          '_uint64',
          () => fc,
          '_ulid',
          () => eM,
          '_undefined',
          () => fe,
          '_union',
          () => fQ,
          '_unknown',
          () => fh,
          '_uppercase',
          () => fE,
          '_url',
          () => eH,
          '_uuid',
          () => eD,
          '_uuidv4',
          () => eE,
          '_uuidv6',
          () => eF,
          '_uuidv7',
          () => eG,
          '_void',
          () => fj,
          '_xid',
          () => eN,
        ],
        65838
      ));
    let eX = { Any: null, Minute: -1, Second: 0, Millisecond: 3, Microsecond: 6 };
    function eY(a, b) {
      return new a({
        type: 'string',
        format: 'datetime',
        check: 'string_format',
        offset: !1,
        local: !1,
        precision: null,
        ...T(b),
      });
    }
    function eZ(a, b) {
      return new a({ type: 'string', format: 'date', check: 'string_format', ...T(b) });
    }
    function e$(a, b) {
      return new a({
        type: 'string',
        format: 'time',
        check: 'string_format',
        precision: null,
        ...T(b),
      });
    }
    function e_(a, b) {
      return new a({ type: 'string', format: 'duration', check: 'string_format', ...T(b) });
    }
    function e0(a, b) {
      return new a({ type: 'number', checks: [], ...T(b) });
    }
    function e1(a, b) {
      return new a({ type: 'number', coerce: !0, checks: [], ...T(b) });
    }
    function e2(a, b) {
      return new a({
        type: 'number',
        check: 'number_format',
        abort: !1,
        format: 'safeint',
        ...T(b),
      });
    }
    function e3(a, b) {
      return new a({
        type: 'number',
        check: 'number_format',
        abort: !1,
        format: 'float32',
        ...T(b),
      });
    }
    function e4(a, b) {
      return new a({
        type: 'number',
        check: 'number_format',
        abort: !1,
        format: 'float64',
        ...T(b),
      });
    }
    function e5(a, b) {
      return new a({ type: 'number', check: 'number_format', abort: !1, format: 'int32', ...T(b) });
    }
    function e6(a, b) {
      return new a({
        type: 'number',
        check: 'number_format',
        abort: !1,
        format: 'uint32',
        ...T(b),
      });
    }
    function e7(a, b) {
      return new a({ type: 'boolean', ...T(b) });
    }
    function e8(a, b) {
      return new a({ type: 'boolean', coerce: !0, ...T(b) });
    }
    function e9(a, b) {
      return new a({ type: 'bigint', ...T(b) });
    }
    function fa(a, b) {
      return new a({ type: 'bigint', coerce: !0, ...T(b) });
    }
    function fb(a, b) {
      return new a({ type: 'bigint', check: 'bigint_format', abort: !1, format: 'int64', ...T(b) });
    }
    function fc(a, b) {
      return new a({
        type: 'bigint',
        check: 'bigint_format',
        abort: !1,
        format: 'uint64',
        ...T(b),
      });
    }
    function fd(a, b) {
      return new a({ type: 'symbol', ...T(b) });
    }
    function fe(a, b) {
      return new a({ type: 'undefined', ...T(b) });
    }
    function ff(a, b) {
      return new a({ type: 'null', ...T(b) });
    }
    function fg(a) {
      return new a({ type: 'any' });
    }
    function fh(a) {
      return new a({ type: 'unknown' });
    }
    function fi(a, b) {
      return new a({ type: 'never', ...T(b) });
    }
    function fj(a, b) {
      return new a({ type: 'void', ...T(b) });
    }
    function fk(a, b) {
      return new a({ type: 'date', ...T(b) });
    }
    function fl(a, b) {
      return new a({ type: 'date', coerce: !0, ...T(b) });
    }
    function fm(a, b) {
      return new a({ type: 'nan', ...T(b) });
    }
    function fn(a, b) {
      return new bZ({ check: 'less_than', ...T(b), value: a, inclusive: !1 });
    }
    function fo(a, b) {
      return new bZ({ check: 'less_than', ...T(b), value: a, inclusive: !0 });
    }
    function fp(a, b) {
      return new b$({ check: 'greater_than', ...T(b), value: a, inclusive: !1 });
    }
    function fq(a, b) {
      return new b$({ check: 'greater_than', ...T(b), value: a, inclusive: !0 });
    }
    function fr(a) {
      return fp(0, a);
    }
    function fs(a) {
      return fn(0, a);
    }
    function ft(a) {
      return fo(0, a);
    }
    function fu(a) {
      return fq(0, a);
    }
    function fv(a, b) {
      return new b_({ check: 'multiple_of', ...T(b), value: a });
    }
    function fw(a, b) {
      return new b2({ check: 'max_size', ...T(b), maximum: a });
    }
    function fx(a, b) {
      return new b3({ check: 'min_size', ...T(b), minimum: a });
    }
    function fy(a, b) {
      return new b4({ check: 'size_equals', ...T(b), size: a });
    }
    function fz(a, b) {
      return new b5({ check: 'max_length', ...T(b), maximum: a });
    }
    function fA(a, b) {
      return new b6({ check: 'min_length', ...T(b), minimum: a });
    }
    function fB(a, b) {
      return new b7({ check: 'length_equals', ...T(b), length: a });
    }
    function fC(a, b) {
      return new b9({ check: 'string_format', format: 'regex', ...T(b), pattern: a });
    }
    function fD(a) {
      return new ca({ check: 'string_format', format: 'lowercase', ...T(a) });
    }
    function fE(a) {
      return new cb({ check: 'string_format', format: 'uppercase', ...T(a) });
    }
    function fF(a, b) {
      return new cc({ check: 'string_format', format: 'includes', ...T(b), includes: a });
    }
    function fG(a, b) {
      return new cd({ check: 'string_format', format: 'starts_with', ...T(b), prefix: a });
    }
    function fH(a, b) {
      return new ce({ check: 'string_format', format: 'ends_with', ...T(b), suffix: a });
    }
    function fI(a, b, c) {
      return new cg({ check: 'property', property: a, schema: b, ...T(c) });
    }
    function fJ(a, b) {
      return new ch({ check: 'mime_type', mime: a, ...T(b) });
    }
    function fK(a) {
      return new ci({ check: 'overwrite', tx: a });
    }
    function fL(a) {
      return fK((b) => b.normalize(a));
    }
    function fM() {
      return fK((a) => a.trim());
    }
    function fN() {
      return fK((a) => a.toLowerCase());
    }
    function fO() {
      return fK((a) => a.toUpperCase());
    }
    function fP(a, b, c) {
      return new a({ type: 'array', element: b, ...T(c) });
    }
    function fQ(a, b, c) {
      return new a({ type: 'union', options: b, ...T(c) });
    }
    function fR(a, b, c, d) {
      return new a({ type: 'union', options: c, discriminator: b, ...T(d) });
    }
    function fS(a, b, c) {
      return new a({ type: 'intersection', left: b, right: c });
    }
    function fT(a, b, c, d) {
      let e = c instanceof cl,
        f = e ? d : c;
      return new a({ type: 'tuple', items: b, rest: e ? c : null, ...T(f) });
    }
    function fU(a, b, c, d) {
      return new a({ type: 'record', keyType: b, valueType: c, ...T(d) });
    }
    function fV(a, b, c, d) {
      return new a({ type: 'map', keyType: b, valueType: c, ...T(d) });
    }
    function fW(a, b, c) {
      return new a({ type: 'set', valueType: b, ...T(c) });
    }
    function fX(a, b, c) {
      return new a({
        type: 'enum',
        entries: Array.isArray(b) ? Object.fromEntries(b.map((a) => [a, a])) : b,
        ...T(c),
      });
    }
    function fY(a, b, c) {
      return new a({ type: 'enum', entries: b, ...T(c) });
    }
    function fZ(a, b, c) {
      return new a({ type: 'literal', values: Array.isArray(b) ? b : [b], ...T(c) });
    }
    function f$(a, b) {
      return new a({ type: 'file', ...T(b) });
    }
    function f_(a, b) {
      return new a({ type: 'transform', transform: b });
    }
    function f0(a, b) {
      return new a({ type: 'optional', innerType: b });
    }
    function f1(a, b) {
      return new a({ type: 'nullable', innerType: b });
    }
    function f2(a, b, c) {
      return new a({
        type: 'default',
        innerType: b,
        get defaultValue() {
          return 'function' == typeof c ? c() : M(c);
        },
      });
    }
    function f3(a, b, c) {
      return new a({ type: 'nonoptional', innerType: b, ...T(c) });
    }
    function f4(a, b) {
      return new a({ type: 'success', innerType: b });
    }
    function f5(a, b, c) {
      return new a({
        type: 'catch',
        innerType: b,
        catchValue: 'function' == typeof c ? c : () => c,
      });
    }
    function f6(a, b, c) {
      return new a({ type: 'pipe', in: b, out: c });
    }
    function f7(a, b) {
      return new a({ type: 'readonly', innerType: b });
    }
    function f8(a, b, c) {
      return new a({ type: 'template_literal', parts: b, ...T(c) });
    }
    function f9(a, b) {
      return new a({ type: 'lazy', getter: b });
    }
    function ga(a, b) {
      return new a({ type: 'promise', innerType: b });
    }
    function gb(a, b, c) {
      let d = T(c);
      return (d.abort ?? (d.abort = !0), new a({ type: 'custom', check: 'custom', fn: b, ...d }));
    }
    function gc(a, b, c) {
      return new a({ type: 'custom', check: 'custom', fn: b, ...T(c) });
    }
    function gd(a) {
      let b = ge(
        (c) => (
          (c.addIssue = (a) => {
            'string' == typeof a
              ? c.issues.push(ak(a, c.value, b._zod.def))
              : (a.fatal && (a.continue = !1),
                a.code ?? (a.code = 'custom'),
                a.input ?? (a.input = c.value),
                a.inst ?? (a.inst = b),
                a.continue ?? (a.continue = !b._zod.def.abort),
                c.issues.push(ak(a)));
          }),
          a(c.value, c)
        )
      );
      return b;
    }
    function ge(a, b) {
      let c = new bX({ check: 'custom', ...T(b) });
      return ((c._zod.check = a), c);
    }
    function gf(a, b) {
      let c = T(b),
        d = c.truthy ?? ['true', '1', 'yes', 'on', 'y', 'enabled'],
        e = c.falsy ?? ['false', '0', 'no', 'off', 'n', 'disabled'];
      'sensitive' !== c.case &&
        ((d = d.map((a) => ('string' == typeof a ? a.toLowerCase() : a))),
        (e = e.map((a) => ('string' == typeof a ? a.toLowerCase() : a))));
      let f = new Set(d),
        g = new Set(e),
        h = a.Codec ?? dB,
        i = a.Boolean ?? cR,
        j = new h({
          type: 'pipe',
          in: new (a.String ?? cm)({ type: 'string', error: c.error }),
          out: new i({ type: 'boolean', error: c.error }),
          transform: (a, b) => {
            let d = a;
            return (
              'sensitive' !== c.case && (d = d.toLowerCase()),
              !!f.has(d) ||
                (!g.has(d) &&
                  (b.issues.push({
                    code: 'invalid_value',
                    expected: 'stringbool',
                    values: [...f, ...g],
                    input: b.value,
                    inst: j,
                    continue: !1,
                  }),
                  {}))
            );
          },
          reverseTransform: (a, b) => (!0 === a ? d[0] || 'true' : e[0] || 'false'),
          error: c.error,
        });
      return j;
    }
    function gg(a, b, c, d = {}) {
      let e = T(d),
        f = {
          ...T(d),
          check: 'string_format',
          type: 'string',
          format: b,
          fn: 'function' == typeof c ? c : (a) => c.test(a),
          ...e,
        };
      return (c instanceof RegExp && (f.pattern = c), new a(f));
    }
    (a.i(65838), a.s(['JSONSchemaGenerator', () => gh, 'toJSONSchema', () => gi], 54443));
    class gh {
      constructor(a) {
        ((this.counter = 0),
          (this.metadataRegistry = a?.metadata ?? ey),
          (this.target = a?.target ?? 'draft-2020-12'),
          (this.unrepresentable = a?.unrepresentable ?? 'throw'),
          (this.override = a?.override ?? (() => {})),
          (this.io = a?.io ?? 'output'),
          (this.seen = new Map()));
      }
      process(a, b = { path: [], schemaPath: [] }) {
        var c;
        let d = a._zod.def,
          e = this.seen.get(a);
        if (e) return (e.count++, b.schemaPath.includes(a) && (e.cycle = b.path), e.schema);
        let f = { schema: {}, count: 1, cycle: void 0, path: b.path };
        this.seen.set(a, f);
        let g = a._zod.toJSONSchema?.();
        if (g) f.schema = g;
        else {
          let c = { ...b, schemaPath: [...b.schemaPath, a], path: b.path },
            e = a._zod.parent;
          if (e) ((f.ref = e), this.process(e, c), (this.seen.get(e).isParent = !0));
          else {
            let b = f.schema;
            switch (d.type) {
              case 'string': {
                b.type = 'string';
                let {
                  minimum: c,
                  maximum: d,
                  format: e,
                  patterns: g,
                  contentEncoding: h,
                } = a._zod.bag;
                if (
                  ('number' == typeof c && (b.minLength = c),
                  'number' == typeof d && (b.maxLength = d),
                  e &&
                    ((b.format =
                      {
                        guid: 'uuid',
                        url: 'uri',
                        datetime: 'date-time',
                        json_string: 'json-string',
                        regex: '',
                      }[e] ?? e),
                    '' === b.format && delete b.format),
                  h && (b.contentEncoding = h),
                  g && g.size > 0)
                ) {
                  let a = [...g];
                  1 === a.length
                    ? (b.pattern = a[0].source)
                    : a.length > 1 &&
                      (f.schema.allOf = [
                        ...a.map((a) => ({
                          ...('draft-7' === this.target ||
                          'draft-4' === this.target ||
                          'openapi-3.0' === this.target
                            ? { type: 'string' }
                            : {}),
                          pattern: a.source,
                        })),
                      ]);
                }
                break;
              }
              case 'number': {
                let {
                  minimum: c,
                  maximum: d,
                  format: e,
                  multipleOf: f,
                  exclusiveMaximum: g,
                  exclusiveMinimum: h,
                } = a._zod.bag;
                ('string' == typeof e && e.includes('int')
                  ? (b.type = 'integer')
                  : (b.type = 'number'),
                  'number' == typeof h &&
                    ('draft-4' === this.target || 'openapi-3.0' === this.target
                      ? ((b.minimum = h), (b.exclusiveMinimum = !0))
                      : (b.exclusiveMinimum = h)),
                  'number' == typeof c &&
                    ((b.minimum = c),
                    'number' == typeof h &&
                      'draft-4' !== this.target &&
                      (h >= c ? delete b.minimum : delete b.exclusiveMinimum)),
                  'number' == typeof g &&
                    ('draft-4' === this.target || 'openapi-3.0' === this.target
                      ? ((b.maximum = g), (b.exclusiveMaximum = !0))
                      : (b.exclusiveMaximum = g)),
                  'number' == typeof d &&
                    ((b.maximum = d),
                    'number' == typeof g &&
                      'draft-4' !== this.target &&
                      (g <= d ? delete b.maximum : delete b.exclusiveMaximum)),
                  'number' == typeof f && (b.multipleOf = f));
                break;
              }
              case 'boolean':
              case 'success':
                b.type = 'boolean';
                break;
              case 'bigint':
                if ('throw' === this.unrepresentable)
                  throw Error('BigInt cannot be represented in JSON Schema');
                break;
              case 'symbol':
                if ('throw' === this.unrepresentable)
                  throw Error('Symbols cannot be represented in JSON Schema');
                break;
              case 'null':
                'openapi-3.0' === this.target
                  ? ((b.type = 'string'), (b.nullable = !0), (b.enum = [null]))
                  : (b.type = 'null');
                break;
              case 'any':
              case 'unknown':
                break;
              case 'undefined':
                if ('throw' === this.unrepresentable)
                  throw Error('Undefined cannot be represented in JSON Schema');
                break;
              case 'void':
                if ('throw' === this.unrepresentable)
                  throw Error('Void cannot be represented in JSON Schema');
                break;
              case 'never':
                b.not = {};
                break;
              case 'date':
                if ('throw' === this.unrepresentable)
                  throw Error('Date cannot be represented in JSON Schema');
                break;
              case 'array': {
                let { minimum: e, maximum: f } = a._zod.bag;
                ('number' == typeof e && (b.minItems = e),
                  'number' == typeof f && (b.maxItems = f),
                  (b.type = 'array'),
                  (b.items = this.process(d.element, { ...c, path: [...c.path, 'items'] })));
                break;
              }
              case 'object': {
                ((b.type = 'object'), (b.properties = {}));
                let a = d.shape;
                for (let d in a)
                  b.properties[d] = this.process(a[d], {
                    ...c,
                    path: [...c.path, 'properties', d],
                  });
                let e = new Set(
                  [...new Set(Object.keys(a))].filter((a) => {
                    let b = d.shape[a]._zod;
                    return 'input' === this.io ? void 0 === b.optin : void 0 === b.optout;
                  })
                );
                (e.size > 0 && (b.required = Array.from(e)),
                  d.catchall?._zod.def.type === 'never'
                    ? (b.additionalProperties = !1)
                    : d.catchall
                      ? d.catchall &&
                        (b.additionalProperties = this.process(d.catchall, {
                          ...c,
                          path: [...c.path, 'additionalProperties'],
                        }))
                      : 'output' === this.io && (b.additionalProperties = !1));
                break;
              }
              case 'union':
                b.anyOf = d.options.map((a, b) =>
                  this.process(a, { ...c, path: [...c.path, 'anyOf', b] })
                );
                break;
              case 'intersection': {
                let a = this.process(d.left, { ...c, path: [...c.path, 'allOf', 0] }),
                  e = this.process(d.right, { ...c, path: [...c.path, 'allOf', 1] }),
                  f = (a) => 'allOf' in a && 1 === Object.keys(a).length;
                b.allOf = [...(f(a) ? a.allOf : [a]), ...(f(e) ? e.allOf : [e])];
                break;
              }
              case 'tuple': {
                b.type = 'array';
                let e = 'draft-2020-12' === this.target ? 'prefixItems' : 'items',
                  f =
                    'draft-2020-12' === this.target || 'openapi-3.0' === this.target
                      ? 'items'
                      : 'additionalItems',
                  g = d.items.map((a, b) => this.process(a, { ...c, path: [...c.path, e, b] })),
                  h = d.rest
                    ? this.process(d.rest, {
                        ...c,
                        path: [
                          ...c.path,
                          f,
                          ...('openapi-3.0' === this.target ? [d.items.length] : []),
                        ],
                      })
                    : null;
                'draft-2020-12' === this.target
                  ? ((b.prefixItems = g), h && (b.items = h))
                  : 'openapi-3.0' === this.target
                    ? ((b.items = { anyOf: g }),
                      h && b.items.anyOf.push(h),
                      (b.minItems = g.length),
                      h || (b.maxItems = g.length))
                    : ((b.items = g), h && (b.additionalItems = h));
                let { minimum: i, maximum: j } = a._zod.bag;
                ('number' == typeof i && (b.minItems = i),
                  'number' == typeof j && (b.maxItems = j));
                break;
              }
              case 'record':
                ((b.type = 'object'),
                  ('draft-7' === this.target || 'draft-2020-12' === this.target) &&
                    (b.propertyNames = this.process(d.keyType, {
                      ...c,
                      path: [...c.path, 'propertyNames'],
                    })),
                  (b.additionalProperties = this.process(d.valueType, {
                    ...c,
                    path: [...c.path, 'additionalProperties'],
                  })));
                break;
              case 'map':
                if ('throw' === this.unrepresentable)
                  throw Error('Map cannot be represented in JSON Schema');
                break;
              case 'set':
                if ('throw' === this.unrepresentable)
                  throw Error('Set cannot be represented in JSON Schema');
                break;
              case 'enum': {
                let a = r(d.entries);
                (a.every((a) => 'number' == typeof a) && (b.type = 'number'),
                  a.every((a) => 'string' == typeof a) && (b.type = 'string'),
                  (b.enum = a));
                break;
              }
              case 'literal': {
                let a = [];
                for (let b of d.values)
                  if (void 0 === b) {
                    if ('throw' === this.unrepresentable)
                      throw Error('Literal `undefined` cannot be represented in JSON Schema');
                  } else if ('bigint' == typeof b)
                    if ('throw' === this.unrepresentable)
                      throw Error('BigInt literals cannot be represented in JSON Schema');
                    else a.push(Number(b));
                  else a.push(b);
                if (0 === a.length);
                else if (1 === a.length) {
                  let c = a[0];
                  ((b.type = null === c ? 'null' : typeof c),
                    'draft-4' === this.target || 'openapi-3.0' === this.target
                      ? (b.enum = [c])
                      : (b.const = c));
                } else
                  (a.every((a) => 'number' == typeof a) && (b.type = 'number'),
                    a.every((a) => 'string' == typeof a) && (b.type = 'string'),
                    a.every((a) => 'boolean' == typeof a) && (b.type = 'string'),
                    a.every((a) => null === a) && (b.type = 'null'),
                    (b.enum = a));
                break;
              }
              case 'file': {
                let c = { type: 'string', format: 'binary', contentEncoding: 'binary' },
                  { minimum: d, maximum: e, mime: f } = a._zod.bag;
                (void 0 !== d && (c.minLength = d),
                  void 0 !== e && (c.maxLength = e),
                  f
                    ? 1 === f.length
                      ? ((c.contentMediaType = f[0]), Object.assign(b, c))
                      : (b.anyOf = f.map((a) => ({ ...c, contentMediaType: a })))
                    : Object.assign(b, c));
                break;
              }
              case 'transform':
                if ('throw' === this.unrepresentable)
                  throw Error('Transforms cannot be represented in JSON Schema');
                break;
              case 'nullable': {
                let a = this.process(d.innerType, c);
                'openapi-3.0' === this.target
                  ? ((f.ref = d.innerType), (b.nullable = !0))
                  : (b.anyOf = [a, { type: 'null' }]);
                break;
              }
              case 'nonoptional':
              case 'promise':
              case 'optional':
                (this.process(d.innerType, c), (f.ref = d.innerType));
                break;
              case 'default':
                (this.process(d.innerType, c),
                  (f.ref = d.innerType),
                  (b.default = JSON.parse(JSON.stringify(d.defaultValue))));
                break;
              case 'prefault':
                (this.process(d.innerType, c),
                  (f.ref = d.innerType),
                  'input' === this.io &&
                    (b._prefault = JSON.parse(JSON.stringify(d.defaultValue))));
                break;
              case 'catch': {
                let a;
                (this.process(d.innerType, c), (f.ref = d.innerType));
                try {
                  a = d.catchValue(void 0);
                } catch {
                  throw Error('Dynamic catch values are not supported in JSON Schema');
                }
                b.default = a;
                break;
              }
              case 'nan':
                if ('throw' === this.unrepresentable)
                  throw Error('NaN cannot be represented in JSON Schema');
                break;
              case 'template_literal': {
                let c = a._zod.pattern;
                if (!c) throw Error('Pattern not found in template literal');
                ((b.type = 'string'), (b.pattern = c.source));
                break;
              }
              case 'pipe': {
                let a =
                  'input' === this.io ? ('transform' === d.in._zod.def.type ? d.out : d.in) : d.out;
                (this.process(a, c), (f.ref = a));
                break;
              }
              case 'readonly':
                (this.process(d.innerType, c), (f.ref = d.innerType), (b.readOnly = !0));
                break;
              case 'lazy': {
                let b = a._zod.innerType;
                (this.process(b, c), (f.ref = b));
                break;
              }
              case 'custom':
                if ('throw' === this.unrepresentable)
                  throw Error('Custom types cannot be represented in JSON Schema');
                break;
              case 'function':
                if ('throw' === this.unrepresentable)
                  throw Error('Function types cannot be represented in JSON Schema');
            }
          }
        }
        let h = this.metadataRegistry.get(a);
        return (
          h && Object.assign(f.schema, h),
          'input' === this.io &&
            (function a(b, c) {
              let d = c ?? { seen: new Set() };
              if (d.seen.has(b)) return !1;
              d.seen.add(b);
              let e = b._zod.def;
              switch (e.type) {
                case 'string':
                case 'number':
                case 'bigint':
                case 'boolean':
                case 'date':
                case 'symbol':
                case 'undefined':
                case 'null':
                case 'any':
                case 'unknown':
                case 'never':
                case 'void':
                case 'literal':
                case 'enum':
                case 'nan':
                case 'file':
                case 'template_literal':
                case 'custom':
                case 'success':
                case 'catch':
                case 'function':
                  return !1;
                case 'array':
                  return a(e.element, d);
                case 'object':
                  for (let b in e.shape) if (a(e.shape[b], d)) return !0;
                  return !1;
                case 'union':
                  for (let b of e.options) if (a(b, d)) return !0;
                  return !1;
                case 'intersection':
                  return a(e.left, d) || a(e.right, d);
                case 'tuple':
                  for (let b of e.items) if (a(b, d)) return !0;
                  if (e.rest && a(e.rest, d)) return !0;
                  return !1;
                case 'record':
                case 'map':
                  return a(e.keyType, d) || a(e.valueType, d);
                case 'set':
                  return a(e.valueType, d);
                case 'promise':
                case 'optional':
                case 'nonoptional':
                case 'nullable':
                case 'readonly':
                case 'default':
                case 'prefault':
                  return a(e.innerType, d);
                case 'lazy':
                  return a(e.getter(), d);
                case 'transform':
                  return !0;
                case 'pipe':
                  return a(e.in, d) || a(e.out, d);
              }
              throw Error(`Unknown schema type: ${e.type}`);
            })(a) &&
            (delete f.schema.examples, delete f.schema.default),
          'input' === this.io &&
            f.schema._prefault &&
            ((c = f.schema).default ?? (c.default = f.schema._prefault)),
          delete f.schema._prefault,
          this.seen.get(a).schema
        );
      }
      emit(a, b) {
        let c = {
            cycles: b?.cycles ?? 'ref',
            reused: b?.reused ?? 'inline',
            external: b?.external ?? void 0,
          },
          d = this.seen.get(a);
        if (!d) throw Error('Unprocessed schema. This is a bug in Zod.');
        let e = (a) => {
            let b = 'draft-2020-12' === this.target ? '$defs' : 'definitions';
            if (c.external) {
              let d = c.external.registry.get(a[0])?.id,
                e = c.external.uri ?? ((a) => a);
              if (d) return { ref: e(d) };
              let f = a[1].defId ?? a[1].schema.id ?? `schema${this.counter++}`;
              return ((a[1].defId = f), { defId: f, ref: `${e('__shared')}#/${b}/${f}` });
            }
            if (a[1] === d) return { ref: '#' };
            let e = `#/${b}/`,
              f = a[1].schema.id ?? `__schema${this.counter++}`;
            return { defId: f, ref: e + f };
          },
          f = (a) => {
            if (a[1].schema.$ref) return;
            let b = a[1],
              { ref: c, defId: d } = e(a);
            ((b.def = { ...b.schema }), d && (b.defId = d));
            let f = b.schema;
            for (let a in f) delete f[a];
            f.$ref = c;
          };
        if ('throw' === c.cycles)
          for (let a of this.seen.entries()) {
            let b = a[1];
            if (b.cycle)
              throw Error(`Cycle detected: #/${b.cycle?.join('/')}/<root>

Set the \`cycles\` parameter to \`"ref"\` to resolve cyclical schemas with defs.`);
          }
        for (let b of this.seen.entries()) {
          let d = b[1];
          if (a === b[0]) {
            f(b);
            continue;
          }
          if (c.external) {
            let d = c.external.registry.get(b[0])?.id;
            if (a !== b[0] && d) {
              f(b);
              continue;
            }
          }
          if (
            this.metadataRegistry.get(b[0])?.id ||
            d.cycle ||
            (d.count > 1 && 'ref' === c.reused)
          ) {
            f(b);
            continue;
          }
        }
        let g = (a, b) => {
          let c = this.seen.get(a),
            d = c.def ?? c.schema,
            e = { ...d };
          if (null === c.ref) return;
          let f = c.ref;
          if (((c.ref = null), f)) {
            g(f, b);
            let a = this.seen.get(f).schema;
            a.$ref &&
            ('draft-7' === b.target || 'draft-4' === b.target || 'openapi-3.0' === b.target)
              ? ((d.allOf = d.allOf ?? []), d.allOf.push(a))
              : (Object.assign(d, a), Object.assign(d, e));
          }
          c.isParent || this.override({ zodSchema: a, jsonSchema: d, path: c.path ?? [] });
        };
        for (let a of [...this.seen.entries()].reverse()) g(a[0], { target: this.target });
        let h = {};
        if (
          ('draft-2020-12' === this.target
            ? (h.$schema = 'https://json-schema.org/draft/2020-12/schema')
            : 'draft-7' === this.target
              ? (h.$schema = 'http://json-schema.org/draft-07/schema#')
              : 'draft-4' === this.target
                ? (h.$schema = 'http://json-schema.org/draft-04/schema#')
                : 'openapi-3.0' === this.target || console.warn(`Invalid target: ${this.target}`),
          c.external?.uri)
        ) {
          let b = c.external.registry.get(a)?.id;
          if (!b) throw Error('Schema is missing an `id` property');
          h.$id = c.external.uri(b);
        }
        Object.assign(h, d.def);
        let i = c.external?.defs ?? {};
        for (let a of this.seen.entries()) {
          let b = a[1];
          b.def && b.defId && (i[b.defId] = b.def);
        }
        c.external ||
          (Object.keys(i).length > 0 &&
            ('draft-2020-12' === this.target ? (h.$defs = i) : (h.definitions = i)));
        try {
          return JSON.parse(JSON.stringify(h));
        } catch (a) {
          throw Error('Error converting schema to JSON.');
        }
      }
    }
    function gi(a, b) {
      if (a instanceof ew) {
        let c = new gh(b),
          d = {};
        for (let b of a._idmap.entries()) {
          let [a, d] = b;
          c.process(d);
        }
        let e = {},
          f = { registry: a, uri: b?.uri, defs: d };
        for (let d of a._idmap.entries()) {
          let [a, g] = d;
          e[a] = c.emit(g, { ...b, external: f });
        }
        return (
          Object.keys(d).length > 0 &&
            (e.__shared = { ['draft-2020-12' === c.target ? '$defs' : 'definitions']: d }),
          { schemas: e }
        );
      }
      let c = new gh(b);
      return (c.process(a), c.emit(a, b));
    }
    (a.i(54443), a.s([], 87384));
    var gj = a.i(87384),
      gk = a.i(98051);
    a.s(
      [
        'ZodAny',
        () => hT,
        'ZodArray',
        () => h1,
        'ZodBase64',
        () => hl,
        'ZodBase64URL',
        () => hn,
        'ZodBigInt',
        () => hI,
        'ZodBigIntFormat',
        () => hK,
        'ZodBoolean',
        () => hG,
        'ZodCIDRv4',
        () => hh,
        'ZodCIDRv6',
        () => hj,
        'ZodCUID',
        () => g3,
        'ZodCUID2',
        () => g5,
        'ZodCatch',
        () => iL,
        'ZodCodec',
        () => iR,
        'ZodCustom',
        () => i1,
        'ZodCustomStringFormat',
        () => ht,
        'ZodDate',
        () => h_,
        'ZodDefault',
        () => iD,
        'ZodDiscriminatedUnion',
        () => ia,
        'ZodE164',
        () => hp,
        'ZodEmail',
        () => gP,
        'ZodEmoji',
        () => g_,
        'ZodEnum',
        () => ip,
        'ZodFile',
        () => iu,
        'ZodFunction',
        () => i_,
        'ZodGUID',
        () => gR,
        'ZodIPv4',
        () => hd,
        'ZodIPv6',
        () => hf,
        'ZodIntersection',
        () => ic,
        'ZodJWT',
        () => hr,
        'ZodKSUID',
        () => hb,
        'ZodLazy',
        () => iX,
        'ZodLiteral',
        () => is,
        'ZodMap',
        () => ik,
        'ZodNaN',
        () => iN,
        'ZodNanoID',
        () => g1,
        'ZodNever',
        () => hX,
        'ZodNonOptional',
        () => iH,
        'ZodNull',
        () => hR,
        'ZodNullable',
        () => iA,
        'ZodNumber',
        () => hy,
        'ZodNumberFormat',
        () => hA,
        'ZodObject',
        () => h4,
        'ZodOptional',
        () => iy,
        'ZodPipe',
        () => iP,
        'ZodPrefault',
        () => iF,
        'ZodPromise',
        () => iZ,
        'ZodReadonly',
        () => iT,
        'ZodRecord',
        () => ih,
        'ZodSet',
        () => im,
        'ZodString',
        () => gM,
        'ZodStringFormat',
        () => gO,
        'ZodSuccess',
        () => iJ,
        'ZodSymbol',
        () => hN,
        'ZodTemplateLiteral',
        () => iV,
        'ZodTransform',
        () => iw,
        'ZodTuple',
        () => ie,
        'ZodType',
        () => gK,
        'ZodULID',
        () => g7,
        'ZodURL',
        () => gY,
        'ZodUUID',
        () => gT,
        'ZodUndefined',
        () => hP,
        'ZodUnion',
        () => h8,
        'ZodUnknown',
        () => hV,
        'ZodVoid',
        () => hZ,
        'ZodXID',
        () => g9,
        '_ZodString',
        () => gL,
        '_default',
        () => iE,
        '_function',
        () => i0,
        'any',
        () => hU,
        'array',
        () => h2,
        'base64',
        () => hm,
        'base64url',
        () => ho,
        'bigint',
        () => hJ,
        'boolean',
        () => hH,
        'catch',
        () => iM,
        'check',
        () => i2,
        'cidrv4',
        () => hi,
        'cidrv6',
        () => hk,
        'codec',
        () => iS,
        'cuid',
        () => g4,
        'cuid2',
        () => g6,
        'custom',
        () => i3,
        'date',
        () => h0,
        'discriminatedUnion',
        () => ib,
        'e164',
        () => hq,
        'email',
        () => gQ,
        'emoji',
        () => g0,
        'enum',
        () => iq,
        'file',
        () => iv,
        'float32',
        () => hC,
        'float64',
        () => hD,
        'function',
        () => i0,
        'guid',
        () => gS,
        'hash',
        () => hx,
        'hex',
        () => hw,
        'hostname',
        () => hv,
        'httpUrl',
        () => g$,
        'instanceof',
        () => i6,
        'int',
        () => hB,
        'int32',
        () => hE,
        'int64',
        () => hL,
        'intersection',
        () => id,
        'ipv4',
        () => he,
        'ipv6',
        () => hg,
        'json',
        () => i8,
        'jwt',
        () => hs,
        'keyof',
        () => h3,
        'ksuid',
        () => hc,
        'lazy',
        () => iY,
        'literal',
        () => it,
        'looseObject',
        () => h7,
        'map',
        () => il,
        'nan',
        () => iO,
        'nanoid',
        () => g2,
        'nativeEnum',
        () => ir,
        'never',
        () => hY,
        'nonoptional',
        () => iI,
        'null',
        () => hS,
        'nullable',
        () => iB,
        'nullish',
        () => iC,
        'number',
        () => hz,
        'object',
        () => h5,
        'optional',
        () => iz,
        'partialRecord',
        () => ij,
        'pipe',
        () => iQ,
        'prefault',
        () => iG,
        'preprocess',
        () => i9,
        'promise',
        () => i$,
        'readonly',
        () => iU,
        'record',
        () => ii,
        'refine',
        () => i4,
        'set',
        () => io,
        'strictObject',
        () => h6,
        'string',
        () => gN,
        'stringFormat',
        () => hu,
        'stringbool',
        () => i7,
        'success',
        () => iK,
        'superRefine',
        () => i5,
        'symbol',
        () => hO,
        'templateLiteral',
        () => iW,
        'transform',
        () => ix,
        'tuple',
        () => ig,
        'uint32',
        () => hF,
        'uint64',
        () => hM,
        'ulid',
        () => g8,
        'undefined',
        () => hQ,
        'union',
        () => h9,
        'unknown',
        () => hW,
        'url',
        () => gZ,
        'uuid',
        () => gU,
        'uuidv4',
        () => gV,
        'uuidv6',
        () => gW,
        'uuidv7',
        () => gX,
        'void',
        () => h$,
        'xid',
        () => ha,
      ],
      47934
    );
    var gl = dN,
      gm = dM;
    a.s(
      [
        'ZodISODate',
        () => gp,
        'ZodISODateTime',
        () => gn,
        'ZodISODuration',
        () => gt,
        'ZodISOTime',
        () => gr,
        'date',
        () => gq,
        'datetime',
        () => go,
        'duration',
        () => gu,
        'time',
        () => gs,
      ],
      44496
    );
    let gn = g('ZodISODateTime', (a, b) => {
      (cz.init(a, b), gO.init(a, b));
    });
    function go(a) {
      return eY(gn, a);
    }
    let gp = g('ZodISODate', (a, b) => {
      (cA.init(a, b), gO.init(a, b));
    });
    function gq(a) {
      return eZ(gp, a);
    }
    let gr = g('ZodISOTime', (a, b) => {
      (cB.init(a, b), gO.init(a, b));
    });
    function gs(a) {
      return e$(gr, a);
    }
    let gt = g('ZodISODuration', (a, b) => {
      (cC.init(a, b), gO.init(a, b));
    });
    function gu(a) {
      return e_(gt, a);
    }
    (a.s(
      [
        'decode',
        () => gD,
        'decodeAsync',
        () => gF,
        'encode',
        () => gC,
        'encodeAsync',
        () => gE,
        'parse',
        () => gy,
        'parseAsync',
        () => gz,
        'safeDecode',
        () => gH,
        'safeDecodeAsync',
        () => gJ,
        'safeEncode',
        () => gG,
        'safeEncodeAsync',
        () => gI,
        'safeParse',
        () => gA,
        'safeParseAsync',
        () => gB,
      ],
      12957
    ),
      a.s(['ZodError', () => gw, 'ZodRealError', () => gx], 5288));
    let gv = (a, b) => {
        (av.init(a, b),
          (a.name = 'ZodError'),
          Object.defineProperties(a, {
            format: { value: (b) => ay(a, b) },
            flatten: { value: (b) => ax(a, b) },
            addIssue: {
              value: (b) => {
                (a.issues.push(b), (a.message = JSON.stringify(a.issues, t, 2)));
              },
            },
            addIssues: {
              value: (b) => {
                (a.issues.push(...b), (a.message = JSON.stringify(a.issues, t, 2)));
              },
            },
            isEmpty: { get: () => 0 === a.issues.length },
          }));
      },
      gw = g('ZodError', gv),
      gx = g('ZodError', gv, { Parent: Error }),
      gy = aC(gx),
      gz = aE(gx),
      gA = aG(gx),
      gB = aI(gx),
      gC = aK(gx),
      gD = aM(gx),
      gE = aO(gx),
      gF = aQ(gx),
      gG = aS(gx),
      gH = aU(gx),
      gI = aW(gx),
      gJ = aY(gx),
      gK = g(
        'ZodType',
        (a, b) => (
          cl.init(a, b),
          (a.def = b),
          (a.type = b.type),
          Object.defineProperty(a, '_def', { value: b }),
          (a.check = (...c) =>
            a.clone({
              ...b,
              checks: [
                ...(b.checks ?? []),
                ...c.map((a) =>
                  'function' == typeof a
                    ? { _zod: { check: a, def: { check: 'custom' }, onattach: [] } }
                    : a
                ),
              ],
            })),
          (a.clone = (b, c) => S(a, b, c)),
          (a.brand = () => a),
          (a.register = (b, c) => (b.add(a, c), a)),
          (a.parse = (b, c) => gy(a, b, c, { callee: a.parse })),
          (a.safeParse = (b, c) => gA(a, b, c)),
          (a.parseAsync = async (b, c) => gz(a, b, c, { callee: a.parseAsync })),
          (a.safeParseAsync = async (b, c) => gB(a, b, c)),
          (a.spa = a.safeParseAsync),
          (a.encode = (b, c) => gC(a, b, c)),
          (a.decode = (b, c) => gD(a, b, c)),
          (a.encodeAsync = async (b, c) => gE(a, b, c)),
          (a.decodeAsync = async (b, c) => gF(a, b, c)),
          (a.safeEncode = (b, c) => gG(a, b, c)),
          (a.safeDecode = (b, c) => gH(a, b, c)),
          (a.safeEncodeAsync = async (b, c) => gI(a, b, c)),
          (a.safeDecodeAsync = async (b, c) => gJ(a, b, c)),
          (a.refine = (b, c) => a.check(i4(b, c))),
          (a.superRefine = (b) => a.check(gd(b))),
          (a.overwrite = (b) => a.check(fK(b))),
          (a.optional = () => iz(a)),
          (a.nullable = () => iB(a)),
          (a.nullish = () => iz(iB(a))),
          (a.nonoptional = (b) => iI(a, b)),
          (a.array = () => h2(a)),
          (a.or = (b) => h9([a, b])),
          (a.and = (b) => id(a, b)),
          (a.transform = (b) => iQ(a, ix(b))),
          (a.default = (b) => iE(a, b)),
          (a.prefault = (b) => iG(a, b)),
          (a.catch = (b) => iM(a, b)),
          (a.pipe = (b) => iQ(a, b)),
          (a.readonly = () => iU(a)),
          (a.describe = (b) => {
            let c = a.clone();
            return (ey.add(c, { description: b }), c);
          }),
          Object.defineProperty(a, 'description', {
            get: () => ey.get(a)?.description,
            configurable: !0,
          }),
          (a.meta = (...b) => {
            if (0 === b.length) return ey.get(a);
            let c = a.clone();
            return (ey.add(c, b[0]), c);
          }),
          (a.isOptional = () => a.safeParse(void 0).success),
          (a.isNullable = () => a.safeParse(null).success),
          a
        )
      ),
      gL = g('_ZodString', (a, b) => {
        (cm.init(a, b), gK.init(a, b));
        let c = a._zod.bag;
        ((a.format = c.format ?? null),
          (a.minLength = c.minimum ?? null),
          (a.maxLength = c.maximum ?? null),
          (a.regex = (...b) => a.check(fC(...b))),
          (a.includes = (...b) => a.check(fF(...b))),
          (a.startsWith = (...b) => a.check(fG(...b))),
          (a.endsWith = (...b) => a.check(fH(...b))),
          (a.min = (...b) => a.check(fA(...b))),
          (a.max = (...b) => a.check(fz(...b))),
          (a.length = (...b) => a.check(fB(...b))),
          (a.nonempty = (...b) => a.check(fA(1, ...b))),
          (a.lowercase = (b) => a.check(fD(b))),
          (a.uppercase = (b) => a.check(fE(b))),
          (a.trim = () => a.check(fM())),
          (a.normalize = (...b) => a.check(fL(...b))),
          (a.toLowerCase = () => a.check(fN())),
          (a.toUpperCase = () => a.check(fO())));
      }),
      gM = g('ZodString', (a, b) => {
        (cm.init(a, b),
          gL.init(a, b),
          (a.email = (b) => a.check(eB(gP, b))),
          (a.url = (b) => a.check(eH(gY, b))),
          (a.jwt = (b) => a.check(eW(hr, b))),
          (a.emoji = (b) => a.check(eI(g_, b))),
          (a.guid = (b) => a.check(eC(gR, b))),
          (a.uuid = (b) => a.check(eD(gT, b))),
          (a.uuidv4 = (b) => a.check(eE(gT, b))),
          (a.uuidv6 = (b) => a.check(eF(gT, b))),
          (a.uuidv7 = (b) => a.check(eG(gT, b))),
          (a.nanoid = (b) => a.check(eJ(g1, b))),
          (a.guid = (b) => a.check(eC(gR, b))),
          (a.cuid = (b) => a.check(eK(g3, b))),
          (a.cuid2 = (b) => a.check(eL(g5, b))),
          (a.ulid = (b) => a.check(eM(g7, b))),
          (a.base64 = (b) => a.check(eT(hl, b))),
          (a.base64url = (b) => a.check(eU(hn, b))),
          (a.xid = (b) => a.check(eN(g9, b))),
          (a.ksuid = (b) => a.check(eO(hb, b))),
          (a.ipv4 = (b) => a.check(eP(hd, b))),
          (a.ipv6 = (b) => a.check(eQ(hf, b))),
          (a.cidrv4 = (b) => a.check(eR(hh, b))),
          (a.cidrv6 = (b) => a.check(eS(hj, b))),
          (a.e164 = (b) => a.check(eV(hp, b))),
          (a.datetime = (b) => a.check(go(b))),
          (a.date = (b) => a.check(gq(b))),
          (a.time = (b) => a.check(gs(b))),
          (a.duration = (b) => a.check(gu(b))));
      });
    function gN(a) {
      return ez(gM, a);
    }
    let gO = g('ZodStringFormat', (a, b) => {
        (cn.init(a, b), gL.init(a, b));
      }),
      gP = g('ZodEmail', (a, b) => {
        (cq.init(a, b), gO.init(a, b));
      });
    function gQ(a) {
      return eB(gP, a);
    }
    let gR = g('ZodGUID', (a, b) => {
      (co.init(a, b), gO.init(a, b));
    });
    function gS(a) {
      return eC(gR, a);
    }
    let gT = g('ZodUUID', (a, b) => {
      (cp.init(a, b), gO.init(a, b));
    });
    function gU(a) {
      return eD(gT, a);
    }
    function gV(a) {
      return eE(gT, a);
    }
    function gW(a) {
      return eF(gT, a);
    }
    function gX(a) {
      return eG(gT, a);
    }
    let gY = g('ZodURL', (a, b) => {
      (cr.init(a, b), gO.init(a, b));
    });
    function gZ(a) {
      return eH(gY, a);
    }
    function g$(a) {
      return eH(gY, { protocol: /^https?$/, hostname: gl.domain, ...gm.normalizeParams(a) });
    }
    let g_ = g('ZodEmoji', (a, b) => {
      (cs.init(a, b), gO.init(a, b));
    });
    function g0(a) {
      return eI(g_, a);
    }
    let g1 = g('ZodNanoID', (a, b) => {
      (ct.init(a, b), gO.init(a, b));
    });
    function g2(a) {
      return eJ(g1, a);
    }
    let g3 = g('ZodCUID', (a, b) => {
      (cu.init(a, b), gO.init(a, b));
    });
    function g4(a) {
      return eK(g3, a);
    }
    let g5 = g('ZodCUID2', (a, b) => {
      (cv.init(a, b), gO.init(a, b));
    });
    function g6(a) {
      return eL(g5, a);
    }
    let g7 = g('ZodULID', (a, b) => {
      (cw.init(a, b), gO.init(a, b));
    });
    function g8(a) {
      return eM(g7, a);
    }
    let g9 = g('ZodXID', (a, b) => {
      (cx.init(a, b), gO.init(a, b));
    });
    function ha(a) {
      return eN(g9, a);
    }
    let hb = g('ZodKSUID', (a, b) => {
      (cy.init(a, b), gO.init(a, b));
    });
    function hc(a) {
      return eO(hb, a);
    }
    let hd = g('ZodIPv4', (a, b) => {
      (cD.init(a, b), gO.init(a, b));
    });
    function he(a) {
      return eP(hd, a);
    }
    let hf = g('ZodIPv6', (a, b) => {
      (cE.init(a, b), gO.init(a, b));
    });
    function hg(a) {
      return eQ(hf, a);
    }
    let hh = g('ZodCIDRv4', (a, b) => {
      (cF.init(a, b), gO.init(a, b));
    });
    function hi(a) {
      return eR(hh, a);
    }
    let hj = g('ZodCIDRv6', (a, b) => {
      (cG.init(a, b), gO.init(a, b));
    });
    function hk(a) {
      return eS(hj, a);
    }
    let hl = g('ZodBase64', (a, b) => {
      (cI.init(a, b), gO.init(a, b));
    });
    function hm(a) {
      return eT(hl, a);
    }
    let hn = g('ZodBase64URL', (a, b) => {
      (cK.init(a, b), gO.init(a, b));
    });
    function ho(a) {
      return eU(hn, a);
    }
    let hp = g('ZodE164', (a, b) => {
      (cL.init(a, b), gO.init(a, b));
    });
    function hq(a) {
      return eV(hp, a);
    }
    let hr = g('ZodJWT', (a, b) => {
      (cN.init(a, b), gO.init(a, b));
    });
    function hs(a) {
      return eW(hr, a);
    }
    let ht = g('ZodCustomStringFormat', (a, b) => {
      (cO.init(a, b), gO.init(a, b));
    });
    function hu(a, b, c = {}) {
      return gg(ht, a, b, c);
    }
    function hv(a) {
      return gg(ht, 'hostname', gl.hostname, a);
    }
    function hw(a) {
      return gg(ht, 'hex', gl.hex, a);
    }
    function hx(a, b) {
      let c = b?.enc ?? 'hex',
        d = `${a}_${c}`,
        e = gl[d];
      if (!e) throw Error(`Unrecognized hash format: ${d}`);
      return gg(ht, d, e, b);
    }
    let hy = g('ZodNumber', (a, b) => {
      (cP.init(a, b),
        gK.init(a, b),
        (a.gt = (b, c) => a.check(fp(b, c))),
        (a.gte = (b, c) => a.check(fq(b, c))),
        (a.min = (b, c) => a.check(fq(b, c))),
        (a.lt = (b, c) => a.check(fn(b, c))),
        (a.lte = (b, c) => a.check(fo(b, c))),
        (a.max = (b, c) => a.check(fo(b, c))),
        (a.int = (b) => a.check(hB(b))),
        (a.safe = (b) => a.check(hB(b))),
        (a.positive = (b) => a.check(fp(0, b))),
        (a.nonnegative = (b) => a.check(fq(0, b))),
        (a.negative = (b) => a.check(fn(0, b))),
        (a.nonpositive = (b) => a.check(fo(0, b))),
        (a.multipleOf = (b, c) => a.check(fv(b, c))),
        (a.step = (b, c) => a.check(fv(b, c))),
        (a.finite = () => a));
      let c = a._zod.bag;
      ((a.minValue = Math.max(c.minimum ?? -1 / 0, c.exclusiveMinimum ?? -1 / 0) ?? null),
        (a.maxValue = Math.min(c.maximum ?? 1 / 0, c.exclusiveMaximum ?? 1 / 0) ?? null),
        (a.isInt = (c.format ?? '').includes('int') || Number.isSafeInteger(c.multipleOf ?? 0.5)),
        (a.isFinite = !0),
        (a.format = c.format ?? null));
    });
    function hz(a) {
      return e0(hy, a);
    }
    let hA = g('ZodNumberFormat', (a, b) => {
      (cQ.init(a, b), hy.init(a, b));
    });
    function hB(a) {
      return e2(hA, a);
    }
    function hC(a) {
      return e3(hA, a);
    }
    function hD(a) {
      return e4(hA, a);
    }
    function hE(a) {
      return e5(hA, a);
    }
    function hF(a) {
      return e6(hA, a);
    }
    let hG = g('ZodBoolean', (a, b) => {
      (cR.init(a, b), gK.init(a, b));
    });
    function hH(a) {
      return e7(hG, a);
    }
    let hI = g('ZodBigInt', (a, b) => {
      (cS.init(a, b),
        gK.init(a, b),
        (a.gte = (b, c) => a.check(fq(b, c))),
        (a.min = (b, c) => a.check(fq(b, c))),
        (a.gt = (b, c) => a.check(fp(b, c))),
        (a.gte = (b, c) => a.check(fq(b, c))),
        (a.min = (b, c) => a.check(fq(b, c))),
        (a.lt = (b, c) => a.check(fn(b, c))),
        (a.lte = (b, c) => a.check(fo(b, c))),
        (a.max = (b, c) => a.check(fo(b, c))),
        (a.positive = (b) => a.check(fp(BigInt(0), b))),
        (a.negative = (b) => a.check(fn(BigInt(0), b))),
        (a.nonpositive = (b) => a.check(fo(BigInt(0), b))),
        (a.nonnegative = (b) => a.check(fq(BigInt(0), b))),
        (a.multipleOf = (b, c) => a.check(fv(b, c))));
      let c = a._zod.bag;
      ((a.minValue = c.minimum ?? null),
        (a.maxValue = c.maximum ?? null),
        (a.format = c.format ?? null));
    });
    function hJ(a) {
      return e9(hI, a);
    }
    let hK = g('ZodBigIntFormat', (a, b) => {
      (cT.init(a, b), hI.init(a, b));
    });
    function hL(a) {
      return fb(hK, a);
    }
    function hM(a) {
      return fc(hK, a);
    }
    let hN = g('ZodSymbol', (a, b) => {
      (cU.init(a, b), gK.init(a, b));
    });
    function hO(a) {
      return fd(hN, a);
    }
    let hP = g('ZodUndefined', (a, b) => {
      (cV.init(a, b), gK.init(a, b));
    });
    function hQ(a) {
      return fe(hP, a);
    }
    let hR = g('ZodNull', (a, b) => {
      (cW.init(a, b), gK.init(a, b));
    });
    function hS(a) {
      return ff(hR, a);
    }
    let hT = g('ZodAny', (a, b) => {
      (cX.init(a, b), gK.init(a, b));
    });
    function hU() {
      return fg(hT);
    }
    let hV = g('ZodUnknown', (a, b) => {
      (cY.init(a, b), gK.init(a, b));
    });
    function hW() {
      return fh(hV);
    }
    let hX = g('ZodNever', (a, b) => {
      (cZ.init(a, b), gK.init(a, b));
    });
    function hY(a) {
      return fi(hX, a);
    }
    let hZ = g('ZodVoid', (a, b) => {
      (c$.init(a, b), gK.init(a, b));
    });
    function h$(a) {
      return fj(hZ, a);
    }
    let h_ = g('ZodDate', (a, b) => {
      (c_.init(a, b),
        gK.init(a, b),
        (a.min = (b, c) => a.check(fq(b, c))),
        (a.max = (b, c) => a.check(fo(b, c))));
      let c = a._zod.bag;
      ((a.minDate = c.minimum ? new Date(c.minimum) : null),
        (a.maxDate = c.maximum ? new Date(c.maximum) : null));
    });
    function h0(a) {
      return fk(h_, a);
    }
    let h1 = g('ZodArray', (a, b) => {
      (c1.init(a, b),
        gK.init(a, b),
        (a.element = b.element),
        (a.min = (b, c) => a.check(fA(b, c))),
        (a.nonempty = (b) => a.check(fA(1, b))),
        (a.max = (b, c) => a.check(fz(b, c))),
        (a.length = (b, c) => a.check(fB(b, c))),
        (a.unwrap = () => a.element));
    });
    function h2(a, b) {
      return fP(h1, a, b);
    }
    function h3(a) {
      return iq(Object.keys(a._zod.def.shape));
    }
    let h4 = g('ZodObject', (a, b) => {
      (c6.init(a, b),
        gK.init(a, b),
        gm.defineLazy(a, 'shape', () => b.shape),
        (a.keyof = () => iq(Object.keys(a._zod.def.shape))),
        (a.catchall = (b) => a.clone({ ...a._zod.def, catchall: b })),
        (a.passthrough = () => a.clone({ ...a._zod.def, catchall: hW() })),
        (a.loose = () => a.clone({ ...a._zod.def, catchall: hW() })),
        (a.strict = () => a.clone({ ...a._zod.def, catchall: hY() })),
        (a.strip = () => a.clone({ ...a._zod.def, catchall: void 0 })),
        (a.extend = (b) => gm.extend(a, b)),
        (a.safeExtend = (b) => gm.safeExtend(a, b)),
        (a.merge = (b) => gm.merge(a, b)),
        (a.pick = (b) => gm.pick(a, b)),
        (a.omit = (b) => gm.omit(a, b)),
        (a.partial = (...b) => gm.partial(iy, a, b[0])),
        (a.required = (...b) => gm.required(iH, a, b[0])));
    });
    function h5(a, b) {
      return new h4({
        type: 'object',
        get shape() {
          return (gm.assignProp(this, 'shape', a ? gm.objectClone(a) : {}), this.shape);
        },
        ...gm.normalizeParams(b),
      });
    }
    function h6(a, b) {
      return new h4({
        type: 'object',
        get shape() {
          return (gm.assignProp(this, 'shape', gm.objectClone(a)), this.shape);
        },
        catchall: hY(),
        ...gm.normalizeParams(b),
      });
    }
    function h7(a, b) {
      return new h4({
        type: 'object',
        get shape() {
          return (gm.assignProp(this, 'shape', gm.objectClone(a)), this.shape);
        },
        catchall: hW(),
        ...gm.normalizeParams(b),
      });
    }
    let h8 = g('ZodUnion', (a, b) => {
      (c8.init(a, b), gK.init(a, b), (a.options = b.options));
    });
    function h9(a, b) {
      return new h8({ type: 'union', options: a, ...gm.normalizeParams(b) });
    }
    let ia = g('ZodDiscriminatedUnion', (a, b) => {
      (h8.init(a, b), c9.init(a, b));
    });
    function ib(a, b, c) {
      return new ia({ type: 'union', options: b, discriminator: a, ...gm.normalizeParams(c) });
    }
    let ic = g('ZodIntersection', (a, b) => {
      (da.init(a, b), gK.init(a, b));
    });
    function id(a, b) {
      return new ic({ type: 'intersection', left: a, right: b });
    }
    let ie = g('ZodTuple', (a, b) => {
      (dc.init(a, b), gK.init(a, b), (a.rest = (b) => a.clone({ ...a._zod.def, rest: b })));
    });
    function ig(a, b, c) {
      let d = b instanceof cl,
        e = d ? c : b;
      return new ie({ type: 'tuple', items: a, rest: d ? b : null, ...gm.normalizeParams(e) });
    }
    let ih = g('ZodRecord', (a, b) => {
      (de.init(a, b), gK.init(a, b), (a.keyType = b.keyType), (a.valueType = b.valueType));
    });
    function ii(a, b, c) {
      return new ih({ type: 'record', keyType: a, valueType: b, ...gm.normalizeParams(c) });
    }
    function ij(a, b, c) {
      let d = S(a);
      return (
        (d._zod.values = void 0),
        new ih({ type: 'record', keyType: d, valueType: b, ...gm.normalizeParams(c) })
      );
    }
    let ik = g('ZodMap', (a, b) => {
      (df.init(a, b), gK.init(a, b), (a.keyType = b.keyType), (a.valueType = b.valueType));
    });
    function il(a, b, c) {
      return new ik({ type: 'map', keyType: a, valueType: b, ...gm.normalizeParams(c) });
    }
    let im = g('ZodSet', (a, b) => {
      (dh.init(a, b),
        gK.init(a, b),
        (a.min = (...b) => a.check(fx(...b))),
        (a.nonempty = (b) => a.check(fx(1, b))),
        (a.max = (...b) => a.check(fw(...b))),
        (a.size = (...b) => a.check(fy(...b))));
    });
    function io(a, b) {
      return new im({ type: 'set', valueType: a, ...gm.normalizeParams(b) });
    }
    let ip = g('ZodEnum', (a, b) => {
      (dj.init(a, b), gK.init(a, b), (a.enum = b.entries), (a.options = Object.values(b.entries)));
      let c = new Set(Object.keys(b.entries));
      ((a.extract = (a, d) => {
        let e = {};
        for (let d of a)
          if (c.has(d)) e[d] = b.entries[d];
          else throw Error(`Key ${d} not found in enum`);
        return new ip({ ...b, checks: [], ...gm.normalizeParams(d), entries: e });
      }),
        (a.exclude = (a, d) => {
          let e = { ...b.entries };
          for (let b of a)
            if (c.has(b)) delete e[b];
            else throw Error(`Key ${b} not found in enum`);
          return new ip({ ...b, checks: [], ...gm.normalizeParams(d), entries: e });
        }));
    });
    function iq(a, b) {
      return new ip({
        type: 'enum',
        entries: Array.isArray(a) ? Object.fromEntries(a.map((a) => [a, a])) : a,
        ...gm.normalizeParams(b),
      });
    }
    function ir(a, b) {
      return new ip({ type: 'enum', entries: a, ...gm.normalizeParams(b) });
    }
    let is = g('ZodLiteral', (a, b) => {
      (dk.init(a, b),
        gK.init(a, b),
        (a.values = new Set(b.values)),
        Object.defineProperty(a, 'value', {
          get() {
            if (b.values.length > 1)
              throw Error(
                'This schema contains multiple valid literal values. Use `.values` instead.'
              );
            return b.values[0];
          },
        }));
    });
    function it(a, b) {
      return new is({
        type: 'literal',
        values: Array.isArray(a) ? a : [a],
        ...gm.normalizeParams(b),
      });
    }
    let iu = g('ZodFile', (a, b) => {
      (dl.init(a, b),
        gK.init(a, b),
        (a.min = (b, c) => a.check(fx(b, c))),
        (a.max = (b, c) => a.check(fw(b, c))),
        (a.mime = (b, c) => a.check(fJ(Array.isArray(b) ? b : [b], c))));
    });
    function iv(a) {
      return f$(iu, a);
    }
    let iw = g('ZodTransform', (a, b) => {
      (dm.init(a, b),
        gK.init(a, b),
        (a._zod.parse = (c, d) => {
          if ('backward' === d.direction) throw new j(a.constructor.name);
          c.addIssue = (d) => {
            'string' == typeof d
              ? c.issues.push(gm.issue(d, c.value, b))
              : (d.fatal && (d.continue = !1),
                d.code ?? (d.code = 'custom'),
                d.input ?? (d.input = c.value),
                d.inst ?? (d.inst = a),
                c.issues.push(gm.issue(d)));
          };
          let e = b.transform(c.value, c);
          return e instanceof Promise ? e.then((a) => ((c.value = a), c)) : ((c.value = e), c);
        }));
    });
    function ix(a) {
      return new iw({ type: 'transform', transform: a });
    }
    let iy = g('ZodOptional', (a, b) => {
      (dp.init(a, b), gK.init(a, b), (a.unwrap = () => a._zod.def.innerType));
    });
    function iz(a) {
      return new iy({ type: 'optional', innerType: a });
    }
    let iA = g('ZodNullable', (a, b) => {
      (dq.init(a, b), gK.init(a, b), (a.unwrap = () => a._zod.def.innerType));
    });
    function iB(a) {
      return new iA({ type: 'nullable', innerType: a });
    }
    function iC(a) {
      return iz(iB(a));
    }
    let iD = g('ZodDefault', (a, b) => {
      (dr.init(a, b),
        gK.init(a, b),
        (a.unwrap = () => a._zod.def.innerType),
        (a.removeDefault = a.unwrap));
    });
    function iE(a, b) {
      return new iD({
        type: 'default',
        innerType: a,
        get defaultValue() {
          return 'function' == typeof b ? b() : gm.shallowClone(b);
        },
      });
    }
    let iF = g('ZodPrefault', (a, b) => {
      (dt.init(a, b), gK.init(a, b), (a.unwrap = () => a._zod.def.innerType));
    });
    function iG(a, b) {
      return new iF({
        type: 'prefault',
        innerType: a,
        get defaultValue() {
          return 'function' == typeof b ? b() : gm.shallowClone(b);
        },
      });
    }
    let iH = g('ZodNonOptional', (a, b) => {
      (du.init(a, b), gK.init(a, b), (a.unwrap = () => a._zod.def.innerType));
    });
    function iI(a, b) {
      return new iH({ type: 'nonoptional', innerType: a, ...gm.normalizeParams(b) });
    }
    let iJ = g('ZodSuccess', (a, b) => {
      (dw.init(a, b), gK.init(a, b), (a.unwrap = () => a._zod.def.innerType));
    });
    function iK(a) {
      return new iJ({ type: 'success', innerType: a });
    }
    let iL = g('ZodCatch', (a, b) => {
      (dx.init(a, b),
        gK.init(a, b),
        (a.unwrap = () => a._zod.def.innerType),
        (a.removeCatch = a.unwrap));
    });
    function iM(a, b) {
      return new iL({
        type: 'catch',
        innerType: a,
        catchValue: 'function' == typeof b ? b : () => b,
      });
    }
    let iN = g('ZodNaN', (a, b) => {
      (dy.init(a, b), gK.init(a, b));
    });
    function iO(a) {
      return fm(iN, a);
    }
    let iP = g('ZodPipe', (a, b) => {
      (dz.init(a, b), gK.init(a, b), (a.in = b.in), (a.out = b.out));
    });
    function iQ(a, b) {
      return new iP({ type: 'pipe', in: a, out: b });
    }
    let iR = g('ZodCodec', (a, b) => {
      (iP.init(a, b), dB.init(a, b));
    });
    function iS(a, b, c) {
      return new iR({
        type: 'pipe',
        in: a,
        out: b,
        transform: c.decode,
        reverseTransform: c.encode,
      });
    }
    let iT = g('ZodReadonly', (a, b) => {
      (dE.init(a, b), gK.init(a, b), (a.unwrap = () => a._zod.def.innerType));
    });
    function iU(a) {
      return new iT({ type: 'readonly', innerType: a });
    }
    let iV = g('ZodTemplateLiteral', (a, b) => {
      (dG.init(a, b), gK.init(a, b));
    });
    function iW(a, b) {
      return new iV({ type: 'template_literal', parts: a, ...gm.normalizeParams(b) });
    }
    let iX = g('ZodLazy', (a, b) => {
      (dJ.init(a, b), gK.init(a, b), (a.unwrap = () => a._zod.def.getter()));
    });
    function iY(a) {
      return new iX({ type: 'lazy', getter: a });
    }
    let iZ = g('ZodPromise', (a, b) => {
      (dI.init(a, b), gK.init(a, b), (a.unwrap = () => a._zod.def.innerType));
    });
    function i$(a) {
      return new iZ({ type: 'promise', innerType: a });
    }
    let i_ = g('ZodFunction', (a, b) => {
      (dH.init(a, b), gK.init(a, b));
    });
    function i0(a) {
      return new i_({
        type: 'function',
        input: Array.isArray(a?.input) ? ig(a?.input) : (a?.input ?? h2(hW())),
        output: a?.output ?? hW(),
      });
    }
    let i1 = g('ZodCustom', (a, b) => {
      (dK.init(a, b), gK.init(a, b));
    });
    function i2(a) {
      let b = new bX({ check: 'custom' });
      return ((b._zod.check = a), b);
    }
    function i3(a, b) {
      return gb(i1, a ?? (() => !0), b);
    }
    function i4(a, b = {}) {
      return gc(i1, a, b);
    }
    function i5(a) {
      return gd(a);
    }
    function i6(a, b = { error: `Input not instance of ${a.name}` }) {
      let c = new i1({
        type: 'custom',
        check: 'custom',
        fn: (b) => b instanceof a,
        abort: !0,
        ...gm.normalizeParams(b),
      });
      return ((c._zod.bag.Class = a), c);
    }
    let i7 = (...a) => gf({ Codec: iR, Boolean: hG, String: gM }, ...a);
    function i8(a) {
      let b = iY(() => h9([gN(a), hz(), hH(), hS(), h2(b), ii(gN(), b)]));
      return b;
    }
    function i9(a, b) {
      return iQ(ix(a), b);
    }
    (a.i(47934),
      a.s(
        [
          'endsWith',
          () => fH,
          'gt',
          () => fp,
          'gte',
          () => fq,
          'includes',
          () => fF,
          'length',
          () => fB,
          'lowercase',
          () => fD,
          'lt',
          () => fn,
          'lte',
          () => fo,
          'maxLength',
          () => fz,
          'maxSize',
          () => fw,
          'mime',
          () => fJ,
          'minLength',
          () => fA,
          'minSize',
          () => fx,
          'multipleOf',
          () => fv,
          'negative',
          () => fs,
          'nonnegative',
          () => fu,
          'nonpositive',
          () => ft,
          'normalize',
          () => fL,
          'overwrite',
          () => fK,
          'positive',
          () => fr,
          'property',
          () => fI,
          'regex',
          () => fC,
          'size',
          () => fy,
          'startsWith',
          () => fG,
          'toLowerCase',
          () => fN,
          'toUpperCase',
          () => fO,
          'trim',
          () => fM,
          'uppercase',
          () => fE,
        ],
        32261
      ),
      a.s([], 85210),
      a.i(85210),
      a.i(32261),
      a.i(5288),
      a.i(12957),
      a.s(
        [
          '$brand',
          () => h,
          'ZodFirstPartyTypeKind',
          () => b,
          'ZodIssueCode',
          () => ja,
          'config',
          () => l,
          'getErrorMap',
          () => jc,
          'setErrorMap',
          () => jb,
        ],
        56282
      ),
      a.s(
        [
          'ZodFirstPartyTypeKind',
          () => b,
          'ZodIssueCode',
          () => ja,
          'getErrorMap',
          () => jc,
          'setErrorMap',
          () => jb,
        ],
        58737
      ));
    let ja = {
      invalid_type: 'invalid_type',
      too_big: 'too_big',
      too_small: 'too_small',
      invalid_format: 'invalid_format',
      not_multiple_of: 'not_multiple_of',
      unrecognized_keys: 'unrecognized_keys',
      invalid_union: 'invalid_union',
      invalid_key: 'invalid_key',
      invalid_element: 'invalid_element',
      invalid_value: 'invalid_value',
      custom: 'custom',
    };
    function jb(a) {
      l({ customError: a });
    }
    function jc() {
      return l().customError;
    }
    (b || (b = {}), a.i(58737), a.i(56282));
    var gl = dN,
      gm = dM,
      jd = et,
      je = a.i(44496);
    function jf(a) {
      return eA(gM, a);
    }
    function jg(a) {
      return e1(hy, a);
    }
    function jh(a) {
      return e8(hG, a);
    }
    function ji(a) {
      return fa(hI, a);
    }
    function jj(a) {
      return fl(h_, a);
    }
    a.s(
      [
        'bigint',
        () => ji,
        'boolean',
        () => jh,
        'date',
        () => jj,
        'number',
        () => jg,
        'string',
        () => jf,
      ],
      94423
    );
    var jk = a.i(94423),
      jl = a.i(99333),
      jl = jl;
    let jm = (function (a) {
        let b = 'object' == typeof a.client ? a.client : {},
          c = 'object' == typeof a.server ? a.server : {},
          d = a.shared,
          f = a.runtimeEnv ? a.runtimeEnv : { ...process.env, ...a.experimental__runtimeEnv };
        return (function (a) {
          let b = a.runtimeEnvStrict ?? a.runtimeEnv ?? process.env;
          if (a.emptyStringAsUndefined)
            for (let [a, c] of Object.entries(b)) '' === c && delete b[a];
          if (a.skipValidation) return b;
          let c = 'object' == typeof a.client ? a.client : {},
            d = 'object' == typeof a.server ? a.server : {},
            f = 'object' == typeof a.shared ? a.shared : {},
            g = a.isServer ?? !0,
            h = g ? { ...d, ...f, ...c } : { ...c, ...f },
            i =
              a.createFinalSchema?.(h, g)['~standard'].validate(b) ??
              (function (a, b) {
                let c = {},
                  d = [];
                for (let f in a) {
                  let g = a[f]['~standard'].validate(b[f]);
                  if (
                    (e(g, `Validation must be synchronous, but ${f} returned a Promise.`), g.issues)
                  ) {
                    d.push(
                      ...g.issues.map((a) => ({
                        ...a,
                        message: a.message,
                        path: [f, ...(a.path ?? [])],
                      }))
                    );
                    continue;
                  }
                  c[f] = g.value;
                }
                return d.length ? { issues: d } : { value: c };
              })(h, b);
          e(i, 'Validation must be synchronous');
          let j =
              a.onValidationError ??
              ((a) => {
                throw (
                  console.error('❌ Invalid environment variables:', a),
                  Error('Invalid environment variables')
                );
              }),
            k =
              a.onInvalidAccess ??
              (() => {
                throw Error(
                  '❌ Attempted to access a server-side environment variable on the client'
                );
              });
          return i.issues
            ? j(i.issues)
            : new Proxy(
                Object.assign(
                  (a.extends ?? []).reduce((a, b) => Object.assign(a, b), {}),
                  i.value
                ),
                {
                  get(b, c) {
                    if ('string' == typeof c && '__esModule' !== c && '$$typeof' !== c)
                      return g || (a.clientPrefix && (c.startsWith(a.clientPrefix) || c in f))
                        ? Reflect.get(b, c)
                        : k(c);
                  },
                }
              );
        })({ ...a, shared: d, client: b, server: c, clientPrefix: 'NEXT_PUBLIC_', runtimeEnv: f });
      })({
        server: {
          NODE_ENV: jl.enum(['development', 'test', 'production']).default('development'),
          SENTRY_DSN: jl.string().url().optional(),
          SENTRY_ORG: jl.string().optional(),
          SENTRY_PROJECT: jl.string().optional(),
          DATABASE_URL: jl.string().url().optional(),
          SUPABASE_URL: jl.string().url().optional(),
          SUPABASE_ANON_KEY: jl.string().min(1).optional(),
          STRIPE_WEBHOOK_SECRET: jl.string().optional(),
        },
        client: {
          NEXT_PUBLIC_APP_NAME: jl.string().default('DL Starter'),
          NEXT_PUBLIC_POSTHOG_KEY: jl.string().optional(),
          NEXT_PUBLIC_SENTRY_DSN: jl.string().url().optional(),
        },
        runtimeEnv: {
          NODE_ENV: 'production',
          SENTRY_DSN: process.env.SENTRY_DSN,
          SENTRY_ORG: process.env.SENTRY_ORG,
          SENTRY_PROJECT: process.env.SENTRY_PROJECT,
          DATABASE_URL: process.env.DATABASE_URL,
          SUPABASE_URL: process.env.SUPABASE_URL,
          SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY,
          STRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET,
          NEXT_PUBLIC_APP_NAME: process.env.NEXT_PUBLIC_APP_NAME,
          NEXT_PUBLIC_POSTHOG_KEY: process.env.NEXT_PUBLIC_POSTHOG_KEY,
          NEXT_PUBLIC_SENTRY_DSN: process.env.NEXT_PUBLIC_SENTRY_DSN,
        },
        emptyStringAsUndefined: !0,
      }),
      jn =
        jm.SENTRY_DSN || jm.NEXT_PUBLIC_SENTRY_DSN
          ? new (class {
              captureException(a, b) {
                d.withScope((c) => {
                  (b?.user && c.setUser(b.user),
                    b?.tags && c.setTags(b.tags),
                    b?.level && c.setLevel(b.level),
                    b?.extra && c.setExtras(b.extra),
                    'string' == typeof a ? d.captureException(Error(a)) : d.captureException(a));
                });
              }
              captureMessage(a, b) {
                d.withScope((c) => {
                  (b?.user && c.setUser(b.user),
                    b?.tags && c.setTags(b.tags),
                    b?.level && c.setLevel(b.level),
                    b?.extra && c.setExtras(b.extra),
                    d.captureMessage(a, b?.level || 'info'));
                });
              }
              setUser(a) {
                d.setUser(a);
              }
              addBreadcrumb(a, b = 'custom', c = 'info') {
                d.addBreadcrumb({ message: a, category: b, level: c, timestamp: Date.now() / 1e3 });
              }
              startTransaction(a, b = 'navigation') {
                return { finish: () => d.startSpan({ name: a, op: b }, () => {}) };
              }
            })()
          : new (class {
              captureException() {}
              captureMessage() {}
              setUser() {}
              addBreadcrumb() {}
              startTransaction() {
                return { finish: () => {} };
              }
            })(),
      jo = { features: { billing: !1, orgs: !1, ai: !1, monitoring: !0 } };
    function jp() {
      return jo.features.monitoring
        ? (0, c.jsxs)('div', {
            className: 'container py-8 space-y-6',
            children: [
              (0, c.jsx)('h1', { className: 'text-2xl font-bold', children: 'Test Monitoring' }),
              (0, c.jsx)('p', {
                className: 'text-muted-foreground',
                children: 'Test error reporting and monitoring functionality.',
              }),
              (0, c.jsxs)('div', {
                className: 'space-y-4',
                children: [
                  (0, c.jsx)('button', {
                    onClick: () => {
                      try {
                        throw Error('Test client-side error');
                      } catch (a) {
                        jn.captureException(a, {
                          tags: { source: 'test-page', type: 'client' },
                          level: 'error',
                        });
                      }
                    },
                    className: 'px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600',
                    children: 'Test Handled Error',
                  }),
                  (0, c.jsx)('button', {
                    onClick: () => {
                      jn.captureMessage('Test monitoring message', {
                        tags: { source: 'test-page', type: 'info' },
                        level: 'info',
                      });
                    },
                    className: 'px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600',
                    children: 'Test Info Message',
                  }),
                  (0, c.jsx)('button', {
                    onClick: () => {
                      throw Error('Uncaught test error');
                    },
                    className: 'px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600',
                    children: 'Test Uncaught Error',
                  }),
                ],
              }),
              (0, c.jsxs)('div', {
                className: 'mt-8 p-4 bg-gray-50 dark:bg-gray-900 rounded',
                children: [
                  (0, c.jsx)('h2', { className: 'font-semibold mb-2', children: 'Instructions:' }),
                  (0, c.jsxs)('ol', {
                    className: 'list-decimal list-inside space-y-1 text-sm',
                    children: [
                      (0, c.jsx)('li', {
                        children: 'Set NEXT_PUBLIC_SENTRY_DSN in your .env.local',
                      }),
                      (0, c.jsx)('li', {
                        children: 'Click the buttons above to test error reporting',
                      }),
                      (0, c.jsx)('li', {
                        children: 'Check your Sentry dashboard for captured events',
                      }),
                    ],
                  }),
                ],
              }),
            ],
          })
        : (0, c.jsxs)('div', {
            className: 'container py-8',
            children: [
              (0, c.jsx)('h1', {
                className: 'text-2xl font-bold mb-4',
                children: 'Monitoring Disabled',
              }),
              (0, c.jsx)('p', {
                children: 'Enable monitoring in app.config.ts to test error reporting.',
              }),
            ],
          });
    }
  },
];

//# sourceMappingURL=_430161f6._.js.map
