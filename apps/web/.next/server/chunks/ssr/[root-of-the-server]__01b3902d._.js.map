{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/route-modules/app-page/module.compiled.js","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/version.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag/internal/logLevelLogger.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/internal/global-utils.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/platform/node/globalThis.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag/types.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag-api.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/internal/semver.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/api/diag.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag/ComponentLogger.ts"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxRuntime\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.9.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag/types';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      `@opentelemetry/api: Registration of version v${api.version} for ${type} does not match previously registered API v${VERSION}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  metrics?: MeterProvider;\n  propagation?: TextMapPropagator;\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type DiagLogFunction = (message: string, ...args: unknown[]) => void;\n\n/**\n * Defines an internal diagnostic logger interface which is used to log internal diagnostic\n * messages, you can set the default diagnostic logger via the {@link DiagAPI} setLogger function.\n * API provided implementations include :-\n * - a No-Op {@link createNoopDiagLogger}\n * - a {@link DiagLogLevel} filtering wrapper {@link createLogLevelDiagLogger}\n * - a general Console {@link DiagConsoleLogger} version.\n */\nexport interface DiagLogger {\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  error: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  warn: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  info: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario.\n   * For example: Logging the order of execution of async operations.\n   */\n  debug: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  verbose: DiagLogFunction;\n}\n\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport enum DiagLogLevel {\n  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n  NONE = 0,\n\n  /** Identifies an error scenario */\n  ERROR = 30,\n\n  /** Identifies a warning scenario */\n  WARN = 50,\n\n  /** General informational log message */\n  INFO = 60,\n\n  /** General debug log message */\n  DEBUG = 70,\n\n  /**\n   * Detailed trace level logging should only be used for development, should only be set\n   * in a development environment.\n   */\n  VERBOSE = 80,\n\n  /** Used to set the logging level to include all logging */\n  ALL = 9999,\n}\n\n/**\n * Defines options for ComponentLogger\n */\nexport interface ComponentLoggerOptions {\n  namespace: string;\n}\n\nexport interface DiagLoggerOptions {\n  /**\n   * The {@link DiagLogLevel} used to filter logs sent to the logger.\n   *\n   * @defaultValue DiagLogLevel.INFO\n   */\n  logLevel?: DiagLogLevel;\n\n  /**\n   * Setting this value to `true` will suppress the warning message normally emitted when registering a logger when another logger is already registered.\n   */\n  suppressOverrideMessage?: boolean;\n}\n\nexport interface DiagLoggerApi {\n  /**\n   * Set the global DiagLogger and DiagLogLevel.\n   * If a global diag logger is already set, this will override it.\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param options - A {@link DiagLoggerOptions} object. If not provided, default values will be set.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, options?: DiagLoggerOptions): boolean;\n\n  /**\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param logLevel - The {@link DiagLogLevel} used to filter logs sent to the logger. If not provided it will default to {@link DiagLogLevel.INFO}.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, logLevel?: DiagLogLevel): boolean;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport const diag = DiagAPI.instance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport {\n  ComponentLoggerOptions,\n  DiagLogFunction,\n  DiagLogger,\n  DiagLoggerApi,\n  DiagLogLevel,\n} from '../diag/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\n\nconst API_NAME = 'diag';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nexport class DiagAPI implements DiagLogger, DiagLoggerApi {\n  private static _instance?: DiagAPI;\n\n  /** Get the singleton instance of the DiagAPI API */\n  public static instance(): DiagAPI {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Private internal constructor\n   * @private\n   */\n  private constructor() {\n    function _logProxy(funcName: keyof DiagLogger): DiagLogFunction {\n      return function (...args) {\n        const logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName](...args);\n      };\n    }\n\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    const self = this;\n\n    // DiagAPI specific functions\n\n    const setLogger: DiagLoggerApi['setLogger'] = (\n      logger,\n      optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }\n    ) => {\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        const err = new Error(\n          'Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation'\n        );\n        self.error(err.stack ?? err.message);\n        return false;\n      }\n\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel,\n        };\n      }\n\n      const oldLogger = getGlobal('diag');\n      const newLogger = createLogLevelDiagLogger(\n        optionsOrLogLevel.logLevel ?? DiagLogLevel.INFO,\n        logger\n      );\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        const stack = new Error().stack ?? '<failed to generate stacktrace>';\n        oldLogger.warn(`Current logger will be overwritten from ${stack}`);\n        newLogger.warn(\n          `Current logger will overwrite one already registered from ${stack}`\n        );\n      }\n\n      return registerGlobal('diag', newLogger, self, true);\n    };\n\n    self.setLogger = setLogger;\n\n    self.disable = () => {\n      unregisterGlobal(API_NAME, self);\n    };\n\n    self.createComponentLogger = (options: ComponentLoggerOptions) => {\n      return new DiagComponentLogger(options);\n    };\n\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n\n  public setLogger!: DiagLoggerApi['setLogger'];\n  /**\n   *\n   */\n  public createComponentLogger!: (\n    options: ComponentLoggerOptions\n  ) => DiagLogger;\n\n  // DiagLogger implementation\n  public verbose!: DiagLogFunction;\n  public debug!: DiagLogFunction;\n  public info!: DiagLogFunction;\n  public warn!: DiagLogFunction;\n  public error!: DiagLogFunction;\n\n  /**\n   * Unregister the global logger and return to Noop\n   */\n  public disable!: () => void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobal } from '../internal/global-utils';\nimport { ComponentLoggerOptions, DiagLogger, DiagLogFunction } from './types';\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nexport class DiagComponentLogger implements DiagLogger {\n  private _namespace: string;\n\n  constructor(props: ComponentLoggerOptions) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  public debug(...args: any[]): void {\n    return logProxy('debug', this._namespace, args);\n  }\n\n  public error(...args: any[]): void {\n    return logProxy('error', this._namespace, args);\n  }\n\n  public info(...args: any[]): void {\n    return logProxy('info', this._namespace, args);\n  }\n\n  public warn(...args: any[]): void {\n    return logProxy('warn', this._namespace, args);\n  }\n\n  public verbose(...args: any[]): void {\n    return logProxy('verbose', this._namespace, args);\n  }\n}\n\nfunction logProxy(\n  funcName: keyof DiagLogger,\n  namespace: string,\n  args: any\n): void {\n  const logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName](...(args as Parameters<DiagLogFunction>));\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK","vendored","ReactJsxRuntime"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10]}