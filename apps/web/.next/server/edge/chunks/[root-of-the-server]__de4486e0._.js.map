{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_default.cjs","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/shared/lib/modern-browserslist-target.js","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/shared/lib/constants.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/constants.js","turbopack:///[project]/node_modules/.pnpm/@t3-oss+env-core@0.13.8_typescript@5.9.2_zod@4.1.5/node_modules/@t3-oss/env-core/dist/src-Bb3GbGAa.js","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/constants.ts","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/regexes.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/doc.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/versions.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/registries.js","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/spanstatus.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/stacktrace.ts","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/vi.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ar.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/az.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/be.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ca.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/cs.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/da.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/de.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/es.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/fa.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/fi.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/fr.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/fr-CA.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/he.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/hu.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/id.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/it.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ja.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/kh.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ko.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/mk.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/nl.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/no.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ota.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ps.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/pl.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/pt.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ru.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/sl.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/sv.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ta.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/th.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ua.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ur.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/zh-CN.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/zh-TW.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/yo.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/ms.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/en.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/core.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/eo.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/is.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/locales/tr.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/util.js","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/is.ts","turbopack:///[project]/node_modules/.pnpm/@t3-oss+env-nextjs@0.13.8_typescript@5.9.2_zod@4.1.5/node_modules/@t3-oss/env-nextjs/dist/index.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/errors.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/classic/coerce.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/to-json-schema.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/classic/iso.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/classic/parse.js","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/vercel-ai/constants.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/promisebuffer.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/src/edge/distDirRewriteFramesIntegration.ts","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/classic/errors.js","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/lru.ts","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/api.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/parse.js","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/classic/compat.js","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/status.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/browser.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/instrument/globalUnhandledRejection.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/breadcrumb-log-level.ts","turbopack:///[project]/apps/web/sentry.edge.config.ts","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/checks.js","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/defaultScopes.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/integrations/rewriteframes.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/integration.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/baggage.ts","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/classic/schemas.js","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/should-ignore-span.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/src/common/utils/isBuild.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/eventUtils.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/vercel-ai/index.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/api.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/transactionEvent.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/utils.ts","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/core/schemas.js","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/logSpans.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/isSentryRequestUrl.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/parseSampleRate.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/applyScopeDataToEvent.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/merge.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/asyncContext/stackStrategy.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/vercel-ai/utils.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/severity.ts","turbopack:///[project]/node_modules/.pnpm/zod@4.1.5/node_modules/zod/v4/classic/external.js","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/measurement.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/integrations/linkederrors.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/clientreport.ts","turbopack:///[project]/apps/web/src/lib/env.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/string.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/spanOnScope.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/debug-ids.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/ratelimit.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/vercelWaitUntil.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/currentScopes.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/checkin.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/tracing.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/parameterize.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/instrument/globalError.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/src/common/utils/responseEnd.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/envelope.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/time.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/aggregate-errors.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/semanticAttributes.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/node-stack-trace.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/url.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/handleCallbackErrors.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/integrations/functiontostring.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/sdkMetadata.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/spancontext-utils.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/platform/browser/globalThis.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/sentryNonRecordingSpan.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/context/context.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag/internal/logLevelLogger.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/eventProcessors.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/api/propagation.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/supports.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/eventbuilder.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/baggage/utils.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/invalid-span-constants.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+resources@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/ResourceImpl.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/api/trace.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/src/stable_attributes.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/exports.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/envelope.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/propagation-api.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/internal/global-utils.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/object.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/browser/sdk-info.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/integrations/dedupe.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/dynamicSamplingContext.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/context-utils.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/propagation/NoopTextMapPropagator.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/breadcrumbs.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/dsn.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/carrier.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/logs/exports.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/errors.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/integrations/requestdata.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/debounce.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/normalize.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/traceData.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/NoopTracerProvider.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/integrations/console.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/spanUtils.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/SamplingResult.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/asyncContext/index.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/NoopTracer.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/ProxyTracer.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/semconv.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/path.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/client.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/ai/gen-ai-attributes.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/transports/base.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/instrument/handlers.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/instrument/console.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/client.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/NonRecordingSpan.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/ProxyTracerProvider.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/sampling.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/vendor/escapeStringForRegex.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/fetch.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/prepareEvent.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/internal/semver.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/cookie.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@10.10.0_@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9._686bf83fd3b1c1678f4a9c7e1601b75c/node_modules/@sentry/nextjs/src/edge/index.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/instrument/fetch.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/trace.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/tracing/sentrySpan.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/logs/envelope.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/misc.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/integrations/eventFilters.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/server-runtime-client.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/debug-logger.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/api/context.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/baggage/internal/baggage-impl.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/api/diag.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/baggage/context-helpers.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/syncpromise.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/context/NoopContextManager.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/session.ts","turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag/ComponentLogger.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/vendor/getIpAddress.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/scope.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+core@10.10.0/node_modules/@sentry/core/src/utils/vercel-ai/vercel-ai-attributes.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/common/attributes.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/platform/node/environment.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/platform/node/performance.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/common/time.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/utils/merge.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/core/build/esm/baggage/constants.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/core/build/esm/baggage/utils.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/core/build/esm/internal/validators.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/opentelemetry/build/esm/index.js","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/debug-build.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/integrations/wintercg-fetch.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/transports/index.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/utils/vercel.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/vendored/abstract-async-hooks-context-manager.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/vendored/async-local-storage-context-manager.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/sdk.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/integrations/tracing/vercelai.ts","turbopack:///[project]/node_modules/.pnpm/@sentry+vercel-edge@10.10.0/node_modules/@sentry/vercel-edge/src/logs/exports.ts"],"sourcesContent":["\"use strict\";\n\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\nexports._ = _interop_require_default;\n","// Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.\n// Keep file changes in sync with the corresponding `.d.ts` files.\n/**\n * These are the browser versions that support all of the following:\n * static import: https://caniuse.com/es6-module\n * dynamic import: https://caniuse.com/es6-module-dynamic-import\n * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta\n */\nconst MODERN_BROWSERSLIST_TARGET = [\n  'chrome 64',\n  'edge 79',\n  'firefox 67',\n  'opera 51',\n  'safari 12',\n]\n\nmodule.exports = MODERN_BROWSERSLIST_TARGET\n","import MODERN_BROWSERSLIST_TARGET from './modern-browserslist-target'\n\nexport { MODERN_BROWSERSLIST_TARGET }\n\nexport type ValueOf<T> = Required<T>[keyof T]\n\nexport const COMPILER_NAMES = {\n  client: 'client',\n  server: 'server',\n  edgeServer: 'edge-server',\n} as const\n\nexport type CompilerNameValues = ValueOf<typeof COMPILER_NAMES>\n\nexport enum AdapterOutputType {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `PRERENDER` represents an ISR enabled route that might\n   * have a seeded cache entry or fallback generated during build\n   */\n  PRERENDER = 'PRERENDER',\n\n  /**\n   * `STATIC_FILE` represents a static file (ie /_next/static)\n   */\n  STATIC_FILE = 'STATIC_FILE',\n\n  /**\n   * `MIDDLEWARE` represents the middleware output if present\n   */\n  MIDDLEWARE = 'MIDDLEWARE',\n}\n\nexport const COMPILER_INDEXES: {\n  [compilerKey in CompilerNameValues]: number\n} = {\n  [COMPILER_NAMES.client]: 0,\n  [COMPILER_NAMES.server]: 1,\n  [COMPILER_NAMES.edgeServer]: 2,\n} as const\n\nexport const UNDERSCORE_NOT_FOUND_ROUTE = '/_not-found'\nexport const UNDERSCORE_NOT_FOUND_ROUTE_ENTRY = `${UNDERSCORE_NOT_FOUND_ROUTE}/page`\nexport const PHASE_EXPORT = 'phase-export'\nexport const PHASE_PRODUCTION_BUILD = 'phase-production-build'\nexport const PHASE_PRODUCTION_SERVER = 'phase-production-server'\nexport const PHASE_DEVELOPMENT_SERVER = 'phase-development-server'\nexport const PHASE_TEST = 'phase-test'\nexport const PHASE_INFO = 'phase-info'\nexport const PAGES_MANIFEST = 'pages-manifest.json'\nexport const WEBPACK_STATS = 'webpack-stats.json'\nexport const APP_PATHS_MANIFEST = 'app-paths-manifest.json'\nexport const APP_PATH_ROUTES_MANIFEST = 'app-path-routes-manifest.json'\nexport const BUILD_MANIFEST = 'build-manifest.json'\nexport const APP_BUILD_MANIFEST = 'app-build-manifest.json'\nexport const FUNCTIONS_CONFIG_MANIFEST = 'functions-config-manifest.json'\nexport const SUBRESOURCE_INTEGRITY_MANIFEST = 'subresource-integrity-manifest'\nexport const NEXT_FONT_MANIFEST = 'next-font-manifest'\nexport const EXPORT_MARKER = 'export-marker.json'\nexport const EXPORT_DETAIL = 'export-detail.json'\nexport const PRERENDER_MANIFEST = 'prerender-manifest.json'\nexport const ROUTES_MANIFEST = 'routes-manifest.json'\nexport const IMAGES_MANIFEST = 'images-manifest.json'\nexport const SERVER_FILES_MANIFEST = 'required-server-files.json'\nexport const DEV_CLIENT_PAGES_MANIFEST = '_devPagesManifest.json'\nexport const MIDDLEWARE_MANIFEST = 'middleware-manifest.json'\nexport const TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST =\n  '_clientMiddlewareManifest.json'\nexport const TURBOPACK_CLIENT_BUILD_MANIFEST = 'client-build-manifest.json'\nexport const DEV_CLIENT_MIDDLEWARE_MANIFEST = '_devMiddlewareManifest.json'\nexport const REACT_LOADABLE_MANIFEST = 'react-loadable-manifest.json'\nexport const SERVER_DIRECTORY = 'server'\nexport const CONFIG_FILES = [\n  'next.config.js',\n  'next.config.mjs',\n  'next.config.ts',\n]\nexport const BUILD_ID_FILE = 'BUILD_ID'\nexport const BLOCKED_PAGES = ['/_document', '/_app', '/_error']\nexport const CLIENT_PUBLIC_FILES_PATH = 'public'\nexport const CLIENT_STATIC_FILES_PATH = 'static'\nexport const STRING_LITERAL_DROP_BUNDLE = '__NEXT_DROP_CLIENT_FILE__'\nexport const NEXT_BUILTIN_DOCUMENT = '__NEXT_BUILTIN_DOCUMENT__'\nexport const BARREL_OPTIMIZATION_PREFIX = '__barrel_optimize__'\n\n// server/[entry]/page_client-reference-manifest.js\nexport const CLIENT_REFERENCE_MANIFEST = 'client-reference-manifest'\n// server/server-reference-manifest\nexport const SERVER_REFERENCE_MANIFEST = 'server-reference-manifest'\n// server/middleware-build-manifest.js\nexport const MIDDLEWARE_BUILD_MANIFEST = 'middleware-build-manifest'\n// server/middleware-react-loadable-manifest.js\nexport const MIDDLEWARE_REACT_LOADABLE_MANIFEST =\n  'middleware-react-loadable-manifest'\n// server/interception-route-rewrite-manifest.js\nexport const INTERCEPTION_ROUTE_REWRITE_MANIFEST =\n  'interception-route-rewrite-manifest'\n// server/dynamic-css-manifest.js\nexport const DYNAMIC_CSS_MANIFEST = 'dynamic-css-manifest'\n\n// static/runtime/main.js\nexport const CLIENT_STATIC_FILES_RUNTIME_MAIN = `main`\nexport const CLIENT_STATIC_FILES_RUNTIME_MAIN_APP = `${CLIENT_STATIC_FILES_RUNTIME_MAIN}-app`\n// next internal client components chunk for layouts\nexport const APP_CLIENT_INTERNALS = 'app-pages-internals'\n// static/runtime/react-refresh.js\nexport const CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH = `react-refresh`\n// static/runtime/amp.js\nexport const CLIENT_STATIC_FILES_RUNTIME_AMP = `amp`\n// static/runtime/webpack.js\nexport const CLIENT_STATIC_FILES_RUNTIME_WEBPACK = `webpack`\n// static/runtime/polyfills.js\nexport const CLIENT_STATIC_FILES_RUNTIME_POLYFILLS = 'polyfills'\nexport const CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL = Symbol(\n  CLIENT_STATIC_FILES_RUNTIME_POLYFILLS\n)\nexport const DEFAULT_RUNTIME_WEBPACK = 'webpack-runtime'\nexport const EDGE_RUNTIME_WEBPACK = 'edge-runtime-webpack'\nexport const STATIC_PROPS_ID = '__N_SSG'\nexport const SERVER_PROPS_ID = '__N_SSP'\nexport const DEFAULT_SERIF_FONT = {\n  name: 'Times New Roman',\n  xAvgCharWidth: 821,\n  azAvgWidth: 854.3953488372093,\n  unitsPerEm: 2048,\n}\nexport const DEFAULT_SANS_SERIF_FONT = {\n  name: 'Arial',\n  xAvgCharWidth: 904,\n  azAvgWidth: 934.5116279069767,\n  unitsPerEm: 2048,\n}\nexport const STATIC_STATUS_PAGES = ['/500']\nexport const TRACE_OUTPUT_VERSION = 1\n// in `MB`\nexport const TURBO_TRACE_DEFAULT_MEMORY_LIMIT = 6000\n\nexport const RSC_MODULE_TYPES = {\n  client: 'client',\n  server: 'server',\n} as const\n\n// comparing\n// https://nextjs.org/docs/api-reference/edge-runtime\n// with\n// https://nodejs.org/docs/latest/api/globals.html\nexport const EDGE_UNSUPPORTED_NODE_APIS = [\n  'clearImmediate',\n  'setImmediate',\n  'BroadcastChannel',\n  'ByteLengthQueuingStrategy',\n  'CompressionStream',\n  'CountQueuingStrategy',\n  'DecompressionStream',\n  'DomException',\n  'MessageChannel',\n  'MessageEvent',\n  'MessagePort',\n  'ReadableByteStreamController',\n  'ReadableStreamBYOBRequest',\n  'ReadableStreamDefaultController',\n  'TransformStreamDefaultController',\n  'WritableStreamDefaultController',\n]\n\nexport const SYSTEM_ENTRYPOINTS = new Set<string>([\n  CLIENT_STATIC_FILES_RUNTIME_MAIN,\n  CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH,\n  CLIENT_STATIC_FILES_RUNTIME_AMP,\n  CLIENT_STATIC_FILES_RUNTIME_MAIN_APP,\n])\n","module.exports = require('./dist/shared/lib/constants')\n","//#region src/standard.ts\nfunction ensureSynchronous(value, message) {\n\tif (value instanceof Promise) throw new Error(message);\n}\nfunction parseWithDictionary(dictionary, value) {\n\tconst result = {};\n\tconst issues = [];\n\tfor (const key in dictionary) {\n\t\tconst propResult = dictionary[key][\"~standard\"].validate(value[key]);\n\t\tensureSynchronous(propResult, `Validation must be synchronous, but ${key} returned a Promise.`);\n\t\tif (propResult.issues) {\n\t\t\tissues.push(...propResult.issues.map((issue) => ({\n\t\t\t\t...issue,\n\t\t\t\tmessage: issue.message,\n\t\t\t\tpath: [key, ...issue.path ?? []]\n\t\t\t})));\n\t\t\tcontinue;\n\t\t}\n\t\tresult[key] = propResult.value;\n\t}\n\tif (issues.length) return { issues };\n\treturn { value: result };\n}\n\n//#endregion\n//#region src/index.ts\n/**\n* Create a new environment variable schema.\n*/\nfunction createEnv(opts) {\n\tconst runtimeEnv = opts.runtimeEnvStrict ?? opts.runtimeEnv ?? process.env;\n\tconst emptyStringAsUndefined = opts.emptyStringAsUndefined ?? false;\n\tif (emptyStringAsUndefined) {\n\t\tfor (const [key, value] of Object.entries(runtimeEnv)) if (value === \"\") delete runtimeEnv[key];\n\t}\n\tconst skip = !!opts.skipValidation;\n\tif (skip) return runtimeEnv;\n\tconst _client = typeof opts.client === \"object\" ? opts.client : {};\n\tconst _server = typeof opts.server === \"object\" ? opts.server : {};\n\tconst _shared = typeof opts.shared === \"object\" ? opts.shared : {};\n\tconst isServer = opts.isServer ?? (typeof window === \"undefined\" || \"Deno\" in window);\n\tconst finalSchemaShape = isServer ? {\n\t\t..._server,\n\t\t..._shared,\n\t\t..._client\n\t} : {\n\t\t..._client,\n\t\t..._shared\n\t};\n\tconst parsed = opts.createFinalSchema?.(finalSchemaShape, isServer)[\"~standard\"].validate(runtimeEnv) ?? parseWithDictionary(finalSchemaShape, runtimeEnv);\n\tensureSynchronous(parsed, \"Validation must be synchronous\");\n\tconst onValidationError = opts.onValidationError ?? ((issues) => {\n\t\tconsole.error(\"❌ Invalid environment variables:\", issues);\n\t\tthrow new Error(\"Invalid environment variables\");\n\t});\n\tconst onInvalidAccess = opts.onInvalidAccess ?? (() => {\n\t\tthrow new Error(\"❌ Attempted to access a server-side environment variable on the client\");\n\t});\n\tif (parsed.issues) return onValidationError(parsed.issues);\n\tconst isServerAccess = (prop) => {\n\t\tif (!opts.clientPrefix) return true;\n\t\treturn !prop.startsWith(opts.clientPrefix) && !(prop in _shared);\n\t};\n\tconst isValidServerAccess = (prop) => {\n\t\treturn isServer || !isServerAccess(prop);\n\t};\n\tconst ignoreProp = (prop) => {\n\t\treturn prop === \"__esModule\" || prop === \"$$typeof\";\n\t};\n\tconst extendedObj = (opts.extends ?? []).reduce((acc, curr) => {\n\t\treturn Object.assign(acc, curr);\n\t}, {});\n\tconst fullObj = Object.assign(extendedObj, parsed.value);\n\tconst env = new Proxy(fullObj, { get(target, prop) {\n\t\tif (typeof prop !== \"string\") return void 0;\n\t\tif (ignoreProp(prop)) return void 0;\n\t\tif (!isValidServerAccess(prop)) return onInvalidAccess(prop);\n\t\treturn Reflect.get(target, prop);\n\t} });\n\treturn env;\n}\n\n//#endregion\nexport { createEnv };","export const DEFAULT_ENVIRONMENT = 'production';\n","export const cuid = /^[cC][^\\s-]{8,}$/;\nexport const cuid2 = /^[0-9a-z]+$/;\nexport const ulid = /^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/;\nexport const xid = /^[0-9a-vA-V]{20}$/;\nexport const ksuid = /^[A-Za-z0-9]{27}$/;\nexport const nanoid = /^[a-zA-Z0-9_-]{21}$/;\n/** ISO 8601-1 duration regex. Does not support the 8601-2 extensions like negative durations or fractional/negative components. */\nexport const duration = /^P(?:(\\d+W)|(?!.*W)(?=\\d|T\\d)(\\d+Y)?(\\d+M)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+([.,]\\d+)?S)?)?)$/;\n/** Implements ISO 8601-2 extensions like explicit +- prefixes, mixing weeks with other units, and fractional/negative components. */\nexport const extendedDuration = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n/** A regex for any UUID-like identifier: 8-4-4-4-12 hex pattern */\nexport const guid = /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/;\n/** Returns a regex for validating an RFC 9562/4122 UUID.\n *\n * @param version Optionally specify a version 1-8. If no version is specified, all versions are supported. */\nexport const uuid = (version) => {\n    if (!version)\n        return /^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/;\n    return new RegExp(`^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${version}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`);\n};\nexport const uuid4 = /*@__PURE__*/ uuid(4);\nexport const uuid6 = /*@__PURE__*/ uuid(6);\nexport const uuid7 = /*@__PURE__*/ uuid(7);\n/** Practical email validation */\nexport const email = /^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$/;\n/** Equivalent to the HTML5 input[type=email] validation implemented by browsers. Source: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email */\nexport const html5Email = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/** The classic emailregex.com regex for RFC 5322-compliant emails */\nexport const rfc5322Email = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n/** A loose regex that allows Unicode characters, enforces length limits, and that's about it. */\nexport const unicodeEmail = /^[^\\s@\"]{1,64}@[^\\s@]{1,255}$/u;\nexport const idnEmail = /^[^\\s@\"]{1,64}@[^\\s@]{1,255}$/u;\nexport const browserEmail = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emoji = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nexport function emoji() {\n    return new RegExp(_emoji, \"u\");\n}\nexport const ipv4 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nexport const ipv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})$/;\nexport const cidrv4 = /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/([0-9]|[1-2][0-9]|3[0-2])$/;\nexport const cidrv6 = /^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nexport const base64 = /^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/;\nexport const base64url = /^[A-Za-z0-9_-]*$/;\n// based on https://stackoverflow.com/questions/106179/regular-expression-to-match-dns-hostname-or-ip-address\n// export const hostname: RegExp = /^([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+$/;\nexport const hostname = /^(?=.{1,253}\\.?$)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[-0-9a-zA-Z]{0,61}[0-9a-zA-Z])?)*\\.?$/;\nexport const domain = /^([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$/;\n// https://blog.stevenlevithan.com/archives/validate-phone-number#r4-3 (regex sans spaces)\nexport const e164 = /^\\+(?:[0-9]){6,14}[0-9]$/;\n// const dateSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateSource = `(?:(?:\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\\\d|30)|(?:02)-(?:0[1-9]|1\\\\d|2[0-8])))`;\nexport const date = /*@__PURE__*/ new RegExp(`^${dateSource}$`);\nfunction timeSource(args) {\n    const hhmm = `(?:[01]\\\\d|2[0-3]):[0-5]\\\\d`;\n    const regex = typeof args.precision === \"number\"\n        ? args.precision === -1\n            ? `${hhmm}`\n            : args.precision === 0\n                ? `${hhmm}:[0-5]\\\\d`\n                : `${hhmm}:[0-5]\\\\d\\\\.\\\\d{${args.precision}}`\n        : `${hhmm}(?::[0-5]\\\\d(?:\\\\.\\\\d+)?)?`;\n    return regex;\n}\nexport function time(args) {\n    return new RegExp(`^${timeSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nexport function datetime(args) {\n    const time = timeSource({ precision: args.precision });\n    const opts = [\"Z\"];\n    if (args.local)\n        opts.push(\"\");\n    // if (args.offset) opts.push(`([+-]\\\\d{2}:\\\\d{2})`);\n    if (args.offset)\n        opts.push(`([+-](?:[01]\\\\d|2[0-3]):[0-5]\\\\d)`);\n    const timeRegex = `${time}(?:${opts.join(\"|\")})`;\n    return new RegExp(`^${dateSource}T(?:${timeRegex})$`);\n}\nexport const string = (params) => {\n    const regex = params ? `[\\\\s\\\\S]{${params?.minimum ?? 0},${params?.maximum ?? \"\"}}` : `[\\\\s\\\\S]*`;\n    return new RegExp(`^${regex}$`);\n};\nexport const bigint = /^\\d+n?$/;\nexport const integer = /^\\d+$/;\nexport const number = /^-?\\d+(?:\\.\\d+)?/i;\nexport const boolean = /true|false/i;\nconst _null = /null/i;\nexport { _null as null };\nconst _undefined = /undefined/i;\nexport { _undefined as undefined };\n// regex for string with no uppercase letters\nexport const lowercase = /^[^A-Z]*$/;\n// regex for string with no lowercase letters\nexport const uppercase = /^[^a-z]*$/;\n// regex for hexadecimal strings (any length)\nexport const hex = /^[0-9a-fA-F]*$/;\n// Hash regexes for different algorithms and encodings\n// Helper function to create base64 regex with exact length and padding\nfunction fixedBase64(bodyLength, padding) {\n    return new RegExp(`^[A-Za-z0-9+/]{${bodyLength}}${padding}$`);\n}\n// Helper function to create base64url regex with exact length (no padding)\nfunction fixedBase64url(length) {\n    return new RegExp(`^[A-Za-z0-9-_]{${length}}$`);\n}\n// MD5 (16 bytes): base64 = 24 chars total (22 + \"==\")\nexport const md5_hex = /^[0-9a-fA-F]{32}$/;\nexport const md5_base64 = /*@__PURE__*/ fixedBase64(22, \"==\");\nexport const md5_base64url = /*@__PURE__*/ fixedBase64url(22);\n// SHA1 (20 bytes): base64 = 28 chars total (27 + \"=\")\nexport const sha1_hex = /^[0-9a-fA-F]{40}$/;\nexport const sha1_base64 = /*@__PURE__*/ fixedBase64(27, \"=\");\nexport const sha1_base64url = /*@__PURE__*/ fixedBase64url(27);\n// SHA256 (32 bytes): base64 = 44 chars total (43 + \"=\")\nexport const sha256_hex = /^[0-9a-fA-F]{64}$/;\nexport const sha256_base64 = /*@__PURE__*/ fixedBase64(43, \"=\");\nexport const sha256_base64url = /*@__PURE__*/ fixedBase64url(43);\n// SHA384 (48 bytes): base64 = 64 chars total (no padding)\nexport const sha384_hex = /^[0-9a-fA-F]{96}$/;\nexport const sha384_base64 = /*@__PURE__*/ fixedBase64(64, \"\");\nexport const sha384_base64url = /*@__PURE__*/ fixedBase64url(64);\n// SHA512 (64 bytes): base64 = 88 chars total (86 + \"==\")\nexport const sha512_hex = /^[0-9a-fA-F]{128}$/;\nexport const sha512_base64 = /*@__PURE__*/ fixedBase64(86, \"==\");\nexport const sha512_base64url = /*@__PURE__*/ fixedBase64url(86);\n","export class Doc {\n    constructor(args = []) {\n        this.content = [];\n        this.indent = 0;\n        if (this)\n            this.args = args;\n    }\n    indented(fn) {\n        this.indent += 1;\n        fn(this);\n        this.indent -= 1;\n    }\n    write(arg) {\n        if (typeof arg === \"function\") {\n            arg(this, { execution: \"sync\" });\n            arg(this, { execution: \"async\" });\n            return;\n        }\n        const content = arg;\n        const lines = content.split(\"\\n\").filter((x) => x);\n        const minIndent = Math.min(...lines.map((x) => x.length - x.trimStart().length));\n        const dedented = lines.map((x) => x.slice(minIndent)).map((x) => \" \".repeat(this.indent * 2) + x);\n        for (const line of dedented) {\n            this.content.push(line);\n        }\n    }\n    compile() {\n        const F = Function;\n        const args = this?.args;\n        const content = this?.content ?? [``];\n        const lines = [...content.map((x) => `  ${x}`)];\n        // console.log(lines.join(\"\\n\"));\n        return new F(...args, lines.join(\"\\n\"));\n    }\n}\n","export const version = {\n    major: 4,\n    minor: 1,\n    patch: 5,\n};\n","export const $output = Symbol(\"ZodOutput\");\nexport const $input = Symbol(\"ZodInput\");\nexport class $ZodRegistry {\n    constructor() {\n        this._map = new Map();\n        this._idmap = new Map();\n    }\n    add(schema, ..._meta) {\n        const meta = _meta[0];\n        this._map.set(schema, meta);\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\n            if (this._idmap.has(meta.id)) {\n                throw new Error(`ID ${meta.id} already exists in the registry`);\n            }\n            this._idmap.set(meta.id, schema);\n        }\n        return this;\n    }\n    clear() {\n        this._map = new Map();\n        this._idmap = new Map();\n        return this;\n    }\n    remove(schema) {\n        const meta = this._map.get(schema);\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\n            this._idmap.delete(meta.id);\n        }\n        this._map.delete(schema);\n        return this;\n    }\n    get(schema) {\n        // return this._map.get(schema) as any;\n        // inherit metadata\n        const p = schema._zod.parent;\n        if (p) {\n            const pm = { ...(this.get(p) ?? {}) };\n            delete pm.id; // do not inherit id\n            const f = { ...pm, ...this._map.get(schema) };\n            return Object.keys(f).length ? f : undefined;\n        }\n        return this._map.get(schema);\n    }\n    has(schema) {\n        return this._map.has(schema);\n    }\n}\n// registries\nexport function registry() {\n    return new $ZodRegistry();\n}\nexport const globalRegistry = /*@__PURE__*/ registry();\n","import type { Span } from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\n\nexport const SPAN_STATUS_UNSET = 0;\nexport const SPAN_STATUS_OK = 1;\nexport const SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nexport function getSpanStatusFromHttpCode(httpStatus: number): SpanStatus {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return { code: SPAN_STATUS_OK };\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return { code: SPAN_STATUS_ERROR, message: 'unauthenticated' };\n      case 403:\n        return { code: SPAN_STATUS_ERROR, message: 'permission_denied' };\n      case 404:\n        return { code: SPAN_STATUS_ERROR, message: 'not_found' };\n      case 409:\n        return { code: SPAN_STATUS_ERROR, message: 'already_exists' };\n      case 413:\n        return { code: SPAN_STATUS_ERROR, message: 'failed_precondition' };\n      case 429:\n        return { code: SPAN_STATUS_ERROR, message: 'resource_exhausted' };\n      case 499:\n        return { code: SPAN_STATUS_ERROR, message: 'cancelled' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'invalid_argument' };\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return { code: SPAN_STATUS_ERROR, message: 'unimplemented' };\n      case 503:\n        return { code: SPAN_STATUS_ERROR, message: 'unavailable' };\n      case 504:\n        return { code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'internal_error' };\n    }\n  }\n\n  return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nexport function setHttpStatus(span: Span, httpStatus: number): void {\n  span.setAttribute('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n","import type { Event } from '../types-hoist/event';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { StackLineParser, StackParser } from '../types-hoist/stacktrace';\n\nconst STACKTRACE_FRAME_LIMIT = 50;\nexport const UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirstLines: number = 0, framesToPop: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      let line = lines[i] as string;\n      // Truncate lines over 1kb because many of the regular expressions use\n      // backtracking which results in run time that increases exponentially\n      // with input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        line = line.slice(0, 1024);\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames.slice(framesToPop));\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the scope itself, making it:\n    //\n    //   Sentry.captureException()\n    //   scope.captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION,\n  }));\n}\n\nfunction getLastStackFrame(arr: StackFrame[]): StackFrame {\n  return arr[arr.length - 1] || {};\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */\nexport function getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    const frames: StackFrame[] = [];\n    try {\n      // @ts-expect-error Object could be undefined\n      exception.values.forEach(value => {\n        // @ts-expect-error Value could be undefined\n        if (value.stacktrace.frames) {\n          // @ts-expect-error Value could be undefined\n          frames.push(...value.stacktrace.frames);\n        }\n      });\n      return frames;\n    } catch {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"ký tự\", verb: \"có\" },\n        file: { unit: \"byte\", verb: \"có\" },\n        array: { unit: \"phần tử\", verb: \"có\" },\n        set: { unit: \"phần tử\", verb: \"có\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"số\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"mảng\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"đầu vào\",\n        email: \"địa chỉ email\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ngày giờ ISO\",\n        date: \"ngày ISO\",\n        time: \"giờ ISO\",\n        duration: \"khoảng thời gian ISO\",\n        ipv4: \"địa chỉ IPv4\",\n        ipv6: \"địa chỉ IPv6\",\n        cidrv4: \"dải IPv4\",\n        cidrv6: \"dải IPv6\",\n        base64: \"chuỗi mã hóa base64\",\n        base64url: \"chuỗi mã hóa base64url\",\n        json_string: \"chuỗi JSON\",\n        e164: \"số E.164\",\n        jwt: \"JWT\",\n        template_literal: \"đầu vào\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Đầu vào không hợp lệ: mong đợi ${issue.expected}, nhận được ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Đầu vào không hợp lệ: mong đợi ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Tùy chọn không hợp lệ: mong đợi một trong các giá trị ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Quá lớn: mong đợi ${issue.origin ?? \"giá trị\"} ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"phần tử\"}`;\n                return `Quá lớn: mong đợi ${issue.origin ?? \"giá trị\"} ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Quá nhỏ: mong đợi ${issue.origin} ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Quá nhỏ: mong đợi ${issue.origin} ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Chuỗi không hợp lệ: phải bắt đầu bằng \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Chuỗi không hợp lệ: phải kết thúc bằng \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Chuỗi không hợp lệ: phải bao gồm \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Chuỗi không hợp lệ: phải khớp với mẫu ${_issue.pattern}`;\n                return `${Nouns[_issue.format] ?? issue.format} không hợp lệ`;\n            }\n            case \"not_multiple_of\":\n                return `Số không hợp lệ: phải là bội số của ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Khóa không được nhận dạng: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Khóa không hợp lệ trong ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Đầu vào không hợp lệ\";\n            case \"invalid_element\":\n                return `Giá trị không hợp lệ trong ${issue.origin}`;\n            default:\n                return `Đầu vào không hợp lệ`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"حرف\", verb: \"أن يحوي\" },\n        file: { unit: \"بايت\", verb: \"أن يحوي\" },\n        array: { unit: \"عنصر\", verb: \"أن يحوي\" },\n        set: { unit: \"عنصر\", verb: \"أن يحوي\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"مدخل\",\n        email: \"بريد إلكتروني\",\n        url: \"رابط\",\n        emoji: \"إيموجي\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"تاريخ ووقت بمعيار ISO\",\n        date: \"تاريخ بمعيار ISO\",\n        time: \"وقت بمعيار ISO\",\n        duration: \"مدة بمعيار ISO\",\n        ipv4: \"عنوان IPv4\",\n        ipv6: \"عنوان IPv6\",\n        cidrv4: \"مدى عناوين بصيغة IPv4\",\n        cidrv6: \"مدى عناوين بصيغة IPv6\",\n        base64: \"نَص بترميز base64-encoded\",\n        base64url: \"نَص بترميز base64url-encoded\",\n        json_string: \"نَص على هيئة JSON\",\n        e164: \"رقم هاتف بمعيار E.164\",\n        jwt: \"JWT\",\n        template_literal: \"مدخل\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `مدخلات غير مقبولة: يفترض إدخال ${issue.expected}، ولكن تم إدخال ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `مدخلات غير مقبولة: يفترض إدخال ${util.stringifyPrimitive(issue.values[0])}`;\n                return `اختيار غير مقبول: يتوقع انتقاء أحد هذه الخيارات: ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return ` أكبر من اللازم: يفترض أن تكون ${issue.origin ?? \"القيمة\"} ${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"عنصر\"}`;\n                return `أكبر من اللازم: يفترض أن تكون ${issue.origin ?? \"القيمة\"} ${adj} ${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `أصغر من اللازم: يفترض لـ ${issue.origin} أن يكون ${adj} ${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `أصغر من اللازم: يفترض لـ ${issue.origin} أن يكون ${adj} ${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `نَص غير مقبول: يجب أن يبدأ بـ \"${issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `نَص غير مقبول: يجب أن ينتهي بـ \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `نَص غير مقبول: يجب أن يتضمَّن \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `نَص غير مقبول: يجب أن يطابق النمط ${_issue.pattern}`;\n                return `${Nouns[_issue.format] ?? issue.format} غير مقبول`;\n            }\n            case \"not_multiple_of\":\n                return `رقم غير مقبول: يجب أن يكون من مضاعفات ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `معرف${issue.keys.length > 1 ? \"ات\" : \"\"} غريب${issue.keys.length > 1 ? \"ة\" : \"\"}: ${util.joinValues(issue.keys, \"، \")}`;\n            case \"invalid_key\":\n                return `معرف غير مقبول في ${issue.origin}`;\n            case \"invalid_union\":\n                return \"مدخل غير مقبول\";\n            case \"invalid_element\":\n                return `مدخل غير مقبول في ${issue.origin}`;\n            default:\n                return \"مدخل غير مقبول\";\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"simvol\", verb: \"olmalıdır\" },\n        file: { unit: \"bayt\", verb: \"olmalıdır\" },\n        array: { unit: \"element\", verb: \"olmalıdır\" },\n        set: { unit: \"element\", verb: \"olmalıdır\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"input\",\n        email: \"email address\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO datetime\",\n        date: \"ISO date\",\n        time: \"ISO time\",\n        duration: \"ISO duration\",\n        ipv4: \"IPv4 address\",\n        ipv6: \"IPv6 address\",\n        cidrv4: \"IPv4 range\",\n        cidrv6: \"IPv6 range\",\n        base64: \"base64-encoded string\",\n        base64url: \"base64url-encoded string\",\n        json_string: \"JSON string\",\n        e164: \"E.164 number\",\n        jwt: \"JWT\",\n        template_literal: \"input\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Yanlış dəyər: gözlənilən ${issue.expected}, daxil olan ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Yanlış dəyər: gözlənilən ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Yanlış seçim: aşağıdakılardan biri olmalıdır: ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Çox böyük: gözlənilən ${issue.origin ?? \"dəyər\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"element\"}`;\n                return `Çox böyük: gözlənilən ${issue.origin ?? \"dəyər\"} ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Çox kiçik: gözlənilən ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                return `Çox kiçik: gözlənilən ${issue.origin} ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Yanlış mətn: \"${_issue.prefix}\" ilə başlamalıdır`;\n                if (_issue.format === \"ends_with\")\n                    return `Yanlış mətn: \"${_issue.suffix}\" ilə bitməlidir`;\n                if (_issue.format === \"includes\")\n                    return `Yanlış mətn: \"${_issue.includes}\" daxil olmalıdır`;\n                if (_issue.format === \"regex\")\n                    return `Yanlış mətn: ${_issue.pattern} şablonuna uyğun olmalıdır`;\n                return `Yanlış ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Yanlış ədəd: ${issue.divisor} ilə bölünə bilən olmalıdır`;\n            case \"unrecognized_keys\":\n                return `Tanınmayan açar${issue.keys.length > 1 ? \"lar\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `${issue.origin} daxilində yanlış açar`;\n            case \"invalid_union\":\n                return \"Yanlış dəyər\";\n            case \"invalid_element\":\n                return `${issue.origin} daxilində yanlış dəyər`;\n            default:\n                return `Yanlış dəyər`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nfunction getBelarusianPlural(count, one, few, many) {\n    const absCount = Math.abs(count);\n    const lastDigit = absCount % 10;\n    const lastTwoDigits = absCount % 100;\n    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {\n        return many;\n    }\n    if (lastDigit === 1) {\n        return one;\n    }\n    if (lastDigit >= 2 && lastDigit <= 4) {\n        return few;\n    }\n    return many;\n}\nconst error = () => {\n    const Sizable = {\n        string: {\n            unit: {\n                one: \"сімвал\",\n                few: \"сімвалы\",\n                many: \"сімвалаў\",\n            },\n            verb: \"мець\",\n        },\n        array: {\n            unit: {\n                one: \"элемент\",\n                few: \"элементы\",\n                many: \"элементаў\",\n            },\n            verb: \"мець\",\n        },\n        set: {\n            unit: {\n                one: \"элемент\",\n                few: \"элементы\",\n                many: \"элементаў\",\n            },\n            verb: \"мець\",\n        },\n        file: {\n            unit: {\n                one: \"байт\",\n                few: \"байты\",\n                many: \"байтаў\",\n            },\n            verb: \"мець\",\n        },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"лік\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"масіў\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"увод\",\n        email: \"email адрас\",\n        url: \"URL\",\n        emoji: \"эмодзі\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO дата і час\",\n        date: \"ISO дата\",\n        time: \"ISO час\",\n        duration: \"ISO працягласць\",\n        ipv4: \"IPv4 адрас\",\n        ipv6: \"IPv6 адрас\",\n        cidrv4: \"IPv4 дыяпазон\",\n        cidrv6: \"IPv6 дыяпазон\",\n        base64: \"радок у фармаце base64\",\n        base64url: \"радок у фармаце base64url\",\n        json_string: \"JSON радок\",\n        e164: \"нумар E.164\",\n        jwt: \"JWT\",\n        template_literal: \"увод\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Няправільны ўвод: чакаўся ${issue.expected}, атрымана ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Няправільны ўвод: чакалася ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Няправільны варыянт: чакаўся адзін з ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    const maxValue = Number(issue.maximum);\n                    const unit = getBelarusianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n                    return `Занадта вялікі: чакалася, што ${issue.origin ?? \"значэнне\"} павінна ${sizing.verb} ${adj}${issue.maximum.toString()} ${unit}`;\n                }\n                return `Занадта вялікі: чакалася, што ${issue.origin ?? \"значэнне\"} павінна быць ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    const minValue = Number(issue.minimum);\n                    const unit = getBelarusianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n                    return `Занадта малы: чакалася, што ${issue.origin} павінна ${sizing.verb} ${adj}${issue.minimum.toString()} ${unit}`;\n                }\n                return `Занадта малы: чакалася, што ${issue.origin} павінна быць ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Няправільны радок: павінен пачынацца з \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Няправільны радок: павінен заканчвацца на \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Няправільны радок: павінен змяшчаць \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Няправільны радок: павінен адпавядаць шаблону ${_issue.pattern}`;\n                return `Няправільны ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Няправільны лік: павінен быць кратным ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Нераспазнаны ${issue.keys.length > 1 ? \"ключы\" : \"ключ\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Няправільны ключ у ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Няправільны ўвод\";\n            case \"invalid_element\":\n                return `Няправільнае значэнне ў ${issue.origin}`;\n            default:\n                return `Няправільны ўвод`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"caràcters\", verb: \"contenir\" },\n        file: { unit: \"bytes\", verb: \"contenir\" },\n        array: { unit: \"elements\", verb: \"contenir\" },\n        set: { unit: \"elements\", verb: \"contenir\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"entrada\",\n        email: \"adreça electrònica\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"data i hora ISO\",\n        date: \"data ISO\",\n        time: \"hora ISO\",\n        duration: \"durada ISO\",\n        ipv4: \"adreça IPv4\",\n        ipv6: \"adreça IPv6\",\n        cidrv4: \"rang IPv4\",\n        cidrv6: \"rang IPv6\",\n        base64: \"cadena codificada en base64\",\n        base64url: \"cadena codificada en base64url\",\n        json_string: \"cadena JSON\",\n        e164: \"número E.164\",\n        jwt: \"JWT\",\n        template_literal: \"entrada\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Tipus invàlid: s'esperava ${issue.expected}, s'ha rebut ${parsedType(issue.input)}`;\n            // return `Tipus invàlid: s'esperava ${issue.expected}, s'ha rebut ${util.getParsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Valor invàlid: s'esperava ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Opció invàlida: s'esperava una de ${util.joinValues(issue.values, \" o \")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"com a màxim\" : \"menys de\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Massa gran: s'esperava que ${issue.origin ?? \"el valor\"} contingués ${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"elements\"}`;\n                return `Massa gran: s'esperava que ${issue.origin ?? \"el valor\"} fos ${adj} ${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \"com a mínim\" : \"més de\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Massa petit: s'esperava que ${issue.origin} contingués ${adj} ${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Massa petit: s'esperava que ${issue.origin} fos ${adj} ${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Format invàlid: ha de començar amb \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Format invàlid: ha d'acabar amb \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Format invàlid: ha d'incloure \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Format invàlid: ha de coincidir amb el patró ${_issue.pattern}`;\n                return `Format invàlid per a ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Número invàlid: ha de ser múltiple de ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Clau${issue.keys.length > 1 ? \"s\" : \"\"} no reconeguda${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Clau invàlida a ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Entrada invàlida\"; // Could also be \"Tipus d'unió invàlid\" but \"Entrada invàlida\" is more general\n            case \"invalid_element\":\n                return `Element invàlid a ${issue.origin}`;\n            default:\n                return `Entrada invàlida`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"znaků\", verb: \"mít\" },\n        file: { unit: \"bajtů\", verb: \"mít\" },\n        array: { unit: \"prvků\", verb: \"mít\" },\n        set: { unit: \"prvků\", verb: \"mít\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"číslo\";\n            }\n            case \"string\": {\n                return \"řetězec\";\n            }\n            case \"boolean\": {\n                return \"boolean\";\n            }\n            case \"bigint\": {\n                return \"bigint\";\n            }\n            case \"function\": {\n                return \"funkce\";\n            }\n            case \"symbol\": {\n                return \"symbol\";\n            }\n            case \"undefined\": {\n                return \"undefined\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"pole\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"regulární výraz\",\n        email: \"e-mailová adresa\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"datum a čas ve formátu ISO\",\n        date: \"datum ve formátu ISO\",\n        time: \"čas ve formátu ISO\",\n        duration: \"doba trvání ISO\",\n        ipv4: \"IPv4 adresa\",\n        ipv6: \"IPv6 adresa\",\n        cidrv4: \"rozsah IPv4\",\n        cidrv6: \"rozsah IPv6\",\n        base64: \"řetězec zakódovaný ve formátu base64\",\n        base64url: \"řetězec zakódovaný ve formátu base64url\",\n        json_string: \"řetězec ve formátu JSON\",\n        e164: \"číslo E.164\",\n        jwt: \"JWT\",\n        template_literal: \"vstup\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Neplatný vstup: očekáváno ${issue.expected}, obdrženo ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Neplatný vstup: očekáváno ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Neplatná možnost: očekávána jedna z hodnot ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Hodnota je příliš velká: ${issue.origin ?? \"hodnota\"} musí mít ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"prvků\"}`;\n                }\n                return `Hodnota je příliš velká: ${issue.origin ?? \"hodnota\"} musí být ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Hodnota je příliš malá: ${issue.origin ?? \"hodnota\"} musí mít ${adj}${issue.minimum.toString()} ${sizing.unit ?? \"prvků\"}`;\n                }\n                return `Hodnota je příliš malá: ${issue.origin ?? \"hodnota\"} musí být ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Neplatný řetězec: musí začínat na \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Neplatný řetězec: musí končit na \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Neplatný řetězec: musí obsahovat \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Neplatný řetězec: musí odpovídat vzoru ${_issue.pattern}`;\n                return `Neplatný formát ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Neplatné číslo: musí být násobkem ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Neznámé klíče: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Neplatný klíč v ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Neplatný vstup\";\n            case \"invalid_element\":\n                return `Neplatná hodnota v ${issue.origin}`;\n            default:\n                return `Neplatný vstup`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"tegn\", verb: \"havde\" },\n        file: { unit: \"bytes\", verb: \"havde\" },\n        array: { unit: \"elementer\", verb: \"indeholdt\" },\n        set: { unit: \"elementer\", verb: \"indeholdt\" },\n    };\n    const TypeNames = {\n        string: \"streng\",\n        number: \"tal\",\n        boolean: \"boolean\",\n        array: \"liste\",\n        object: \"objekt\",\n        set: \"sæt\",\n        file: \"fil\",\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    function getTypeName(type) {\n        return TypeNames[type] ?? type;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"tal\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"liste\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n                return \"objekt\";\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"input\",\n        email: \"e-mailadresse\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO dato- og klokkeslæt\",\n        date: \"ISO-dato\",\n        time: \"ISO-klokkeslæt\",\n        duration: \"ISO-varighed\",\n        ipv4: \"IPv4-område\",\n        ipv6: \"IPv6-område\",\n        cidrv4: \"IPv4-spektrum\",\n        cidrv6: \"IPv6-spektrum\",\n        base64: \"base64-kodet streng\",\n        base64url: \"base64url-kodet streng\",\n        json_string: \"JSON-streng\",\n        e164: \"E.164-nummer\",\n        jwt: \"JWT\",\n        template_literal: \"input\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Ugyldigt input: forventede ${getTypeName(issue.expected)}, fik ${getTypeName(parsedType(issue.input))}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Ugyldig værdi: forventede ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Ugyldigt valg: forventede en af følgende ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                const origin = getTypeName(issue.origin);\n                if (sizing)\n                    return `For stor: forventede ${origin ?? \"value\"} ${sizing.verb} ${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"elementer\"}`;\n                return `For stor: forventede ${origin ?? \"value\"} havde ${adj} ${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                const origin = getTypeName(issue.origin);\n                if (sizing) {\n                    return `For lille: forventede ${origin} ${sizing.verb} ${adj} ${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `For lille: forventede ${origin} havde ${adj} ${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Ugyldig streng: skal starte med \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Ugyldig streng: skal ende med \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Ugyldig streng: skal indeholde \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Ugyldig streng: skal matche mønsteret ${_issue.pattern}`;\n                return `Ugyldig ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Ugyldigt tal: skal være deleligt med ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `${issue.keys.length > 1 ? \"Ukendte nøgler\" : \"Ukendt nøgle\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Ugyldig nøgle i ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Ugyldigt input: matcher ingen af de tilladte typer\";\n            case \"invalid_element\":\n                return `Ugyldig værdi i ${issue.origin}`;\n            default:\n                return `Ugyldigt input`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"Zeichen\", verb: \"zu haben\" },\n        file: { unit: \"Bytes\", verb: \"zu haben\" },\n        array: { unit: \"Elemente\", verb: \"zu haben\" },\n        set: { unit: \"Elemente\", verb: \"zu haben\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"Zahl\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"Array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"Eingabe\",\n        email: \"E-Mail-Adresse\",\n        url: \"URL\",\n        emoji: \"Emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO-Datum und -Uhrzeit\",\n        date: \"ISO-Datum\",\n        time: \"ISO-Uhrzeit\",\n        duration: \"ISO-Dauer\",\n        ipv4: \"IPv4-Adresse\",\n        ipv6: \"IPv6-Adresse\",\n        cidrv4: \"IPv4-Bereich\",\n        cidrv6: \"IPv6-Bereich\",\n        base64: \"Base64-codierter String\",\n        base64url: \"Base64-URL-codierter String\",\n        json_string: \"JSON-String\",\n        e164: \"E.164-Nummer\",\n        jwt: \"JWT\",\n        template_literal: \"Eingabe\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Ungültige Eingabe: erwartet ${issue.expected}, erhalten ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Ungültige Eingabe: erwartet ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Ungültige Option: erwartet eine von ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Zu groß: erwartet, dass ${issue.origin ?? \"Wert\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"Elemente\"} hat`;\n                return `Zu groß: erwartet, dass ${issue.origin ?? \"Wert\"} ${adj}${issue.maximum.toString()} ist`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Zu klein: erwartet, dass ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit} hat`;\n                }\n                return `Zu klein: erwartet, dass ${issue.origin} ${adj}${issue.minimum.toString()} ist`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Ungültiger String: muss mit \"${_issue.prefix}\" beginnen`;\n                if (_issue.format === \"ends_with\")\n                    return `Ungültiger String: muss mit \"${_issue.suffix}\" enden`;\n                if (_issue.format === \"includes\")\n                    return `Ungültiger String: muss \"${_issue.includes}\" enthalten`;\n                if (_issue.format === \"regex\")\n                    return `Ungültiger String: muss dem Muster ${_issue.pattern} entsprechen`;\n                return `Ungültig: ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Ungültige Zahl: muss ein Vielfaches von ${issue.divisor} sein`;\n            case \"unrecognized_keys\":\n                return `${issue.keys.length > 1 ? \"Unbekannte Schlüssel\" : \"Unbekannter Schlüssel\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Ungültiger Schlüssel in ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Ungültige Eingabe\";\n            case \"invalid_element\":\n                return `Ungültiger Wert in ${issue.origin}`;\n            default:\n                return `Ungültige Eingabe`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"caracteres\", verb: \"tener\" },\n        file: { unit: \"bytes\", verb: \"tener\" },\n        array: { unit: \"elementos\", verb: \"tener\" },\n        set: { unit: \"elementos\", verb: \"tener\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"número\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"arreglo\";\n                }\n                if (data === null) {\n                    return \"nulo\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"entrada\",\n        email: \"dirección de correo electrónico\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"fecha y hora ISO\",\n        date: \"fecha ISO\",\n        time: \"hora ISO\",\n        duration: \"duración ISO\",\n        ipv4: \"dirección IPv4\",\n        ipv6: \"dirección IPv6\",\n        cidrv4: \"rango IPv4\",\n        cidrv6: \"rango IPv6\",\n        base64: \"cadena codificada en base64\",\n        base64url: \"URL codificada en base64\",\n        json_string: \"cadena JSON\",\n        e164: \"número E.164\",\n        jwt: \"JWT\",\n        template_literal: \"entrada\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Entrada inválida: se esperaba ${issue.expected}, recibido ${parsedType(issue.input)}`;\n            // return `Entrada inválida: se esperaba ${issue.expected}, recibido ${util.getParsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Entrada inválida: se esperaba ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Opción inválida: se esperaba una de ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Demasiado grande: se esperaba que ${issue.origin ?? \"valor\"} tuviera ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementos\"}`;\n                return `Demasiado grande: se esperaba que ${issue.origin ?? \"valor\"} fuera ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Demasiado pequeño: se esperaba que ${issue.origin} tuviera ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Demasiado pequeño: se esperaba que ${issue.origin} fuera ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Cadena inválida: debe comenzar con \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Cadena inválida: debe terminar en \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Cadena inválida: debe incluir \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Cadena inválida: debe coincidir con el patrón ${_issue.pattern}`;\n                return `Inválido ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Número inválido: debe ser múltiplo de ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Llave${issue.keys.length > 1 ? \"s\" : \"\"} desconocida${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Llave inválida en ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Entrada inválida\";\n            case \"invalid_element\":\n                return `Valor inválido en ${issue.origin}`;\n            default:\n                return `Entrada inválida`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"کاراکتر\", verb: \"داشته باشد\" },\n        file: { unit: \"بایت\", verb: \"داشته باشد\" },\n        array: { unit: \"آیتم\", verb: \"داشته باشد\" },\n        set: { unit: \"آیتم\", verb: \"داشته باشد\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"عدد\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"آرایه\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"ورودی\",\n        email: \"آدرس ایمیل\",\n        url: \"URL\",\n        emoji: \"ایموجی\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"تاریخ و زمان ایزو\",\n        date: \"تاریخ ایزو\",\n        time: \"زمان ایزو\",\n        duration: \"مدت زمان ایزو\",\n        ipv4: \"IPv4 آدرس\",\n        ipv6: \"IPv6 آدرس\",\n        cidrv4: \"IPv4 دامنه\",\n        cidrv6: \"IPv6 دامنه\",\n        base64: \"base64-encoded رشته\",\n        base64url: \"base64url-encoded رشته\",\n        json_string: \"JSON رشته\",\n        e164: \"E.164 عدد\",\n        jwt: \"JWT\",\n        template_literal: \"ورودی\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `ورودی نامعتبر: می‌بایست ${issue.expected} می‌بود، ${parsedType(issue.input)} دریافت شد`;\n            case \"invalid_value\":\n                if (issue.values.length === 1) {\n                    return `ورودی نامعتبر: می‌بایست ${util.stringifyPrimitive(issue.values[0])} می‌بود`;\n                }\n                return `گزینه نامعتبر: می‌بایست یکی از ${util.joinValues(issue.values, \"|\")} می‌بود`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `خیلی بزرگ: ${issue.origin ?? \"مقدار\"} باید ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"عنصر\"} باشد`;\n                }\n                return `خیلی بزرگ: ${issue.origin ?? \"مقدار\"} باید ${adj}${issue.maximum.toString()} باشد`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `خیلی کوچک: ${issue.origin} باید ${adj}${issue.minimum.toString()} ${sizing.unit} باشد`;\n                }\n                return `خیلی کوچک: ${issue.origin} باید ${adj}${issue.minimum.toString()} باشد`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `رشته نامعتبر: باید با \"${_issue.prefix}\" شروع شود`;\n                }\n                if (_issue.format === \"ends_with\") {\n                    return `رشته نامعتبر: باید با \"${_issue.suffix}\" تمام شود`;\n                }\n                if (_issue.format === \"includes\") {\n                    return `رشته نامعتبر: باید شامل \"${_issue.includes}\" باشد`;\n                }\n                if (_issue.format === \"regex\") {\n                    return `رشته نامعتبر: باید با الگوی ${_issue.pattern} مطابقت داشته باشد`;\n                }\n                return `${Nouns[_issue.format] ?? issue.format} نامعتبر`;\n            }\n            case \"not_multiple_of\":\n                return `عدد نامعتبر: باید مضرب ${issue.divisor} باشد`;\n            case \"unrecognized_keys\":\n                return `کلید${issue.keys.length > 1 ? \"های\" : \"\"} ناشناس: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `کلید ناشناس در ${issue.origin}`;\n            case \"invalid_union\":\n                return `ورودی نامعتبر`;\n            case \"invalid_element\":\n                return `مقدار نامعتبر در ${issue.origin}`;\n            default:\n                return `ورودی نامعتبر`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"merkkiä\", subject: \"merkkijonon\" },\n        file: { unit: \"tavua\", subject: \"tiedoston\" },\n        array: { unit: \"alkiota\", subject: \"listan\" },\n        set: { unit: \"alkiota\", subject: \"joukon\" },\n        number: { unit: \"\", subject: \"luvun\" },\n        bigint: { unit: \"\", subject: \"suuren kokonaisluvun\" },\n        int: { unit: \"\", subject: \"kokonaisluvun\" },\n        date: { unit: \"\", subject: \"päivämäärän\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"säännöllinen lauseke\",\n        email: \"sähköpostiosoite\",\n        url: \"URL-osoite\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO-aikaleima\",\n        date: \"ISO-päivämäärä\",\n        time: \"ISO-aika\",\n        duration: \"ISO-kesto\",\n        ipv4: \"IPv4-osoite\",\n        ipv6: \"IPv6-osoite\",\n        cidrv4: \"IPv4-alue\",\n        cidrv6: \"IPv6-alue\",\n        base64: \"base64-koodattu merkkijono\",\n        base64url: \"base64url-koodattu merkkijono\",\n        json_string: \"JSON-merkkijono\",\n        e164: \"E.164-luku\",\n        jwt: \"JWT\",\n        template_literal: \"templaattimerkkijono\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Virheellinen tyyppi: odotettiin ${issue.expected}, oli ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Virheellinen syöte: täytyy olla ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Virheellinen valinta: täytyy olla yksi seuraavista: ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Liian suuri: ${sizing.subject} täytyy olla ${adj}${issue.maximum.toString()} ${sizing.unit}`.trim();\n                }\n                return `Liian suuri: arvon täytyy olla ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Liian pieni: ${sizing.subject} täytyy olla ${adj}${issue.minimum.toString()} ${sizing.unit}`.trim();\n                }\n                return `Liian pieni: arvon täytyy olla ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Virheellinen syöte: täytyy alkaa \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Virheellinen syöte: täytyy loppua \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Virheellinen syöte: täytyy sisältää \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\") {\n                    return `Virheellinen syöte: täytyy vastata säännöllistä lauseketta ${_issue.pattern}`;\n                }\n                return `Virheellinen ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Virheellinen luku: täytyy olla luvun ${issue.divisor} monikerta`;\n            case \"unrecognized_keys\":\n                return `${issue.keys.length > 1 ? \"Tuntemattomat avaimet\" : \"Tuntematon avain\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return \"Virheellinen avain tietueessa\";\n            case \"invalid_union\":\n                return \"Virheellinen unioni\";\n            case \"invalid_element\":\n                return \"Virheellinen arvo joukossa\";\n            default:\n                return `Virheellinen syöte`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"caractères\", verb: \"avoir\" },\n        file: { unit: \"octets\", verb: \"avoir\" },\n        array: { unit: \"éléments\", verb: \"avoir\" },\n        set: { unit: \"éléments\", verb: \"avoir\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"nombre\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"tableau\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"entrée\",\n        email: \"adresse e-mail\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"date et heure ISO\",\n        date: \"date ISO\",\n        time: \"heure ISO\",\n        duration: \"durée ISO\",\n        ipv4: \"adresse IPv4\",\n        ipv6: \"adresse IPv6\",\n        cidrv4: \"plage IPv4\",\n        cidrv6: \"plage IPv6\",\n        base64: \"chaîne encodée en base64\",\n        base64url: \"chaîne encodée en base64url\",\n        json_string: \"chaîne JSON\",\n        e164: \"numéro E.164\",\n        jwt: \"JWT\",\n        template_literal: \"entrée\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Entrée invalide : ${issue.expected} attendu, ${parsedType(issue.input)} reçu`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Entrée invalide : ${util.stringifyPrimitive(issue.values[0])} attendu`;\n                return `Option invalide : une valeur parmi ${util.joinValues(issue.values, \"|\")} attendue`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Trop grand : ${issue.origin ?? \"valeur\"} doit ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"élément(s)\"}`;\n                return `Trop grand : ${issue.origin ?? \"valeur\"} doit être ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Trop petit : ${issue.origin} doit ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Trop petit : ${issue.origin} doit être ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Chaîne invalide : doit commencer par \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Chaîne invalide : doit se terminer par \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Chaîne invalide : doit inclure \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Chaîne invalide : doit correspondre au modèle ${_issue.pattern}`;\n                return `${Nouns[_issue.format] ?? issue.format} invalide`;\n            }\n            case \"not_multiple_of\":\n                return `Nombre invalide : doit être un multiple de ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Clé${issue.keys.length > 1 ? \"s\" : \"\"} non reconnue${issue.keys.length > 1 ? \"s\" : \"\"} : ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Clé invalide dans ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Entrée invalide\";\n            case \"invalid_element\":\n                return `Valeur invalide dans ${issue.origin}`;\n            default:\n                return `Entrée invalide`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"caractères\", verb: \"avoir\" },\n        file: { unit: \"octets\", verb: \"avoir\" },\n        array: { unit: \"éléments\", verb: \"avoir\" },\n        set: { unit: \"éléments\", verb: \"avoir\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"entrée\",\n        email: \"adresse courriel\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"date-heure ISO\",\n        date: \"date ISO\",\n        time: \"heure ISO\",\n        duration: \"durée ISO\",\n        ipv4: \"adresse IPv4\",\n        ipv6: \"adresse IPv6\",\n        cidrv4: \"plage IPv4\",\n        cidrv6: \"plage IPv6\",\n        base64: \"chaîne encodée en base64\",\n        base64url: \"chaîne encodée en base64url\",\n        json_string: \"chaîne JSON\",\n        e164: \"numéro E.164\",\n        jwt: \"JWT\",\n        template_literal: \"entrée\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Entrée invalide : attendu ${issue.expected}, reçu ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Entrée invalide : attendu ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Option invalide : attendu l'une des valeurs suivantes ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"≤\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Trop grand : attendu que ${issue.origin ?? \"la valeur\"} ait ${adj}${issue.maximum.toString()} ${sizing.unit}`;\n                return `Trop grand : attendu que ${issue.origin ?? \"la valeur\"} soit ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \"≥\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Trop petit : attendu que ${issue.origin} ait ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Trop petit : attendu que ${issue.origin} soit ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Chaîne invalide : doit commencer par \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Chaîne invalide : doit se terminer par \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Chaîne invalide : doit inclure \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Chaîne invalide : doit correspondre au motif ${_issue.pattern}`;\n                return `${Nouns[_issue.format] ?? issue.format} invalide`;\n            }\n            case \"not_multiple_of\":\n                return `Nombre invalide : doit être un multiple de ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Clé${issue.keys.length > 1 ? \"s\" : \"\"} non reconnue${issue.keys.length > 1 ? \"s\" : \"\"} : ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Clé invalide dans ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Entrée invalide\";\n            case \"invalid_element\":\n                return `Valeur invalide dans ${issue.origin}`;\n            default:\n                return `Entrée invalide`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"אותיות\", verb: \"לכלול\" },\n        file: { unit: \"בייטים\", verb: \"לכלול\" },\n        array: { unit: \"פריטים\", verb: \"לכלול\" },\n        set: { unit: \"פריטים\", verb: \"לכלול\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"קלט\",\n        email: \"כתובת אימייל\",\n        url: \"כתובת רשת\",\n        emoji: \"אימוג'י\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"תאריך וזמן ISO\",\n        date: \"תאריך ISO\",\n        time: \"זמן ISO\",\n        duration: \"משך זמן ISO\",\n        ipv4: \"כתובת IPv4\",\n        ipv6: \"כתובת IPv6\",\n        cidrv4: \"טווח IPv4\",\n        cidrv6: \"טווח IPv6\",\n        base64: \"מחרוזת בבסיס 64\",\n        base64url: \"מחרוזת בבסיס 64 לכתובות רשת\",\n        json_string: \"מחרוזת JSON\",\n        e164: \"מספר E.164\",\n        jwt: \"JWT\",\n        template_literal: \"קלט\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `קלט לא תקין: צריך ${issue.expected}, התקבל ${parsedType(issue.input)}`;\n            // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `קלט לא תקין: צריך ${util.stringifyPrimitive(issue.values[0])}`;\n                return `קלט לא תקין: צריך אחת מהאפשרויות  ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `גדול מדי: ${issue.origin ?? \"value\"} צריך להיות ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elements\"}`;\n                return `גדול מדי: ${issue.origin ?? \"value\"} צריך להיות ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `קטן מדי: ${issue.origin} צריך להיות ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `קטן מדי: ${issue.origin} צריך להיות ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `מחרוזת לא תקינה: חייבת להתחיל ב\"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `מחרוזת לא תקינה: חייבת להסתיים ב \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `מחרוזת לא תקינה: חייבת לכלול \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `מחרוזת לא תקינה: חייבת להתאים לתבנית ${_issue.pattern}`;\n                return `${Nouns[_issue.format] ?? issue.format} לא תקין`;\n            }\n            case \"not_multiple_of\":\n                return `מספר לא תקין: חייב להיות מכפלה של ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `מפתח${issue.keys.length > 1 ? \"ות\" : \"\"} לא מזוה${issue.keys.length > 1 ? \"ים\" : \"ה\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `מפתח לא תקין ב${issue.origin}`;\n            case \"invalid_union\":\n                return \"קלט לא תקין\";\n            case \"invalid_element\":\n                return `ערך לא תקין ב${issue.origin}`;\n            default:\n                return `קלט לא תקין`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"karakter\", verb: \"legyen\" },\n        file: { unit: \"byte\", verb: \"legyen\" },\n        array: { unit: \"elem\", verb: \"legyen\" },\n        set: { unit: \"elem\", verb: \"legyen\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"szám\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"tömb\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"bemenet\",\n        email: \"email cím\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO időbélyeg\",\n        date: \"ISO dátum\",\n        time: \"ISO idő\",\n        duration: \"ISO időintervallum\",\n        ipv4: \"IPv4 cím\",\n        ipv6: \"IPv6 cím\",\n        cidrv4: \"IPv4 tartomány\",\n        cidrv6: \"IPv6 tartomány\",\n        base64: \"base64-kódolt string\",\n        base64url: \"base64url-kódolt string\",\n        json_string: \"JSON string\",\n        e164: \"E.164 szám\",\n        jwt: \"JWT\",\n        template_literal: \"bemenet\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Érvénytelen bemenet: a várt érték ${issue.expected}, a kapott érték ${parsedType(issue.input)}`;\n            // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Érvénytelen bemenet: a várt érték ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Érvénytelen opció: valamelyik érték várt ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Túl nagy: ${issue.origin ?? \"érték\"} mérete túl nagy ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elem\"}`;\n                return `Túl nagy: a bemeneti érték ${issue.origin ?? \"érték\"} túl nagy: ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Túl kicsi: a bemeneti érték ${issue.origin} mérete túl kicsi ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Túl kicsi: a bemeneti érték ${issue.origin} túl kicsi ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Érvénytelen string: \"${_issue.prefix}\" értékkel kell kezdődnie`;\n                if (_issue.format === \"ends_with\")\n                    return `Érvénytelen string: \"${_issue.suffix}\" értékkel kell végződnie`;\n                if (_issue.format === \"includes\")\n                    return `Érvénytelen string: \"${_issue.includes}\" értéket kell tartalmaznia`;\n                if (_issue.format === \"regex\")\n                    return `Érvénytelen string: ${_issue.pattern} mintának kell megfelelnie`;\n                return `Érvénytelen ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Érvénytelen szám: ${issue.divisor} többszörösének kell lennie`;\n            case \"unrecognized_keys\":\n                return `Ismeretlen kulcs${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Érvénytelen kulcs ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Érvénytelen bemenet\";\n            case \"invalid_element\":\n                return `Érvénytelen érték: ${issue.origin}`;\n            default:\n                return `Érvénytelen bemenet`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"karakter\", verb: \"memiliki\" },\n        file: { unit: \"byte\", verb: \"memiliki\" },\n        array: { unit: \"item\", verb: \"memiliki\" },\n        set: { unit: \"item\", verb: \"memiliki\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"input\",\n        email: \"alamat email\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"tanggal dan waktu format ISO\",\n        date: \"tanggal format ISO\",\n        time: \"jam format ISO\",\n        duration: \"durasi format ISO\",\n        ipv4: \"alamat IPv4\",\n        ipv6: \"alamat IPv6\",\n        cidrv4: \"rentang alamat IPv4\",\n        cidrv6: \"rentang alamat IPv6\",\n        base64: \"string dengan enkode base64\",\n        base64url: \"string dengan enkode base64url\",\n        json_string: \"string JSON\",\n        e164: \"angka E.164\",\n        jwt: \"JWT\",\n        template_literal: \"input\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Input tidak valid: diharapkan ${issue.expected}, diterima ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Input tidak valid: diharapkan ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Pilihan tidak valid: diharapkan salah satu dari ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Terlalu besar: diharapkan ${issue.origin ?? \"value\"} memiliki ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elemen\"}`;\n                return `Terlalu besar: diharapkan ${issue.origin ?? \"value\"} menjadi ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Terlalu kecil: diharapkan ${issue.origin} memiliki ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Terlalu kecil: diharapkan ${issue.origin} menjadi ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `String tidak valid: harus dimulai dengan \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `String tidak valid: harus berakhir dengan \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `String tidak valid: harus menyertakan \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `String tidak valid: harus sesuai pola ${_issue.pattern}`;\n                return `${Nouns[_issue.format] ?? issue.format} tidak valid`;\n            }\n            case \"not_multiple_of\":\n                return `Angka tidak valid: harus kelipatan dari ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Kunci tidak dikenali ${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Kunci tidak valid di ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Input tidak valid\";\n            case \"invalid_element\":\n                return `Nilai tidak valid di ${issue.origin}`;\n            default:\n                return `Input tidak valid`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"caratteri\", verb: \"avere\" },\n        file: { unit: \"byte\", verb: \"avere\" },\n        array: { unit: \"elementi\", verb: \"avere\" },\n        set: { unit: \"elementi\", verb: \"avere\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"numero\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"vettore\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"input\",\n        email: \"indirizzo email\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"data e ora ISO\",\n        date: \"data ISO\",\n        time: \"ora ISO\",\n        duration: \"durata ISO\",\n        ipv4: \"indirizzo IPv4\",\n        ipv6: \"indirizzo IPv6\",\n        cidrv4: \"intervallo IPv4\",\n        cidrv6: \"intervallo IPv6\",\n        base64: \"stringa codificata in base64\",\n        base64url: \"URL codificata in base64\",\n        json_string: \"stringa JSON\",\n        e164: \"numero E.164\",\n        jwt: \"JWT\",\n        template_literal: \"input\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Input non valido: atteso ${issue.expected}, ricevuto ${parsedType(issue.input)}`;\n            // return `Input non valido: atteso ${issue.expected}, ricevuto ${util.getParsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Input non valido: atteso ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Opzione non valida: atteso uno tra ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Troppo grande: ${issue.origin ?? \"valore\"} deve avere ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementi\"}`;\n                return `Troppo grande: ${issue.origin ?? \"valore\"} deve essere ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Troppo piccolo: ${issue.origin} deve avere ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Troppo piccolo: ${issue.origin} deve essere ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Stringa non valida: deve iniziare con \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Stringa non valida: deve terminare con \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Stringa non valida: deve includere \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Stringa non valida: deve corrispondere al pattern ${_issue.pattern}`;\n                return `Invalid ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Numero non valido: deve essere un multiplo di ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Chiav${issue.keys.length > 1 ? \"i\" : \"e\"} non riconosciut${issue.keys.length > 1 ? \"e\" : \"a\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Chiave non valida in ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Input non valido\";\n            case \"invalid_element\":\n                return `Valore non valido in ${issue.origin}`;\n            default:\n                return `Input non valido`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"文字\", verb: \"である\" },\n        file: { unit: \"バイト\", verb: \"である\" },\n        array: { unit: \"要素\", verb: \"である\" },\n        set: { unit: \"要素\", verb: \"である\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"数値\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"配列\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"入力値\",\n        email: \"メールアドレス\",\n        url: \"URL\",\n        emoji: \"絵文字\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO日時\",\n        date: \"ISO日付\",\n        time: \"ISO時刻\",\n        duration: \"ISO期間\",\n        ipv4: \"IPv4アドレス\",\n        ipv6: \"IPv6アドレス\",\n        cidrv4: \"IPv4範囲\",\n        cidrv6: \"IPv6範囲\",\n        base64: \"base64エンコード文字列\",\n        base64url: \"base64urlエンコード文字列\",\n        json_string: \"JSON文字列\",\n        e164: \"E.164番号\",\n        jwt: \"JWT\",\n        template_literal: \"入力値\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `無効な入力: ${issue.expected}が期待されましたが、${parsedType(issue.input)}が入力されました`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `無効な入力: ${util.stringifyPrimitive(issue.values[0])}が期待されました`;\n                return `無効な選択: ${util.joinValues(issue.values, \"、\")}のいずれかである必要があります`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"以下である\" : \"より小さい\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `大きすぎる値: ${issue.origin ?? \"値\"}は${issue.maximum.toString()}${sizing.unit ?? \"要素\"}${adj}必要があります`;\n                return `大きすぎる値: ${issue.origin ?? \"値\"}は${issue.maximum.toString()}${adj}必要があります`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \"以上である\" : \"より大きい\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `小さすぎる値: ${issue.origin}は${issue.minimum.toString()}${sizing.unit}${adj}必要があります`;\n                return `小さすぎる値: ${issue.origin}は${issue.minimum.toString()}${adj}必要があります`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `無効な文字列: \"${_issue.prefix}\"で始まる必要があります`;\n                if (_issue.format === \"ends_with\")\n                    return `無効な文字列: \"${_issue.suffix}\"で終わる必要があります`;\n                if (_issue.format === \"includes\")\n                    return `無効な文字列: \"${_issue.includes}\"を含む必要があります`;\n                if (_issue.format === \"regex\")\n                    return `無効な文字列: パターン${_issue.pattern}に一致する必要があります`;\n                return `無効な${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `無効な数値: ${issue.divisor}の倍数である必要があります`;\n            case \"unrecognized_keys\":\n                return `認識されていないキー${issue.keys.length > 1 ? \"群\" : \"\"}: ${util.joinValues(issue.keys, \"、\")}`;\n            case \"invalid_key\":\n                return `${issue.origin}内の無効なキー`;\n            case \"invalid_union\":\n                return \"無効な入力\";\n            case \"invalid_element\":\n                return `${issue.origin}内の無効な値`;\n            default:\n                return `無効な入力`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"តួអក្សរ\", verb: \"គួរមាន\" },\n        file: { unit: \"បៃ\", verb: \"គួរមាន\" },\n        array: { unit: \"ធាតុ\", verb: \"គួរមាន\" },\n        set: { unit: \"ធាតុ\", verb: \"គួរមាន\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"មិនមែនជាលេខ (NaN)\" : \"លេខ\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"អារេ (Array)\";\n                }\n                if (data === null) {\n                    return \"គ្មានតម្លៃ (null)\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"ទិន្នន័យបញ្ចូល\",\n        email: \"អាសយដ្ឋានអ៊ីមែល\",\n        url: \"URL\",\n        emoji: \"សញ្ញាអារម្មណ៍\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"កាលបរិច្ឆេទ និងម៉ោង ISO\",\n        date: \"កាលបរិច្ឆេទ ISO\",\n        time: \"ម៉ោង ISO\",\n        duration: \"រយៈពេល ISO\",\n        ipv4: \"អាសយដ្ឋាន IPv4\",\n        ipv6: \"អាសយដ្ឋាន IPv6\",\n        cidrv4: \"ដែនអាសយដ្ឋាន IPv4\",\n        cidrv6: \"ដែនអាសយដ្ឋាន IPv6\",\n        base64: \"ខ្សែអក្សរអ៊ិកូដ base64\",\n        base64url: \"ខ្សែអក្សរអ៊ិកូដ base64url\",\n        json_string: \"ខ្សែអក្សរ JSON\",\n        e164: \"លេខ E.164\",\n        jwt: \"JWT\",\n        template_literal: \"ទិន្នន័យបញ្ចូល\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `ទិន្នន័យបញ្ចូលមិនត្រឹមត្រូវ៖ ត្រូវការ ${issue.expected} ប៉ុន្តែទទួលបាន ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `ទិន្នន័យបញ្ចូលមិនត្រឹមត្រូវ៖ ត្រូវការ ${util.stringifyPrimitive(issue.values[0])}`;\n                return `ជម្រើសមិនត្រឹមត្រូវ៖ ត្រូវជាមួយក្នុងចំណោម ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `ធំពេក៖ ត្រូវការ ${issue.origin ?? \"តម្លៃ\"} ${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"ធាតុ\"}`;\n                return `ធំពេក៖ ត្រូវការ ${issue.origin ?? \"តម្លៃ\"} ${adj} ${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `តូចពេក៖ ត្រូវការ ${issue.origin} ${adj} ${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `តូចពេក៖ ត្រូវការ ${issue.origin} ${adj} ${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវចាប់ផ្តើមដោយ \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវបញ្ចប់ដោយ \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវមាន \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `ខ្សែអក្សរមិនត្រឹមត្រូវ៖ ត្រូវតែផ្គូផ្គងនឹងទម្រង់ដែលបានកំណត់ ${_issue.pattern}`;\n                return `មិនត្រឹមត្រូវ៖ ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `លេខមិនត្រឹមត្រូវ៖ ត្រូវតែជាពហុគុណនៃ ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `រកឃើញសោមិនស្គាល់៖ ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `សោមិនត្រឹមត្រូវនៅក្នុង ${issue.origin}`;\n            case \"invalid_union\":\n                return `ទិន្នន័យមិនត្រឹមត្រូវ`;\n            case \"invalid_element\":\n                return `ទិន្នន័យមិនត្រឹមត្រូវនៅក្នុង ${issue.origin}`;\n            default:\n                return `ទិន្នន័យមិនត្រឹមត្រូវ`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"문자\", verb: \"to have\" },\n        file: { unit: \"바이트\", verb: \"to have\" },\n        array: { unit: \"개\", verb: \"to have\" },\n        set: { unit: \"개\", verb: \"to have\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"입력\",\n        email: \"이메일 주소\",\n        url: \"URL\",\n        emoji: \"이모지\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO 날짜시간\",\n        date: \"ISO 날짜\",\n        time: \"ISO 시간\",\n        duration: \"ISO 기간\",\n        ipv4: \"IPv4 주소\",\n        ipv6: \"IPv6 주소\",\n        cidrv4: \"IPv4 범위\",\n        cidrv6: \"IPv6 범위\",\n        base64: \"base64 인코딩 문자열\",\n        base64url: \"base64url 인코딩 문자열\",\n        json_string: \"JSON 문자열\",\n        e164: \"E.164 번호\",\n        jwt: \"JWT\",\n        template_literal: \"입력\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `잘못된 입력: 예상 타입은 ${issue.expected}, 받은 타입은 ${parsedType(issue.input)}입니다`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `잘못된 입력: 값은 ${util.stringifyPrimitive(issue.values[0])} 이어야 합니다`;\n                return `잘못된 옵션: ${util.joinValues(issue.values, \"또는 \")} 중 하나여야 합니다`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"이하\" : \"미만\";\n                const suffix = adj === \"미만\" ? \"이어야 합니다\" : \"여야 합니다\";\n                const sizing = getSizing(issue.origin);\n                const unit = sizing?.unit ?? \"요소\";\n                if (sizing)\n                    return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()}${unit} ${adj}${suffix}`;\n                return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()} ${adj}${suffix}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \"이상\" : \"초과\";\n                const suffix = adj === \"이상\" ? \"이어야 합니다\" : \"여야 합니다\";\n                const sizing = getSizing(issue.origin);\n                const unit = sizing?.unit ?? \"요소\";\n                if (sizing) {\n                    return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()}${unit} ${adj}${suffix}`;\n                }\n                return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()} ${adj}${suffix}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `잘못된 문자열: \"${_issue.prefix}\"(으)로 시작해야 합니다`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `잘못된 문자열: \"${_issue.suffix}\"(으)로 끝나야 합니다`;\n                if (_issue.format === \"includes\")\n                    return `잘못된 문자열: \"${_issue.includes}\"을(를) 포함해야 합니다`;\n                if (_issue.format === \"regex\")\n                    return `잘못된 문자열: 정규식 ${_issue.pattern} 패턴과 일치해야 합니다`;\n                return `잘못된 ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `잘못된 숫자: ${issue.divisor}의 배수여야 합니다`;\n            case \"unrecognized_keys\":\n                return `인식할 수 없는 키: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `잘못된 키: ${issue.origin}`;\n            case \"invalid_union\":\n                return `잘못된 입력`;\n            case \"invalid_element\":\n                return `잘못된 값: ${issue.origin}`;\n            default:\n                return `잘못된 입력`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"знаци\", verb: \"да имаат\" },\n        file: { unit: \"бајти\", verb: \"да имаат\" },\n        array: { unit: \"ставки\", verb: \"да имаат\" },\n        set: { unit: \"ставки\", verb: \"да имаат\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"број\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"низа\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"внес\",\n        email: \"адреса на е-пошта\",\n        url: \"URL\",\n        emoji: \"емоџи\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO датум и време\",\n        date: \"ISO датум\",\n        time: \"ISO време\",\n        duration: \"ISO времетраење\",\n        ipv4: \"IPv4 адреса\",\n        ipv6: \"IPv6 адреса\",\n        cidrv4: \"IPv4 опсег\",\n        cidrv6: \"IPv6 опсег\",\n        base64: \"base64-енкодирана низа\",\n        base64url: \"base64url-енкодирана низа\",\n        json_string: \"JSON низа\",\n        e164: \"E.164 број\",\n        jwt: \"JWT\",\n        template_literal: \"внес\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Грешен внес: се очекува ${issue.expected}, примено ${parsedType(issue.input)}`;\n            // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Invalid input: expected ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Грешана опција: се очекува една ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Премногу голем: се очекува ${issue.origin ?? \"вредноста\"} да има ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"елементи\"}`;\n                return `Премногу голем: се очекува ${issue.origin ?? \"вредноста\"} да биде ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Премногу мал: се очекува ${issue.origin} да има ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Премногу мал: се очекува ${issue.origin} да биде ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Неважечка низа: мора да започнува со \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Неважечка низа: мора да завршува со \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Неважечка низа: мора да вклучува \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Неважечка низа: мора да одгоара на патернот ${_issue.pattern}`;\n                return `Invalid ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Грешен број: мора да биде делив со ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `${issue.keys.length > 1 ? \"Непрепознаени клучеви\" : \"Непрепознаен клуч\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Грешен клуч во ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Грешен внес\";\n            case \"invalid_element\":\n                return `Грешна вредност во ${issue.origin}`;\n            default:\n                return `Грешен внес`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"tekens\" },\n        file: { unit: \"bytes\" },\n        array: { unit: \"elementen\" },\n        set: { unit: \"elementen\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"getal\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"invoer\",\n        email: \"emailadres\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO datum en tijd\",\n        date: \"ISO datum\",\n        time: \"ISO tijd\",\n        duration: \"ISO duur\",\n        ipv4: \"IPv4-adres\",\n        ipv6: \"IPv6-adres\",\n        cidrv4: \"IPv4-bereik\",\n        cidrv6: \"IPv6-bereik\",\n        base64: \"base64-gecodeerde tekst\",\n        base64url: \"base64 URL-gecodeerde tekst\",\n        json_string: \"JSON string\",\n        e164: \"E.164-nummer\",\n        jwt: \"JWT\",\n        template_literal: \"invoer\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Ongeldige invoer: verwacht ${issue.expected}, ontving ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Ongeldige invoer: verwacht ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Ongeldige optie: verwacht één van ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Te lang: verwacht dat ${issue.origin ?? \"waarde\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementen\"} bevat`;\n                return `Te lang: verwacht dat ${issue.origin ?? \"waarde\"} ${adj}${issue.maximum.toString()} is`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Te kort: verwacht dat ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit} bevat`;\n                }\n                return `Te kort: verwacht dat ${issue.origin} ${adj}${issue.minimum.toString()} is`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Ongeldige tekst: moet met \"${_issue.prefix}\" beginnen`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Ongeldige tekst: moet op \"${_issue.suffix}\" eindigen`;\n                if (_issue.format === \"includes\")\n                    return `Ongeldige tekst: moet \"${_issue.includes}\" bevatten`;\n                if (_issue.format === \"regex\")\n                    return `Ongeldige tekst: moet overeenkomen met patroon ${_issue.pattern}`;\n                return `Ongeldig: ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Ongeldig getal: moet een veelvoud van ${issue.divisor} zijn`;\n            case \"unrecognized_keys\":\n                return `Onbekende key${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Ongeldige key in ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Ongeldige invoer\";\n            case \"invalid_element\":\n                return `Ongeldige waarde in ${issue.origin}`;\n            default:\n                return `Ongeldige invoer`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"tegn\", verb: \"å ha\" },\n        file: { unit: \"bytes\", verb: \"å ha\" },\n        array: { unit: \"elementer\", verb: \"å inneholde\" },\n        set: { unit: \"elementer\", verb: \"å inneholde\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"tall\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"liste\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"input\",\n        email: \"e-postadresse\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO dato- og klokkeslett\",\n        date: \"ISO-dato\",\n        time: \"ISO-klokkeslett\",\n        duration: \"ISO-varighet\",\n        ipv4: \"IPv4-område\",\n        ipv6: \"IPv6-område\",\n        cidrv4: \"IPv4-spekter\",\n        cidrv6: \"IPv6-spekter\",\n        base64: \"base64-enkodet streng\",\n        base64url: \"base64url-enkodet streng\",\n        json_string: \"JSON-streng\",\n        e164: \"E.164-nummer\",\n        jwt: \"JWT\",\n        template_literal: \"input\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Ugyldig input: forventet ${issue.expected}, fikk ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Ugyldig verdi: forventet ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Ugyldig valg: forventet en av ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `For stor(t): forventet ${issue.origin ?? \"value\"} til å ha ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementer\"}`;\n                return `For stor(t): forventet ${issue.origin ?? \"value\"} til å ha ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `For lite(n): forventet ${issue.origin} til å ha ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `For lite(n): forventet ${issue.origin} til å ha ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Ugyldig streng: må starte med \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Ugyldig streng: må ende med \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Ugyldig streng: må inneholde \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Ugyldig streng: må matche mønsteret ${_issue.pattern}`;\n                return `Ugyldig ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Ugyldig tall: må være et multiplum av ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `${issue.keys.length > 1 ? \"Ukjente nøkler\" : \"Ukjent nøkkel\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Ugyldig nøkkel i ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Ugyldig input\";\n            case \"invalid_element\":\n                return `Ugyldig verdi i ${issue.origin}`;\n            default:\n                return `Ugyldig input`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"harf\", verb: \"olmalıdır\" },\n        file: { unit: \"bayt\", verb: \"olmalıdır\" },\n        array: { unit: \"unsur\", verb: \"olmalıdır\" },\n        set: { unit: \"unsur\", verb: \"olmalıdır\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"numara\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"saf\";\n                }\n                if (data === null) {\n                    return \"gayb\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"giren\",\n        email: \"epostagâh\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO hengâmı\",\n        date: \"ISO tarihi\",\n        time: \"ISO zamanı\",\n        duration: \"ISO müddeti\",\n        ipv4: \"IPv4 nişânı\",\n        ipv6: \"IPv6 nişânı\",\n        cidrv4: \"IPv4 menzili\",\n        cidrv6: \"IPv6 menzili\",\n        base64: \"base64-şifreli metin\",\n        base64url: \"base64url-şifreli metin\",\n        json_string: \"JSON metin\",\n        e164: \"E.164 sayısı\",\n        jwt: \"JWT\",\n        template_literal: \"giren\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Fâsit giren: umulan ${issue.expected}, alınan ${parsedType(issue.input)}`;\n            // return `Fâsit giren: umulan ${issue.expected}, alınan ${util.getParsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Fâsit giren: umulan ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Fâsit tercih: mûteberler ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Fazla büyük: ${issue.origin ?? \"value\"}, ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elements\"} sahip olmalıydı.`;\n                return `Fazla büyük: ${issue.origin ?? \"value\"}, ${adj}${issue.maximum.toString()} olmalıydı.`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Fazla küçük: ${issue.origin}, ${adj}${issue.minimum.toString()} ${sizing.unit} sahip olmalıydı.`;\n                }\n                return `Fazla küçük: ${issue.origin}, ${adj}${issue.minimum.toString()} olmalıydı.`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Fâsit metin: \"${_issue.prefix}\" ile başlamalı.`;\n                if (_issue.format === \"ends_with\")\n                    return `Fâsit metin: \"${_issue.suffix}\" ile bitmeli.`;\n                if (_issue.format === \"includes\")\n                    return `Fâsit metin: \"${_issue.includes}\" ihtivâ etmeli.`;\n                if (_issue.format === \"regex\")\n                    return `Fâsit metin: ${_issue.pattern} nakşına uymalı.`;\n                return `Fâsit ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Fâsit sayı: ${issue.divisor} katı olmalıydı.`;\n            case \"unrecognized_keys\":\n                return `Tanınmayan anahtar ${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `${issue.origin} için tanınmayan anahtar var.`;\n            case \"invalid_union\":\n                return \"Giren tanınamadı.\";\n            case \"invalid_element\":\n                return `${issue.origin} için tanınmayan kıymet var.`;\n            default:\n                return `Kıymet tanınamadı.`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"توکي\", verb: \"ولري\" },\n        file: { unit: \"بایټس\", verb: \"ولري\" },\n        array: { unit: \"توکي\", verb: \"ولري\" },\n        set: { unit: \"توکي\", verb: \"ولري\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"عدد\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"ارې\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"ورودي\",\n        email: \"بریښنالیک\",\n        url: \"یو آر ال\",\n        emoji: \"ایموجي\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"نیټه او وخت\",\n        date: \"نېټه\",\n        time: \"وخت\",\n        duration: \"موده\",\n        ipv4: \"د IPv4 پته\",\n        ipv6: \"د IPv6 پته\",\n        cidrv4: \"د IPv4 ساحه\",\n        cidrv6: \"د IPv6 ساحه\",\n        base64: \"base64-encoded متن\",\n        base64url: \"base64url-encoded متن\",\n        json_string: \"JSON متن\",\n        e164: \"د E.164 شمېره\",\n        jwt: \"JWT\",\n        template_literal: \"ورودي\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `ناسم ورودي: باید ${issue.expected} وای, مګر ${parsedType(issue.input)} ترلاسه شو`;\n            case \"invalid_value\":\n                if (issue.values.length === 1) {\n                    return `ناسم ورودي: باید ${util.stringifyPrimitive(issue.values[0])} وای`;\n                }\n                return `ناسم انتخاب: باید یو له ${util.joinValues(issue.values, \"|\")} څخه وای`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `ډیر لوی: ${issue.origin ?? \"ارزښت\"} باید ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"عنصرونه\"} ولري`;\n                }\n                return `ډیر لوی: ${issue.origin ?? \"ارزښت\"} باید ${adj}${issue.maximum.toString()} وي`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `ډیر کوچنی: ${issue.origin} باید ${adj}${issue.minimum.toString()} ${sizing.unit} ولري`;\n                }\n                return `ډیر کوچنی: ${issue.origin} باید ${adj}${issue.minimum.toString()} وي`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `ناسم متن: باید د \"${_issue.prefix}\" سره پیل شي`;\n                }\n                if (_issue.format === \"ends_with\") {\n                    return `ناسم متن: باید د \"${_issue.suffix}\" سره پای ته ورسيږي`;\n                }\n                if (_issue.format === \"includes\") {\n                    return `ناسم متن: باید \"${_issue.includes}\" ولري`;\n                }\n                if (_issue.format === \"regex\") {\n                    return `ناسم متن: باید د ${_issue.pattern} سره مطابقت ولري`;\n                }\n                return `${Nouns[_issue.format] ?? issue.format} ناسم دی`;\n            }\n            case \"not_multiple_of\":\n                return `ناسم عدد: باید د ${issue.divisor} مضرب وي`;\n            case \"unrecognized_keys\":\n                return `ناسم ${issue.keys.length > 1 ? \"کلیډونه\" : \"کلیډ\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `ناسم کلیډ په ${issue.origin} کې`;\n            case \"invalid_union\":\n                return `ناسمه ورودي`;\n            case \"invalid_element\":\n                return `ناسم عنصر په ${issue.origin} کې`;\n            default:\n                return `ناسمه ورودي`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"znaków\", verb: \"mieć\" },\n        file: { unit: \"bajtów\", verb: \"mieć\" },\n        array: { unit: \"elementów\", verb: \"mieć\" },\n        set: { unit: \"elementów\", verb: \"mieć\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"liczba\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"tablica\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"wyrażenie\",\n        email: \"adres email\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"data i godzina w formacie ISO\",\n        date: \"data w formacie ISO\",\n        time: \"godzina w formacie ISO\",\n        duration: \"czas trwania ISO\",\n        ipv4: \"adres IPv4\",\n        ipv6: \"adres IPv6\",\n        cidrv4: \"zakres IPv4\",\n        cidrv6: \"zakres IPv6\",\n        base64: \"ciąg znaków zakodowany w formacie base64\",\n        base64url: \"ciąg znaków zakodowany w formacie base64url\",\n        json_string: \"ciąg znaków w formacie JSON\",\n        e164: \"liczba E.164\",\n        jwt: \"JWT\",\n        template_literal: \"wejście\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Nieprawidłowe dane wejściowe: oczekiwano ${issue.expected}, otrzymano ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Nieprawidłowe dane wejściowe: oczekiwano ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Nieprawidłowa opcja: oczekiwano jednej z wartości ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Za duża wartość: oczekiwano, że ${issue.origin ?? \"wartość\"} będzie mieć ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementów\"}`;\n                }\n                return `Zbyt duż(y/a/e): oczekiwano, że ${issue.origin ?? \"wartość\"} będzie wynosić ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Za mała wartość: oczekiwano, że ${issue.origin ?? \"wartość\"} będzie mieć ${adj}${issue.minimum.toString()} ${sizing.unit ?? \"elementów\"}`;\n                }\n                return `Zbyt mał(y/a/e): oczekiwano, że ${issue.origin ?? \"wartość\"} będzie wynosić ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Nieprawidłowy ciąg znaków: musi zaczynać się od \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Nieprawidłowy ciąg znaków: musi kończyć się na \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Nieprawidłowy ciąg znaków: musi zawierać \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Nieprawidłowy ciąg znaków: musi odpowiadać wzorcowi ${_issue.pattern}`;\n                return `Nieprawidłow(y/a/e) ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Nieprawidłowa liczba: musi być wielokrotnością ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Nierozpoznane klucze${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Nieprawidłowy klucz w ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Nieprawidłowe dane wejściowe\";\n            case \"invalid_element\":\n                return `Nieprawidłowa wartość w ${issue.origin}`;\n            default:\n                return `Nieprawidłowe dane wejściowe`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"caracteres\", verb: \"ter\" },\n        file: { unit: \"bytes\", verb: \"ter\" },\n        array: { unit: \"itens\", verb: \"ter\" },\n        set: { unit: \"itens\", verb: \"ter\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"número\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"nulo\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"padrão\",\n        email: \"endereço de e-mail\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"data e hora ISO\",\n        date: \"data ISO\",\n        time: \"hora ISO\",\n        duration: \"duração ISO\",\n        ipv4: \"endereço IPv4\",\n        ipv6: \"endereço IPv6\",\n        cidrv4: \"faixa de IPv4\",\n        cidrv6: \"faixa de IPv6\",\n        base64: \"texto codificado em base64\",\n        base64url: \"URL codificada em base64\",\n        json_string: \"texto JSON\",\n        e164: \"número E.164\",\n        jwt: \"JWT\",\n        template_literal: \"entrada\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Tipo inválido: esperado ${issue.expected}, recebido ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Entrada inválida: esperado ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Opção inválida: esperada uma das ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Muito grande: esperado que ${issue.origin ?? \"valor\"} tivesse ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementos\"}`;\n                return `Muito grande: esperado que ${issue.origin ?? \"valor\"} fosse ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Muito pequeno: esperado que ${issue.origin} tivesse ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Muito pequeno: esperado que ${issue.origin} fosse ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Texto inválido: deve começar com \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Texto inválido: deve terminar com \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Texto inválido: deve incluir \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Texto inválido: deve corresponder ao padrão ${_issue.pattern}`;\n                return `${Nouns[_issue.format] ?? issue.format} inválido`;\n            }\n            case \"not_multiple_of\":\n                return `Número inválido: deve ser múltiplo de ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Chave${issue.keys.length > 1 ? \"s\" : \"\"} desconhecida${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Chave inválida em ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Entrada inválida\";\n            case \"invalid_element\":\n                return `Valor inválido em ${issue.origin}`;\n            default:\n                return `Campo inválido`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nfunction getRussianPlural(count, one, few, many) {\n    const absCount = Math.abs(count);\n    const lastDigit = absCount % 10;\n    const lastTwoDigits = absCount % 100;\n    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {\n        return many;\n    }\n    if (lastDigit === 1) {\n        return one;\n    }\n    if (lastDigit >= 2 && lastDigit <= 4) {\n        return few;\n    }\n    return many;\n}\nconst error = () => {\n    const Sizable = {\n        string: {\n            unit: {\n                one: \"символ\",\n                few: \"символа\",\n                many: \"символов\",\n            },\n            verb: \"иметь\",\n        },\n        file: {\n            unit: {\n                one: \"байт\",\n                few: \"байта\",\n                many: \"байт\",\n            },\n            verb: \"иметь\",\n        },\n        array: {\n            unit: {\n                one: \"элемент\",\n                few: \"элемента\",\n                many: \"элементов\",\n            },\n            verb: \"иметь\",\n        },\n        set: {\n            unit: {\n                one: \"элемент\",\n                few: \"элемента\",\n                many: \"элементов\",\n            },\n            verb: \"иметь\",\n        },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"число\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"массив\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"ввод\",\n        email: \"email адрес\",\n        url: \"URL\",\n        emoji: \"эмодзи\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO дата и время\",\n        date: \"ISO дата\",\n        time: \"ISO время\",\n        duration: \"ISO длительность\",\n        ipv4: \"IPv4 адрес\",\n        ipv6: \"IPv6 адрес\",\n        cidrv4: \"IPv4 диапазон\",\n        cidrv6: \"IPv6 диапазон\",\n        base64: \"строка в формате base64\",\n        base64url: \"строка в формате base64url\",\n        json_string: \"JSON строка\",\n        e164: \"номер E.164\",\n        jwt: \"JWT\",\n        template_literal: \"ввод\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Неверный ввод: ожидалось ${issue.expected}, получено ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Неверный ввод: ожидалось ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Неверный вариант: ожидалось одно из ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    const maxValue = Number(issue.maximum);\n                    const unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n                    return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет иметь ${adj}${issue.maximum.toString()} ${unit}`;\n                }\n                return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    const minValue = Number(issue.minimum);\n                    const unit = getRussianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n                    return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет иметь ${adj}${issue.minimum.toString()} ${unit}`;\n                }\n                return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Неверная строка: должна начинаться с \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Неверная строка: должна заканчиваться на \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Неверная строка: должна содержать \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Неверная строка: должна соответствовать шаблону ${_issue.pattern}`;\n                return `Неверный ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Неверное число: должно быть кратным ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Нераспознанн${issue.keys.length > 1 ? \"ые\" : \"ый\"} ключ${issue.keys.length > 1 ? \"и\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Неверный ключ в ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Неверные входные данные\";\n            case \"invalid_element\":\n                return `Неверное значение в ${issue.origin}`;\n            default:\n                return `Неверные входные данные`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"znakov\", verb: \"imeti\" },\n        file: { unit: \"bajtov\", verb: \"imeti\" },\n        array: { unit: \"elementov\", verb: \"imeti\" },\n        set: { unit: \"elementov\", verb: \"imeti\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"število\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"tabela\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"vnos\",\n        email: \"e-poštni naslov\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO datum in čas\",\n        date: \"ISO datum\",\n        time: \"ISO čas\",\n        duration: \"ISO trajanje\",\n        ipv4: \"IPv4 naslov\",\n        ipv6: \"IPv6 naslov\",\n        cidrv4: \"obseg IPv4\",\n        cidrv6: \"obseg IPv6\",\n        base64: \"base64 kodiran niz\",\n        base64url: \"base64url kodiran niz\",\n        json_string: \"JSON niz\",\n        e164: \"E.164 številka\",\n        jwt: \"JWT\",\n        template_literal: \"vnos\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Neveljaven vnos: pričakovano ${issue.expected}, prejeto ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Neveljaven vnos: pričakovano ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Neveljavna možnost: pričakovano eno izmed ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Preveliko: pričakovano, da bo ${issue.origin ?? \"vrednost\"} imelo ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementov\"}`;\n                return `Preveliko: pričakovano, da bo ${issue.origin ?? \"vrednost\"} ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Premajhno: pričakovano, da bo ${issue.origin} imelo ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Premajhno: pričakovano, da bo ${issue.origin} ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Neveljaven niz: mora se začeti z \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Neveljaven niz: mora se končati z \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Neveljaven niz: mora vsebovati \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Neveljaven niz: mora ustrezati vzorcu ${_issue.pattern}`;\n                return `Neveljaven ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Neveljavno število: mora biti večkratnik ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Neprepoznan${issue.keys.length > 1 ? \"i ključi\" : \" ključ\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Neveljaven ključ v ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Neveljaven vnos\";\n            case \"invalid_element\":\n                return `Neveljavna vrednost v ${issue.origin}`;\n            default:\n                return \"Neveljaven vnos\";\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"tecken\", verb: \"att ha\" },\n        file: { unit: \"bytes\", verb: \"att ha\" },\n        array: { unit: \"objekt\", verb: \"att innehålla\" },\n        set: { unit: \"objekt\", verb: \"att innehålla\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"antal\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"lista\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"reguljärt uttryck\",\n        email: \"e-postadress\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO-datum och tid\",\n        date: \"ISO-datum\",\n        time: \"ISO-tid\",\n        duration: \"ISO-varaktighet\",\n        ipv4: \"IPv4-intervall\",\n        ipv6: \"IPv6-intervall\",\n        cidrv4: \"IPv4-spektrum\",\n        cidrv6: \"IPv6-spektrum\",\n        base64: \"base64-kodad sträng\",\n        base64url: \"base64url-kodad sträng\",\n        json_string: \"JSON-sträng\",\n        e164: \"E.164-nummer\",\n        jwt: \"JWT\",\n        template_literal: \"mall-literal\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Ogiltig inmatning: förväntat ${issue.expected}, fick ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Ogiltig inmatning: förväntat ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Ogiltigt val: förväntade en av ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `För stor(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"element\"}`;\n                }\n                return `För stor(t): förväntat ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Ogiltig sträng: måste börja med \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Ogiltig sträng: måste sluta med \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Ogiltig sträng: måste innehålla \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Ogiltig sträng: måste matcha mönstret \"${_issue.pattern}\"`;\n                return `Ogiltig(t) ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Ogiltigt tal: måste vara en multipel av ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `${issue.keys.length > 1 ? \"Okända nycklar\" : \"Okänd nyckel\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Ogiltig nyckel i ${issue.origin ?? \"värdet\"}`;\n            case \"invalid_union\":\n                return \"Ogiltig input\";\n            case \"invalid_element\":\n                return `Ogiltigt värde i ${issue.origin ?? \"värdet\"}`;\n            default:\n                return `Ogiltig input`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"எழுத்துக்கள்\", verb: \"கொண்டிருக்க வேண்டும்\" },\n        file: { unit: \"பைட்டுகள்\", verb: \"கொண்டிருக்க வேண்டும்\" },\n        array: { unit: \"உறுப்புகள்\", verb: \"கொண்டிருக்க வேண்டும்\" },\n        set: { unit: \"உறுப்புகள்\", verb: \"கொண்டிருக்க வேண்டும்\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"எண் அல்லாதது\" : \"எண்\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"அணி\";\n                }\n                if (data === null) {\n                    return \"வெறுமை\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"உள்ளீடு\",\n        email: \"மின்னஞ்சல் முகவரி\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO தேதி நேரம்\",\n        date: \"ISO தேதி\",\n        time: \"ISO நேரம்\",\n        duration: \"ISO கால அளவு\",\n        ipv4: \"IPv4 முகவரி\",\n        ipv6: \"IPv6 முகவரி\",\n        cidrv4: \"IPv4 வரம்பு\",\n        cidrv6: \"IPv6 வரம்பு\",\n        base64: \"base64-encoded சரம்\",\n        base64url: \"base64url-encoded சரம்\",\n        json_string: \"JSON சரம்\",\n        e164: \"E.164 எண்\",\n        jwt: \"JWT\",\n        template_literal: \"input\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${issue.expected}, பெறப்பட்டது ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${util.stringifyPrimitive(issue.values[0])}`;\n                return `தவறான விருப்பம்: எதிர்பார்க்கப்பட்டது ${util.joinValues(issue.values, \"|\")} இல் ஒன்று`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${issue.origin ?? \"மதிப்பு\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"உறுப்புகள்\"} ஆக இருக்க வேண்டும்`;\n                }\n                return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${issue.origin ?? \"மதிப்பு\"} ${adj}${issue.maximum.toString()} ஆக இருக்க வேண்டும்`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit} ஆக இருக்க வேண்டும்`; //\n                }\n                return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${issue.origin} ${adj}${issue.minimum.toString()} ஆக இருக்க வேண்டும்`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `தவறான சரம்: \"${_issue.prefix}\" இல் தொடங்க வேண்டும்`;\n                if (_issue.format === \"ends_with\")\n                    return `தவறான சரம்: \"${_issue.suffix}\" இல் முடிவடைய வேண்டும்`;\n                if (_issue.format === \"includes\")\n                    return `தவறான சரம்: \"${_issue.includes}\" ஐ உள்ளடக்க வேண்டும்`;\n                if (_issue.format === \"regex\")\n                    return `தவறான சரம்: ${_issue.pattern} முறைபாட்டுடன் பொருந்த வேண்டும்`;\n                return `தவறான ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `தவறான எண்: ${issue.divisor} இன் பலமாக இருக்க வேண்டும்`;\n            case \"unrecognized_keys\":\n                return `அடையாளம் தெரியாத விசை${issue.keys.length > 1 ? \"கள்\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `${issue.origin} இல் தவறான விசை`;\n            case \"invalid_union\":\n                return \"தவறான உள்ளீடு\";\n            case \"invalid_element\":\n                return `${issue.origin} இல் தவறான மதிப்பு`;\n            default:\n                return `தவறான உள்ளீடு`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"ตัวอักษร\", verb: \"ควรมี\" },\n        file: { unit: \"ไบต์\", verb: \"ควรมี\" },\n        array: { unit: \"รายการ\", verb: \"ควรมี\" },\n        set: { unit: \"รายการ\", verb: \"ควรมี\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"ไม่ใช่ตัวเลข (NaN)\" : \"ตัวเลข\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"อาร์เรย์ (Array)\";\n                }\n                if (data === null) {\n                    return \"ไม่มีค่า (null)\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"ข้อมูลที่ป้อน\",\n        email: \"ที่อยู่อีเมล\",\n        url: \"URL\",\n        emoji: \"อิโมจิ\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"วันที่เวลาแบบ ISO\",\n        date: \"วันที่แบบ ISO\",\n        time: \"เวลาแบบ ISO\",\n        duration: \"ช่วงเวลาแบบ ISO\",\n        ipv4: \"ที่อยู่ IPv4\",\n        ipv6: \"ที่อยู่ IPv6\",\n        cidrv4: \"ช่วง IP แบบ IPv4\",\n        cidrv6: \"ช่วง IP แบบ IPv6\",\n        base64: \"ข้อความแบบ Base64\",\n        base64url: \"ข้อความแบบ Base64 สำหรับ URL\",\n        json_string: \"ข้อความแบบ JSON\",\n        e164: \"เบอร์โทรศัพท์ระหว่างประเทศ (E.164)\",\n        jwt: \"โทเคน JWT\",\n        template_literal: \"ข้อมูลที่ป้อน\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `ประเภทข้อมูลไม่ถูกต้อง: ควรเป็น ${issue.expected} แต่ได้รับ ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `ค่าไม่ถูกต้อง: ควรเป็น ${util.stringifyPrimitive(issue.values[0])}`;\n                return `ตัวเลือกไม่ถูกต้อง: ควรเป็นหนึ่งใน ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"ไม่เกิน\" : \"น้อยกว่า\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `เกินกำหนด: ${issue.origin ?? \"ค่า\"} ควรมี${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"รายการ\"}`;\n                return `เกินกำหนด: ${issue.origin ?? \"ค่า\"} ควรมี${adj} ${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \"อย่างน้อย\" : \"มากกว่า\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `น้อยกว่ากำหนด: ${issue.origin} ควรมี${adj} ${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `น้อยกว่ากำหนด: ${issue.origin} ควรมี${adj} ${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `รูปแบบไม่ถูกต้อง: ข้อความต้องขึ้นต้นด้วย \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `รูปแบบไม่ถูกต้อง: ข้อความต้องลงท้ายด้วย \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `รูปแบบไม่ถูกต้อง: ข้อความต้องมี \"${_issue.includes}\" อยู่ในข้อความ`;\n                if (_issue.format === \"regex\")\n                    return `รูปแบบไม่ถูกต้อง: ต้องตรงกับรูปแบบที่กำหนด ${_issue.pattern}`;\n                return `รูปแบบไม่ถูกต้อง: ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `ตัวเลขไม่ถูกต้อง: ต้องเป็นจำนวนที่หารด้วย ${issue.divisor} ได้ลงตัว`;\n            case \"unrecognized_keys\":\n                return `พบคีย์ที่ไม่รู้จัก: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `คีย์ไม่ถูกต้องใน ${issue.origin}`;\n            case \"invalid_union\":\n                return \"ข้อมูลไม่ถูกต้อง: ไม่ตรงกับรูปแบบยูเนียนที่กำหนดไว้\";\n            case \"invalid_element\":\n                return `ข้อมูลไม่ถูกต้องใน ${issue.origin}`;\n            default:\n                return `ข้อมูลไม่ถูกต้อง`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"символів\", verb: \"матиме\" },\n        file: { unit: \"байтів\", verb: \"матиме\" },\n        array: { unit: \"елементів\", verb: \"матиме\" },\n        set: { unit: \"елементів\", verb: \"матиме\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"число\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"масив\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"вхідні дані\",\n        email: \"адреса електронної пошти\",\n        url: \"URL\",\n        emoji: \"емодзі\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"дата та час ISO\",\n        date: \"дата ISO\",\n        time: \"час ISO\",\n        duration: \"тривалість ISO\",\n        ipv4: \"адреса IPv4\",\n        ipv6: \"адреса IPv6\",\n        cidrv4: \"діапазон IPv4\",\n        cidrv6: \"діапазон IPv6\",\n        base64: \"рядок у кодуванні base64\",\n        base64url: \"рядок у кодуванні base64url\",\n        json_string: \"рядок JSON\",\n        e164: \"номер E.164\",\n        jwt: \"JWT\",\n        template_literal: \"вхідні дані\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Неправильні вхідні дані: очікується ${issue.expected}, отримано ${parsedType(issue.input)}`;\n            // return `Неправильні вхідні дані: очікується ${issue.expected}, отримано ${util.getParsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Неправильні вхідні дані: очікується ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Неправильна опція: очікується одне з ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Занадто велике: очікується, що ${issue.origin ?? \"значення\"} ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"елементів\"}`;\n                return `Занадто велике: очікується, що ${issue.origin ?? \"значення\"} буде ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Занадто мале: очікується, що ${issue.origin} ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Занадто мале: очікується, що ${issue.origin} буде ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Неправильний рядок: повинен починатися з \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Неправильний рядок: повинен закінчуватися на \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Неправильний рядок: повинен містити \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Неправильний рядок: повинен відповідати шаблону ${_issue.pattern}`;\n                return `Неправильний ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Неправильне число: повинно бути кратним ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Нерозпізнаний ключ${issue.keys.length > 1 ? \"і\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Неправильний ключ у ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Неправильні вхідні дані\";\n            case \"invalid_element\":\n                return `Неправильне значення у ${issue.origin}`;\n            default:\n                return `Неправильні вхідні дані`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"حروف\", verb: \"ہونا\" },\n        file: { unit: \"بائٹس\", verb: \"ہونا\" },\n        array: { unit: \"آئٹمز\", verb: \"ہونا\" },\n        set: { unit: \"آئٹمز\", verb: \"ہونا\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"نمبر\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"آرے\";\n                }\n                if (data === null) {\n                    return \"نل\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"ان پٹ\",\n        email: \"ای میل ایڈریس\",\n        url: \"یو آر ایل\",\n        emoji: \"ایموجی\",\n        uuid: \"یو یو آئی ڈی\",\n        uuidv4: \"یو یو آئی ڈی وی 4\",\n        uuidv6: \"یو یو آئی ڈی وی 6\",\n        nanoid: \"نینو آئی ڈی\",\n        guid: \"جی یو آئی ڈی\",\n        cuid: \"سی یو آئی ڈی\",\n        cuid2: \"سی یو آئی ڈی 2\",\n        ulid: \"یو ایل آئی ڈی\",\n        xid: \"ایکس آئی ڈی\",\n        ksuid: \"کے ایس یو آئی ڈی\",\n        datetime: \"آئی ایس او ڈیٹ ٹائم\",\n        date: \"آئی ایس او تاریخ\",\n        time: \"آئی ایس او وقت\",\n        duration: \"آئی ایس او مدت\",\n        ipv4: \"آئی پی وی 4 ایڈریس\",\n        ipv6: \"آئی پی وی 6 ایڈریس\",\n        cidrv4: \"آئی پی وی 4 رینج\",\n        cidrv6: \"آئی پی وی 6 رینج\",\n        base64: \"بیس 64 ان کوڈڈ سٹرنگ\",\n        base64url: \"بیس 64 یو آر ایل ان کوڈڈ سٹرنگ\",\n        json_string: \"جے ایس او این سٹرنگ\",\n        e164: \"ای 164 نمبر\",\n        jwt: \"جے ڈبلیو ٹی\",\n        template_literal: \"ان پٹ\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `غلط ان پٹ: ${issue.expected} متوقع تھا، ${parsedType(issue.input)} موصول ہوا`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `غلط ان پٹ: ${util.stringifyPrimitive(issue.values[0])} متوقع تھا`;\n                return `غلط آپشن: ${util.joinValues(issue.values, \"|\")} میں سے ایک متوقع تھا`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `بہت بڑا: ${issue.origin ?? \"ویلیو\"} کے ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"عناصر\"} ہونے متوقع تھے`;\n                return `بہت بڑا: ${issue.origin ?? \"ویلیو\"} کا ${adj}${issue.maximum.toString()} ہونا متوقع تھا`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `بہت چھوٹا: ${issue.origin} کے ${adj}${issue.minimum.toString()} ${sizing.unit} ہونے متوقع تھے`;\n                }\n                return `بہت چھوٹا: ${issue.origin} کا ${adj}${issue.minimum.toString()} ہونا متوقع تھا`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `غلط سٹرنگ: \"${_issue.prefix}\" سے شروع ہونا چاہیے`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `غلط سٹرنگ: \"${_issue.suffix}\" پر ختم ہونا چاہیے`;\n                if (_issue.format === \"includes\")\n                    return `غلط سٹرنگ: \"${_issue.includes}\" شامل ہونا چاہیے`;\n                if (_issue.format === \"regex\")\n                    return `غلط سٹرنگ: پیٹرن ${_issue.pattern} سے میچ ہونا چاہیے`;\n                return `غلط ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `غلط نمبر: ${issue.divisor} کا مضاعف ہونا چاہیے`;\n            case \"unrecognized_keys\":\n                return `غیر تسلیم شدہ کی${issue.keys.length > 1 ? \"ز\" : \"\"}: ${util.joinValues(issue.keys, \"، \")}`;\n            case \"invalid_key\":\n                return `${issue.origin} میں غلط کی`;\n            case \"invalid_union\":\n                return \"غلط ان پٹ\";\n            case \"invalid_element\":\n                return `${issue.origin} میں غلط ویلیو`;\n            default:\n                return `غلط ان پٹ`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"字符\", verb: \"包含\" },\n        file: { unit: \"字节\", verb: \"包含\" },\n        array: { unit: \"项\", verb: \"包含\" },\n        set: { unit: \"项\", verb: \"包含\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"非数字(NaN)\" : \"数字\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"数组\";\n                }\n                if (data === null) {\n                    return \"空值(null)\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"输入\",\n        email: \"电子邮件\",\n        url: \"URL\",\n        emoji: \"表情符号\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO日期时间\",\n        date: \"ISO日期\",\n        time: \"ISO时间\",\n        duration: \"ISO时长\",\n        ipv4: \"IPv4地址\",\n        ipv6: \"IPv6地址\",\n        cidrv4: \"IPv4网段\",\n        cidrv6: \"IPv6网段\",\n        base64: \"base64编码字符串\",\n        base64url: \"base64url编码字符串\",\n        json_string: \"JSON字符串\",\n        e164: \"E.164号码\",\n        jwt: \"JWT\",\n        template_literal: \"输入\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `无效输入：期望 ${issue.expected}，实际接收 ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `无效输入：期望 ${util.stringifyPrimitive(issue.values[0])}`;\n                return `无效选项：期望以下之一 ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `数值过大：期望 ${issue.origin ?? \"值\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"个元素\"}`;\n                return `数值过大：期望 ${issue.origin ?? \"值\"} ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `数值过小：期望 ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `数值过小：期望 ${issue.origin} ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `无效字符串：必须以 \"${_issue.prefix}\" 开头`;\n                if (_issue.format === \"ends_with\")\n                    return `无效字符串：必须以 \"${_issue.suffix}\" 结尾`;\n                if (_issue.format === \"includes\")\n                    return `无效字符串：必须包含 \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `无效字符串：必须满足正则表达式 ${_issue.pattern}`;\n                return `无效${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `无效数字：必须是 ${issue.divisor} 的倍数`;\n            case \"unrecognized_keys\":\n                return `出现未知的键(key): ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `${issue.origin} 中的键(key)无效`;\n            case \"invalid_union\":\n                return \"无效输入\";\n            case \"invalid_element\":\n                return `${issue.origin} 中包含无效值(value)`;\n            default:\n                return `无效输入`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"字元\", verb: \"擁有\" },\n        file: { unit: \"位元組\", verb: \"擁有\" },\n        array: { unit: \"項目\", verb: \"擁有\" },\n        set: { unit: \"項目\", verb: \"擁有\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"輸入\",\n        email: \"郵件地址\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO 日期時間\",\n        date: \"ISO 日期\",\n        time: \"ISO 時間\",\n        duration: \"ISO 期間\",\n        ipv4: \"IPv4 位址\",\n        ipv6: \"IPv6 位址\",\n        cidrv4: \"IPv4 範圍\",\n        cidrv6: \"IPv6 範圍\",\n        base64: \"base64 編碼字串\",\n        base64url: \"base64url 編碼字串\",\n        json_string: \"JSON 字串\",\n        e164: \"E.164 數值\",\n        jwt: \"JWT\",\n        template_literal: \"輸入\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `無效的輸入值：預期為 ${issue.expected}，但收到 ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `無效的輸入值：預期為 ${util.stringifyPrimitive(issue.values[0])}`;\n                return `無效的選項：預期為以下其中之一 ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `數值過大：預期 ${issue.origin ?? \"值\"} 應為 ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"個元素\"}`;\n                return `數值過大：預期 ${issue.origin ?? \"值\"} 應為 ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `數值過小：預期 ${issue.origin} 應為 ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `數值過小：預期 ${issue.origin} 應為 ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `無效的字串：必須以 \"${_issue.prefix}\" 開頭`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `無效的字串：必須以 \"${_issue.suffix}\" 結尾`;\n                if (_issue.format === \"includes\")\n                    return `無效的字串：必須包含 \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `無效的字串：必須符合格式 ${_issue.pattern}`;\n                return `無效的 ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `無效的數字：必須為 ${issue.divisor} 的倍數`;\n            case \"unrecognized_keys\":\n                return `無法識別的鍵值${issue.keys.length > 1 ? \"們\" : \"\"}：${util.joinValues(issue.keys, \"、\")}`;\n            case \"invalid_key\":\n                return `${issue.origin} 中有無效的鍵值`;\n            case \"invalid_union\":\n                return \"無效的輸入值\";\n            case \"invalid_element\":\n                return `${issue.origin} 中有無效的值`;\n            default:\n                return `無效的輸入值`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"àmi\", verb: \"ní\" },\n        file: { unit: \"bytes\", verb: \"ní\" },\n        array: { unit: \"nkan\", verb: \"ní\" },\n        set: { unit: \"nkan\", verb: \"ní\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"nọ́mbà\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"akopọ\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"ẹ̀rọ ìbáwọlé\",\n        email: \"àdírẹ́sì ìmẹ́lì\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"àkókò ISO\",\n        date: \"ọjọ́ ISO\",\n        time: \"àkókò ISO\",\n        duration: \"àkókò tó pé ISO\",\n        ipv4: \"àdírẹ́sì IPv4\",\n        ipv6: \"àdírẹ́sì IPv6\",\n        cidrv4: \"àgbègbè IPv4\",\n        cidrv6: \"àgbègbè IPv6\",\n        base64: \"ọ̀rọ̀ tí a kọ́ ní base64\",\n        base64url: \"ọ̀rọ̀ base64url\",\n        json_string: \"ọ̀rọ̀ JSON\",\n        e164: \"nọ́mbà E.164\",\n        jwt: \"JWT\",\n        template_literal: \"ẹ̀rọ ìbáwọlé\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Ìbáwọlé aṣìṣe: a ní láti fi ${issue.expected}, àmọ̀ a rí ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Ìbáwọlé aṣìṣe: a ní láti fi ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Àṣàyàn aṣìṣe: yan ọ̀kan lára ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Tó pọ̀ jù: a ní láti jẹ́ pé ${issue.origin ?? \"iye\"} ${sizing.verb} ${adj}${issue.maximum} ${sizing.unit}`;\n                return `Tó pọ̀ jù: a ní láti jẹ́ ${adj}${issue.maximum}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Kéré ju: a ní láti jẹ́ pé ${issue.origin} ${sizing.verb} ${adj}${issue.minimum} ${sizing.unit}`;\n                return `Kéré ju: a ní láti jẹ́ ${adj}${issue.minimum}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Ọ̀rọ̀ aṣìṣe: gbọ́dọ̀ bẹ̀rẹ̀ pẹ̀lú \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Ọ̀rọ̀ aṣìṣe: gbọ́dọ̀ parí pẹ̀lú \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Ọ̀rọ̀ aṣìṣe: gbọ́dọ̀ ní \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Ọ̀rọ̀ aṣìṣe: gbọ́dọ̀ bá àpẹẹrẹ mu ${_issue.pattern}`;\n                return `Aṣìṣe: ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Nọ́mbà aṣìṣe: gbọ́dọ̀ jẹ́ èyà pípín ti ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Bọtìnì àìmọ̀: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Bọtìnì aṣìṣe nínú ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Ìbáwọlé aṣìṣe\";\n            case \"invalid_element\":\n                return `Iye aṣìṣe nínú ${issue.origin}`;\n            default:\n                return \"Ìbáwọlé aṣìṣe\";\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"aksara\", verb: \"mempunyai\" },\n        file: { unit: \"bait\", verb: \"mempunyai\" },\n        array: { unit: \"elemen\", verb: \"mempunyai\" },\n        set: { unit: \"elemen\", verb: \"mempunyai\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"nombor\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"input\",\n        email: \"alamat e-mel\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"tarikh masa ISO\",\n        date: \"tarikh ISO\",\n        time: \"masa ISO\",\n        duration: \"tempoh ISO\",\n        ipv4: \"alamat IPv4\",\n        ipv6: \"alamat IPv6\",\n        cidrv4: \"julat IPv4\",\n        cidrv6: \"julat IPv6\",\n        base64: \"string dikodkan base64\",\n        base64url: \"string dikodkan base64url\",\n        json_string: \"string JSON\",\n        e164: \"nombor E.164\",\n        jwt: \"JWT\",\n        template_literal: \"input\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Input tidak sah: dijangka ${issue.expected}, diterima ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Input tidak sah: dijangka ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Pilihan tidak sah: dijangka salah satu daripada ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Terlalu besar: dijangka ${issue.origin ?? \"nilai\"} ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elemen\"}`;\n                return `Terlalu besar: dijangka ${issue.origin ?? \"nilai\"} adalah ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Terlalu kecil: dijangka ${issue.origin} ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Terlalu kecil: dijangka ${issue.origin} adalah ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `String tidak sah: mesti bermula dengan \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `String tidak sah: mesti berakhir dengan \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `String tidak sah: mesti mengandungi \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `String tidak sah: mesti sepadan dengan corak ${_issue.pattern}`;\n                return `${Nouns[_issue.format] ?? issue.format} tidak sah`;\n            }\n            case \"not_multiple_of\":\n                return `Nombor tidak sah: perlu gandaan ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Kunci tidak dikenali: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Kunci tidak sah dalam ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Input tidak sah\";\n            case \"invalid_element\":\n                return `Nilai tidak sah dalam ${issue.origin}`;\n            default:\n                return `Input tidak sah`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nexport const parsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"number\": {\n            return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n        case \"object\": {\n            if (Array.isArray(data)) {\n                return \"array\";\n            }\n            if (data === null) {\n                return \"null\";\n            }\n            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                return data.constructor.name;\n            }\n        }\n    }\n    return t;\n};\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"characters\", verb: \"to have\" },\n        file: { unit: \"bytes\", verb: \"to have\" },\n        array: { unit: \"items\", verb: \"to have\" },\n        set: { unit: \"items\", verb: \"to have\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const Nouns = {\n        regex: \"input\",\n        email: \"email address\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO datetime\",\n        date: \"ISO date\",\n        time: \"ISO time\",\n        duration: \"ISO duration\",\n        ipv4: \"IPv4 address\",\n        ipv6: \"IPv6 address\",\n        cidrv4: \"IPv4 range\",\n        cidrv6: \"IPv6 range\",\n        base64: \"base64-encoded string\",\n        base64url: \"base64url-encoded string\",\n        json_string: \"JSON string\",\n        e164: \"E.164 number\",\n        jwt: \"JWT\",\n        template_literal: \"input\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Invalid input: expected ${issue.expected}, received ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Invalid input: expected ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Invalid option: expected one of ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Too big: expected ${issue.origin ?? \"value\"} to have ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elements\"}`;\n                return `Too big: expected ${issue.origin ?? \"value\"} to be ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Too small: expected ${issue.origin} to have ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Too small: expected ${issue.origin} to be ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Invalid string: must start with \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Invalid string: must end with \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Invalid string: must include \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Invalid string: must match pattern ${_issue.pattern}`;\n                return `Invalid ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Invalid number: must be a multiple of ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Unrecognized key${issue.keys.length > 1 ? \"s\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Invalid key in ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Invalid input\";\n            case \"invalid_element\":\n                return `Invalid value in ${issue.origin}`;\n            default:\n                return `Invalid input`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","/** A special constant with type `never` */\nexport const NEVER = Object.freeze({\n    status: \"aborted\",\n});\nexport /*@__NO_SIDE_EFFECTS__*/ function $constructor(name, initializer, params) {\n    function init(inst, def) {\n        var _a;\n        Object.defineProperty(inst, \"_zod\", {\n            value: inst._zod ?? {},\n            enumerable: false,\n        });\n        (_a = inst._zod).traits ?? (_a.traits = new Set());\n        inst._zod.traits.add(name);\n        initializer(inst, def);\n        // support prototype modifications\n        for (const k in _.prototype) {\n            if (!(k in inst))\n                Object.defineProperty(inst, k, { value: _.prototype[k].bind(inst) });\n        }\n        inst._zod.constr = _;\n        inst._zod.def = def;\n    }\n    // doesn't work if Parent has a constructor with arguments\n    const Parent = params?.Parent ?? Object;\n    class Definition extends Parent {\n    }\n    Object.defineProperty(Definition, \"name\", { value: name });\n    function _(def) {\n        var _a;\n        const inst = params?.Parent ? new Definition() : this;\n        init(inst, def);\n        (_a = inst._zod).deferred ?? (_a.deferred = []);\n        for (const fn of inst._zod.deferred) {\n            fn();\n        }\n        return inst;\n    }\n    Object.defineProperty(_, \"init\", { value: init });\n    Object.defineProperty(_, Symbol.hasInstance, {\n        value: (inst) => {\n            if (params?.Parent && inst instanceof params.Parent)\n                return true;\n            return inst?._zod?.traits?.has(name);\n        },\n    });\n    Object.defineProperty(_, \"name\", { value: name });\n    return _;\n}\n//////////////////////////////   UTILITIES   ///////////////////////////////////////\nexport const $brand = Symbol(\"zod_brand\");\nexport class $ZodAsyncError extends Error {\n    constructor() {\n        super(`Encountered Promise during synchronous parse. Use .parseAsync() instead.`);\n    }\n}\nexport class $ZodEncodeError extends Error {\n    constructor(name) {\n        super(`Encountered unidirectional transform during encode: ${name}`);\n        this.name = \"ZodEncodeError\";\n    }\n}\nexport const globalConfig = {};\nexport function config(newConfig) {\n    if (newConfig)\n        Object.assign(globalConfig, newConfig);\n    return globalConfig;\n}\n","import * as util from \"../core/util.js\";\nexport const parsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"number\": {\n            return Number.isNaN(data) ? \"NaN\" : \"nombro\";\n        }\n        case \"object\": {\n            if (Array.isArray(data)) {\n                return \"tabelo\";\n            }\n            if (data === null) {\n                return \"senvalora\";\n            }\n            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                return data.constructor.name;\n            }\n        }\n    }\n    return t;\n};\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"karaktrojn\", verb: \"havi\" },\n        file: { unit: \"bajtojn\", verb: \"havi\" },\n        array: { unit: \"elementojn\", verb: \"havi\" },\n        set: { unit: \"elementojn\", verb: \"havi\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const Nouns = {\n        regex: \"enigo\",\n        email: \"retadreso\",\n        url: \"URL\",\n        emoji: \"emoĝio\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO-datotempo\",\n        date: \"ISO-dato\",\n        time: \"ISO-tempo\",\n        duration: \"ISO-daŭro\",\n        ipv4: \"IPv4-adreso\",\n        ipv6: \"IPv6-adreso\",\n        cidrv4: \"IPv4-rango\",\n        cidrv6: \"IPv6-rango\",\n        base64: \"64-ume kodita karaktraro\",\n        base64url: \"URL-64-ume kodita karaktraro\",\n        json_string: \"JSON-karaktraro\",\n        e164: \"E.164-nombro\",\n        jwt: \"JWT\",\n        template_literal: \"enigo\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Nevalida enigo: atendiĝis ${issue.expected}, riceviĝis ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Nevalida enigo: atendiĝis ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Nevalida opcio: atendiĝis unu el ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Tro granda: atendiĝis ke ${issue.origin ?? \"valoro\"} havu ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elementojn\"}`;\n                return `Tro granda: atendiĝis ke ${issue.origin ?? \"valoro\"} havu ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Tro malgranda: atendiĝis ke ${issue.origin} havu ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Tro malgranda: atendiĝis ke ${issue.origin} estu ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Nevalida karaktraro: devas komenciĝi per \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Nevalida karaktraro: devas finiĝi per \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Nevalida karaktraro: devas inkluzivi \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Nevalida karaktraro: devas kongrui kun la modelo ${_issue.pattern}`;\n                return `Nevalida ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Nevalida nombro: devas esti oblo de ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Nekonata${issue.keys.length > 1 ? \"j\" : \"\"} ŝlosilo${issue.keys.length > 1 ? \"j\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Nevalida ŝlosilo en ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Nevalida enigo\";\n            case \"invalid_element\":\n                return `Nevalida valoro en ${issue.origin}`;\n            default:\n                return `Nevalida enigo`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nexport const parsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"number\": {\n            return Number.isNaN(data) ? \"NaN\" : \"númer\";\n        }\n        case \"object\": {\n            if (Array.isArray(data)) {\n                return \"fylki\";\n            }\n            if (data === null) {\n                return \"null\";\n            }\n            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                return data.constructor.name;\n            }\n        }\n    }\n    return t;\n};\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"stafi\", verb: \"að hafa\" },\n        file: { unit: \"bæti\", verb: \"að hafa\" },\n        array: { unit: \"hluti\", verb: \"að hafa\" },\n        set: { unit: \"hluti\", verb: \"að hafa\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const Nouns = {\n        regex: \"gildi\",\n        email: \"netfang\",\n        url: \"vefslóð\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO dagsetning og tími\",\n        date: \"ISO dagsetning\",\n        time: \"ISO tími\",\n        duration: \"ISO tímalengd\",\n        ipv4: \"IPv4 address\",\n        ipv6: \"IPv6 address\",\n        cidrv4: \"IPv4 range\",\n        cidrv6: \"IPv6 range\",\n        base64: \"base64-encoded strengur\",\n        base64url: \"base64url-encoded strengur\",\n        json_string: \"JSON strengur\",\n        e164: \"E.164 tölugildi\",\n        jwt: \"JWT\",\n        template_literal: \"gildi\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Rangt gildi: Þú slóst inn ${parsedType(issue.input)} þar sem á að vera ${issue.expected}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Rangt gildi: gert ráð fyrir ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Ógilt val: má vera eitt af eftirfarandi ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Of stórt: gert er ráð fyrir að ${issue.origin ?? \"gildi\"} hafi ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"hluti\"}`;\n                return `Of stórt: gert er ráð fyrir að ${issue.origin ?? \"gildi\"} sé ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `Of lítið: gert er ráð fyrir að ${issue.origin} hafi ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `Of lítið: gert er ráð fyrir að ${issue.origin} sé ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Ógildur strengur: verður að byrja á \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Ógildur strengur: verður að enda á \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Ógildur strengur: verður að innihalda \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Ógildur strengur: verður að fylgja mynstri ${_issue.pattern}`;\n                return `Rangt ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Röng tala: verður að vera margfeldi af ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Óþekkt ${issue.keys.length > 1 ? \"ir lyklar\" : \"ur lykill\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Rangur lykill í ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Rangt gildi\";\n            case \"invalid_element\":\n                return `Rangt gildi í ${issue.origin}`;\n            default:\n                return `Rangt gildi`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","import * as util from \"../core/util.js\";\nexport const parsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"number\": {\n            return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n        case \"object\": {\n            if (Array.isArray(data)) {\n                return \"array\";\n            }\n            if (data === null) {\n                return \"null\";\n            }\n            if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                return data.constructor.name;\n            }\n        }\n    }\n    return t;\n};\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"karakter\", verb: \"olmalı\" },\n        file: { unit: \"bayt\", verb: \"olmalı\" },\n        array: { unit: \"öğe\", verb: \"olmalı\" },\n        set: { unit: \"öğe\", verb: \"olmalı\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const Nouns = {\n        regex: \"girdi\",\n        email: \"e-posta adresi\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO tarih ve saat\",\n        date: \"ISO tarih\",\n        time: \"ISO saat\",\n        duration: \"ISO süre\",\n        ipv4: \"IPv4 adresi\",\n        ipv6: \"IPv6 adresi\",\n        cidrv4: \"IPv4 aralığı\",\n        cidrv6: \"IPv6 aralığı\",\n        base64: \"base64 ile şifrelenmiş metin\",\n        base64url: \"base64url ile şifrelenmiş metin\",\n        json_string: \"JSON dizesi\",\n        e164: \"E.164 sayısı\",\n        jwt: \"JWT\",\n        template_literal: \"Şablon dizesi\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Geçersiz değer: beklenen ${issue.expected}, alınan ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Geçersiz değer: beklenen ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Geçersiz seçenek: aşağıdakilerden biri olmalı: ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Çok büyük: beklenen ${issue.origin ?? \"değer\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"öğe\"}`;\n                return `Çok büyük: beklenen ${issue.origin ?? \"değer\"} ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing)\n                    return `Çok küçük: beklenen ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                return `Çok küçük: beklenen ${issue.origin} ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Geçersiz metin: \"${_issue.prefix}\" ile başlamalı`;\n                if (_issue.format === \"ends_with\")\n                    return `Geçersiz metin: \"${_issue.suffix}\" ile bitmeli`;\n                if (_issue.format === \"includes\")\n                    return `Geçersiz metin: \"${_issue.includes}\" içermeli`;\n                if (_issue.format === \"regex\")\n                    return `Geçersiz metin: ${_issue.pattern} desenine uymalı`;\n                return `Geçersiz ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Geçersiz sayı: ${issue.divisor} ile tam bölünebilmeli`;\n            case \"unrecognized_keys\":\n                return `Tanınmayan anahtar${issue.keys.length > 1 ? \"lar\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `${issue.origin} içinde geçersiz anahtar`;\n            case \"invalid_union\":\n                return \"Geçersiz değer\";\n            case \"invalid_element\":\n                return `${issue.origin} içinde geçersiz değer`;\n            default:\n                return `Geçersiz değer`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n","// functions\nexport function assertEqual(val) {\n    return val;\n}\nexport function assertNotEqual(val) {\n    return val;\n}\nexport function assertIs(_arg) { }\nexport function assertNever(_x) {\n    throw new Error();\n}\nexport function assert(_) { }\nexport function getEnumValues(entries) {\n    const numericValues = Object.values(entries).filter((v) => typeof v === \"number\");\n    const values = Object.entries(entries)\n        .filter(([k, _]) => numericValues.indexOf(+k) === -1)\n        .map(([_, v]) => v);\n    return values;\n}\nexport function joinValues(array, separator = \"|\") {\n    return array.map((val) => stringifyPrimitive(val)).join(separator);\n}\nexport function jsonStringifyReplacer(_, value) {\n    if (typeof value === \"bigint\")\n        return value.toString();\n    return value;\n}\nexport function cached(getter) {\n    const set = false;\n    return {\n        get value() {\n            if (!set) {\n                const value = getter();\n                Object.defineProperty(this, \"value\", { value });\n                return value;\n            }\n            throw new Error(\"cached value already set\");\n        },\n    };\n}\nexport function nullish(input) {\n    return input === null || input === undefined;\n}\nexport function cleanRegex(source) {\n    const start = source.startsWith(\"^\") ? 1 : 0;\n    const end = source.endsWith(\"$\") ? source.length - 1 : source.length;\n    return source.slice(start, end);\n}\nexport function floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepString = step.toString();\n    let stepDecCount = (stepString.split(\".\")[1] || \"\").length;\n    if (stepDecCount === 0 && /\\d?e-\\d?/.test(stepString)) {\n        const match = stepString.match(/\\d?e-(\\d?)/);\n        if (match?.[1]) {\n            stepDecCount = Number.parseInt(match[1]);\n        }\n    }\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nconst EVALUATING = Symbol(\"evaluating\");\nexport function defineLazy(object, key, getter) {\n    let value = undefined;\n    Object.defineProperty(object, key, {\n        get() {\n            if (value === EVALUATING) {\n                // Circular reference detected, return undefined to break the cycle\n                return undefined;\n            }\n            if (value === undefined) {\n                value = EVALUATING;\n                value = getter();\n            }\n            return value;\n        },\n        set(v) {\n            Object.defineProperty(object, key, {\n                value: v,\n                // configurable: true,\n            });\n            // object[key] = v;\n        },\n        configurable: true,\n    });\n}\nexport function objectClone(obj) {\n    return Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));\n}\nexport function assignProp(target, prop, value) {\n    Object.defineProperty(target, prop, {\n        value,\n        writable: true,\n        enumerable: true,\n        configurable: true,\n    });\n}\nexport function mergeDefs(...defs) {\n    const mergedDescriptors = {};\n    for (const def of defs) {\n        const descriptors = Object.getOwnPropertyDescriptors(def);\n        Object.assign(mergedDescriptors, descriptors);\n    }\n    return Object.defineProperties({}, mergedDescriptors);\n}\nexport function cloneDef(schema) {\n    return mergeDefs(schema._zod.def);\n}\nexport function getElementAtPath(obj, path) {\n    if (!path)\n        return obj;\n    return path.reduce((acc, key) => acc?.[key], obj);\n}\nexport function promiseAllObject(promisesObj) {\n    const keys = Object.keys(promisesObj);\n    const promises = keys.map((key) => promisesObj[key]);\n    return Promise.all(promises).then((results) => {\n        const resolvedObj = {};\n        for (let i = 0; i < keys.length; i++) {\n            resolvedObj[keys[i]] = results[i];\n        }\n        return resolvedObj;\n    });\n}\nexport function randomString(length = 10) {\n    const chars = \"abcdefghijklmnopqrstuvwxyz\";\n    let str = \"\";\n    for (let i = 0; i < length; i++) {\n        str += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return str;\n}\nexport function esc(str) {\n    return JSON.stringify(str);\n}\nexport const captureStackTrace = (\"captureStackTrace\" in Error ? Error.captureStackTrace : (..._args) => { });\nexport function isObject(data) {\n    return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\nexport const allowsEval = cached(() => {\n    // @ts-ignore\n    if (typeof navigator !== \"undefined\" && navigator?.userAgent?.includes(\"Cloudflare\")) {\n        return false;\n    }\n    try {\n        const F = Function;\n        new F(\"\");\n        return true;\n    }\n    catch (_) {\n        return false;\n    }\n});\nexport function isPlainObject(o) {\n    if (isObject(o) === false)\n        return false;\n    // modified constructor\n    const ctor = o.constructor;\n    if (ctor === undefined)\n        return true;\n    // modified prototype\n    const prot = ctor.prototype;\n    if (isObject(prot) === false)\n        return false;\n    // ctor doesn't have static `isPrototypeOf`\n    if (Object.prototype.hasOwnProperty.call(prot, \"isPrototypeOf\") === false) {\n        return false;\n    }\n    return true;\n}\nexport function shallowClone(o) {\n    if (isPlainObject(o))\n        return { ...o };\n    return o;\n}\nexport function numKeys(data) {\n    let keyCount = 0;\n    for (const key in data) {\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\n            keyCount++;\n        }\n    }\n    return keyCount;\n}\nexport const getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return \"undefined\";\n        case \"string\":\n            return \"string\";\n        case \"number\":\n            return Number.isNaN(data) ? \"nan\" : \"number\";\n        case \"boolean\":\n            return \"boolean\";\n        case \"function\":\n            return \"function\";\n        case \"bigint\":\n            return \"bigint\";\n        case \"symbol\":\n            return \"symbol\";\n        case \"object\":\n            if (Array.isArray(data)) {\n                return \"array\";\n            }\n            if (data === null) {\n                return \"null\";\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return \"promise\";\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return \"map\";\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return \"set\";\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return \"date\";\n            }\n            // @ts-ignore\n            if (typeof File !== \"undefined\" && data instanceof File) {\n                return \"file\";\n            }\n            return \"object\";\n        default:\n            throw new Error(`Unknown data type: ${t}`);\n    }\n};\nexport const propertyKeyTypes = new Set([\"string\", \"number\", \"symbol\"]);\nexport const primitiveTypes = new Set([\"string\", \"number\", \"bigint\", \"boolean\", \"symbol\", \"undefined\"]);\nexport function escapeRegex(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n// zod-specific utils\nexport function clone(inst, def, params) {\n    const cl = new inst._zod.constr(def ?? inst._zod.def);\n    if (!def || params?.parent)\n        cl._zod.parent = inst;\n    return cl;\n}\nexport function normalizeParams(_params) {\n    const params = _params;\n    if (!params)\n        return {};\n    if (typeof params === \"string\")\n        return { error: () => params };\n    if (params?.message !== undefined) {\n        if (params?.error !== undefined)\n            throw new Error(\"Cannot specify both `message` and `error` params\");\n        params.error = params.message;\n    }\n    delete params.message;\n    if (typeof params.error === \"string\")\n        return { ...params, error: () => params.error };\n    return params;\n}\nexport function createTransparentProxy(getter) {\n    let target;\n    return new Proxy({}, {\n        get(_, prop, receiver) {\n            target ?? (target = getter());\n            return Reflect.get(target, prop, receiver);\n        },\n        set(_, prop, value, receiver) {\n            target ?? (target = getter());\n            return Reflect.set(target, prop, value, receiver);\n        },\n        has(_, prop) {\n            target ?? (target = getter());\n            return Reflect.has(target, prop);\n        },\n        deleteProperty(_, prop) {\n            target ?? (target = getter());\n            return Reflect.deleteProperty(target, prop);\n        },\n        ownKeys(_) {\n            target ?? (target = getter());\n            return Reflect.ownKeys(target);\n        },\n        getOwnPropertyDescriptor(_, prop) {\n            target ?? (target = getter());\n            return Reflect.getOwnPropertyDescriptor(target, prop);\n        },\n        defineProperty(_, prop, descriptor) {\n            target ?? (target = getter());\n            return Reflect.defineProperty(target, prop, descriptor);\n        },\n    });\n}\nexport function stringifyPrimitive(value) {\n    if (typeof value === \"bigint\")\n        return value.toString() + \"n\";\n    if (typeof value === \"string\")\n        return `\"${value}\"`;\n    return `${value}`;\n}\nexport function optionalKeys(shape) {\n    return Object.keys(shape).filter((k) => {\n        return shape[k]._zod.optin === \"optional\" && shape[k]._zod.optout === \"optional\";\n    });\n}\nexport const NUMBER_FORMAT_RANGES = {\n    safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],\n    int32: [-2147483648, 2147483647],\n    uint32: [0, 4294967295],\n    float32: [-3.4028234663852886e38, 3.4028234663852886e38],\n    float64: [-Number.MAX_VALUE, Number.MAX_VALUE],\n};\nexport const BIGINT_FORMAT_RANGES = {\n    int64: [/* @__PURE__*/ BigInt(\"-9223372036854775808\"), /* @__PURE__*/ BigInt(\"9223372036854775807\")],\n    uint64: [/* @__PURE__*/ BigInt(0), /* @__PURE__*/ BigInt(\"18446744073709551615\")],\n};\nexport function pick(schema, mask) {\n    const currDef = schema._zod.def;\n    const def = mergeDefs(schema._zod.def, {\n        get shape() {\n            const newShape = {};\n            for (const key in mask) {\n                if (!(key in currDef.shape)) {\n                    throw new Error(`Unrecognized key: \"${key}\"`);\n                }\n                if (!mask[key])\n                    continue;\n                newShape[key] = currDef.shape[key];\n            }\n            assignProp(this, \"shape\", newShape); // self-caching\n            return newShape;\n        },\n        checks: [],\n    });\n    return clone(schema, def);\n}\nexport function omit(schema, mask) {\n    const currDef = schema._zod.def;\n    const def = mergeDefs(schema._zod.def, {\n        get shape() {\n            const newShape = { ...schema._zod.def.shape };\n            for (const key in mask) {\n                if (!(key in currDef.shape)) {\n                    throw new Error(`Unrecognized key: \"${key}\"`);\n                }\n                if (!mask[key])\n                    continue;\n                delete newShape[key];\n            }\n            assignProp(this, \"shape\", newShape); // self-caching\n            return newShape;\n        },\n        checks: [],\n    });\n    return clone(schema, def);\n}\nexport function extend(schema, shape) {\n    if (!isPlainObject(shape)) {\n        throw new Error(\"Invalid input to extend: expected a plain object\");\n    }\n    const checks = schema._zod.def.checks;\n    const hasChecks = checks && checks.length > 0;\n    if (hasChecks) {\n        throw new Error(\"Object schemas containing refinements cannot be extended. Use `.safeExtend()` instead.\");\n    }\n    const def = mergeDefs(schema._zod.def, {\n        get shape() {\n            const _shape = { ...schema._zod.def.shape, ...shape };\n            assignProp(this, \"shape\", _shape); // self-caching\n            return _shape;\n        },\n        checks: [],\n    });\n    return clone(schema, def);\n}\nexport function safeExtend(schema, shape) {\n    if (!isPlainObject(shape)) {\n        throw new Error(\"Invalid input to safeExtend: expected a plain object\");\n    }\n    const def = {\n        ...schema._zod.def,\n        get shape() {\n            const _shape = { ...schema._zod.def.shape, ...shape };\n            assignProp(this, \"shape\", _shape); // self-caching\n            return _shape;\n        },\n        checks: schema._zod.def.checks,\n    };\n    return clone(schema, def);\n}\nexport function merge(a, b) {\n    const def = mergeDefs(a._zod.def, {\n        get shape() {\n            const _shape = { ...a._zod.def.shape, ...b._zod.def.shape };\n            assignProp(this, \"shape\", _shape); // self-caching\n            return _shape;\n        },\n        get catchall() {\n            return b._zod.def.catchall;\n        },\n        checks: [], // delete existing checks\n    });\n    return clone(a, def);\n}\nexport function partial(Class, schema, mask) {\n    const def = mergeDefs(schema._zod.def, {\n        get shape() {\n            const oldShape = schema._zod.def.shape;\n            const shape = { ...oldShape };\n            if (mask) {\n                for (const key in mask) {\n                    if (!(key in oldShape)) {\n                        throw new Error(`Unrecognized key: \"${key}\"`);\n                    }\n                    if (!mask[key])\n                        continue;\n                    // if (oldShape[key]!._zod.optin === \"optional\") continue;\n                    shape[key] = Class\n                        ? new Class({\n                            type: \"optional\",\n                            innerType: oldShape[key],\n                        })\n                        : oldShape[key];\n                }\n            }\n            else {\n                for (const key in oldShape) {\n                    // if (oldShape[key]!._zod.optin === \"optional\") continue;\n                    shape[key] = Class\n                        ? new Class({\n                            type: \"optional\",\n                            innerType: oldShape[key],\n                        })\n                        : oldShape[key];\n                }\n            }\n            assignProp(this, \"shape\", shape); // self-caching\n            return shape;\n        },\n        checks: [],\n    });\n    return clone(schema, def);\n}\nexport function required(Class, schema, mask) {\n    const def = mergeDefs(schema._zod.def, {\n        get shape() {\n            const oldShape = schema._zod.def.shape;\n            const shape = { ...oldShape };\n            if (mask) {\n                for (const key in mask) {\n                    if (!(key in shape)) {\n                        throw new Error(`Unrecognized key: \"${key}\"`);\n                    }\n                    if (!mask[key])\n                        continue;\n                    // overwrite with non-optional\n                    shape[key] = new Class({\n                        type: \"nonoptional\",\n                        innerType: oldShape[key],\n                    });\n                }\n            }\n            else {\n                for (const key in oldShape) {\n                    // overwrite with non-optional\n                    shape[key] = new Class({\n                        type: \"nonoptional\",\n                        innerType: oldShape[key],\n                    });\n                }\n            }\n            assignProp(this, \"shape\", shape); // self-caching\n            return shape;\n        },\n        checks: [],\n    });\n    return clone(schema, def);\n}\n// invalid_type | too_big | too_small | invalid_format | not_multiple_of | unrecognized_keys | invalid_union | invalid_key | invalid_element | invalid_value | custom\nexport function aborted(x, startIndex = 0) {\n    if (x.aborted === true)\n        return true;\n    for (let i = startIndex; i < x.issues.length; i++) {\n        if (x.issues[i]?.continue !== true) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function prefixIssues(path, issues) {\n    return issues.map((iss) => {\n        var _a;\n        (_a = iss).path ?? (_a.path = []);\n        iss.path.unshift(path);\n        return iss;\n    });\n}\nexport function unwrapMessage(message) {\n    return typeof message === \"string\" ? message : message?.message;\n}\nexport function finalizeIssue(iss, ctx, config) {\n    const full = { ...iss, path: iss.path ?? [] };\n    // for backwards compatibility\n    if (!iss.message) {\n        const message = unwrapMessage(iss.inst?._zod.def?.error?.(iss)) ??\n            unwrapMessage(ctx?.error?.(iss)) ??\n            unwrapMessage(config.customError?.(iss)) ??\n            unwrapMessage(config.localeError?.(iss)) ??\n            \"Invalid input\";\n        full.message = message;\n    }\n    // delete (full as any).def;\n    delete full.inst;\n    delete full.continue;\n    if (!ctx?.reportInput) {\n        delete full.input;\n    }\n    return full;\n}\nexport function getSizableOrigin(input) {\n    if (input instanceof Set)\n        return \"set\";\n    if (input instanceof Map)\n        return \"map\";\n    // @ts-ignore\n    if (input instanceof File)\n        return \"file\";\n    return \"unknown\";\n}\nexport function getLengthableOrigin(input) {\n    if (Array.isArray(input))\n        return \"array\";\n    if (typeof input === \"string\")\n        return \"string\";\n    return \"unknown\";\n}\nexport function issue(...args) {\n    const [iss, input, inst] = args;\n    if (typeof iss === \"string\") {\n        return {\n            message: iss,\n            code: \"custom\",\n            input,\n            inst,\n        };\n    }\n    return { ...iss };\n}\nexport function cleanEnum(obj) {\n    return Object.entries(obj)\n        .filter(([k, _]) => {\n        // return true if NaN, meaning it's not a number, thus a string key\n        return Number.isNaN(Number.parseInt(k, 10));\n    })\n        .map((el) => el[1]);\n}\n// Codec utility functions\nexport function base64ToUint8Array(base64) {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function uint8ArrayToBase64(bytes) {\n    let binaryString = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        binaryString += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binaryString);\n}\nexport function base64urlToUint8Array(base64url) {\n    const base64 = base64url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const padding = \"=\".repeat((4 - (base64.length % 4)) % 4);\n    return base64ToUint8Array(base64 + padding);\n}\nexport function uint8ArrayToBase64url(bytes) {\n    return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nexport function hexToUint8Array(hex) {\n    const cleanHex = hex.replace(/^0x/, \"\");\n    if (cleanHex.length % 2 !== 0) {\n        throw new Error(\"Invalid hex string length\");\n    }\n    const bytes = new Uint8Array(cleanHex.length / 2);\n    for (let i = 0; i < cleanHex.length; i += 2) {\n        bytes[i / 2] = Number.parseInt(cleanHex.slice(i, i + 2), 16);\n    }\n    return bytes;\n}\nexport function uint8ArrayToHex(bytes) {\n    return Array.from(bytes)\n        .map((b) => b.toString(16).padStart(2, \"0\"))\n        .join(\"\");\n}\n// instanceof\nexport class Class {\n    constructor(..._args) { }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Primitive } from '../types-hoist/misc';\nimport type { ParameterizedString } from '../types-hoist/parameterize';\nimport type { PolymorphicEvent } from '../types-hoist/polymorphics';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isParameterizedString(wat: unknown): wat is ParameterizedString {\n  return (\n    typeof wat === 'object' &&\n    wat !== null &&\n    '__sentry_template_string__' in wat &&\n    '__sentry_template_values__' in wat\n  );\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || isParameterizedString(wat) || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat?.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch {\n    return false;\n  }\n}\n\ninterface VueViewModel {\n  // Vue3\n  __isVue?: boolean;\n  // Vue2\n  _isVue?: boolean;\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isVueViewModel(wat: unknown): boolean {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat as VueViewModel).__isVue || (wat as VueViewModel)._isVue));\n}\n\n/**\n * Checks whether the given parameter is a Standard Web API Request instance.\n *\n * Returns false if Request is not available in the current runtime.\n */\nexport function isRequest(request: unknown): request is Request {\n  return typeof Request !== 'undefined' && isInstanceOf(request, Request);\n}\n","import { createEnv as createEnv$1 } from \"@t3-oss/env-core\";\n\n//#region src/index.ts\nconst CLIENT_PREFIX = \"NEXT_PUBLIC_\";\n/**\n* Create a new environment variable schema.\n*/\nfunction createEnv(opts) {\n\tconst client = typeof opts.client === \"object\" ? opts.client : {};\n\tconst server = typeof opts.server === \"object\" ? opts.server : {};\n\tconst shared = opts.shared;\n\tconst runtimeEnv = opts.runtimeEnv ? opts.runtimeEnv : {\n\t\t...process.env,\n\t\t...opts.experimental__runtimeEnv\n\t};\n\treturn createEnv$1({\n\t\t...opts,\n\t\tshared,\n\t\tclient,\n\t\tserver,\n\t\tclientPrefix: CLIENT_PREFIX,\n\t\truntimeEnv\n\t});\n}\n\n//#endregion\nexport { createEnv };","import { $constructor } from \"./core.js\";\nimport * as util from \"./util.js\";\nconst initializer = (inst, def) => {\n    inst.name = \"$ZodError\";\n    Object.defineProperty(inst, \"_zod\", {\n        value: inst._zod,\n        enumerable: false,\n    });\n    Object.defineProperty(inst, \"issues\", {\n        value: def,\n        enumerable: false,\n    });\n    inst.message = JSON.stringify(def, util.jsonStringifyReplacer, 2);\n    Object.defineProperty(inst, \"toString\", {\n        value: () => inst.message,\n        enumerable: false,\n    });\n};\nexport const $ZodError = $constructor(\"$ZodError\", initializer);\nexport const $ZodRealError = $constructor(\"$ZodError\", initializer, { Parent: Error });\nexport function flattenError(error, mapper = (issue) => issue.message) {\n    const fieldErrors = {};\n    const formErrors = [];\n    for (const sub of error.issues) {\n        if (sub.path.length > 0) {\n            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n            fieldErrors[sub.path[0]].push(mapper(sub));\n        }\n        else {\n            formErrors.push(mapper(sub));\n        }\n    }\n    return { formErrors, fieldErrors };\n}\nexport function formatError(error, _mapper) {\n    const mapper = _mapper ||\n        function (issue) {\n            return issue.message;\n        };\n    const fieldErrors = { _errors: [] };\n    const processError = (error) => {\n        for (const issue of error.issues) {\n            if (issue.code === \"invalid_union\" && issue.errors.length) {\n                issue.errors.map((issues) => processError({ issues }));\n            }\n            else if (issue.code === \"invalid_key\") {\n                processError({ issues: issue.issues });\n            }\n            else if (issue.code === \"invalid_element\") {\n                processError({ issues: issue.issues });\n            }\n            else if (issue.path.length === 0) {\n                fieldErrors._errors.push(mapper(issue));\n            }\n            else {\n                let curr = fieldErrors;\n                let i = 0;\n                while (i < issue.path.length) {\n                    const el = issue.path[i];\n                    const terminal = i === issue.path.length - 1;\n                    if (!terminal) {\n                        curr[el] = curr[el] || { _errors: [] };\n                    }\n                    else {\n                        curr[el] = curr[el] || { _errors: [] };\n                        curr[el]._errors.push(mapper(issue));\n                    }\n                    curr = curr[el];\n                    i++;\n                }\n            }\n        }\n    };\n    processError(error);\n    return fieldErrors;\n}\nexport function treeifyError(error, _mapper) {\n    const mapper = _mapper ||\n        function (issue) {\n            return issue.message;\n        };\n    const result = { errors: [] };\n    const processError = (error, path = []) => {\n        var _a, _b;\n        for (const issue of error.issues) {\n            if (issue.code === \"invalid_union\" && issue.errors.length) {\n                // regular union error\n                issue.errors.map((issues) => processError({ issues }, issue.path));\n            }\n            else if (issue.code === \"invalid_key\") {\n                processError({ issues: issue.issues }, issue.path);\n            }\n            else if (issue.code === \"invalid_element\") {\n                processError({ issues: issue.issues }, issue.path);\n            }\n            else {\n                const fullpath = [...path, ...issue.path];\n                if (fullpath.length === 0) {\n                    result.errors.push(mapper(issue));\n                    continue;\n                }\n                let curr = result;\n                let i = 0;\n                while (i < fullpath.length) {\n                    const el = fullpath[i];\n                    const terminal = i === fullpath.length - 1;\n                    if (typeof el === \"string\") {\n                        curr.properties ?? (curr.properties = {});\n                        (_a = curr.properties)[el] ?? (_a[el] = { errors: [] });\n                        curr = curr.properties[el];\n                    }\n                    else {\n                        curr.items ?? (curr.items = []);\n                        (_b = curr.items)[el] ?? (_b[el] = { errors: [] });\n                        curr = curr.items[el];\n                    }\n                    if (terminal) {\n                        curr.errors.push(mapper(issue));\n                    }\n                    i++;\n                }\n            }\n        }\n    };\n    processError(error);\n    return result;\n}\n/** Format a ZodError as a human-readable string in the following form.\n *\n * From\n *\n * ```ts\n * ZodError {\n *   issues: [\n *     {\n *       expected: 'string',\n *       code: 'invalid_type',\n *       path: [ 'username' ],\n *       message: 'Invalid input: expected string'\n *     },\n *     {\n *       expected: 'number',\n *       code: 'invalid_type',\n *       path: [ 'favoriteNumbers', 1 ],\n *       message: 'Invalid input: expected number'\n *     }\n *   ];\n * }\n * ```\n *\n * to\n *\n * ```\n * username\n *   ✖ Expected number, received string at \"username\n * favoriteNumbers[0]\n *   ✖ Invalid input: expected number\n * ```\n */\nexport function toDotPath(_path) {\n    const segs = [];\n    const path = _path.map((seg) => (typeof seg === \"object\" ? seg.key : seg));\n    for (const seg of path) {\n        if (typeof seg === \"number\")\n            segs.push(`[${seg}]`);\n        else if (typeof seg === \"symbol\")\n            segs.push(`[${JSON.stringify(String(seg))}]`);\n        else if (/[^\\w$]/.test(seg))\n            segs.push(`[${JSON.stringify(seg)}]`);\n        else {\n            if (segs.length)\n                segs.push(\".\");\n            segs.push(seg);\n        }\n    }\n    return segs.join(\"\");\n}\nexport function prettifyError(error) {\n    const lines = [];\n    // sort by path length\n    const issues = [...error.issues].sort((a, b) => (a.path ?? []).length - (b.path ?? []).length);\n    // Process each issue\n    for (const issue of issues) {\n        lines.push(`✖ ${issue.message}`);\n        if (issue.path?.length)\n            lines.push(`  → at ${toDotPath(issue.path)}`);\n    }\n    // Convert Map to formatted string\n    return lines.join(\"\\n\");\n}\n","import * as core from \"../core/index.js\";\nimport * as schemas from \"./schemas.js\";\nexport function string(params) {\n    return core._coercedString(schemas.ZodString, params);\n}\nexport function number(params) {\n    return core._coercedNumber(schemas.ZodNumber, params);\n}\nexport function boolean(params) {\n    return core._coercedBoolean(schemas.ZodBoolean, params);\n}\nexport function bigint(params) {\n    return core._coercedBigint(schemas.ZodBigInt, params);\n}\nexport function date(params) {\n    return core._coercedDate(schemas.ZodDate, params);\n}\n","import { $ZodRegistry, globalRegistry } from \"./registries.js\";\nimport { getEnumValues } from \"./util.js\";\nexport class JSONSchemaGenerator {\n    constructor(params) {\n        this.counter = 0;\n        this.metadataRegistry = params?.metadata ?? globalRegistry;\n        this.target = params?.target ?? \"draft-2020-12\";\n        this.unrepresentable = params?.unrepresentable ?? \"throw\";\n        this.override = params?.override ?? (() => { });\n        this.io = params?.io ?? \"output\";\n        this.seen = new Map();\n    }\n    process(schema, _params = { path: [], schemaPath: [] }) {\n        var _a;\n        const def = schema._zod.def;\n        const formatMap = {\n            guid: \"uuid\",\n            url: \"uri\",\n            datetime: \"date-time\",\n            json_string: \"json-string\",\n            regex: \"\", // do not set\n        };\n        // check for schema in seens\n        const seen = this.seen.get(schema);\n        if (seen) {\n            seen.count++;\n            // check if cycle\n            const isCycle = _params.schemaPath.includes(schema);\n            if (isCycle) {\n                seen.cycle = _params.path;\n            }\n            return seen.schema;\n        }\n        // initialize\n        const result = { schema: {}, count: 1, cycle: undefined, path: _params.path };\n        this.seen.set(schema, result);\n        // custom method overrides default behavior\n        const overrideSchema = schema._zod.toJSONSchema?.();\n        if (overrideSchema) {\n            result.schema = overrideSchema;\n        }\n        else {\n            const params = {\n                ..._params,\n                schemaPath: [..._params.schemaPath, schema],\n                path: _params.path,\n            };\n            const parent = schema._zod.parent;\n            if (parent) {\n                // schema was cloned from another schema\n                result.ref = parent;\n                this.process(parent, params);\n                this.seen.get(parent).isParent = true;\n            }\n            else {\n                const _json = result.schema;\n                switch (def.type) {\n                    case \"string\": {\n                        const json = _json;\n                        json.type = \"string\";\n                        const { minimum, maximum, format, patterns, contentEncoding } = schema._zod\n                            .bag;\n                        if (typeof minimum === \"number\")\n                            json.minLength = minimum;\n                        if (typeof maximum === \"number\")\n                            json.maxLength = maximum;\n                        // custom pattern overrides format\n                        if (format) {\n                            json.format = formatMap[format] ?? format;\n                            if (json.format === \"\")\n                                delete json.format; // empty format is not valid\n                        }\n                        if (contentEncoding)\n                            json.contentEncoding = contentEncoding;\n                        if (patterns && patterns.size > 0) {\n                            const regexes = [...patterns];\n                            if (regexes.length === 1)\n                                json.pattern = regexes[0].source;\n                            else if (regexes.length > 1) {\n                                result.schema.allOf = [\n                                    ...regexes.map((regex) => ({\n                                        ...(this.target === \"draft-7\" || this.target === \"draft-4\" || this.target === \"openapi-3.0\"\n                                            ? { type: \"string\" }\n                                            : {}),\n                                        pattern: regex.source,\n                                    })),\n                                ];\n                            }\n                        }\n                        break;\n                    }\n                    case \"number\": {\n                        const json = _json;\n                        const { minimum, maximum, format, multipleOf, exclusiveMaximum, exclusiveMinimum } = schema._zod.bag;\n                        if (typeof format === \"string\" && format.includes(\"int\"))\n                            json.type = \"integer\";\n                        else\n                            json.type = \"number\";\n                        if (typeof exclusiveMinimum === \"number\") {\n                            if (this.target === \"draft-4\" || this.target === \"openapi-3.0\") {\n                                json.minimum = exclusiveMinimum;\n                                json.exclusiveMinimum = true;\n                            }\n                            else {\n                                json.exclusiveMinimum = exclusiveMinimum;\n                            }\n                        }\n                        if (typeof minimum === \"number\") {\n                            json.minimum = minimum;\n                            if (typeof exclusiveMinimum === \"number\" && this.target !== \"draft-4\") {\n                                if (exclusiveMinimum >= minimum)\n                                    delete json.minimum;\n                                else\n                                    delete json.exclusiveMinimum;\n                            }\n                        }\n                        if (typeof exclusiveMaximum === \"number\") {\n                            if (this.target === \"draft-4\" || this.target === \"openapi-3.0\") {\n                                json.maximum = exclusiveMaximum;\n                                json.exclusiveMaximum = true;\n                            }\n                            else {\n                                json.exclusiveMaximum = exclusiveMaximum;\n                            }\n                        }\n                        if (typeof maximum === \"number\") {\n                            json.maximum = maximum;\n                            if (typeof exclusiveMaximum === \"number\" && this.target !== \"draft-4\") {\n                                if (exclusiveMaximum <= maximum)\n                                    delete json.maximum;\n                                else\n                                    delete json.exclusiveMaximum;\n                            }\n                        }\n                        if (typeof multipleOf === \"number\")\n                            json.multipleOf = multipleOf;\n                        break;\n                    }\n                    case \"boolean\": {\n                        const json = _json;\n                        json.type = \"boolean\";\n                        break;\n                    }\n                    case \"bigint\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"BigInt cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"symbol\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Symbols cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"null\": {\n                        if (this.target === \"openapi-3.0\") {\n                            _json.type = \"string\";\n                            _json.nullable = true;\n                            _json.enum = [null];\n                        }\n                        else\n                            _json.type = \"null\";\n                        break;\n                    }\n                    case \"any\": {\n                        break;\n                    }\n                    case \"unknown\": {\n                        break;\n                    }\n                    case \"undefined\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Undefined cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"void\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Void cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"never\": {\n                        _json.not = {};\n                        break;\n                    }\n                    case \"date\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Date cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"array\": {\n                        const json = _json;\n                        const { minimum, maximum } = schema._zod.bag;\n                        if (typeof minimum === \"number\")\n                            json.minItems = minimum;\n                        if (typeof maximum === \"number\")\n                            json.maxItems = maximum;\n                        json.type = \"array\";\n                        json.items = this.process(def.element, { ...params, path: [...params.path, \"items\"] });\n                        break;\n                    }\n                    case \"object\": {\n                        const json = _json;\n                        json.type = \"object\";\n                        json.properties = {};\n                        const shape = def.shape; // params.shapeCache.get(schema)!;\n                        for (const key in shape) {\n                            json.properties[key] = this.process(shape[key], {\n                                ...params,\n                                path: [...params.path, \"properties\", key],\n                            });\n                        }\n                        // required keys\n                        const allKeys = new Set(Object.keys(shape));\n                        // const optionalKeys = new Set(def.optional);\n                        const requiredKeys = new Set([...allKeys].filter((key) => {\n                            const v = def.shape[key]._zod;\n                            if (this.io === \"input\") {\n                                return v.optin === undefined;\n                            }\n                            else {\n                                return v.optout === undefined;\n                            }\n                        }));\n                        if (requiredKeys.size > 0) {\n                            json.required = Array.from(requiredKeys);\n                        }\n                        // catchall\n                        if (def.catchall?._zod.def.type === \"never\") {\n                            // strict\n                            json.additionalProperties = false;\n                        }\n                        else if (!def.catchall) {\n                            // regular\n                            if (this.io === \"output\")\n                                json.additionalProperties = false;\n                        }\n                        else if (def.catchall) {\n                            json.additionalProperties = this.process(def.catchall, {\n                                ...params,\n                                path: [...params.path, \"additionalProperties\"],\n                            });\n                        }\n                        break;\n                    }\n                    case \"union\": {\n                        const json = _json;\n                        const options = def.options.map((x, i) => this.process(x, {\n                            ...params,\n                            path: [...params.path, \"anyOf\", i],\n                        }));\n                        json.anyOf = options;\n                        break;\n                    }\n                    case \"intersection\": {\n                        const json = _json;\n                        const a = this.process(def.left, {\n                            ...params,\n                            path: [...params.path, \"allOf\", 0],\n                        });\n                        const b = this.process(def.right, {\n                            ...params,\n                            path: [...params.path, \"allOf\", 1],\n                        });\n                        const isSimpleIntersection = (val) => \"allOf\" in val && Object.keys(val).length === 1;\n                        const allOf = [\n                            ...(isSimpleIntersection(a) ? a.allOf : [a]),\n                            ...(isSimpleIntersection(b) ? b.allOf : [b]),\n                        ];\n                        json.allOf = allOf;\n                        break;\n                    }\n                    case \"tuple\": {\n                        const json = _json;\n                        json.type = \"array\";\n                        const prefixPath = this.target === \"draft-2020-12\" ? \"prefixItems\" : \"items\";\n                        const restPath = this.target === \"draft-2020-12\" ? \"items\" : this.target === \"openapi-3.0\" ? \"items\" : \"additionalItems\";\n                        const prefixItems = def.items.map((x, i) => this.process(x, {\n                            ...params,\n                            path: [...params.path, prefixPath, i],\n                        }));\n                        const rest = def.rest\n                            ? this.process(def.rest, {\n                                ...params,\n                                path: [...params.path, restPath, ...(this.target === \"openapi-3.0\" ? [def.items.length] : [])],\n                            })\n                            : null;\n                        if (this.target === \"draft-2020-12\") {\n                            json.prefixItems = prefixItems;\n                            if (rest) {\n                                json.items = rest;\n                            }\n                        }\n                        else if (this.target === \"openapi-3.0\") {\n                            json.items = {\n                                anyOf: prefixItems,\n                            };\n                            if (rest) {\n                                json.items.anyOf.push(rest);\n                            }\n                            json.minItems = prefixItems.length;\n                            if (!rest) {\n                                json.maxItems = prefixItems.length;\n                            }\n                        }\n                        else {\n                            json.items = prefixItems;\n                            if (rest) {\n                                json.additionalItems = rest;\n                            }\n                        }\n                        // length\n                        const { minimum, maximum } = schema._zod.bag;\n                        if (typeof minimum === \"number\")\n                            json.minItems = minimum;\n                        if (typeof maximum === \"number\")\n                            json.maxItems = maximum;\n                        break;\n                    }\n                    case \"record\": {\n                        const json = _json;\n                        json.type = \"object\";\n                        if (this.target === \"draft-7\" || this.target === \"draft-2020-12\") {\n                            json.propertyNames = this.process(def.keyType, {\n                                ...params,\n                                path: [...params.path, \"propertyNames\"],\n                            });\n                        }\n                        json.additionalProperties = this.process(def.valueType, {\n                            ...params,\n                            path: [...params.path, \"additionalProperties\"],\n                        });\n                        break;\n                    }\n                    case \"map\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Map cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"set\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Set cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"enum\": {\n                        const json = _json;\n                        const values = getEnumValues(def.entries);\n                        // Number enums can have both string and number values\n                        if (values.every((v) => typeof v === \"number\"))\n                            json.type = \"number\";\n                        if (values.every((v) => typeof v === \"string\"))\n                            json.type = \"string\";\n                        json.enum = values;\n                        break;\n                    }\n                    case \"literal\": {\n                        const json = _json;\n                        const vals = [];\n                        for (const val of def.values) {\n                            if (val === undefined) {\n                                if (this.unrepresentable === \"throw\") {\n                                    throw new Error(\"Literal `undefined` cannot be represented in JSON Schema\");\n                                }\n                                else {\n                                    // do not add to vals\n                                }\n                            }\n                            else if (typeof val === \"bigint\") {\n                                if (this.unrepresentable === \"throw\") {\n                                    throw new Error(\"BigInt literals cannot be represented in JSON Schema\");\n                                }\n                                else {\n                                    vals.push(Number(val));\n                                }\n                            }\n                            else {\n                                vals.push(val);\n                            }\n                        }\n                        if (vals.length === 0) {\n                            // do nothing (an undefined literal was stripped)\n                        }\n                        else if (vals.length === 1) {\n                            const val = vals[0];\n                            json.type = val === null ? \"null\" : typeof val;\n                            if (this.target === \"draft-4\" || this.target === \"openapi-3.0\") {\n                                json.enum = [val];\n                            }\n                            else {\n                                json.const = val;\n                            }\n                        }\n                        else {\n                            if (vals.every((v) => typeof v === \"number\"))\n                                json.type = \"number\";\n                            if (vals.every((v) => typeof v === \"string\"))\n                                json.type = \"string\";\n                            if (vals.every((v) => typeof v === \"boolean\"))\n                                json.type = \"string\";\n                            if (vals.every((v) => v === null))\n                                json.type = \"null\";\n                            json.enum = vals;\n                        }\n                        break;\n                    }\n                    case \"file\": {\n                        const json = _json;\n                        const file = {\n                            type: \"string\",\n                            format: \"binary\",\n                            contentEncoding: \"binary\",\n                        };\n                        const { minimum, maximum, mime } = schema._zod.bag;\n                        if (minimum !== undefined)\n                            file.minLength = minimum;\n                        if (maximum !== undefined)\n                            file.maxLength = maximum;\n                        if (mime) {\n                            if (mime.length === 1) {\n                                file.contentMediaType = mime[0];\n                                Object.assign(json, file);\n                            }\n                            else {\n                                json.anyOf = mime.map((m) => {\n                                    const mFile = { ...file, contentMediaType: m };\n                                    return mFile;\n                                });\n                            }\n                        }\n                        else {\n                            Object.assign(json, file);\n                        }\n                        // if (this.unrepresentable === \"throw\") {\n                        //   throw new Error(\"File cannot be represented in JSON Schema\");\n                        // }\n                        break;\n                    }\n                    case \"transform\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Transforms cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"nullable\": {\n                        const inner = this.process(def.innerType, params);\n                        if (this.target === \"openapi-3.0\") {\n                            result.ref = def.innerType;\n                            _json.nullable = true;\n                        }\n                        else {\n                            _json.anyOf = [inner, { type: \"null\" }];\n                        }\n                        break;\n                    }\n                    case \"nonoptional\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        break;\n                    }\n                    case \"success\": {\n                        const json = _json;\n                        json.type = \"boolean\";\n                        break;\n                    }\n                    case \"default\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        _json.default = JSON.parse(JSON.stringify(def.defaultValue));\n                        break;\n                    }\n                    case \"prefault\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        if (this.io === \"input\")\n                            _json._prefault = JSON.parse(JSON.stringify(def.defaultValue));\n                        break;\n                    }\n                    case \"catch\": {\n                        // use conditionals\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        let catchValue;\n                        try {\n                            catchValue = def.catchValue(undefined);\n                        }\n                        catch {\n                            throw new Error(\"Dynamic catch values are not supported in JSON Schema\");\n                        }\n                        _json.default = catchValue;\n                        break;\n                    }\n                    case \"nan\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"NaN cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"template_literal\": {\n                        const json = _json;\n                        const pattern = schema._zod.pattern;\n                        if (!pattern)\n                            throw new Error(\"Pattern not found in template literal\");\n                        json.type = \"string\";\n                        json.pattern = pattern.source;\n                        break;\n                    }\n                    case \"pipe\": {\n                        const innerType = this.io === \"input\" ? (def.in._zod.def.type === \"transform\" ? def.out : def.in) : def.out;\n                        this.process(innerType, params);\n                        result.ref = innerType;\n                        break;\n                    }\n                    case \"readonly\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        _json.readOnly = true;\n                        break;\n                    }\n                    // passthrough types\n                    case \"promise\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        break;\n                    }\n                    case \"optional\": {\n                        this.process(def.innerType, params);\n                        result.ref = def.innerType;\n                        break;\n                    }\n                    case \"lazy\": {\n                        const innerType = schema._zod.innerType;\n                        this.process(innerType, params);\n                        result.ref = innerType;\n                        break;\n                    }\n                    case \"custom\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Custom types cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    case \"function\": {\n                        if (this.unrepresentable === \"throw\") {\n                            throw new Error(\"Function types cannot be represented in JSON Schema\");\n                        }\n                        break;\n                    }\n                    default: {\n                        def;\n                    }\n                }\n            }\n        }\n        // metadata\n        const meta = this.metadataRegistry.get(schema);\n        if (meta)\n            Object.assign(result.schema, meta);\n        if (this.io === \"input\" && isTransforming(schema)) {\n            // examples/defaults only apply to output type of pipe\n            delete result.schema.examples;\n            delete result.schema.default;\n        }\n        // set prefault as default\n        if (this.io === \"input\" && result.schema._prefault)\n            (_a = result.schema).default ?? (_a.default = result.schema._prefault);\n        delete result.schema._prefault;\n        // pulling fresh from this.seen in case it was overwritten\n        const _result = this.seen.get(schema);\n        return _result.schema;\n    }\n    emit(schema, _params) {\n        const params = {\n            cycles: _params?.cycles ?? \"ref\",\n            reused: _params?.reused ?? \"inline\",\n            // unrepresentable: _params?.unrepresentable ?? \"throw\",\n            // uri: _params?.uri ?? ((id) => `${id}`),\n            external: _params?.external ?? undefined,\n        };\n        // iterate over seen map;\n        const root = this.seen.get(schema);\n        if (!root)\n            throw new Error(\"Unprocessed schema. This is a bug in Zod.\");\n        // initialize result with root schema fields\n        // Object.assign(result, seen.cached);\n        // returns a ref to the schema\n        // defId will be empty if the ref points to an external schema (or #)\n        const makeURI = (entry) => {\n            // comparing the seen objects because sometimes\n            // multiple schemas map to the same seen object.\n            // e.g. lazy\n            // external is configured\n            const defsSegment = this.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\n            if (params.external) {\n                const externalId = params.external.registry.get(entry[0])?.id; // ?? \"__shared\";// `__schema${this.counter++}`;\n                // check if schema is in the external registry\n                const uriGenerator = params.external.uri ?? ((id) => id);\n                if (externalId) {\n                    return { ref: uriGenerator(externalId) };\n                }\n                // otherwise, add to __shared\n                const id = entry[1].defId ?? entry[1].schema.id ?? `schema${this.counter++}`;\n                entry[1].defId = id; // set defId so it will be reused if needed\n                return { defId: id, ref: `${uriGenerator(\"__shared\")}#/${defsSegment}/${id}` };\n            }\n            if (entry[1] === root) {\n                return { ref: \"#\" };\n            }\n            // self-contained schema\n            const uriPrefix = `#`;\n            const defUriPrefix = `${uriPrefix}/${defsSegment}/`;\n            const defId = entry[1].schema.id ?? `__schema${this.counter++}`;\n            return { defId, ref: defUriPrefix + defId };\n        };\n        // stored cached version in `def` property\n        // remove all properties, set $ref\n        const extractToDef = (entry) => {\n            // if the schema is already a reference, do not extract it\n            if (entry[1].schema.$ref) {\n                return;\n            }\n            const seen = entry[1];\n            const { ref, defId } = makeURI(entry);\n            seen.def = { ...seen.schema };\n            // defId won't be set if the schema is a reference to an external schema\n            if (defId)\n                seen.defId = defId;\n            // wipe away all properties except $ref\n            const schema = seen.schema;\n            for (const key in schema) {\n                delete schema[key];\n            }\n            schema.$ref = ref;\n        };\n        // throw on cycles\n        // break cycles\n        if (params.cycles === \"throw\") {\n            for (const entry of this.seen.entries()) {\n                const seen = entry[1];\n                if (seen.cycle) {\n                    throw new Error(\"Cycle detected: \" +\n                        `#/${seen.cycle?.join(\"/\")}/<root>` +\n                        '\\n\\nSet the `cycles` parameter to `\"ref\"` to resolve cyclical schemas with defs.');\n                }\n            }\n        }\n        // extract schemas into $defs\n        for (const entry of this.seen.entries()) {\n            const seen = entry[1];\n            // convert root schema to # $ref\n            if (schema === entry[0]) {\n                extractToDef(entry); // this has special handling for the root schema\n                continue;\n            }\n            // extract schemas that are in the external registry\n            if (params.external) {\n                const ext = params.external.registry.get(entry[0])?.id;\n                if (schema !== entry[0] && ext) {\n                    extractToDef(entry);\n                    continue;\n                }\n            }\n            // extract schemas with `id` meta\n            const id = this.metadataRegistry.get(entry[0])?.id;\n            if (id) {\n                extractToDef(entry);\n                continue;\n            }\n            // break cycles\n            if (seen.cycle) {\n                // any\n                extractToDef(entry);\n                continue;\n            }\n            // extract reused schemas\n            if (seen.count > 1) {\n                if (params.reused === \"ref\") {\n                    extractToDef(entry);\n                    // biome-ignore lint:\n                    continue;\n                }\n            }\n        }\n        // flatten _refs\n        const flattenRef = (zodSchema, params) => {\n            const seen = this.seen.get(zodSchema);\n            const schema = seen.def ?? seen.schema;\n            const _cached = { ...schema };\n            // already seen\n            if (seen.ref === null) {\n                return;\n            }\n            // flatten ref if defined\n            const ref = seen.ref;\n            seen.ref = null; // prevent recursion\n            if (ref) {\n                flattenRef(ref, params);\n                // merge referenced schema into current\n                const refSchema = this.seen.get(ref).schema;\n                if (refSchema.$ref &&\n                    (params.target === \"draft-7\" || params.target === \"draft-4\" || params.target === \"openapi-3.0\")) {\n                    schema.allOf = schema.allOf ?? [];\n                    schema.allOf.push(refSchema);\n                }\n                else {\n                    Object.assign(schema, refSchema);\n                    Object.assign(schema, _cached); // prevent overwriting any fields in the original schema\n                }\n            }\n            // execute overrides\n            if (!seen.isParent)\n                this.override({\n                    zodSchema: zodSchema,\n                    jsonSchema: schema,\n                    path: seen.path ?? [],\n                });\n        };\n        for (const entry of [...this.seen.entries()].reverse()) {\n            flattenRef(entry[0], { target: this.target });\n        }\n        const result = {};\n        if (this.target === \"draft-2020-12\") {\n            result.$schema = \"https://json-schema.org/draft/2020-12/schema\";\n        }\n        else if (this.target === \"draft-7\") {\n            result.$schema = \"http://json-schema.org/draft-07/schema#\";\n        }\n        else if (this.target === \"draft-4\") {\n            result.$schema = \"http://json-schema.org/draft-04/schema#\";\n        }\n        else if (this.target === \"openapi-3.0\") {\n            // OpenAPI 3.0 schema objects should not include a $schema property\n        }\n        else {\n            // @ts-ignore\n            console.warn(`Invalid target: ${this.target}`);\n        }\n        if (params.external?.uri) {\n            const id = params.external.registry.get(schema)?.id;\n            if (!id)\n                throw new Error(\"Schema is missing an `id` property\");\n            result.$id = params.external.uri(id);\n        }\n        Object.assign(result, root.def);\n        // build defs object\n        const defs = params.external?.defs ?? {};\n        for (const entry of this.seen.entries()) {\n            const seen = entry[1];\n            if (seen.def && seen.defId) {\n                defs[seen.defId] = seen.def;\n            }\n        }\n        // set definitions in result\n        if (params.external) {\n        }\n        else {\n            if (Object.keys(defs).length > 0) {\n                if (this.target === \"draft-2020-12\") {\n                    result.$defs = defs;\n                }\n                else {\n                    result.definitions = defs;\n                }\n            }\n        }\n        try {\n            // this \"finalizes\" this schema and ensures all cycles are removed\n            // each call to .emit() is functionally independent\n            // though the seen map is shared\n            return JSON.parse(JSON.stringify(result));\n        }\n        catch (_err) {\n            throw new Error(\"Error converting schema to JSON.\");\n        }\n    }\n}\nexport function toJSONSchema(input, _params) {\n    if (input instanceof $ZodRegistry) {\n        const gen = new JSONSchemaGenerator(_params);\n        const defs = {};\n        for (const entry of input._idmap.entries()) {\n            const [_, schema] = entry;\n            gen.process(schema);\n        }\n        const schemas = {};\n        const external = {\n            registry: input,\n            uri: _params?.uri,\n            defs,\n        };\n        for (const entry of input._idmap.entries()) {\n            const [key, schema] = entry;\n            schemas[key] = gen.emit(schema, {\n                ..._params,\n                external,\n            });\n        }\n        if (Object.keys(defs).length > 0) {\n            const defsSegment = gen.target === \"draft-2020-12\" ? \"$defs\" : \"definitions\";\n            schemas.__shared = {\n                [defsSegment]: defs,\n            };\n        }\n        return { schemas };\n    }\n    const gen = new JSONSchemaGenerator(_params);\n    gen.process(input);\n    return gen.emit(input, _params);\n}\nfunction isTransforming(_schema, _ctx) {\n    const ctx = _ctx ?? { seen: new Set() };\n    if (ctx.seen.has(_schema))\n        return false;\n    ctx.seen.add(_schema);\n    const schema = _schema;\n    const def = schema._zod.def;\n    switch (def.type) {\n        case \"string\":\n        case \"number\":\n        case \"bigint\":\n        case \"boolean\":\n        case \"date\":\n        case \"symbol\":\n        case \"undefined\":\n        case \"null\":\n        case \"any\":\n        case \"unknown\":\n        case \"never\":\n        case \"void\":\n        case \"literal\":\n        case \"enum\":\n        case \"nan\":\n        case \"file\":\n        case \"template_literal\":\n            return false;\n        case \"array\": {\n            return isTransforming(def.element, ctx);\n        }\n        case \"object\": {\n            for (const key in def.shape) {\n                if (isTransforming(def.shape[key], ctx))\n                    return true;\n            }\n            return false;\n        }\n        case \"union\": {\n            for (const option of def.options) {\n                if (isTransforming(option, ctx))\n                    return true;\n            }\n            return false;\n        }\n        case \"intersection\": {\n            return isTransforming(def.left, ctx) || isTransforming(def.right, ctx);\n        }\n        case \"tuple\": {\n            for (const item of def.items) {\n                if (isTransforming(item, ctx))\n                    return true;\n            }\n            if (def.rest && isTransforming(def.rest, ctx))\n                return true;\n            return false;\n        }\n        case \"record\": {\n            return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\n        }\n        case \"map\": {\n            return isTransforming(def.keyType, ctx) || isTransforming(def.valueType, ctx);\n        }\n        case \"set\": {\n            return isTransforming(def.valueType, ctx);\n        }\n        // inner types\n        case \"promise\":\n        case \"optional\":\n        case \"nonoptional\":\n        case \"nullable\":\n        case \"readonly\":\n            return isTransforming(def.innerType, ctx);\n        case \"lazy\":\n            return isTransforming(def.getter(), ctx);\n        case \"default\": {\n            return isTransforming(def.innerType, ctx);\n        }\n        case \"prefault\": {\n            return isTransforming(def.innerType, ctx);\n        }\n        case \"custom\": {\n            return false;\n        }\n        case \"transform\": {\n            return true;\n        }\n        case \"pipe\": {\n            return isTransforming(def.in, ctx) || isTransforming(def.out, ctx);\n        }\n        case \"success\": {\n            return false;\n        }\n        case \"catch\": {\n            return false;\n        }\n        case \"function\": {\n            return false;\n        }\n        default:\n            def;\n    }\n    throw new Error(`Unknown schema type: ${def.type}`);\n}\n","import * as core from \"../core/index.js\";\nimport * as schemas from \"./schemas.js\";\nexport const ZodISODateTime = /*@__PURE__*/ core.$constructor(\"ZodISODateTime\", (inst, def) => {\n    core.$ZodISODateTime.init(inst, def);\n    schemas.ZodStringFormat.init(inst, def);\n});\nexport function datetime(params) {\n    return core._isoDateTime(ZodISODateTime, params);\n}\nexport const ZodISODate = /*@__PURE__*/ core.$constructor(\"ZodISODate\", (inst, def) => {\n    core.$ZodISODate.init(inst, def);\n    schemas.ZodStringFormat.init(inst, def);\n});\nexport function date(params) {\n    return core._isoDate(ZodISODate, params);\n}\nexport const ZodISOTime = /*@__PURE__*/ core.$constructor(\"ZodISOTime\", (inst, def) => {\n    core.$ZodISOTime.init(inst, def);\n    schemas.ZodStringFormat.init(inst, def);\n});\nexport function time(params) {\n    return core._isoTime(ZodISOTime, params);\n}\nexport const ZodISODuration = /*@__PURE__*/ core.$constructor(\"ZodISODuration\", (inst, def) => {\n    core.$ZodISODuration.init(inst, def);\n    schemas.ZodStringFormat.init(inst, def);\n});\nexport function duration(params) {\n    return core._isoDuration(ZodISODuration, params);\n}\n","import * as core from \"../core/index.js\";\nimport { ZodRealError } from \"./errors.js\";\nexport const parse = /* @__PURE__ */ core._parse(ZodRealError);\nexport const parseAsync = /* @__PURE__ */ core._parseAsync(ZodRealError);\nexport const safeParse = /* @__PURE__ */ core._safeParse(ZodRealError);\nexport const safeParseAsync = /* @__PURE__ */ core._safeParseAsync(ZodRealError);\n// Codec functions\nexport const encode = /* @__PURE__ */ core._encode(ZodRealError);\nexport const decode = /* @__PURE__ */ core._decode(ZodRealError);\nexport const encodeAsync = /* @__PURE__ */ core._encodeAsync(ZodRealError);\nexport const decodeAsync = /* @__PURE__ */ core._decodeAsync(ZodRealError);\nexport const safeEncode = /* @__PURE__ */ core._safeEncode(ZodRealError);\nexport const safeDecode = /* @__PURE__ */ core._safeDecode(ZodRealError);\nexport const safeEncodeAsync = /* @__PURE__ */ core._safeEncodeAsync(ZodRealError);\nexport const safeDecodeAsync = /* @__PURE__ */ core._safeDecodeAsync(ZodRealError);\n","import type { Span } from '../../types-hoist/span';\n\n// Global Map to track tool call IDs to their corresponding spans\n// This allows us to capture tool errors and link them to the correct span\nexport const toolCallSpanMap = new Map<string, Span>();\n","import { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\nexport const SENTRY_BUFFER_FULL_ERROR = Symbol.for('SentryBufferFullError');\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T | void> {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n","import { defineIntegration, escapeStringForRegex, rewriteFramesIntegration } from '@sentry/core';\n\nexport const distDirRewriteFramesIntegration = defineIntegration(({ distDirName }: { distDirName: string }) => {\n  const distDirAbsPath = distDirName.replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // Normally we would use `path.resolve` to obtain the absolute path we will strip from the stack frame to align with\n  // the uploaded artifacts, however we don't have access to that API in edge so we need to be a bit more lax.\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(`.*${escapeStringForRegex(distDirAbsPath)}`);\n\n  const rewriteFramesIntegrationInstance = rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  return {\n    ...rewriteFramesIntegrationInstance,\n    name: 'DistDirRewriteFrames',\n  };\n});\n","import * as core from \"../core/index.js\";\nimport { $ZodError } from \"../core/index.js\";\nimport * as util from \"../core/util.js\";\nconst initializer = (inst, issues) => {\n    $ZodError.init(inst, issues);\n    inst.name = \"ZodError\";\n    Object.defineProperties(inst, {\n        format: {\n            value: (mapper) => core.formatError(inst, mapper),\n            // enumerable: false,\n        },\n        flatten: {\n            value: (mapper) => core.flattenError(inst, mapper),\n            // enumerable: false,\n        },\n        addIssue: {\n            value: (issue) => {\n                inst.issues.push(issue);\n                inst.message = JSON.stringify(inst.issues, util.jsonStringifyReplacer, 2);\n            },\n            // enumerable: false,\n        },\n        addIssues: {\n            value: (issues) => {\n                inst.issues.push(...issues);\n                inst.message = JSON.stringify(inst.issues, util.jsonStringifyReplacer, 2);\n            },\n            // enumerable: false,\n        },\n        isEmpty: {\n            get() {\n                return inst.issues.length === 0;\n            },\n            // enumerable: false,\n        },\n    });\n    // Object.defineProperty(inst, \"isEmpty\", {\n    //   get() {\n    //     return inst.issues.length === 0;\n    //   },\n    // });\n};\nexport const ZodError = core.$constructor(\"ZodError\", initializer);\nexport const ZodRealError = core.$constructor(\"ZodError\", initializer, {\n    Parent: Error,\n});\n// /** @deprecated Use `z.core.$ZodErrorMapCtx` instead. */\n// export type ErrorMapCtx = core.$ZodErrorMapCtx;\n","/** A simple Least Recently Used map */\nexport class LRUMap<K, V> {\n  private readonly _cache: Map<K, V>;\n\n  public constructor(private readonly _maxSize: number) {\n    this._cache = new Map<K, V>();\n  }\n\n  /** Get the current size of the cache */\n  public get size(): number {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  public get(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  public set(key: K, value: V): void {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  public remove(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  public clear(): void {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  public keys(): Array<K> {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  public values(): Array<V> {\n    const values: V[] = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\n","import * as checks from \"./checks.js\";\nimport * as schemas from \"./schemas.js\";\nimport * as util from \"./util.js\";\nexport function _string(Class, params) {\n    return new Class({\n        type: \"string\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _coercedString(Class, params) {\n    return new Class({\n        type: \"string\",\n        coerce: true,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _email(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"email\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _guid(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"guid\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _uuid(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"uuid\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _uuidv4(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"uuid\",\n        check: \"string_format\",\n        abort: false,\n        version: \"v4\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _uuidv6(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"uuid\",\n        check: \"string_format\",\n        abort: false,\n        version: \"v6\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _uuidv7(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"uuid\",\n        check: \"string_format\",\n        abort: false,\n        version: \"v7\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _url(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"url\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _emoji(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"emoji\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _nanoid(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"nanoid\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _cuid(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"cuid\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _cuid2(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"cuid2\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _ulid(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"ulid\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _xid(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"xid\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _ksuid(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"ksuid\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _ipv4(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"ipv4\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _ipv6(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"ipv6\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _cidrv4(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"cidrv4\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _cidrv6(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"cidrv6\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _base64(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"base64\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _base64url(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"base64url\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _e164(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"e164\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _jwt(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"jwt\",\n        check: \"string_format\",\n        abort: false,\n        ...util.normalizeParams(params),\n    });\n}\nexport const TimePrecision = {\n    Any: null,\n    Minute: -1,\n    Second: 0,\n    Millisecond: 3,\n    Microsecond: 6,\n};\nexport function _isoDateTime(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"datetime\",\n        check: \"string_format\",\n        offset: false,\n        local: false,\n        precision: null,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _isoDate(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"date\",\n        check: \"string_format\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _isoTime(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"time\",\n        check: \"string_format\",\n        precision: null,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _isoDuration(Class, params) {\n    return new Class({\n        type: \"string\",\n        format: \"duration\",\n        check: \"string_format\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _number(Class, params) {\n    return new Class({\n        type: \"number\",\n        checks: [],\n        ...util.normalizeParams(params),\n    });\n}\nexport function _coercedNumber(Class, params) {\n    return new Class({\n        type: \"number\",\n        coerce: true,\n        checks: [],\n        ...util.normalizeParams(params),\n    });\n}\nexport function _int(Class, params) {\n    return new Class({\n        type: \"number\",\n        check: \"number_format\",\n        abort: false,\n        format: \"safeint\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _float32(Class, params) {\n    return new Class({\n        type: \"number\",\n        check: \"number_format\",\n        abort: false,\n        format: \"float32\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _float64(Class, params) {\n    return new Class({\n        type: \"number\",\n        check: \"number_format\",\n        abort: false,\n        format: \"float64\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _int32(Class, params) {\n    return new Class({\n        type: \"number\",\n        check: \"number_format\",\n        abort: false,\n        format: \"int32\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _uint32(Class, params) {\n    return new Class({\n        type: \"number\",\n        check: \"number_format\",\n        abort: false,\n        format: \"uint32\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _boolean(Class, params) {\n    return new Class({\n        type: \"boolean\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _coercedBoolean(Class, params) {\n    return new Class({\n        type: \"boolean\",\n        coerce: true,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _bigint(Class, params) {\n    return new Class({\n        type: \"bigint\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _coercedBigint(Class, params) {\n    return new Class({\n        type: \"bigint\",\n        coerce: true,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _int64(Class, params) {\n    return new Class({\n        type: \"bigint\",\n        check: \"bigint_format\",\n        abort: false,\n        format: \"int64\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _uint64(Class, params) {\n    return new Class({\n        type: \"bigint\",\n        check: \"bigint_format\",\n        abort: false,\n        format: \"uint64\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _symbol(Class, params) {\n    return new Class({\n        type: \"symbol\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _undefined(Class, params) {\n    return new Class({\n        type: \"undefined\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _null(Class, params) {\n    return new Class({\n        type: \"null\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _any(Class) {\n    return new Class({\n        type: \"any\",\n    });\n}\nexport function _unknown(Class) {\n    return new Class({\n        type: \"unknown\",\n    });\n}\nexport function _never(Class, params) {\n    return new Class({\n        type: \"never\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _void(Class, params) {\n    return new Class({\n        type: \"void\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _date(Class, params) {\n    return new Class({\n        type: \"date\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _coercedDate(Class, params) {\n    return new Class({\n        type: \"date\",\n        coerce: true,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _nan(Class, params) {\n    return new Class({\n        type: \"nan\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _lt(value, params) {\n    return new checks.$ZodCheckLessThan({\n        check: \"less_than\",\n        ...util.normalizeParams(params),\n        value,\n        inclusive: false,\n    });\n}\nexport function _lte(value, params) {\n    return new checks.$ZodCheckLessThan({\n        check: \"less_than\",\n        ...util.normalizeParams(params),\n        value,\n        inclusive: true,\n    });\n}\nexport { \n/** @deprecated Use `z.lte()` instead. */\n_lte as _max, };\nexport function _gt(value, params) {\n    return new checks.$ZodCheckGreaterThan({\n        check: \"greater_than\",\n        ...util.normalizeParams(params),\n        value,\n        inclusive: false,\n    });\n}\nexport function _gte(value, params) {\n    return new checks.$ZodCheckGreaterThan({\n        check: \"greater_than\",\n        ...util.normalizeParams(params),\n        value,\n        inclusive: true,\n    });\n}\nexport { \n/** @deprecated Use `z.gte()` instead. */\n_gte as _min, };\nexport function _positive(params) {\n    return _gt(0, params);\n}\n// negative\nexport function _negative(params) {\n    return _lt(0, params);\n}\n// nonpositive\nexport function _nonpositive(params) {\n    return _lte(0, params);\n}\n// nonnegative\nexport function _nonnegative(params) {\n    return _gte(0, params);\n}\nexport function _multipleOf(value, params) {\n    return new checks.$ZodCheckMultipleOf({\n        check: \"multiple_of\",\n        ...util.normalizeParams(params),\n        value,\n    });\n}\nexport function _maxSize(maximum, params) {\n    return new checks.$ZodCheckMaxSize({\n        check: \"max_size\",\n        ...util.normalizeParams(params),\n        maximum,\n    });\n}\nexport function _minSize(minimum, params) {\n    return new checks.$ZodCheckMinSize({\n        check: \"min_size\",\n        ...util.normalizeParams(params),\n        minimum,\n    });\n}\nexport function _size(size, params) {\n    return new checks.$ZodCheckSizeEquals({\n        check: \"size_equals\",\n        ...util.normalizeParams(params),\n        size,\n    });\n}\nexport function _maxLength(maximum, params) {\n    const ch = new checks.$ZodCheckMaxLength({\n        check: \"max_length\",\n        ...util.normalizeParams(params),\n        maximum,\n    });\n    return ch;\n}\nexport function _minLength(minimum, params) {\n    return new checks.$ZodCheckMinLength({\n        check: \"min_length\",\n        ...util.normalizeParams(params),\n        minimum,\n    });\n}\nexport function _length(length, params) {\n    return new checks.$ZodCheckLengthEquals({\n        check: \"length_equals\",\n        ...util.normalizeParams(params),\n        length,\n    });\n}\nexport function _regex(pattern, params) {\n    return new checks.$ZodCheckRegex({\n        check: \"string_format\",\n        format: \"regex\",\n        ...util.normalizeParams(params),\n        pattern,\n    });\n}\nexport function _lowercase(params) {\n    return new checks.$ZodCheckLowerCase({\n        check: \"string_format\",\n        format: \"lowercase\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _uppercase(params) {\n    return new checks.$ZodCheckUpperCase({\n        check: \"string_format\",\n        format: \"uppercase\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _includes(includes, params) {\n    return new checks.$ZodCheckIncludes({\n        check: \"string_format\",\n        format: \"includes\",\n        ...util.normalizeParams(params),\n        includes,\n    });\n}\nexport function _startsWith(prefix, params) {\n    return new checks.$ZodCheckStartsWith({\n        check: \"string_format\",\n        format: \"starts_with\",\n        ...util.normalizeParams(params),\n        prefix,\n    });\n}\nexport function _endsWith(suffix, params) {\n    return new checks.$ZodCheckEndsWith({\n        check: \"string_format\",\n        format: \"ends_with\",\n        ...util.normalizeParams(params),\n        suffix,\n    });\n}\nexport function _property(property, schema, params) {\n    return new checks.$ZodCheckProperty({\n        check: \"property\",\n        property,\n        schema,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _mime(types, params) {\n    return new checks.$ZodCheckMimeType({\n        check: \"mime_type\",\n        mime: types,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _overwrite(tx) {\n    return new checks.$ZodCheckOverwrite({\n        check: \"overwrite\",\n        tx,\n    });\n}\n// normalize\nexport function _normalize(form) {\n    return _overwrite((input) => input.normalize(form));\n}\n// trim\nexport function _trim() {\n    return _overwrite((input) => input.trim());\n}\n// toLowerCase\nexport function _toLowerCase() {\n    return _overwrite((input) => input.toLowerCase());\n}\n// toUpperCase\nexport function _toUpperCase() {\n    return _overwrite((input) => input.toUpperCase());\n}\nexport function _array(Class, element, params) {\n    return new Class({\n        type: \"array\",\n        element,\n        // get element() {\n        //   return element;\n        // },\n        ...util.normalizeParams(params),\n    });\n}\nexport function _union(Class, options, params) {\n    return new Class({\n        type: \"union\",\n        options,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _discriminatedUnion(Class, discriminator, options, params) {\n    return new Class({\n        type: \"union\",\n        options,\n        discriminator,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _intersection(Class, left, right) {\n    return new Class({\n        type: \"intersection\",\n        left,\n        right,\n    });\n}\n// export function _tuple(\n//   Class: util.SchemaClass<schemas.$ZodTuple>,\n//   items: [],\n//   params?: string | $ZodTupleParams\n// ): schemas.$ZodTuple<[], null>;\nexport function _tuple(Class, items, _paramsOrRest, _params) {\n    const hasRest = _paramsOrRest instanceof schemas.$ZodType;\n    const params = hasRest ? _params : _paramsOrRest;\n    const rest = hasRest ? _paramsOrRest : null;\n    return new Class({\n        type: \"tuple\",\n        items,\n        rest,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _record(Class, keyType, valueType, params) {\n    return new Class({\n        type: \"record\",\n        keyType,\n        valueType,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _map(Class, keyType, valueType, params) {\n    return new Class({\n        type: \"map\",\n        keyType,\n        valueType,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _set(Class, valueType, params) {\n    return new Class({\n        type: \"set\",\n        valueType,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _enum(Class, values, params) {\n    const entries = Array.isArray(values) ? Object.fromEntries(values.map((v) => [v, v])) : values;\n    // if (Array.isArray(values)) {\n    //   for (const value of values) {\n    //     entries[value] = value;\n    //   }\n    // } else {\n    //   Object.assign(entries, values);\n    // }\n    // const entries: util.EnumLike = {};\n    // for (const val of values) {\n    //   entries[val] = val;\n    // }\n    return new Class({\n        type: \"enum\",\n        entries,\n        ...util.normalizeParams(params),\n    });\n}\n/** @deprecated This API has been merged into `z.enum()`. Use `z.enum()` instead.\n *\n * ```ts\n * enum Colors { red, green, blue }\n * z.enum(Colors);\n * ```\n */\nexport function _nativeEnum(Class, entries, params) {\n    return new Class({\n        type: \"enum\",\n        entries,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _literal(Class, value, params) {\n    return new Class({\n        type: \"literal\",\n        values: Array.isArray(value) ? value : [value],\n        ...util.normalizeParams(params),\n    });\n}\nexport function _file(Class, params) {\n    return new Class({\n        type: \"file\",\n        ...util.normalizeParams(params),\n    });\n}\nexport function _transform(Class, fn) {\n    return new Class({\n        type: \"transform\",\n        transform: fn,\n    });\n}\nexport function _optional(Class, innerType) {\n    return new Class({\n        type: \"optional\",\n        innerType,\n    });\n}\nexport function _nullable(Class, innerType) {\n    return new Class({\n        type: \"nullable\",\n        innerType,\n    });\n}\nexport function _default(Class, innerType, defaultValue) {\n    return new Class({\n        type: \"default\",\n        innerType,\n        get defaultValue() {\n            return typeof defaultValue === \"function\" ? defaultValue() : util.shallowClone(defaultValue);\n        },\n    });\n}\nexport function _nonoptional(Class, innerType, params) {\n    return new Class({\n        type: \"nonoptional\",\n        innerType,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _success(Class, innerType) {\n    return new Class({\n        type: \"success\",\n        innerType,\n    });\n}\nexport function _catch(Class, innerType, catchValue) {\n    return new Class({\n        type: \"catch\",\n        innerType,\n        catchValue: (typeof catchValue === \"function\" ? catchValue : () => catchValue),\n    });\n}\nexport function _pipe(Class, in_, out) {\n    return new Class({\n        type: \"pipe\",\n        in: in_,\n        out,\n    });\n}\nexport function _readonly(Class, innerType) {\n    return new Class({\n        type: \"readonly\",\n        innerType,\n    });\n}\nexport function _templateLiteral(Class, parts, params) {\n    return new Class({\n        type: \"template_literal\",\n        parts,\n        ...util.normalizeParams(params),\n    });\n}\nexport function _lazy(Class, getter) {\n    return new Class({\n        type: \"lazy\",\n        getter,\n    });\n}\nexport function _promise(Class, innerType) {\n    return new Class({\n        type: \"promise\",\n        innerType,\n    });\n}\nexport function _custom(Class, fn, _params) {\n    const norm = util.normalizeParams(_params);\n    norm.abort ?? (norm.abort = true); // default to abort:false\n    const schema = new Class({\n        type: \"custom\",\n        check: \"custom\",\n        fn: fn,\n        ...norm,\n    });\n    return schema;\n}\n// same as _custom but defaults to abort:false\nexport function _refine(Class, fn, _params) {\n    const schema = new Class({\n        type: \"custom\",\n        check: \"custom\",\n        fn: fn,\n        ...util.normalizeParams(_params),\n    });\n    return schema;\n}\nexport function _superRefine(fn) {\n    const ch = _check((payload) => {\n        payload.addIssue = (issue) => {\n            if (typeof issue === \"string\") {\n                payload.issues.push(util.issue(issue, payload.value, ch._zod.def));\n            }\n            else {\n                // for Zod 3 backwards compatibility\n                const _issue = issue;\n                if (_issue.fatal)\n                    _issue.continue = false;\n                _issue.code ?? (_issue.code = \"custom\");\n                _issue.input ?? (_issue.input = payload.value);\n                _issue.inst ?? (_issue.inst = ch);\n                _issue.continue ?? (_issue.continue = !ch._zod.def.abort); // abort is always undefined, so this is always true...\n                payload.issues.push(util.issue(_issue));\n            }\n        };\n        return fn(payload.value, payload);\n    });\n    return ch;\n}\nexport function _check(fn, params) {\n    const ch = new checks.$ZodCheck({\n        check: \"custom\",\n        ...util.normalizeParams(params),\n    });\n    ch._zod.check = fn;\n    return ch;\n}\nexport function _stringbool(Classes, _params) {\n    const params = util.normalizeParams(_params);\n    let truthyArray = params.truthy ?? [\"true\", \"1\", \"yes\", \"on\", \"y\", \"enabled\"];\n    let falsyArray = params.falsy ?? [\"false\", \"0\", \"no\", \"off\", \"n\", \"disabled\"];\n    if (params.case !== \"sensitive\") {\n        truthyArray = truthyArray.map((v) => (typeof v === \"string\" ? v.toLowerCase() : v));\n        falsyArray = falsyArray.map((v) => (typeof v === \"string\" ? v.toLowerCase() : v));\n    }\n    const truthySet = new Set(truthyArray);\n    const falsySet = new Set(falsyArray);\n    const _Codec = Classes.Codec ?? schemas.$ZodCodec;\n    const _Boolean = Classes.Boolean ?? schemas.$ZodBoolean;\n    const _String = Classes.String ?? schemas.$ZodString;\n    const stringSchema = new _String({ type: \"string\", error: params.error });\n    const booleanSchema = new _Boolean({ type: \"boolean\", error: params.error });\n    const codec = new _Codec({\n        type: \"pipe\",\n        in: stringSchema,\n        out: booleanSchema,\n        transform: ((input, payload) => {\n            let data = input;\n            if (params.case !== \"sensitive\")\n                data = data.toLowerCase();\n            if (truthySet.has(data)) {\n                return true;\n            }\n            else if (falsySet.has(data)) {\n                return false;\n            }\n            else {\n                payload.issues.push({\n                    code: \"invalid_value\",\n                    expected: \"stringbool\",\n                    values: [...truthySet, ...falsySet],\n                    input: payload.value,\n                    inst: codec,\n                    continue: false,\n                });\n                return {};\n            }\n        }),\n        reverseTransform: ((input, _payload) => {\n            if (input === true) {\n                return truthyArray[0] || \"true\";\n            }\n            else {\n                return falsyArray[0] || \"false\";\n            }\n        }),\n        error: params.error,\n    });\n    return codec;\n}\nexport function _stringFormat(Class, format, fnOrRegex, _params = {}) {\n    const params = util.normalizeParams(_params);\n    const def = {\n        ...util.normalizeParams(_params),\n        check: \"string_format\",\n        type: \"string\",\n        format,\n        fn: typeof fnOrRegex === \"function\" ? fnOrRegex : (val) => fnOrRegex.test(val),\n        ...params,\n    };\n    if (fnOrRegex instanceof RegExp) {\n        def.pattern = fnOrRegex;\n    }\n    const inst = new Class(def);\n    return inst;\n}\n","import * as core from \"./core.js\";\nimport * as errors from \"./errors.js\";\nimport * as util from \"./util.js\";\nexport const _parse = (_Err) => (schema, value, _ctx, _params) => {\n    const ctx = _ctx ? Object.assign(_ctx, { async: false }) : { async: false };\n    const result = schema._zod.run({ value, issues: [] }, ctx);\n    if (result instanceof Promise) {\n        throw new core.$ZodAsyncError();\n    }\n    if (result.issues.length) {\n        const e = new (_params?.Err ?? _Err)(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())));\n        util.captureStackTrace(e, _params?.callee);\n        throw e;\n    }\n    return result.value;\n};\nexport const parse = /* @__PURE__*/ _parse(errors.$ZodRealError);\nexport const _parseAsync = (_Err) => async (schema, value, _ctx, params) => {\n    const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };\n    let result = schema._zod.run({ value, issues: [] }, ctx);\n    if (result instanceof Promise)\n        result = await result;\n    if (result.issues.length) {\n        const e = new (params?.Err ?? _Err)(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())));\n        util.captureStackTrace(e, params?.callee);\n        throw e;\n    }\n    return result.value;\n};\nexport const parseAsync = /* @__PURE__*/ _parseAsync(errors.$ZodRealError);\nexport const _safeParse = (_Err) => (schema, value, _ctx) => {\n    const ctx = _ctx ? { ..._ctx, async: false } : { async: false };\n    const result = schema._zod.run({ value, issues: [] }, ctx);\n    if (result instanceof Promise) {\n        throw new core.$ZodAsyncError();\n    }\n    return result.issues.length\n        ? {\n            success: false,\n            error: new (_Err ?? errors.$ZodError)(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config()))),\n        }\n        : { success: true, data: result.value };\n};\nexport const safeParse = /* @__PURE__*/ _safeParse(errors.$ZodRealError);\nexport const _safeParseAsync = (_Err) => async (schema, value, _ctx) => {\n    const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };\n    let result = schema._zod.run({ value, issues: [] }, ctx);\n    if (result instanceof Promise)\n        result = await result;\n    return result.issues.length\n        ? {\n            success: false,\n            error: new _Err(result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config()))),\n        }\n        : { success: true, data: result.value };\n};\nexport const safeParseAsync = /* @__PURE__*/ _safeParseAsync(errors.$ZodRealError);\nexport const _encode = (_Err) => (schema, value, _ctx) => {\n    const ctx = _ctx ? Object.assign(_ctx, { direction: \"backward\" }) : { direction: \"backward\" };\n    return _parse(_Err)(schema, value, ctx);\n};\nexport const encode = /* @__PURE__*/ _encode(errors.$ZodRealError);\nexport const _decode = (_Err) => (schema, value, _ctx) => {\n    return _parse(_Err)(schema, value, _ctx);\n};\nexport const decode = /* @__PURE__*/ _decode(errors.$ZodRealError);\nexport const _encodeAsync = (_Err) => async (schema, value, _ctx) => {\n    const ctx = _ctx ? Object.assign(_ctx, { direction: \"backward\" }) : { direction: \"backward\" };\n    return _parseAsync(_Err)(schema, value, ctx);\n};\nexport const encodeAsync = /* @__PURE__*/ _encodeAsync(errors.$ZodRealError);\nexport const _decodeAsync = (_Err) => async (schema, value, _ctx) => {\n    return _parseAsync(_Err)(schema, value, _ctx);\n};\nexport const decodeAsync = /* @__PURE__*/ _decodeAsync(errors.$ZodRealError);\nexport const _safeEncode = (_Err) => (schema, value, _ctx) => {\n    const ctx = _ctx ? Object.assign(_ctx, { direction: \"backward\" }) : { direction: \"backward\" };\n    return _safeParse(_Err)(schema, value, ctx);\n};\nexport const safeEncode = /* @__PURE__*/ _safeEncode(errors.$ZodRealError);\nexport const _safeDecode = (_Err) => (schema, value, _ctx) => {\n    return _safeParse(_Err)(schema, value, _ctx);\n};\nexport const safeDecode = /* @__PURE__*/ _safeDecode(errors.$ZodRealError);\nexport const _safeEncodeAsync = (_Err) => async (schema, value, _ctx) => {\n    const ctx = _ctx ? Object.assign(_ctx, { direction: \"backward\" }) : { direction: \"backward\" };\n    return _safeParseAsync(_Err)(schema, value, ctx);\n};\nexport const safeEncodeAsync = /* @__PURE__*/ _safeEncodeAsync(errors.$ZodRealError);\nexport const _safeDecodeAsync = (_Err) => async (schema, value, _ctx) => {\n    return _safeParseAsync(_Err)(schema, value, _ctx);\n};\nexport const safeDecodeAsync = /* @__PURE__*/ _safeDecodeAsync(errors.$ZodRealError);\n","// Zod 3 compat layer\nimport * as core from \"../core/index.js\";\n/** @deprecated Use the raw string literal codes instead, e.g. \"invalid_type\". */\nexport const ZodIssueCode = {\n    invalid_type: \"invalid_type\",\n    too_big: \"too_big\",\n    too_small: \"too_small\",\n    invalid_format: \"invalid_format\",\n    not_multiple_of: \"not_multiple_of\",\n    unrecognized_keys: \"unrecognized_keys\",\n    invalid_union: \"invalid_union\",\n    invalid_key: \"invalid_key\",\n    invalid_element: \"invalid_element\",\n    invalid_value: \"invalid_value\",\n    custom: \"custom\",\n};\nexport { $brand, config } from \"../core/index.js\";\n/** @deprecated Use `z.config(params)` instead. */\nexport function setErrorMap(map) {\n    core.config({\n        customError: map,\n    });\n}\n/** @deprecated Use `z.config()` instead. */\nexport function getErrorMap() {\n    return core.config().customError;\n}\n/** @deprecated Do not use. Stub definition, only included for zod-to-json-schema compatibility. */\nexport var ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of status codes.\n */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2,\n}\n","import { isString } from './is';\nimport { GLOBAL_OBJ } from './worldwide';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\ntype SimpleNode = {\n  parentNode: SimpleNode;\n} | null;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n\n  if (!elem?.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    const className = elem.className;\n    if (className && isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nexport function getComponentName(elem: unknown): string | null {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem as SimpleNode;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n","import type { HandlerDataUnhandledRejection } from '../types-hoist/instrument';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\nlet _oldOnUnhandledRejectionHandler: (typeof GLOBAL_OBJ)['onunhandledrejection'] | null = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalUnhandledRejectionInstrumentationHandler(\n  handler: (data: HandlerDataUnhandledRejection) => void,\n): void {\n  const type = 'unhandledrejection';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = GLOBAL_OBJ.onunhandledrejection;\n\n  // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')\n  // is that we are using this handler in the Loader Script, to handle buffered rejections consistently\n  GLOBAL_OBJ.onunhandledrejection = function (e: unknown): boolean {\n    const handlerData: HandlerDataUnhandledRejection = e;\n    triggerHandlers('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n","import type { SeverityLevel } from '../types-hoist/severity';\n\n/**\n * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.\n */\nexport function getBreadcrumbLogLevelFromHttpStatusCode(statusCode: number | undefined): SeverityLevel | undefined {\n  // NOTE: undefined defaults to 'info' in Sentry\n  if (statusCode === undefined) {\n    return undefined;\n  } else if (statusCode >= 400 && statusCode < 500) {\n    return 'warning';\n  } else if (statusCode >= 500) {\n    return 'error';\n  } else {\n    return undefined;\n  }\n}\n","// This file configures the initialization of Sentry for edge runtime.\nimport * as Sentry from '@sentry/nextjs';\nimport { env } from '@/lib/env';\n\nif (env.SENTRY_DSN || env.NEXT_PUBLIC_SENTRY_DSN) {\n  Sentry.init({\n    dsn: env.SENTRY_DSN || env.NEXT_PUBLIC_SENTRY_DSN,\n\n    // Set tracesSampleRate to 1.0 to capture 100%\n    // of transactions for tracing.\n    // We recommend adjusting this value in production\n    tracesSampleRate: env.NODE_ENV === 'production' ? 0.1 : 1.0,\n  });\n}\n","// import { $ZodType } from \"./schemas.js\";\nimport * as core from \"./core.js\";\nimport * as regexes from \"./regexes.js\";\nimport * as util from \"./util.js\";\nexport const $ZodCheck = /*@__PURE__*/ core.$constructor(\"$ZodCheck\", (inst, def) => {\n    var _a;\n    inst._zod ?? (inst._zod = {});\n    inst._zod.def = def;\n    (_a = inst._zod).onattach ?? (_a.onattach = []);\n});\nconst numericOriginMap = {\n    number: \"number\",\n    bigint: \"bigint\",\n    object: \"date\",\n};\nexport const $ZodCheckLessThan = /*@__PURE__*/ core.$constructor(\"$ZodCheckLessThan\", (inst, def) => {\n    $ZodCheck.init(inst, def);\n    const origin = numericOriginMap[typeof def.value];\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        const curr = (def.inclusive ? bag.maximum : bag.exclusiveMaximum) ?? Number.POSITIVE_INFINITY;\n        if (def.value < curr) {\n            if (def.inclusive)\n                bag.maximum = def.value;\n            else\n                bag.exclusiveMaximum = def.value;\n        }\n    });\n    inst._zod.check = (payload) => {\n        if (def.inclusive ? payload.value <= def.value : payload.value < def.value) {\n            return;\n        }\n        payload.issues.push({\n            origin,\n            code: \"too_big\",\n            maximum: def.value,\n            input: payload.value,\n            inclusive: def.inclusive,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckGreaterThan = /*@__PURE__*/ core.$constructor(\"$ZodCheckGreaterThan\", (inst, def) => {\n    $ZodCheck.init(inst, def);\n    const origin = numericOriginMap[typeof def.value];\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        const curr = (def.inclusive ? bag.minimum : bag.exclusiveMinimum) ?? Number.NEGATIVE_INFINITY;\n        if (def.value > curr) {\n            if (def.inclusive)\n                bag.minimum = def.value;\n            else\n                bag.exclusiveMinimum = def.value;\n        }\n    });\n    inst._zod.check = (payload) => {\n        if (def.inclusive ? payload.value >= def.value : payload.value > def.value) {\n            return;\n        }\n        payload.issues.push({\n            origin,\n            code: \"too_small\",\n            minimum: def.value,\n            input: payload.value,\n            inclusive: def.inclusive,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckMultipleOf = \n/*@__PURE__*/ core.$constructor(\"$ZodCheckMultipleOf\", (inst, def) => {\n    $ZodCheck.init(inst, def);\n    inst._zod.onattach.push((inst) => {\n        var _a;\n        (_a = inst._zod.bag).multipleOf ?? (_a.multipleOf = def.value);\n    });\n    inst._zod.check = (payload) => {\n        if (typeof payload.value !== typeof def.value)\n            throw new Error(\"Cannot mix number and bigint in multiple_of check.\");\n        const isMultiple = typeof payload.value === \"bigint\"\n            ? payload.value % def.value === BigInt(0)\n            : util.floatSafeRemainder(payload.value, def.value) === 0;\n        if (isMultiple)\n            return;\n        payload.issues.push({\n            origin: typeof payload.value,\n            code: \"not_multiple_of\",\n            divisor: def.value,\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckNumberFormat = /*@__PURE__*/ core.$constructor(\"$ZodCheckNumberFormat\", (inst, def) => {\n    $ZodCheck.init(inst, def); // no format checks\n    def.format = def.format || \"float64\";\n    const isInt = def.format?.includes(\"int\");\n    const origin = isInt ? \"int\" : \"number\";\n    const [minimum, maximum] = util.NUMBER_FORMAT_RANGES[def.format];\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.format = def.format;\n        bag.minimum = minimum;\n        bag.maximum = maximum;\n        if (isInt)\n            bag.pattern = regexes.integer;\n    });\n    inst._zod.check = (payload) => {\n        const input = payload.value;\n        if (isInt) {\n            if (!Number.isInteger(input)) {\n                // invalid_format issue\n                // payload.issues.push({\n                //   expected: def.format,\n                //   format: def.format,\n                //   code: \"invalid_format\",\n                //   input,\n                //   inst,\n                // });\n                // invalid_type issue\n                payload.issues.push({\n                    expected: origin,\n                    format: def.format,\n                    code: \"invalid_type\",\n                    continue: false,\n                    input,\n                    inst,\n                });\n                return;\n                // not_multiple_of issue\n                // payload.issues.push({\n                //   code: \"not_multiple_of\",\n                //   origin: \"number\",\n                //   input,\n                //   inst,\n                //   divisor: 1,\n                // });\n            }\n            if (!Number.isSafeInteger(input)) {\n                if (input > 0) {\n                    // too_big\n                    payload.issues.push({\n                        input,\n                        code: \"too_big\",\n                        maximum: Number.MAX_SAFE_INTEGER,\n                        note: \"Integers must be within the safe integer range.\",\n                        inst,\n                        origin,\n                        continue: !def.abort,\n                    });\n                }\n                else {\n                    // too_small\n                    payload.issues.push({\n                        input,\n                        code: \"too_small\",\n                        minimum: Number.MIN_SAFE_INTEGER,\n                        note: \"Integers must be within the safe integer range.\",\n                        inst,\n                        origin,\n                        continue: !def.abort,\n                    });\n                }\n                return;\n            }\n        }\n        if (input < minimum) {\n            payload.issues.push({\n                origin: \"number\",\n                input,\n                code: \"too_small\",\n                minimum,\n                inclusive: true,\n                inst,\n                continue: !def.abort,\n            });\n        }\n        if (input > maximum) {\n            payload.issues.push({\n                origin: \"number\",\n                input,\n                code: \"too_big\",\n                maximum,\n                inst,\n            });\n        }\n    };\n});\nexport const $ZodCheckBigIntFormat = /*@__PURE__*/ core.$constructor(\"$ZodCheckBigIntFormat\", (inst, def) => {\n    $ZodCheck.init(inst, def); // no format checks\n    const [minimum, maximum] = util.BIGINT_FORMAT_RANGES[def.format];\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.format = def.format;\n        bag.minimum = minimum;\n        bag.maximum = maximum;\n    });\n    inst._zod.check = (payload) => {\n        const input = payload.value;\n        if (input < minimum) {\n            payload.issues.push({\n                origin: \"bigint\",\n                input,\n                code: \"too_small\",\n                minimum: minimum,\n                inclusive: true,\n                inst,\n                continue: !def.abort,\n            });\n        }\n        if (input > maximum) {\n            payload.issues.push({\n                origin: \"bigint\",\n                input,\n                code: \"too_big\",\n                maximum,\n                inst,\n            });\n        }\n    };\n});\nexport const $ZodCheckMaxSize = /*@__PURE__*/ core.$constructor(\"$ZodCheckMaxSize\", (inst, def) => {\n    var _a;\n    $ZodCheck.init(inst, def);\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\n        const val = payload.value;\n        return !util.nullish(val) && val.size !== undefined;\n    });\n    inst._zod.onattach.push((inst) => {\n        const curr = (inst._zod.bag.maximum ?? Number.POSITIVE_INFINITY);\n        if (def.maximum < curr)\n            inst._zod.bag.maximum = def.maximum;\n    });\n    inst._zod.check = (payload) => {\n        const input = payload.value;\n        const size = input.size;\n        if (size <= def.maximum)\n            return;\n        payload.issues.push({\n            origin: util.getSizableOrigin(input),\n            code: \"too_big\",\n            maximum: def.maximum,\n            inclusive: true,\n            input,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckMinSize = /*@__PURE__*/ core.$constructor(\"$ZodCheckMinSize\", (inst, def) => {\n    var _a;\n    $ZodCheck.init(inst, def);\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\n        const val = payload.value;\n        return !util.nullish(val) && val.size !== undefined;\n    });\n    inst._zod.onattach.push((inst) => {\n        const curr = (inst._zod.bag.minimum ?? Number.NEGATIVE_INFINITY);\n        if (def.minimum > curr)\n            inst._zod.bag.minimum = def.minimum;\n    });\n    inst._zod.check = (payload) => {\n        const input = payload.value;\n        const size = input.size;\n        if (size >= def.minimum)\n            return;\n        payload.issues.push({\n            origin: util.getSizableOrigin(input),\n            code: \"too_small\",\n            minimum: def.minimum,\n            inclusive: true,\n            input,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckSizeEquals = /*@__PURE__*/ core.$constructor(\"$ZodCheckSizeEquals\", (inst, def) => {\n    var _a;\n    $ZodCheck.init(inst, def);\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\n        const val = payload.value;\n        return !util.nullish(val) && val.size !== undefined;\n    });\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.minimum = def.size;\n        bag.maximum = def.size;\n        bag.size = def.size;\n    });\n    inst._zod.check = (payload) => {\n        const input = payload.value;\n        const size = input.size;\n        if (size === def.size)\n            return;\n        const tooBig = size > def.size;\n        payload.issues.push({\n            origin: util.getSizableOrigin(input),\n            ...(tooBig ? { code: \"too_big\", maximum: def.size } : { code: \"too_small\", minimum: def.size }),\n            inclusive: true,\n            exact: true,\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckMaxLength = /*@__PURE__*/ core.$constructor(\"$ZodCheckMaxLength\", (inst, def) => {\n    var _a;\n    $ZodCheck.init(inst, def);\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\n        const val = payload.value;\n        return !util.nullish(val) && val.length !== undefined;\n    });\n    inst._zod.onattach.push((inst) => {\n        const curr = (inst._zod.bag.maximum ?? Number.POSITIVE_INFINITY);\n        if (def.maximum < curr)\n            inst._zod.bag.maximum = def.maximum;\n    });\n    inst._zod.check = (payload) => {\n        const input = payload.value;\n        const length = input.length;\n        if (length <= def.maximum)\n            return;\n        const origin = util.getLengthableOrigin(input);\n        payload.issues.push({\n            origin,\n            code: \"too_big\",\n            maximum: def.maximum,\n            inclusive: true,\n            input,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckMinLength = /*@__PURE__*/ core.$constructor(\"$ZodCheckMinLength\", (inst, def) => {\n    var _a;\n    $ZodCheck.init(inst, def);\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\n        const val = payload.value;\n        return !util.nullish(val) && val.length !== undefined;\n    });\n    inst._zod.onattach.push((inst) => {\n        const curr = (inst._zod.bag.minimum ?? Number.NEGATIVE_INFINITY);\n        if (def.minimum > curr)\n            inst._zod.bag.minimum = def.minimum;\n    });\n    inst._zod.check = (payload) => {\n        const input = payload.value;\n        const length = input.length;\n        if (length >= def.minimum)\n            return;\n        const origin = util.getLengthableOrigin(input);\n        payload.issues.push({\n            origin,\n            code: \"too_small\",\n            minimum: def.minimum,\n            inclusive: true,\n            input,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckLengthEquals = /*@__PURE__*/ core.$constructor(\"$ZodCheckLengthEquals\", (inst, def) => {\n    var _a;\n    $ZodCheck.init(inst, def);\n    (_a = inst._zod.def).when ?? (_a.when = (payload) => {\n        const val = payload.value;\n        return !util.nullish(val) && val.length !== undefined;\n    });\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.minimum = def.length;\n        bag.maximum = def.length;\n        bag.length = def.length;\n    });\n    inst._zod.check = (payload) => {\n        const input = payload.value;\n        const length = input.length;\n        if (length === def.length)\n            return;\n        const origin = util.getLengthableOrigin(input);\n        const tooBig = length > def.length;\n        payload.issues.push({\n            origin,\n            ...(tooBig ? { code: \"too_big\", maximum: def.length } : { code: \"too_small\", minimum: def.length }),\n            inclusive: true,\n            exact: true,\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckStringFormat = /*@__PURE__*/ core.$constructor(\"$ZodCheckStringFormat\", (inst, def) => {\n    var _a, _b;\n    $ZodCheck.init(inst, def);\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.format = def.format;\n        if (def.pattern) {\n            bag.patterns ?? (bag.patterns = new Set());\n            bag.patterns.add(def.pattern);\n        }\n    });\n    if (def.pattern)\n        (_a = inst._zod).check ?? (_a.check = (payload) => {\n            def.pattern.lastIndex = 0;\n            if (def.pattern.test(payload.value))\n                return;\n            payload.issues.push({\n                origin: \"string\",\n                code: \"invalid_format\",\n                format: def.format,\n                input: payload.value,\n                ...(def.pattern ? { pattern: def.pattern.toString() } : {}),\n                inst,\n                continue: !def.abort,\n            });\n        });\n    else\n        (_b = inst._zod).check ?? (_b.check = () => { });\n});\nexport const $ZodCheckRegex = /*@__PURE__*/ core.$constructor(\"$ZodCheckRegex\", (inst, def) => {\n    $ZodCheckStringFormat.init(inst, def);\n    inst._zod.check = (payload) => {\n        def.pattern.lastIndex = 0;\n        if (def.pattern.test(payload.value))\n            return;\n        payload.issues.push({\n            origin: \"string\",\n            code: \"invalid_format\",\n            format: \"regex\",\n            input: payload.value,\n            pattern: def.pattern.toString(),\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckLowerCase = /*@__PURE__*/ core.$constructor(\"$ZodCheckLowerCase\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.lowercase);\n    $ZodCheckStringFormat.init(inst, def);\n});\nexport const $ZodCheckUpperCase = /*@__PURE__*/ core.$constructor(\"$ZodCheckUpperCase\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.uppercase);\n    $ZodCheckStringFormat.init(inst, def);\n});\nexport const $ZodCheckIncludes = /*@__PURE__*/ core.$constructor(\"$ZodCheckIncludes\", (inst, def) => {\n    $ZodCheck.init(inst, def);\n    const escapedRegex = util.escapeRegex(def.includes);\n    const pattern = new RegExp(typeof def.position === \"number\" ? `^.{${def.position}}${escapedRegex}` : escapedRegex);\n    def.pattern = pattern;\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.patterns ?? (bag.patterns = new Set());\n        bag.patterns.add(pattern);\n    });\n    inst._zod.check = (payload) => {\n        if (payload.value.includes(def.includes, def.position))\n            return;\n        payload.issues.push({\n            origin: \"string\",\n            code: \"invalid_format\",\n            format: \"includes\",\n            includes: def.includes,\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckStartsWith = /*@__PURE__*/ core.$constructor(\"$ZodCheckStartsWith\", (inst, def) => {\n    $ZodCheck.init(inst, def);\n    const pattern = new RegExp(`^${util.escapeRegex(def.prefix)}.*`);\n    def.pattern ?? (def.pattern = pattern);\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.patterns ?? (bag.patterns = new Set());\n        bag.patterns.add(pattern);\n    });\n    inst._zod.check = (payload) => {\n        if (payload.value.startsWith(def.prefix))\n            return;\n        payload.issues.push({\n            origin: \"string\",\n            code: \"invalid_format\",\n            format: \"starts_with\",\n            prefix: def.prefix,\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckEndsWith = /*@__PURE__*/ core.$constructor(\"$ZodCheckEndsWith\", (inst, def) => {\n    $ZodCheck.init(inst, def);\n    const pattern = new RegExp(`.*${util.escapeRegex(def.suffix)}$`);\n    def.pattern ?? (def.pattern = pattern);\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.patterns ?? (bag.patterns = new Set());\n        bag.patterns.add(pattern);\n    });\n    inst._zod.check = (payload) => {\n        if (payload.value.endsWith(def.suffix))\n            return;\n        payload.issues.push({\n            origin: \"string\",\n            code: \"invalid_format\",\n            format: \"ends_with\",\n            suffix: def.suffix,\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\n///////////////////////////////////\n/////    $ZodCheckProperty    /////\n///////////////////////////////////\nfunction handleCheckPropertyResult(result, payload, property) {\n    if (result.issues.length) {\n        payload.issues.push(...util.prefixIssues(property, result.issues));\n    }\n}\nexport const $ZodCheckProperty = /*@__PURE__*/ core.$constructor(\"$ZodCheckProperty\", (inst, def) => {\n    $ZodCheck.init(inst, def);\n    inst._zod.check = (payload) => {\n        const result = def.schema._zod.run({\n            value: payload.value[def.property],\n            issues: [],\n        }, {});\n        if (result instanceof Promise) {\n            return result.then((result) => handleCheckPropertyResult(result, payload, def.property));\n        }\n        handleCheckPropertyResult(result, payload, def.property);\n        return;\n    };\n});\nexport const $ZodCheckMimeType = /*@__PURE__*/ core.$constructor(\"$ZodCheckMimeType\", (inst, def) => {\n    $ZodCheck.init(inst, def);\n    const mimeSet = new Set(def.mime);\n    inst._zod.onattach.push((inst) => {\n        inst._zod.bag.mime = def.mime;\n    });\n    inst._zod.check = (payload) => {\n        if (mimeSet.has(payload.value.type))\n            return;\n        payload.issues.push({\n            code: \"invalid_value\",\n            values: def.mime,\n            input: payload.value.type,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCheckOverwrite = /*@__PURE__*/ core.$constructor(\"$ZodCheckOverwrite\", (inst, def) => {\n    $ZodCheck.init(inst, def);\n    inst._zod.check = (payload) => {\n        payload.value = def.tx(payload.value);\n    };\n});\n","import { getGlobalSingleton } from './carrier';\nimport { Scope } from './scope';\n\n/** Get the default current scope. */\nexport function getDefaultCurrentScope(): Scope {\n  return getGlobalSingleton('defaultCurrentScope', () => new Scope());\n}\n\n/** Get the default isolation scope. */\nexport function getDefaultIsolationScope(): Scope {\n  return getGlobalSingleton('defaultIsolationScope', () => new Scope());\n}\n","import { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { Stacktrace } from '../types-hoist/stacktrace';\nimport { basename, relative } from '../utils/path';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\nconst INTEGRATION_NAME = 'RewriteFrames';\n\ninterface RewriteFramesOptions {\n  /**\n   * Root path (the beginning of the path) that will be stripped from the frames' filename.\n   *\n   * This option has slightly different behaviour in the browser and on servers:\n   * - In the browser, the value you provide in `root` will be stripped from the beginning stack frames' paths (if the path started with the value).\n   * - On the server, the root value will only replace the beginning of stack frame filepaths, when the path is absolute. If no `root` value is provided and the path is absolute, the frame will be reduced to only the filename and the provided `prefix` option.\n   *\n   * Browser example:\n   * - Original frame: `'http://example.com/my/path/static/asset.js'`\n   * - `root: 'http://example.com/my/path'`\n   * - `assetPrefix: 'app://'`\n   * - Resulting frame: `'app:///static/asset.js'`\n   *\n   * Server example:\n   * - Original frame: `'/User/local/my/path/static/asset.js'`\n   * - `root: '/User/local/my/path'`\n   * - `assetPrefix: 'app://'`\n   * - Resulting frame: `'app:///static/asset.js'`\n   */\n  root?: string;\n\n  /**\n   * A custom prefix that stack frames will be prepended with.\n   *\n   * Default: `'app://'`\n   *\n   * This option has slightly different behaviour in the browser and on servers:\n   * - In the browser, the value you provide in `prefix` will prefix the resulting filename when the value you provided in `root` was applied. Effectively replacing whatever `root` matched in the beginning of the frame with `prefix`.\n   * - On the server, the prefix is applied to all stackframes with absolute paths. On Windows, the drive identifier (e.g. \"C://\") is replaced with the prefix.\n   */\n  prefix?: string;\n\n  /**\n   * Defines an iterator that is used to iterate through all of the stack frames for modification before being sent to Sentry.\n   * Setting this option will effectively disable both the `root` and the `prefix` options.\n   */\n  iteratee?: StackFrameIteratee;\n}\n\n/**\n * Rewrite event frames paths.\n */\nexport const rewriteFramesIntegration = defineIntegration((options: RewriteFramesOptions = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n\n  const isBrowser = 'window' in GLOBAL_OBJ && !!GLOBAL_OBJ.window;\n\n  const iteratee: StackFrameIteratee = options.iteratee || generateIteratee({ isBrowser, root, prefix });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            ...(value.stacktrace && { stacktrace: _processStacktrace(value.stacktrace) }),\n          })),\n        },\n      };\n    } catch {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace?.frames?.map(f => iteratee(f)),\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n\n      return processedEvent;\n    },\n  };\n});\n\n/**\n * Exported only for tests.\n */\nexport function generateIteratee({\n  isBrowser,\n  root,\n  prefix,\n}: {\n  isBrowser: boolean;\n  root?: string;\n  prefix: string;\n}): StackFrameIteratee {\n  return (frame: StackFrame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame =\n      /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n      // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n      (frame.filename.includes('\\\\') && !frame.filename.includes('/'));\n\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n\n    if (isBrowser) {\n      if (root) {\n        const oldFilename = frame.filename;\n        if (oldFilename.indexOf(root) === 0) {\n          frame.filename = oldFilename.replace(root, prefix);\n        }\n      }\n    } else {\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame\n          ? frame.filename\n              .replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n              .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n          : frame.filename;\n        const base = root ? relative(root, filename) : basename(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n    }\n\n    return frame;\n  };\n}\n","import type { Client } from './client';\nimport { getClient } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { Integration, IntegrationFn } from './types-hoist/integration';\nimport type { CoreOptions } from './types-hoist/options';\nimport { debug } from './utils/debug-logger';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\ntype IntegrationWithDefaultInstance = Integration & { isDefaultInstance?: true };\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preserve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  const integrationsByName: { [key: string]: Integration } = {};\n\n  integrations.forEach((currentInstance: IntegrationWithDefaultInstance) => {\n    const { name } = currentInstance;\n\n    const existingInstance: IntegrationWithDefaultInstance | undefined = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.values(integrationsByName);\n}\n\n/** Gets integrations to install */\nexport function getIntegrationsToSetup(\n  options: Pick<CoreOptions, 'defaultIntegrations' | 'integrations'>,\n): Integration[] {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach((integration: IntegrationWithDefaultInstance) => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations: Integration[];\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    const resolvedUserIntegrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [resolvedUserIntegrations];\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  return filterDuplicates(integrations);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(client: Client, integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach((integration: Integration | undefined) => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nexport function afterSetupIntegrations(client: Client, integrations: Integration[]): void {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration?.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nexport function setupIntegration(client: Client, integration: Integration, integrationIndex: IntegrationIndex): void {\n  if (integrationIndex[integration.name]) {\n    DEBUG_BUILD && debug.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {\n    integration.setupOnce();\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n\n  if (typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration) as typeof integration.preprocessEvent;\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n\n  if (typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration) as typeof integration.processEvent;\n\n    const processor = Object.assign((event: Event, hint: EventHint) => callback(event, hint, client), {\n      id: integration.name,\n    });\n\n    client.addEventProcessor(processor);\n  }\n\n  DEBUG_BUILD && debug.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current scope's client. */\nexport function addIntegration(integration: Integration): void {\n  const client = getClient();\n\n  if (!client) {\n    DEBUG_BUILD && debug.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n\n  client.addIntegration(integration);\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nexport function defineIntegration<Fn extends IntegrationFn>(fn: Fn): (...args: Parameters<Fn>) => Integration {\n  return fn;\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport { debug } from './debug-logger';\nimport { isString } from './is';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nexport function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Partial<DynamicSamplingContext> | undefined {\n  const baggageObject = parseBaggageHeader(baggageHeader);\n\n  if (!baggageObject) {\n    return undefined;\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce<Record<string, string>>((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext as Partial<DynamicSamplingContext>;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nexport function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): string | undefined {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce<Record<string, string>>(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Take a baggage header and parse it into an object.\n */\nexport function parseBaggageHeader(\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Record<string, string> | undefined {\n  if (!baggageHeader || (!isString(baggageHeader) && !Array.isArray(baggageHeader))) {\n    return undefined;\n  }\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    return baggageHeader.reduce<Record<string, string>>((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      Object.entries(currBaggageObject).forEach(([key, value]) => {\n        acc[key] = value;\n      });\n      return acc;\n    }, {});\n  }\n\n  return baggageHeaderToObject(baggageHeader);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader: string): Record<string, string> {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry =>\n      baggageEntry.split('=').map(keyOrValue => {\n        try {\n          return decodeURIComponent(keyOrValue.trim());\n        } catch {\n          // We ignore errors here, e.g. if the value cannot be URL decoded.\n          // This will then be skipped in the next step\n          return;\n        }\n      }),\n    )\n    .reduce<Record<string, string>>((acc, [key, value]) => {\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nexport function objectToBaggageHeader(object: Record<string, string>): string | undefined {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        debug.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n","import * as core from \"../core/index.js\";\nimport { util } from \"../core/index.js\";\nimport * as checks from \"./checks.js\";\nimport * as iso from \"./iso.js\";\nimport * as parse from \"./parse.js\";\nexport const ZodType = /*@__PURE__*/ core.$constructor(\"ZodType\", (inst, def) => {\n    core.$ZodType.init(inst, def);\n    inst.def = def;\n    inst.type = def.type;\n    Object.defineProperty(inst, \"_def\", { value: def });\n    // base methods\n    inst.check = (...checks) => {\n        return inst.clone({\n            ...def,\n            checks: [\n                ...(def.checks ?? []),\n                ...checks.map((ch) => typeof ch === \"function\" ? { _zod: { check: ch, def: { check: \"custom\" }, onattach: [] } } : ch),\n            ],\n        }\n        // { parent: true }\n        );\n    };\n    inst.clone = (def, params) => core.clone(inst, def, params);\n    inst.brand = () => inst;\n    inst.register = ((reg, meta) => {\n        reg.add(inst, meta);\n        return inst;\n    });\n    // parsing\n    inst.parse = (data, params) => parse.parse(inst, data, params, { callee: inst.parse });\n    inst.safeParse = (data, params) => parse.safeParse(inst, data, params);\n    inst.parseAsync = async (data, params) => parse.parseAsync(inst, data, params, { callee: inst.parseAsync });\n    inst.safeParseAsync = async (data, params) => parse.safeParseAsync(inst, data, params);\n    inst.spa = inst.safeParseAsync;\n    // encoding/decoding\n    inst.encode = (data, params) => parse.encode(inst, data, params);\n    inst.decode = (data, params) => parse.decode(inst, data, params);\n    inst.encodeAsync = async (data, params) => parse.encodeAsync(inst, data, params);\n    inst.decodeAsync = async (data, params) => parse.decodeAsync(inst, data, params);\n    inst.safeEncode = (data, params) => parse.safeEncode(inst, data, params);\n    inst.safeDecode = (data, params) => parse.safeDecode(inst, data, params);\n    inst.safeEncodeAsync = async (data, params) => parse.safeEncodeAsync(inst, data, params);\n    inst.safeDecodeAsync = async (data, params) => parse.safeDecodeAsync(inst, data, params);\n    // refinements\n    inst.refine = (check, params) => inst.check(refine(check, params));\n    inst.superRefine = (refinement) => inst.check(superRefine(refinement));\n    inst.overwrite = (fn) => inst.check(checks.overwrite(fn));\n    // wrappers\n    inst.optional = () => optional(inst);\n    inst.nullable = () => nullable(inst);\n    inst.nullish = () => optional(nullable(inst));\n    inst.nonoptional = (params) => nonoptional(inst, params);\n    inst.array = () => array(inst);\n    inst.or = (arg) => union([inst, arg]);\n    inst.and = (arg) => intersection(inst, arg);\n    inst.transform = (tx) => pipe(inst, transform(tx));\n    inst.default = (def) => _default(inst, def);\n    inst.prefault = (def) => prefault(inst, def);\n    // inst.coalesce = (def, params) => coalesce(inst, def, params);\n    inst.catch = (params) => _catch(inst, params);\n    inst.pipe = (target) => pipe(inst, target);\n    inst.readonly = () => readonly(inst);\n    // meta\n    inst.describe = (description) => {\n        const cl = inst.clone();\n        core.globalRegistry.add(cl, { description });\n        return cl;\n    };\n    Object.defineProperty(inst, \"description\", {\n        get() {\n            return core.globalRegistry.get(inst)?.description;\n        },\n        configurable: true,\n    });\n    inst.meta = (...args) => {\n        if (args.length === 0) {\n            return core.globalRegistry.get(inst);\n        }\n        const cl = inst.clone();\n        core.globalRegistry.add(cl, args[0]);\n        return cl;\n    };\n    // helpers\n    inst.isOptional = () => inst.safeParse(undefined).success;\n    inst.isNullable = () => inst.safeParse(null).success;\n    return inst;\n});\n/** @internal */\nexport const _ZodString = /*@__PURE__*/ core.$constructor(\"_ZodString\", (inst, def) => {\n    core.$ZodString.init(inst, def);\n    ZodType.init(inst, def);\n    const bag = inst._zod.bag;\n    inst.format = bag.format ?? null;\n    inst.minLength = bag.minimum ?? null;\n    inst.maxLength = bag.maximum ?? null;\n    // validations\n    inst.regex = (...args) => inst.check(checks.regex(...args));\n    inst.includes = (...args) => inst.check(checks.includes(...args));\n    inst.startsWith = (...args) => inst.check(checks.startsWith(...args));\n    inst.endsWith = (...args) => inst.check(checks.endsWith(...args));\n    inst.min = (...args) => inst.check(checks.minLength(...args));\n    inst.max = (...args) => inst.check(checks.maxLength(...args));\n    inst.length = (...args) => inst.check(checks.length(...args));\n    inst.nonempty = (...args) => inst.check(checks.minLength(1, ...args));\n    inst.lowercase = (params) => inst.check(checks.lowercase(params));\n    inst.uppercase = (params) => inst.check(checks.uppercase(params));\n    // transforms\n    inst.trim = () => inst.check(checks.trim());\n    inst.normalize = (...args) => inst.check(checks.normalize(...args));\n    inst.toLowerCase = () => inst.check(checks.toLowerCase());\n    inst.toUpperCase = () => inst.check(checks.toUpperCase());\n});\nexport const ZodString = /*@__PURE__*/ core.$constructor(\"ZodString\", (inst, def) => {\n    core.$ZodString.init(inst, def);\n    _ZodString.init(inst, def);\n    inst.email = (params) => inst.check(core._email(ZodEmail, params));\n    inst.url = (params) => inst.check(core._url(ZodURL, params));\n    inst.jwt = (params) => inst.check(core._jwt(ZodJWT, params));\n    inst.emoji = (params) => inst.check(core._emoji(ZodEmoji, params));\n    inst.guid = (params) => inst.check(core._guid(ZodGUID, params));\n    inst.uuid = (params) => inst.check(core._uuid(ZodUUID, params));\n    inst.uuidv4 = (params) => inst.check(core._uuidv4(ZodUUID, params));\n    inst.uuidv6 = (params) => inst.check(core._uuidv6(ZodUUID, params));\n    inst.uuidv7 = (params) => inst.check(core._uuidv7(ZodUUID, params));\n    inst.nanoid = (params) => inst.check(core._nanoid(ZodNanoID, params));\n    inst.guid = (params) => inst.check(core._guid(ZodGUID, params));\n    inst.cuid = (params) => inst.check(core._cuid(ZodCUID, params));\n    inst.cuid2 = (params) => inst.check(core._cuid2(ZodCUID2, params));\n    inst.ulid = (params) => inst.check(core._ulid(ZodULID, params));\n    inst.base64 = (params) => inst.check(core._base64(ZodBase64, params));\n    inst.base64url = (params) => inst.check(core._base64url(ZodBase64URL, params));\n    inst.xid = (params) => inst.check(core._xid(ZodXID, params));\n    inst.ksuid = (params) => inst.check(core._ksuid(ZodKSUID, params));\n    inst.ipv4 = (params) => inst.check(core._ipv4(ZodIPv4, params));\n    inst.ipv6 = (params) => inst.check(core._ipv6(ZodIPv6, params));\n    inst.cidrv4 = (params) => inst.check(core._cidrv4(ZodCIDRv4, params));\n    inst.cidrv6 = (params) => inst.check(core._cidrv6(ZodCIDRv6, params));\n    inst.e164 = (params) => inst.check(core._e164(ZodE164, params));\n    // iso\n    inst.datetime = (params) => inst.check(iso.datetime(params));\n    inst.date = (params) => inst.check(iso.date(params));\n    inst.time = (params) => inst.check(iso.time(params));\n    inst.duration = (params) => inst.check(iso.duration(params));\n});\nexport function string(params) {\n    return core._string(ZodString, params);\n}\nexport const ZodStringFormat = /*@__PURE__*/ core.$constructor(\"ZodStringFormat\", (inst, def) => {\n    core.$ZodStringFormat.init(inst, def);\n    _ZodString.init(inst, def);\n});\nexport const ZodEmail = /*@__PURE__*/ core.$constructor(\"ZodEmail\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodEmail.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function email(params) {\n    return core._email(ZodEmail, params);\n}\nexport const ZodGUID = /*@__PURE__*/ core.$constructor(\"ZodGUID\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodGUID.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function guid(params) {\n    return core._guid(ZodGUID, params);\n}\nexport const ZodUUID = /*@__PURE__*/ core.$constructor(\"ZodUUID\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodUUID.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function uuid(params) {\n    return core._uuid(ZodUUID, params);\n}\nexport function uuidv4(params) {\n    return core._uuidv4(ZodUUID, params);\n}\n// ZodUUIDv6\nexport function uuidv6(params) {\n    return core._uuidv6(ZodUUID, params);\n}\n// ZodUUIDv7\nexport function uuidv7(params) {\n    return core._uuidv7(ZodUUID, params);\n}\nexport const ZodURL = /*@__PURE__*/ core.$constructor(\"ZodURL\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodURL.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function url(params) {\n    return core._url(ZodURL, params);\n}\nexport function httpUrl(params) {\n    return core._url(ZodURL, {\n        protocol: /^https?$/,\n        hostname: core.regexes.domain,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodEmoji = /*@__PURE__*/ core.$constructor(\"ZodEmoji\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodEmoji.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function emoji(params) {\n    return core._emoji(ZodEmoji, params);\n}\nexport const ZodNanoID = /*@__PURE__*/ core.$constructor(\"ZodNanoID\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodNanoID.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function nanoid(params) {\n    return core._nanoid(ZodNanoID, params);\n}\nexport const ZodCUID = /*@__PURE__*/ core.$constructor(\"ZodCUID\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodCUID.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function cuid(params) {\n    return core._cuid(ZodCUID, params);\n}\nexport const ZodCUID2 = /*@__PURE__*/ core.$constructor(\"ZodCUID2\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodCUID2.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function cuid2(params) {\n    return core._cuid2(ZodCUID2, params);\n}\nexport const ZodULID = /*@__PURE__*/ core.$constructor(\"ZodULID\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodULID.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function ulid(params) {\n    return core._ulid(ZodULID, params);\n}\nexport const ZodXID = /*@__PURE__*/ core.$constructor(\"ZodXID\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodXID.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function xid(params) {\n    return core._xid(ZodXID, params);\n}\nexport const ZodKSUID = /*@__PURE__*/ core.$constructor(\"ZodKSUID\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodKSUID.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function ksuid(params) {\n    return core._ksuid(ZodKSUID, params);\n}\nexport const ZodIPv4 = /*@__PURE__*/ core.$constructor(\"ZodIPv4\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodIPv4.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function ipv4(params) {\n    return core._ipv4(ZodIPv4, params);\n}\nexport const ZodIPv6 = /*@__PURE__*/ core.$constructor(\"ZodIPv6\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodIPv6.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function ipv6(params) {\n    return core._ipv6(ZodIPv6, params);\n}\nexport const ZodCIDRv4 = /*@__PURE__*/ core.$constructor(\"ZodCIDRv4\", (inst, def) => {\n    core.$ZodCIDRv4.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function cidrv4(params) {\n    return core._cidrv4(ZodCIDRv4, params);\n}\nexport const ZodCIDRv6 = /*@__PURE__*/ core.$constructor(\"ZodCIDRv6\", (inst, def) => {\n    core.$ZodCIDRv6.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function cidrv6(params) {\n    return core._cidrv6(ZodCIDRv6, params);\n}\nexport const ZodBase64 = /*@__PURE__*/ core.$constructor(\"ZodBase64\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodBase64.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function base64(params) {\n    return core._base64(ZodBase64, params);\n}\nexport const ZodBase64URL = /*@__PURE__*/ core.$constructor(\"ZodBase64URL\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodBase64URL.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function base64url(params) {\n    return core._base64url(ZodBase64URL, params);\n}\nexport const ZodE164 = /*@__PURE__*/ core.$constructor(\"ZodE164\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodE164.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function e164(params) {\n    return core._e164(ZodE164, params);\n}\nexport const ZodJWT = /*@__PURE__*/ core.$constructor(\"ZodJWT\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodJWT.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function jwt(params) {\n    return core._jwt(ZodJWT, params);\n}\nexport const ZodCustomStringFormat = /*@__PURE__*/ core.$constructor(\"ZodCustomStringFormat\", (inst, def) => {\n    // ZodStringFormat.init(inst, def);\n    core.$ZodCustomStringFormat.init(inst, def);\n    ZodStringFormat.init(inst, def);\n});\nexport function stringFormat(format, fnOrRegex, _params = {}) {\n    return core._stringFormat(ZodCustomStringFormat, format, fnOrRegex, _params);\n}\nexport function hostname(_params) {\n    return core._stringFormat(ZodCustomStringFormat, \"hostname\", core.regexes.hostname, _params);\n}\nexport function hex(_params) {\n    return core._stringFormat(ZodCustomStringFormat, \"hex\", core.regexes.hex, _params);\n}\nexport function hash(alg, params) {\n    const enc = params?.enc ?? \"hex\";\n    const format = `${alg}_${enc}`;\n    const regex = core.regexes[format];\n    if (!regex)\n        throw new Error(`Unrecognized hash format: ${format}`);\n    return core._stringFormat(ZodCustomStringFormat, format, regex, params);\n}\nexport const ZodNumber = /*@__PURE__*/ core.$constructor(\"ZodNumber\", (inst, def) => {\n    core.$ZodNumber.init(inst, def);\n    ZodType.init(inst, def);\n    inst.gt = (value, params) => inst.check(checks.gt(value, params));\n    inst.gte = (value, params) => inst.check(checks.gte(value, params));\n    inst.min = (value, params) => inst.check(checks.gte(value, params));\n    inst.lt = (value, params) => inst.check(checks.lt(value, params));\n    inst.lte = (value, params) => inst.check(checks.lte(value, params));\n    inst.max = (value, params) => inst.check(checks.lte(value, params));\n    inst.int = (params) => inst.check(int(params));\n    inst.safe = (params) => inst.check(int(params));\n    inst.positive = (params) => inst.check(checks.gt(0, params));\n    inst.nonnegative = (params) => inst.check(checks.gte(0, params));\n    inst.negative = (params) => inst.check(checks.lt(0, params));\n    inst.nonpositive = (params) => inst.check(checks.lte(0, params));\n    inst.multipleOf = (value, params) => inst.check(checks.multipleOf(value, params));\n    inst.step = (value, params) => inst.check(checks.multipleOf(value, params));\n    // inst.finite = (params) => inst.check(core.finite(params));\n    inst.finite = () => inst;\n    const bag = inst._zod.bag;\n    inst.minValue =\n        Math.max(bag.minimum ?? Number.NEGATIVE_INFINITY, bag.exclusiveMinimum ?? Number.NEGATIVE_INFINITY) ?? null;\n    inst.maxValue =\n        Math.min(bag.maximum ?? Number.POSITIVE_INFINITY, bag.exclusiveMaximum ?? Number.POSITIVE_INFINITY) ?? null;\n    inst.isInt = (bag.format ?? \"\").includes(\"int\") || Number.isSafeInteger(bag.multipleOf ?? 0.5);\n    inst.isFinite = true;\n    inst.format = bag.format ?? null;\n});\nexport function number(params) {\n    return core._number(ZodNumber, params);\n}\nexport const ZodNumberFormat = /*@__PURE__*/ core.$constructor(\"ZodNumberFormat\", (inst, def) => {\n    core.$ZodNumberFormat.init(inst, def);\n    ZodNumber.init(inst, def);\n});\nexport function int(params) {\n    return core._int(ZodNumberFormat, params);\n}\nexport function float32(params) {\n    return core._float32(ZodNumberFormat, params);\n}\nexport function float64(params) {\n    return core._float64(ZodNumberFormat, params);\n}\nexport function int32(params) {\n    return core._int32(ZodNumberFormat, params);\n}\nexport function uint32(params) {\n    return core._uint32(ZodNumberFormat, params);\n}\nexport const ZodBoolean = /*@__PURE__*/ core.$constructor(\"ZodBoolean\", (inst, def) => {\n    core.$ZodBoolean.init(inst, def);\n    ZodType.init(inst, def);\n});\nexport function boolean(params) {\n    return core._boolean(ZodBoolean, params);\n}\nexport const ZodBigInt = /*@__PURE__*/ core.$constructor(\"ZodBigInt\", (inst, def) => {\n    core.$ZodBigInt.init(inst, def);\n    ZodType.init(inst, def);\n    inst.gte = (value, params) => inst.check(checks.gte(value, params));\n    inst.min = (value, params) => inst.check(checks.gte(value, params));\n    inst.gt = (value, params) => inst.check(checks.gt(value, params));\n    inst.gte = (value, params) => inst.check(checks.gte(value, params));\n    inst.min = (value, params) => inst.check(checks.gte(value, params));\n    inst.lt = (value, params) => inst.check(checks.lt(value, params));\n    inst.lte = (value, params) => inst.check(checks.lte(value, params));\n    inst.max = (value, params) => inst.check(checks.lte(value, params));\n    inst.positive = (params) => inst.check(checks.gt(BigInt(0), params));\n    inst.negative = (params) => inst.check(checks.lt(BigInt(0), params));\n    inst.nonpositive = (params) => inst.check(checks.lte(BigInt(0), params));\n    inst.nonnegative = (params) => inst.check(checks.gte(BigInt(0), params));\n    inst.multipleOf = (value, params) => inst.check(checks.multipleOf(value, params));\n    const bag = inst._zod.bag;\n    inst.minValue = bag.minimum ?? null;\n    inst.maxValue = bag.maximum ?? null;\n    inst.format = bag.format ?? null;\n});\nexport function bigint(params) {\n    return core._bigint(ZodBigInt, params);\n}\nexport const ZodBigIntFormat = /*@__PURE__*/ core.$constructor(\"ZodBigIntFormat\", (inst, def) => {\n    core.$ZodBigIntFormat.init(inst, def);\n    ZodBigInt.init(inst, def);\n});\n// int64\nexport function int64(params) {\n    return core._int64(ZodBigIntFormat, params);\n}\n// uint64\nexport function uint64(params) {\n    return core._uint64(ZodBigIntFormat, params);\n}\nexport const ZodSymbol = /*@__PURE__*/ core.$constructor(\"ZodSymbol\", (inst, def) => {\n    core.$ZodSymbol.init(inst, def);\n    ZodType.init(inst, def);\n});\nexport function symbol(params) {\n    return core._symbol(ZodSymbol, params);\n}\nexport const ZodUndefined = /*@__PURE__*/ core.$constructor(\"ZodUndefined\", (inst, def) => {\n    core.$ZodUndefined.init(inst, def);\n    ZodType.init(inst, def);\n});\nfunction _undefined(params) {\n    return core._undefined(ZodUndefined, params);\n}\nexport { _undefined as undefined };\nexport const ZodNull = /*@__PURE__*/ core.$constructor(\"ZodNull\", (inst, def) => {\n    core.$ZodNull.init(inst, def);\n    ZodType.init(inst, def);\n});\nfunction _null(params) {\n    return core._null(ZodNull, params);\n}\nexport { _null as null };\nexport const ZodAny = /*@__PURE__*/ core.$constructor(\"ZodAny\", (inst, def) => {\n    core.$ZodAny.init(inst, def);\n    ZodType.init(inst, def);\n});\nexport function any() {\n    return core._any(ZodAny);\n}\nexport const ZodUnknown = /*@__PURE__*/ core.$constructor(\"ZodUnknown\", (inst, def) => {\n    core.$ZodUnknown.init(inst, def);\n    ZodType.init(inst, def);\n});\nexport function unknown() {\n    return core._unknown(ZodUnknown);\n}\nexport const ZodNever = /*@__PURE__*/ core.$constructor(\"ZodNever\", (inst, def) => {\n    core.$ZodNever.init(inst, def);\n    ZodType.init(inst, def);\n});\nexport function never(params) {\n    return core._never(ZodNever, params);\n}\nexport const ZodVoid = /*@__PURE__*/ core.$constructor(\"ZodVoid\", (inst, def) => {\n    core.$ZodVoid.init(inst, def);\n    ZodType.init(inst, def);\n});\nfunction _void(params) {\n    return core._void(ZodVoid, params);\n}\nexport { _void as void };\nexport const ZodDate = /*@__PURE__*/ core.$constructor(\"ZodDate\", (inst, def) => {\n    core.$ZodDate.init(inst, def);\n    ZodType.init(inst, def);\n    inst.min = (value, params) => inst.check(checks.gte(value, params));\n    inst.max = (value, params) => inst.check(checks.lte(value, params));\n    const c = inst._zod.bag;\n    inst.minDate = c.minimum ? new Date(c.minimum) : null;\n    inst.maxDate = c.maximum ? new Date(c.maximum) : null;\n});\nexport function date(params) {\n    return core._date(ZodDate, params);\n}\nexport const ZodArray = /*@__PURE__*/ core.$constructor(\"ZodArray\", (inst, def) => {\n    core.$ZodArray.init(inst, def);\n    ZodType.init(inst, def);\n    inst.element = def.element;\n    inst.min = (minLength, params) => inst.check(checks.minLength(minLength, params));\n    inst.nonempty = (params) => inst.check(checks.minLength(1, params));\n    inst.max = (maxLength, params) => inst.check(checks.maxLength(maxLength, params));\n    inst.length = (len, params) => inst.check(checks.length(len, params));\n    inst.unwrap = () => inst.element;\n});\nexport function array(element, params) {\n    return core._array(ZodArray, element, params);\n}\n// .keyof\nexport function keyof(schema) {\n    const shape = schema._zod.def.shape;\n    return _enum(Object.keys(shape));\n}\nexport const ZodObject = /*@__PURE__*/ core.$constructor(\"ZodObject\", (inst, def) => {\n    core.$ZodObjectJIT.init(inst, def);\n    ZodType.init(inst, def);\n    util.defineLazy(inst, \"shape\", () => def.shape);\n    inst.keyof = () => _enum(Object.keys(inst._zod.def.shape));\n    inst.catchall = (catchall) => inst.clone({ ...inst._zod.def, catchall: catchall });\n    inst.passthrough = () => inst.clone({ ...inst._zod.def, catchall: unknown() });\n    inst.loose = () => inst.clone({ ...inst._zod.def, catchall: unknown() });\n    inst.strict = () => inst.clone({ ...inst._zod.def, catchall: never() });\n    inst.strip = () => inst.clone({ ...inst._zod.def, catchall: undefined });\n    inst.extend = (incoming) => {\n        return util.extend(inst, incoming);\n    };\n    inst.safeExtend = (incoming) => {\n        return util.safeExtend(inst, incoming);\n    };\n    inst.merge = (other) => util.merge(inst, other);\n    inst.pick = (mask) => util.pick(inst, mask);\n    inst.omit = (mask) => util.omit(inst, mask);\n    inst.partial = (...args) => util.partial(ZodOptional, inst, args[0]);\n    inst.required = (...args) => util.required(ZodNonOptional, inst, args[0]);\n});\nexport function object(shape, params) {\n    const def = {\n        type: \"object\",\n        get shape() {\n            util.assignProp(this, \"shape\", shape ? util.objectClone(shape) : {});\n            return this.shape;\n        },\n        ...util.normalizeParams(params),\n    };\n    return new ZodObject(def);\n}\n// strictObject\nexport function strictObject(shape, params) {\n    return new ZodObject({\n        type: \"object\",\n        get shape() {\n            util.assignProp(this, \"shape\", util.objectClone(shape));\n            return this.shape;\n        },\n        catchall: never(),\n        ...util.normalizeParams(params),\n    });\n}\n// looseObject\nexport function looseObject(shape, params) {\n    return new ZodObject({\n        type: \"object\",\n        get shape() {\n            util.assignProp(this, \"shape\", util.objectClone(shape));\n            return this.shape;\n        },\n        catchall: unknown(),\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodUnion = /*@__PURE__*/ core.$constructor(\"ZodUnion\", (inst, def) => {\n    core.$ZodUnion.init(inst, def);\n    ZodType.init(inst, def);\n    inst.options = def.options;\n});\nexport function union(options, params) {\n    return new ZodUnion({\n        type: \"union\",\n        options: options,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodDiscriminatedUnion = /*@__PURE__*/ core.$constructor(\"ZodDiscriminatedUnion\", (inst, def) => {\n    ZodUnion.init(inst, def);\n    core.$ZodDiscriminatedUnion.init(inst, def);\n});\nexport function discriminatedUnion(discriminator, options, params) {\n    // const [options, params] = args;\n    return new ZodDiscriminatedUnion({\n        type: \"union\",\n        options,\n        discriminator,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodIntersection = /*@__PURE__*/ core.$constructor(\"ZodIntersection\", (inst, def) => {\n    core.$ZodIntersection.init(inst, def);\n    ZodType.init(inst, def);\n});\nexport function intersection(left, right) {\n    return new ZodIntersection({\n        type: \"intersection\",\n        left: left,\n        right: right,\n    });\n}\nexport const ZodTuple = /*@__PURE__*/ core.$constructor(\"ZodTuple\", (inst, def) => {\n    core.$ZodTuple.init(inst, def);\n    ZodType.init(inst, def);\n    inst.rest = (rest) => inst.clone({\n        ...inst._zod.def,\n        rest: rest,\n    });\n});\nexport function tuple(items, _paramsOrRest, _params) {\n    const hasRest = _paramsOrRest instanceof core.$ZodType;\n    const params = hasRest ? _params : _paramsOrRest;\n    const rest = hasRest ? _paramsOrRest : null;\n    return new ZodTuple({\n        type: \"tuple\",\n        items: items,\n        rest,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodRecord = /*@__PURE__*/ core.$constructor(\"ZodRecord\", (inst, def) => {\n    core.$ZodRecord.init(inst, def);\n    ZodType.init(inst, def);\n    inst.keyType = def.keyType;\n    inst.valueType = def.valueType;\n});\nexport function record(keyType, valueType, params) {\n    return new ZodRecord({\n        type: \"record\",\n        keyType,\n        valueType: valueType,\n        ...util.normalizeParams(params),\n    });\n}\n// type alksjf = core.output<core.$ZodRecordKey>;\nexport function partialRecord(keyType, valueType, params) {\n    const k = core.clone(keyType);\n    k._zod.values = undefined;\n    return new ZodRecord({\n        type: \"record\",\n        keyType: k,\n        valueType: valueType,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodMap = /*@__PURE__*/ core.$constructor(\"ZodMap\", (inst, def) => {\n    core.$ZodMap.init(inst, def);\n    ZodType.init(inst, def);\n    inst.keyType = def.keyType;\n    inst.valueType = def.valueType;\n});\nexport function map(keyType, valueType, params) {\n    return new ZodMap({\n        type: \"map\",\n        keyType: keyType,\n        valueType: valueType,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodSet = /*@__PURE__*/ core.$constructor(\"ZodSet\", (inst, def) => {\n    core.$ZodSet.init(inst, def);\n    ZodType.init(inst, def);\n    inst.min = (...args) => inst.check(core._minSize(...args));\n    inst.nonempty = (params) => inst.check(core._minSize(1, params));\n    inst.max = (...args) => inst.check(core._maxSize(...args));\n    inst.size = (...args) => inst.check(core._size(...args));\n});\nexport function set(valueType, params) {\n    return new ZodSet({\n        type: \"set\",\n        valueType: valueType,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodEnum = /*@__PURE__*/ core.$constructor(\"ZodEnum\", (inst, def) => {\n    core.$ZodEnum.init(inst, def);\n    ZodType.init(inst, def);\n    inst.enum = def.entries;\n    inst.options = Object.values(def.entries);\n    const keys = new Set(Object.keys(def.entries));\n    inst.extract = (values, params) => {\n        const newEntries = {};\n        for (const value of values) {\n            if (keys.has(value)) {\n                newEntries[value] = def.entries[value];\n            }\n            else\n                throw new Error(`Key ${value} not found in enum`);\n        }\n        return new ZodEnum({\n            ...def,\n            checks: [],\n            ...util.normalizeParams(params),\n            entries: newEntries,\n        });\n    };\n    inst.exclude = (values, params) => {\n        const newEntries = { ...def.entries };\n        for (const value of values) {\n            if (keys.has(value)) {\n                delete newEntries[value];\n            }\n            else\n                throw new Error(`Key ${value} not found in enum`);\n        }\n        return new ZodEnum({\n            ...def,\n            checks: [],\n            ...util.normalizeParams(params),\n            entries: newEntries,\n        });\n    };\n});\nfunction _enum(values, params) {\n    const entries = Array.isArray(values) ? Object.fromEntries(values.map((v) => [v, v])) : values;\n    return new ZodEnum({\n        type: \"enum\",\n        entries,\n        ...util.normalizeParams(params),\n    });\n}\nexport { _enum as enum };\n/** @deprecated This API has been merged into `z.enum()`. Use `z.enum()` instead.\n *\n * ```ts\n * enum Colors { red, green, blue }\n * z.enum(Colors);\n * ```\n */\nexport function nativeEnum(entries, params) {\n    return new ZodEnum({\n        type: \"enum\",\n        entries,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodLiteral = /*@__PURE__*/ core.$constructor(\"ZodLiteral\", (inst, def) => {\n    core.$ZodLiteral.init(inst, def);\n    ZodType.init(inst, def);\n    inst.values = new Set(def.values);\n    Object.defineProperty(inst, \"value\", {\n        get() {\n            if (def.values.length > 1) {\n                throw new Error(\"This schema contains multiple valid literal values. Use `.values` instead.\");\n            }\n            return def.values[0];\n        },\n    });\n});\nexport function literal(value, params) {\n    return new ZodLiteral({\n        type: \"literal\",\n        values: Array.isArray(value) ? value : [value],\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodFile = /*@__PURE__*/ core.$constructor(\"ZodFile\", (inst, def) => {\n    core.$ZodFile.init(inst, def);\n    ZodType.init(inst, def);\n    inst.min = (size, params) => inst.check(core._minSize(size, params));\n    inst.max = (size, params) => inst.check(core._maxSize(size, params));\n    inst.mime = (types, params) => inst.check(core._mime(Array.isArray(types) ? types : [types], params));\n});\nexport function file(params) {\n    return core._file(ZodFile, params);\n}\nexport const ZodTransform = /*@__PURE__*/ core.$constructor(\"ZodTransform\", (inst, def) => {\n    core.$ZodTransform.init(inst, def);\n    ZodType.init(inst, def);\n    inst._zod.parse = (payload, _ctx) => {\n        if (_ctx.direction === \"backward\") {\n            throw new core.$ZodEncodeError(inst.constructor.name);\n        }\n        payload.addIssue = (issue) => {\n            if (typeof issue === \"string\") {\n                payload.issues.push(util.issue(issue, payload.value, def));\n            }\n            else {\n                // for Zod 3 backwards compatibility\n                const _issue = issue;\n                if (_issue.fatal)\n                    _issue.continue = false;\n                _issue.code ?? (_issue.code = \"custom\");\n                _issue.input ?? (_issue.input = payload.value);\n                _issue.inst ?? (_issue.inst = inst);\n                // _issue.continue ??= true;\n                payload.issues.push(util.issue(_issue));\n            }\n        };\n        const output = def.transform(payload.value, payload);\n        if (output instanceof Promise) {\n            return output.then((output) => {\n                payload.value = output;\n                return payload;\n            });\n        }\n        payload.value = output;\n        return payload;\n    };\n});\nexport function transform(fn) {\n    return new ZodTransform({\n        type: \"transform\",\n        transform: fn,\n    });\n}\nexport const ZodOptional = /*@__PURE__*/ core.$constructor(\"ZodOptional\", (inst, def) => {\n    core.$ZodOptional.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.innerType;\n});\nexport function optional(innerType) {\n    return new ZodOptional({\n        type: \"optional\",\n        innerType: innerType,\n    });\n}\nexport const ZodNullable = /*@__PURE__*/ core.$constructor(\"ZodNullable\", (inst, def) => {\n    core.$ZodNullable.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.innerType;\n});\nexport function nullable(innerType) {\n    return new ZodNullable({\n        type: \"nullable\",\n        innerType: innerType,\n    });\n}\n// nullish\nexport function nullish(innerType) {\n    return optional(nullable(innerType));\n}\nexport const ZodDefault = /*@__PURE__*/ core.$constructor(\"ZodDefault\", (inst, def) => {\n    core.$ZodDefault.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.innerType;\n    inst.removeDefault = inst.unwrap;\n});\nexport function _default(innerType, defaultValue) {\n    return new ZodDefault({\n        type: \"default\",\n        innerType: innerType,\n        get defaultValue() {\n            return typeof defaultValue === \"function\" ? defaultValue() : util.shallowClone(defaultValue);\n        },\n    });\n}\nexport const ZodPrefault = /*@__PURE__*/ core.$constructor(\"ZodPrefault\", (inst, def) => {\n    core.$ZodPrefault.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.innerType;\n});\nexport function prefault(innerType, defaultValue) {\n    return new ZodPrefault({\n        type: \"prefault\",\n        innerType: innerType,\n        get defaultValue() {\n            return typeof defaultValue === \"function\" ? defaultValue() : util.shallowClone(defaultValue);\n        },\n    });\n}\nexport const ZodNonOptional = /*@__PURE__*/ core.$constructor(\"ZodNonOptional\", (inst, def) => {\n    core.$ZodNonOptional.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.innerType;\n});\nexport function nonoptional(innerType, params) {\n    return new ZodNonOptional({\n        type: \"nonoptional\",\n        innerType: innerType,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodSuccess = /*@__PURE__*/ core.$constructor(\"ZodSuccess\", (inst, def) => {\n    core.$ZodSuccess.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.innerType;\n});\nexport function success(innerType) {\n    return new ZodSuccess({\n        type: \"success\",\n        innerType: innerType,\n    });\n}\nexport const ZodCatch = /*@__PURE__*/ core.$constructor(\"ZodCatch\", (inst, def) => {\n    core.$ZodCatch.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.innerType;\n    inst.removeCatch = inst.unwrap;\n});\nfunction _catch(innerType, catchValue) {\n    return new ZodCatch({\n        type: \"catch\",\n        innerType: innerType,\n        catchValue: (typeof catchValue === \"function\" ? catchValue : () => catchValue),\n    });\n}\nexport { _catch as catch };\nexport const ZodNaN = /*@__PURE__*/ core.$constructor(\"ZodNaN\", (inst, def) => {\n    core.$ZodNaN.init(inst, def);\n    ZodType.init(inst, def);\n});\nexport function nan(params) {\n    return core._nan(ZodNaN, params);\n}\nexport const ZodPipe = /*@__PURE__*/ core.$constructor(\"ZodPipe\", (inst, def) => {\n    core.$ZodPipe.init(inst, def);\n    ZodType.init(inst, def);\n    inst.in = def.in;\n    inst.out = def.out;\n});\nexport function pipe(in_, out) {\n    return new ZodPipe({\n        type: \"pipe\",\n        in: in_,\n        out: out,\n        // ...util.normalizeParams(params),\n    });\n}\nexport const ZodCodec = /*@__PURE__*/ core.$constructor(\"ZodCodec\", (inst, def) => {\n    ZodPipe.init(inst, def);\n    core.$ZodCodec.init(inst, def);\n});\nexport function codec(in_, out, params) {\n    return new ZodCodec({\n        type: \"pipe\",\n        in: in_,\n        out: out,\n        transform: params.decode,\n        reverseTransform: params.encode,\n    });\n}\nexport const ZodReadonly = /*@__PURE__*/ core.$constructor(\"ZodReadonly\", (inst, def) => {\n    core.$ZodReadonly.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.innerType;\n});\nexport function readonly(innerType) {\n    return new ZodReadonly({\n        type: \"readonly\",\n        innerType: innerType,\n    });\n}\nexport const ZodTemplateLiteral = /*@__PURE__*/ core.$constructor(\"ZodTemplateLiteral\", (inst, def) => {\n    core.$ZodTemplateLiteral.init(inst, def);\n    ZodType.init(inst, def);\n});\nexport function templateLiteral(parts, params) {\n    return new ZodTemplateLiteral({\n        type: \"template_literal\",\n        parts,\n        ...util.normalizeParams(params),\n    });\n}\nexport const ZodLazy = /*@__PURE__*/ core.$constructor(\"ZodLazy\", (inst, def) => {\n    core.$ZodLazy.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.getter();\n});\nexport function lazy(getter) {\n    return new ZodLazy({\n        type: \"lazy\",\n        getter: getter,\n    });\n}\nexport const ZodPromise = /*@__PURE__*/ core.$constructor(\"ZodPromise\", (inst, def) => {\n    core.$ZodPromise.init(inst, def);\n    ZodType.init(inst, def);\n    inst.unwrap = () => inst._zod.def.innerType;\n});\nexport function promise(innerType) {\n    return new ZodPromise({\n        type: \"promise\",\n        innerType: innerType,\n    });\n}\nexport const ZodFunction = /*@__PURE__*/ core.$constructor(\"ZodFunction\", (inst, def) => {\n    core.$ZodFunction.init(inst, def);\n    ZodType.init(inst, def);\n});\nexport function _function(params) {\n    return new ZodFunction({\n        type: \"function\",\n        input: Array.isArray(params?.input) ? tuple(params?.input) : (params?.input ?? array(unknown())),\n        output: params?.output ?? unknown(),\n    });\n}\nexport { _function as function };\nexport const ZodCustom = /*@__PURE__*/ core.$constructor(\"ZodCustom\", (inst, def) => {\n    core.$ZodCustom.init(inst, def);\n    ZodType.init(inst, def);\n});\n// custom checks\nexport function check(fn) {\n    const ch = new core.$ZodCheck({\n        check: \"custom\",\n        // ...util.normalizeParams(params),\n    });\n    ch._zod.check = fn;\n    return ch;\n}\nexport function custom(fn, _params) {\n    return core._custom(ZodCustom, fn ?? (() => true), _params);\n}\nexport function refine(fn, _params = {}) {\n    return core._refine(ZodCustom, fn, _params);\n}\n// superRefine\nexport function superRefine(fn) {\n    return core._superRefine(fn);\n}\nfunction _instanceof(cls, params = {\n    error: `Input not instance of ${cls.name}`,\n}) {\n    const inst = new ZodCustom({\n        type: \"custom\",\n        check: \"custom\",\n        fn: (data) => data instanceof cls,\n        abort: true,\n        ...util.normalizeParams(params),\n    });\n    inst._zod.bag.Class = cls;\n    return inst;\n}\nexport { _instanceof as instanceof };\n// stringbool\nexport const stringbool = (...args) => core._stringbool({\n    Codec: ZodCodec,\n    Boolean: ZodBoolean,\n    String: ZodString,\n}, ...args);\nexport function json(params) {\n    const jsonSchema = lazy(() => {\n        return union([string(params), number(), boolean(), _null(), array(jsonSchema), record(string(), jsonSchema)]);\n    });\n    return jsonSchema;\n}\n// preprocess\n// /** @deprecated Use `z.pipe()` and `z.transform()` instead. */\nexport function preprocess(fn, schema) {\n    return pipe(transform(fn), schema);\n}\n","import type { ClientOptions } from '../types-hoist/options';\nimport type { SpanJSON } from '../types-hoist/span';\nimport { isMatchingPattern } from './string';\n\n/**\n * Check if a span should be ignored based on the ignoreSpans configuration.\n */\nexport function shouldIgnoreSpan(\n  span: Pick<SpanJSON, 'description' | 'op'>,\n  ignoreSpans: Required<ClientOptions>['ignoreSpans'],\n): boolean {\n  if (!ignoreSpans?.length || !span.description) {\n    return false;\n  }\n\n  for (const pattern of ignoreSpans) {\n    if (isStringOrRegExp(pattern)) {\n      if (isMatchingPattern(span.description, pattern)) {\n        return true;\n      }\n      continue;\n    }\n\n    if (!pattern.name && !pattern.op) {\n      continue;\n    }\n\n    const nameMatches = pattern.name ? isMatchingPattern(span.description, pattern.name) : true;\n    const opMatches = pattern.op ? span.op && isMatchingPattern(span.op, pattern.op) : true;\n\n    // This check here is only correct because we can guarantee that we ran `isMatchingPattern`\n    // for at least one of `nameMatches` and `opMatches`. So in contrary to how this looks,\n    // not both op and name actually have to match. This is the most efficient way to check\n    // for all combinations of name and op patterns.\n    if (nameMatches && opMatches) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Takes a list of spans, and a span that was dropped, and re-parents the child spans of the dropped span to the parent of the dropped span, if possible.\n * This mutates the spans array in place!\n */\nexport function reparentChildSpans(spans: SpanJSON[], dropSpan: SpanJSON): void {\n  const droppedSpanParentId = dropSpan.parent_span_id;\n  const droppedSpanId = dropSpan.span_id;\n\n  // This should generally not happen, as we do not apply this on root spans\n  // but to be safe, we just bail in this case\n  if (!droppedSpanParentId) {\n    return;\n  }\n\n  for (const span of spans) {\n    if (span.parent_span_id === droppedSpanId) {\n      span.parent_span_id = droppedSpanParentId;\n    }\n  }\n}\n\nfunction isStringOrRegExp(value: unknown): value is string | RegExp {\n  return typeof value === 'string' || value instanceof RegExp;\n}\n","import { PHASE_PRODUCTION_BUILD } from 'next/constants';\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nexport function isBuild(): boolean {\n  return process.env.NEXT_PHASE === PHASE_PRODUCTION_BUILD;\n}\n","import type { Event } from '../types-hoist/event';\n\n/**\n * Get a list of possible event messages from a Sentry event.\n */\nexport function getPossibleEventMessages(event: Event): string[] {\n  const possibleMessages: string[] = [];\n\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    const lastException = event.exception.values[event.exception.values.length - 1];\n    if (lastException?.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  } catch {\n    // ignore errors here\n  }\n\n  return possibleMessages;\n}\n","import type { Client } from '../../client';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '../../semanticAttributes';\nimport type { Event } from '../../types-hoist/event';\nimport type { Span, SpanAttributes, SpanAttributeValue, SpanJSON, SpanOrigin } from '../../types-hoist/span';\nimport { spanToJSON } from '../spanUtils';\nimport { toolCallSpanMap } from './constants';\nimport type { TokenSummary } from './types';\nimport { accumulateTokensForParent, applyAccumulatedTokens } from './utils';\nimport type { ProviderMetadata } from './vercel-ai-attributes';\nimport {\n  AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_PROMPT_ATTRIBUTE,\n  AI_PROMPT_MESSAGES_ATTRIBUTE,\n  AI_PROMPT_TOOLS_ATTRIBUTE,\n  AI_RESPONSE_OBJECT_ATTRIBUTE,\n  AI_RESPONSE_PROVIDER_METADATA_ATTRIBUTE,\n  AI_RESPONSE_TEXT_ATTRIBUTE,\n  AI_RESPONSE_TOOL_CALLS_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TOOL_CALL_ARGS_ATTRIBUTE,\n  AI_TOOL_CALL_ID_ATTRIBUTE,\n  AI_TOOL_CALL_NAME_ATTRIBUTE,\n  AI_TOOL_CALL_RESULT_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n  GEN_AI_RESPONSE_MODEL_ATTRIBUTE,\n  GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE,\n  GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE,\n} from './vercel-ai-attributes';\n\nfunction addOriginToSpan(span: Span, origin: SpanOrigin): void {\n  span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\n/**\n * Post-process spans emitted by the Vercel AI SDK.\n * This is supposed to be used in `client.on('spanStart', ...)\n */\nfunction onVercelAiSpanStart(span: Span): void {\n  const { data: attributes, description: name } = spanToJSON(span);\n\n  if (!name) {\n    return;\n  }\n\n  // Tool call spans\n  // https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n  if (attributes[AI_TOOL_CALL_NAME_ATTRIBUTE] && attributes[AI_TOOL_CALL_ID_ATTRIBUTE] && name === 'ai.toolCall') {\n    processToolCallSpan(span, attributes);\n    return;\n  }\n\n  // The AI and Provider must be defined for generate, stream, and embed spans.\n  // The id of the model\n  const aiModelId = attributes[AI_MODEL_ID_ATTRIBUTE];\n  // the provider of the model\n  const aiModelProvider = attributes[AI_MODEL_PROVIDER_ATTRIBUTE];\n  if (typeof aiModelId !== 'string' || typeof aiModelProvider !== 'string' || !aiModelId || !aiModelProvider) {\n    return;\n  }\n\n  processGenerateSpan(span, name, attributes);\n}\n\nfunction vercelAiEventProcessor(event: Event): Event {\n  if (event.type === 'transaction' && event.spans) {\n    // Map to accumulate token data by parent span ID\n    const tokenAccumulator: Map<string, TokenSummary> = new Map();\n\n    // First pass: process all spans and accumulate token data\n    for (const span of event.spans) {\n      processEndedVercelAiSpan(span);\n\n      // Accumulate token data for parent spans\n      accumulateTokensForParent(span, tokenAccumulator);\n    }\n\n    // Second pass: apply accumulated token data to parent spans\n    for (const span of event.spans) {\n      if (span.op !== 'gen_ai.invoke_agent') {\n        continue;\n      }\n\n      applyAccumulatedTokens(span, tokenAccumulator);\n    }\n\n    // Also apply to root when it is the invoke_agent pipeline\n    const trace = event.contexts?.trace;\n    if (trace && trace.op === 'gen_ai.invoke_agent') {\n      applyAccumulatedTokens(trace, tokenAccumulator);\n    }\n  }\n\n  return event;\n}\n/**\n * Post-process spans emitted by the Vercel AI SDK.\n */\nfunction processEndedVercelAiSpan(span: SpanJSON): void {\n  const { data: attributes, origin } = span;\n\n  if (origin !== 'auto.vercelai.otel') {\n    return;\n  }\n\n  renameAttributeKey(attributes, AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE, GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE);\n  renameAttributeKey(attributes, AI_USAGE_PROMPT_TOKENS_ATTRIBUTE, GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE);\n\n  if (\n    typeof attributes[GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] === 'number' &&\n    typeof attributes[GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] === 'number'\n  ) {\n    attributes['gen_ai.usage.total_tokens'] =\n      attributes[GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] + attributes[GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE];\n  }\n\n  // Rename AI SDK attributes to standardized gen_ai attributes\n  renameAttributeKey(attributes, AI_PROMPT_MESSAGES_ATTRIBUTE, 'gen_ai.request.messages');\n  renameAttributeKey(attributes, AI_RESPONSE_TEXT_ATTRIBUTE, 'gen_ai.response.text');\n  renameAttributeKey(attributes, AI_RESPONSE_TOOL_CALLS_ATTRIBUTE, 'gen_ai.response.tool_calls');\n  renameAttributeKey(attributes, AI_RESPONSE_OBJECT_ATTRIBUTE, 'gen_ai.response.object');\n  renameAttributeKey(attributes, AI_PROMPT_TOOLS_ATTRIBUTE, 'gen_ai.request.available_tools');\n\n  renameAttributeKey(attributes, AI_TOOL_CALL_ARGS_ATTRIBUTE, 'gen_ai.tool.input');\n  renameAttributeKey(attributes, AI_TOOL_CALL_RESULT_ATTRIBUTE, 'gen_ai.tool.output');\n\n  addProviderMetadataToAttributes(attributes);\n\n  // Change attributes namespaced with `ai.X` to `vercel.ai.X`\n  for (const key of Object.keys(attributes)) {\n    if (key.startsWith('ai.')) {\n      renameAttributeKey(attributes, key, `vercel.${key}`);\n    }\n  }\n}\n\n/**\n * Renames an attribute key in the provided attributes object if the old key exists.\n * This function safely handles null and undefined values.\n */\nfunction renameAttributeKey(attributes: Record<string, unknown>, oldKey: string, newKey: string): void {\n  if (attributes[oldKey] != null) {\n    attributes[newKey] = attributes[oldKey];\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete attributes[oldKey];\n  }\n}\n\nfunction processToolCallSpan(span: Span, attributes: SpanAttributes): void {\n  addOriginToSpan(span, 'auto.vercelai.otel');\n  span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.execute_tool');\n  renameAttributeKey(attributes, AI_TOOL_CALL_NAME_ATTRIBUTE, 'gen_ai.tool.name');\n  renameAttributeKey(attributes, AI_TOOL_CALL_ID_ATTRIBUTE, 'gen_ai.tool.call.id');\n\n  // Store the span in our global map using the tool call ID\n  // This allows us to capture tool errors and link them to the correct span\n  const toolCallId = attributes['gen_ai.tool.call.id'];\n\n  if (typeof toolCallId === 'string') {\n    toolCallSpanMap.set(toolCallId, span);\n  }\n\n  // https://opentelemetry.io/docs/specs/semconv/registry/attributes/gen-ai/#gen-ai-tool-type\n  if (!attributes['gen_ai.tool.type']) {\n    span.setAttribute('gen_ai.tool.type', 'function');\n  }\n  const toolName = attributes['gen_ai.tool.name'];\n  if (toolName) {\n    span.updateName(`execute_tool ${toolName}`);\n  }\n}\n\nfunction processGenerateSpan(span: Span, name: string, attributes: SpanAttributes): void {\n  addOriginToSpan(span, 'auto.vercelai.otel');\n\n  const nameWthoutAi = name.replace('ai.', '');\n  span.setAttribute('ai.pipeline.name', nameWthoutAi);\n  span.updateName(nameWthoutAi);\n\n  // If a Telemetry name is set and it is a pipeline span, use that as the operation name\n  const functionId = attributes[AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE];\n  if (functionId && typeof functionId === 'string' && name.split('.').length - 1 === 1) {\n    span.updateName(`${nameWthoutAi} ${functionId}`);\n    span.setAttribute('gen_ai.function_id', functionId);\n  }\n\n  if (attributes[AI_PROMPT_ATTRIBUTE]) {\n    span.setAttribute('gen_ai.prompt', attributes[AI_PROMPT_ATTRIBUTE]);\n  }\n  if (attributes[AI_MODEL_ID_ATTRIBUTE] && !attributes[GEN_AI_RESPONSE_MODEL_ATTRIBUTE]) {\n    span.setAttribute(GEN_AI_RESPONSE_MODEL_ATTRIBUTE, attributes[AI_MODEL_ID_ATTRIBUTE]);\n  }\n  span.setAttribute('ai.streaming', name.includes('stream'));\n\n  // Generate Spans\n  if (name === 'ai.generateText') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.generateText.doGenerate') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_text');\n    span.updateName(`generate_text ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.streamText') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.streamText.doStream') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_text');\n    span.updateName(`stream_text ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.generateObject') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.generateObject.doGenerate') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_object');\n    span.updateName(`generate_object ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.streamObject') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.streamObject.doStream') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_object');\n    span.updateName(`stream_object ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.embed') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.embed.doEmbed') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed');\n    span.updateName(`embed ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name === 'ai.embedMany') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.invoke_agent');\n    return;\n  }\n\n  if (name === 'ai.embedMany.doEmbed') {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed_many');\n    span.updateName(`embed_many ${attributes[AI_MODEL_ID_ATTRIBUTE]}`);\n    return;\n  }\n\n  if (name.startsWith('ai.stream')) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run');\n    return;\n  }\n}\n\n/**\n * Add event processors to the given client to process Vercel AI spans.\n */\nexport function addVercelAiProcessors(client: Client): void {\n  client.on('spanStart', onVercelAiSpanStart);\n  // Note: We cannot do this on `spanEnd`, because the span cannot be mutated anymore at this point\n  client.addEventProcessor(Object.assign(vercelAiEventProcessor, { id: 'VercelAiEventProcessor' }));\n}\n\nfunction addProviderMetadataToAttributes(attributes: SpanAttributes): void {\n  const providerMetadata = attributes[AI_RESPONSE_PROVIDER_METADATA_ATTRIBUTE] as string | undefined;\n  if (providerMetadata) {\n    try {\n      const providerMetadataObject = JSON.parse(providerMetadata) as ProviderMetadata;\n      if (providerMetadataObject.openai) {\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cached',\n          providerMetadataObject.openai.cachedPromptTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.output_tokens.reasoning',\n          providerMetadataObject.openai.reasoningTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.output_tokens.prediction_accepted',\n          providerMetadataObject.openai.acceptedPredictionTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.output_tokens.prediction_rejected',\n          providerMetadataObject.openai.rejectedPredictionTokens,\n        );\n        setAttributeIfDefined(attributes, 'gen_ai.conversation.id', providerMetadataObject.openai.responseId);\n      }\n\n      if (providerMetadataObject.anthropic) {\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cached',\n          providerMetadataObject.anthropic.cacheReadInputTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cache_write',\n          providerMetadataObject.anthropic.cacheCreationInputTokens,\n        );\n      }\n\n      if (providerMetadataObject.bedrock?.usage) {\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cached',\n          providerMetadataObject.bedrock.usage.cacheReadInputTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cache_write',\n          providerMetadataObject.bedrock.usage.cacheWriteInputTokens,\n        );\n      }\n\n      if (providerMetadataObject.deepseek) {\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cached',\n          providerMetadataObject.deepseek.promptCacheHitTokens,\n        );\n        setAttributeIfDefined(\n          attributes,\n          'gen_ai.usage.input_tokens.cache_miss',\n          providerMetadataObject.deepseek.promptCacheMissTokens,\n        );\n      }\n    } catch {\n      // Ignore\n    }\n  }\n}\n\n/**\n * Sets an attribute only if the value is not null or undefined.\n */\nfunction setAttributeIfDefined(attributes: SpanAttributes, key: string, value: SpanAttributeValue | undefined): void {\n  if (value != null) {\n    attributes[key] = value;\n  }\n}\n","import type { ReportDialogOptions } from './report-dialog';\nimport type { DsnComponents, DsnLike } from './types-hoist/dsn';\nimport type { SdkInfo } from './types-hoist/sdkinfo';\nimport { dsnToString, makeDsn } from './utils/dsn';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  const params: Record<string, string> = {\n    sentry_version: SENTRY_API_VERSION,\n  };\n\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string, sdkInfo?: SdkInfo): string {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(dsnLike: DsnLike, dialogOptions: ReportDialogOptions): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n","import { SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_PROFILE_ID } from '../semanticAttributes';\nimport type { TransactionEvent } from '../types-hoist/event';\nimport type { SpanJSON } from '../types-hoist/span';\n\n/**\n * Converts a transaction event to a span JSON object.\n */\nexport function convertTransactionEventToSpanJson(event: TransactionEvent): SpanJSON {\n  const { trace_id, parent_span_id, span_id, status, origin, data, op } = event.contexts?.trace ?? {};\n\n  return {\n    data: data ?? {},\n    description: event.transaction,\n    op,\n    parent_span_id,\n    span_id: span_id ?? '',\n    start_timestamp: event.start_timestamp ?? 0,\n    status,\n    timestamp: event.timestamp,\n    trace_id: trace_id ?? '',\n    origin,\n    profile_id: data?.[SEMANTIC_ATTRIBUTE_PROFILE_ID] as string | undefined,\n    exclusive_time: data?.[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] as number | undefined,\n    measurements: event.measurements,\n    is_segment: true,\n  };\n}\n\n/**\n * Converts a span JSON object to a transaction event.\n */\nexport function convertSpanJsonToTransactionEvent(span: SpanJSON): TransactionEvent {\n  return {\n    type: 'transaction',\n    timestamp: span.timestamp,\n    start_timestamp: span.start_timestamp,\n    transaction: span.description,\n    contexts: {\n      trace: {\n        trace_id: span.trace_id,\n        span_id: span.span_id,\n        parent_span_id: span.parent_span_id,\n        op: span.op,\n        status: span.status,\n        origin: span.origin,\n        data: {\n          ...span.data,\n          ...(span.profile_id && { [SEMANTIC_ATTRIBUTE_PROFILE_ID]: span.profile_id }),\n          ...(span.exclusive_time && { [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: span.exclusive_time }),\n        },\n      },\n    },\n    measurements: span.measurements,\n  };\n}\n","import type { Scope } from '../scope';\nimport type { Span } from '../types-hoist/span';\nimport { addNonEnumerableProperty } from '../utils/object';\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\ntype SpanWithScopes = Span & {\n  [SCOPE_ON_START_SPAN_FIELD]?: Scope;\n  [ISOLATION_SCOPE_ON_START_SPAN_FIELD]?: Scope;\n};\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nexport function setCapturedScopesOnSpan(span: Span | undefined, scope: Scope, isolationScope: Scope): void {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nexport function getCapturedScopesOnSpan(span: Span): { scope?: Scope; isolationScope?: Scope } {\n  return {\n    scope: (span as SpanWithScopes)[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span as SpanWithScopes)[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n","import * as checks from \"./checks.js\";\nimport * as core from \"./core.js\";\nimport { Doc } from \"./doc.js\";\nimport { parse, parseAsync, safeParse, safeParseAsync } from \"./parse.js\";\nimport * as regexes from \"./regexes.js\";\nimport * as util from \"./util.js\";\nimport { version } from \"./versions.js\";\nexport const $ZodType = /*@__PURE__*/ core.$constructor(\"$ZodType\", (inst, def) => {\n    var _a;\n    inst ?? (inst = {});\n    inst._zod.def = def; // set _def property\n    inst._zod.bag = inst._zod.bag || {}; // initialize _bag object\n    inst._zod.version = version;\n    const checks = [...(inst._zod.def.checks ?? [])];\n    // if inst is itself a checks.$ZodCheck, run it as a check\n    if (inst._zod.traits.has(\"$ZodCheck\")) {\n        checks.unshift(inst);\n    }\n    for (const ch of checks) {\n        for (const fn of ch._zod.onattach) {\n            fn(inst);\n        }\n    }\n    if (checks.length === 0) {\n        // deferred initializer\n        // inst._zod.parse is not yet defined\n        (_a = inst._zod).deferred ?? (_a.deferred = []);\n        inst._zod.deferred?.push(() => {\n            inst._zod.run = inst._zod.parse;\n        });\n    }\n    else {\n        const runChecks = (payload, checks, ctx) => {\n            let isAborted = util.aborted(payload);\n            let asyncResult;\n            for (const ch of checks) {\n                if (ch._zod.def.when) {\n                    const shouldRun = ch._zod.def.when(payload);\n                    if (!shouldRun)\n                        continue;\n                }\n                else if (isAborted) {\n                    continue;\n                }\n                const currLen = payload.issues.length;\n                const _ = ch._zod.check(payload);\n                if (_ instanceof Promise && ctx?.async === false) {\n                    throw new core.$ZodAsyncError();\n                }\n                if (asyncResult || _ instanceof Promise) {\n                    asyncResult = (asyncResult ?? Promise.resolve()).then(async () => {\n                        await _;\n                        const nextLen = payload.issues.length;\n                        if (nextLen === currLen)\n                            return;\n                        if (!isAborted)\n                            isAborted = util.aborted(payload, currLen);\n                    });\n                }\n                else {\n                    const nextLen = payload.issues.length;\n                    if (nextLen === currLen)\n                        continue;\n                    if (!isAborted)\n                        isAborted = util.aborted(payload, currLen);\n                }\n            }\n            if (asyncResult) {\n                return asyncResult.then(() => {\n                    return payload;\n                });\n            }\n            return payload;\n        };\n        // const handleChecksResult = (\n        //   checkResult: ParsePayload,\n        //   originalResult: ParsePayload,\n        //   ctx: ParseContextInternal\n        // ): util.MaybeAsync<ParsePayload> => {\n        //   // if the checks mutated the value && there are no issues, re-parse the result\n        //   if (checkResult.value !== originalResult.value && !checkResult.issues.length)\n        //     return inst._zod.parse(checkResult, ctx);\n        //   return originalResult;\n        // };\n        const handleCanaryResult = (canary, payload, ctx) => {\n            // abort if the canary is aborted\n            if (util.aborted(canary)) {\n                canary.aborted = true;\n                return canary;\n            }\n            // run checks first, then\n            const checkResult = runChecks(payload, checks, ctx);\n            if (checkResult instanceof Promise) {\n                if (ctx.async === false)\n                    throw new core.$ZodAsyncError();\n                return checkResult.then((checkResult) => inst._zod.parse(checkResult, ctx));\n            }\n            return inst._zod.parse(checkResult, ctx);\n        };\n        inst._zod.run = (payload, ctx) => {\n            if (ctx.skipChecks) {\n                return inst._zod.parse(payload, ctx);\n            }\n            if (ctx.direction === \"backward\") {\n                // run canary\n                // initial pass (no checks)\n                const canary = inst._zod.parse({ value: payload.value, issues: [] }, { ...ctx, skipChecks: true });\n                if (canary instanceof Promise) {\n                    return canary.then((canary) => {\n                        return handleCanaryResult(canary, payload, ctx);\n                    });\n                }\n                return handleCanaryResult(canary, payload, ctx);\n            }\n            // forward\n            const result = inst._zod.parse(payload, ctx);\n            if (result instanceof Promise) {\n                if (ctx.async === false)\n                    throw new core.$ZodAsyncError();\n                return result.then((result) => runChecks(result, checks, ctx));\n            }\n            return runChecks(result, checks, ctx);\n        };\n    }\n    inst[\"~standard\"] = {\n        validate: (value) => {\n            try {\n                const r = safeParse(inst, value);\n                return r.success ? { value: r.data } : { issues: r.error?.issues };\n            }\n            catch (_) {\n                return safeParseAsync(inst, value).then((r) => (r.success ? { value: r.data } : { issues: r.error?.issues }));\n            }\n        },\n        vendor: \"zod\",\n        version: 1,\n    };\n});\nexport { clone } from \"./util.js\";\nexport const $ZodString = /*@__PURE__*/ core.$constructor(\"$ZodString\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.pattern = [...(inst?._zod.bag?.patterns ?? [])].pop() ?? regexes.string(inst._zod.bag);\n    inst._zod.parse = (payload, _) => {\n        if (def.coerce)\n            try {\n                payload.value = String(payload.value);\n            }\n            catch (_) { }\n        if (typeof payload.value === \"string\")\n            return payload;\n        payload.issues.push({\n            expected: \"string\",\n            code: \"invalid_type\",\n            input: payload.value,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodStringFormat = /*@__PURE__*/ core.$constructor(\"$ZodStringFormat\", (inst, def) => {\n    // check initialization must come first\n    checks.$ZodCheckStringFormat.init(inst, def);\n    $ZodString.init(inst, def);\n});\nexport const $ZodGUID = /*@__PURE__*/ core.$constructor(\"$ZodGUID\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.guid);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodUUID = /*@__PURE__*/ core.$constructor(\"$ZodUUID\", (inst, def) => {\n    if (def.version) {\n        const versionMap = {\n            v1: 1,\n            v2: 2,\n            v3: 3,\n            v4: 4,\n            v5: 5,\n            v6: 6,\n            v7: 7,\n            v8: 8,\n        };\n        const v = versionMap[def.version];\n        if (v === undefined)\n            throw new Error(`Invalid UUID version: \"${def.version}\"`);\n        def.pattern ?? (def.pattern = regexes.uuid(v));\n    }\n    else\n        def.pattern ?? (def.pattern = regexes.uuid());\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodEmail = /*@__PURE__*/ core.$constructor(\"$ZodEmail\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.email);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodURL = /*@__PURE__*/ core.$constructor(\"$ZodURL\", (inst, def) => {\n    $ZodStringFormat.init(inst, def);\n    inst._zod.check = (payload) => {\n        try {\n            // Trim whitespace from input\n            const trimmed = payload.value.trim();\n            // @ts-ignore\n            const url = new URL(trimmed);\n            if (def.hostname) {\n                def.hostname.lastIndex = 0;\n                if (!def.hostname.test(url.hostname)) {\n                    payload.issues.push({\n                        code: \"invalid_format\",\n                        format: \"url\",\n                        note: \"Invalid hostname\",\n                        pattern: regexes.hostname.source,\n                        input: payload.value,\n                        inst,\n                        continue: !def.abort,\n                    });\n                }\n            }\n            if (def.protocol) {\n                def.protocol.lastIndex = 0;\n                if (!def.protocol.test(url.protocol.endsWith(\":\") ? url.protocol.slice(0, -1) : url.protocol)) {\n                    payload.issues.push({\n                        code: \"invalid_format\",\n                        format: \"url\",\n                        note: \"Invalid protocol\",\n                        pattern: def.protocol.source,\n                        input: payload.value,\n                        inst,\n                        continue: !def.abort,\n                    });\n                }\n            }\n            // Set the output value based on normalize flag\n            if (def.normalize) {\n                // Use normalized URL\n                payload.value = url.href;\n            }\n            else {\n                // Preserve the original input (trimmed)\n                payload.value = trimmed;\n            }\n            return;\n        }\n        catch (_) {\n            payload.issues.push({\n                code: \"invalid_format\",\n                format: \"url\",\n                input: payload.value,\n                inst,\n                continue: !def.abort,\n            });\n        }\n    };\n});\nexport const $ZodEmoji = /*@__PURE__*/ core.$constructor(\"$ZodEmoji\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.emoji());\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodNanoID = /*@__PURE__*/ core.$constructor(\"$ZodNanoID\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.nanoid);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodCUID = /*@__PURE__*/ core.$constructor(\"$ZodCUID\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.cuid);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodCUID2 = /*@__PURE__*/ core.$constructor(\"$ZodCUID2\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.cuid2);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodULID = /*@__PURE__*/ core.$constructor(\"$ZodULID\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.ulid);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodXID = /*@__PURE__*/ core.$constructor(\"$ZodXID\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.xid);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodKSUID = /*@__PURE__*/ core.$constructor(\"$ZodKSUID\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.ksuid);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodISODateTime = /*@__PURE__*/ core.$constructor(\"$ZodISODateTime\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.datetime(def));\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodISODate = /*@__PURE__*/ core.$constructor(\"$ZodISODate\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.date);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodISOTime = /*@__PURE__*/ core.$constructor(\"$ZodISOTime\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.time(def));\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodISODuration = /*@__PURE__*/ core.$constructor(\"$ZodISODuration\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.duration);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodIPv4 = /*@__PURE__*/ core.$constructor(\"$ZodIPv4\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.ipv4);\n    $ZodStringFormat.init(inst, def);\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.format = `ipv4`;\n    });\n});\nexport const $ZodIPv6 = /*@__PURE__*/ core.$constructor(\"$ZodIPv6\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.ipv6);\n    $ZodStringFormat.init(inst, def);\n    inst._zod.onattach.push((inst) => {\n        const bag = inst._zod.bag;\n        bag.format = `ipv6`;\n    });\n    inst._zod.check = (payload) => {\n        try {\n            // @ts-ignore\n            new URL(`http://[${payload.value}]`);\n            // return;\n        }\n        catch {\n            payload.issues.push({\n                code: \"invalid_format\",\n                format: \"ipv6\",\n                input: payload.value,\n                inst,\n                continue: !def.abort,\n            });\n        }\n    };\n});\nexport const $ZodCIDRv4 = /*@__PURE__*/ core.$constructor(\"$ZodCIDRv4\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.cidrv4);\n    $ZodStringFormat.init(inst, def);\n});\nexport const $ZodCIDRv6 = /*@__PURE__*/ core.$constructor(\"$ZodCIDRv6\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.cidrv6); // not used for validation\n    $ZodStringFormat.init(inst, def);\n    inst._zod.check = (payload) => {\n        const [address, prefix] = payload.value.split(\"/\");\n        try {\n            if (!prefix)\n                throw new Error();\n            const prefixNum = Number(prefix);\n            if (`${prefixNum}` !== prefix)\n                throw new Error();\n            if (prefixNum < 0 || prefixNum > 128)\n                throw new Error();\n            // @ts-ignore\n            new URL(`http://[${address}]`);\n        }\n        catch {\n            payload.issues.push({\n                code: \"invalid_format\",\n                format: \"cidrv6\",\n                input: payload.value,\n                inst,\n                continue: !def.abort,\n            });\n        }\n    };\n});\n//////////////////////////////   ZodBase64   //////////////////////////////\nexport function isValidBase64(data) {\n    if (data === \"\")\n        return true;\n    if (data.length % 4 !== 0)\n        return false;\n    try {\n        // @ts-ignore\n        atob(data);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexport const $ZodBase64 = /*@__PURE__*/ core.$constructor(\"$ZodBase64\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.base64);\n    $ZodStringFormat.init(inst, def);\n    inst._zod.onattach.push((inst) => {\n        inst._zod.bag.contentEncoding = \"base64\";\n    });\n    inst._zod.check = (payload) => {\n        if (isValidBase64(payload.value))\n            return;\n        payload.issues.push({\n            code: \"invalid_format\",\n            format: \"base64\",\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\n//////////////////////////////   ZodBase64   //////////////////////////////\nexport function isValidBase64URL(data) {\n    if (!regexes.base64url.test(data))\n        return false;\n    const base64 = data.replace(/[-_]/g, (c) => (c === \"-\" ? \"+\" : \"/\"));\n    const padded = base64.padEnd(Math.ceil(base64.length / 4) * 4, \"=\");\n    return isValidBase64(padded);\n}\nexport const $ZodBase64URL = /*@__PURE__*/ core.$constructor(\"$ZodBase64URL\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.base64url);\n    $ZodStringFormat.init(inst, def);\n    inst._zod.onattach.push((inst) => {\n        inst._zod.bag.contentEncoding = \"base64url\";\n    });\n    inst._zod.check = (payload) => {\n        if (isValidBase64URL(payload.value))\n            return;\n        payload.issues.push({\n            code: \"invalid_format\",\n            format: \"base64url\",\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodE164 = /*@__PURE__*/ core.$constructor(\"$ZodE164\", (inst, def) => {\n    def.pattern ?? (def.pattern = regexes.e164);\n    $ZodStringFormat.init(inst, def);\n});\n//////////////////////////////   ZodJWT   //////////////////////////////\nexport function isValidJWT(token, algorithm = null) {\n    try {\n        const tokensParts = token.split(\".\");\n        if (tokensParts.length !== 3)\n            return false;\n        const [header] = tokensParts;\n        if (!header)\n            return false;\n        // @ts-ignore\n        const parsedHeader = JSON.parse(atob(header));\n        if (\"typ\" in parsedHeader && parsedHeader?.typ !== \"JWT\")\n            return false;\n        if (!parsedHeader.alg)\n            return false;\n        if (algorithm && (!(\"alg\" in parsedHeader) || parsedHeader.alg !== algorithm))\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexport const $ZodJWT = /*@__PURE__*/ core.$constructor(\"$ZodJWT\", (inst, def) => {\n    $ZodStringFormat.init(inst, def);\n    inst._zod.check = (payload) => {\n        if (isValidJWT(payload.value, def.alg))\n            return;\n        payload.issues.push({\n            code: \"invalid_format\",\n            format: \"jwt\",\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodCustomStringFormat = /*@__PURE__*/ core.$constructor(\"$ZodCustomStringFormat\", (inst, def) => {\n    $ZodStringFormat.init(inst, def);\n    inst._zod.check = (payload) => {\n        if (def.fn(payload.value))\n            return;\n        payload.issues.push({\n            code: \"invalid_format\",\n            format: def.format,\n            input: payload.value,\n            inst,\n            continue: !def.abort,\n        });\n    };\n});\nexport const $ZodNumber = /*@__PURE__*/ core.$constructor(\"$ZodNumber\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.pattern = inst._zod.bag.pattern ?? regexes.number;\n    inst._zod.parse = (payload, _ctx) => {\n        if (def.coerce)\n            try {\n                payload.value = Number(payload.value);\n            }\n            catch (_) { }\n        const input = payload.value;\n        if (typeof input === \"number\" && !Number.isNaN(input) && Number.isFinite(input)) {\n            return payload;\n        }\n        const received = typeof input === \"number\"\n            ? Number.isNaN(input)\n                ? \"NaN\"\n                : !Number.isFinite(input)\n                    ? \"Infinity\"\n                    : undefined\n            : undefined;\n        payload.issues.push({\n            expected: \"number\",\n            code: \"invalid_type\",\n            input,\n            inst,\n            ...(received ? { received } : {}),\n        });\n        return payload;\n    };\n});\nexport const $ZodNumberFormat = /*@__PURE__*/ core.$constructor(\"$ZodNumber\", (inst, def) => {\n    checks.$ZodCheckNumberFormat.init(inst, def);\n    $ZodNumber.init(inst, def); // no format checksp\n});\nexport const $ZodBoolean = /*@__PURE__*/ core.$constructor(\"$ZodBoolean\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.pattern = regexes.boolean;\n    inst._zod.parse = (payload, _ctx) => {\n        if (def.coerce)\n            try {\n                payload.value = Boolean(payload.value);\n            }\n            catch (_) { }\n        const input = payload.value;\n        if (typeof input === \"boolean\")\n            return payload;\n        payload.issues.push({\n            expected: \"boolean\",\n            code: \"invalid_type\",\n            input,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodBigInt = /*@__PURE__*/ core.$constructor(\"$ZodBigInt\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.pattern = regexes.bigint;\n    inst._zod.parse = (payload, _ctx) => {\n        if (def.coerce)\n            try {\n                payload.value = BigInt(payload.value);\n            }\n            catch (_) { }\n        if (typeof payload.value === \"bigint\")\n            return payload;\n        payload.issues.push({\n            expected: \"bigint\",\n            code: \"invalid_type\",\n            input: payload.value,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodBigIntFormat = /*@__PURE__*/ core.$constructor(\"$ZodBigInt\", (inst, def) => {\n    checks.$ZodCheckBigIntFormat.init(inst, def);\n    $ZodBigInt.init(inst, def); // no format checks\n});\nexport const $ZodSymbol = /*@__PURE__*/ core.$constructor(\"$ZodSymbol\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, _ctx) => {\n        const input = payload.value;\n        if (typeof input === \"symbol\")\n            return payload;\n        payload.issues.push({\n            expected: \"symbol\",\n            code: \"invalid_type\",\n            input,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodUndefined = /*@__PURE__*/ core.$constructor(\"$ZodUndefined\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.pattern = regexes.undefined;\n    inst._zod.values = new Set([undefined]);\n    inst._zod.optin = \"optional\";\n    inst._zod.optout = \"optional\";\n    inst._zod.parse = (payload, _ctx) => {\n        const input = payload.value;\n        if (typeof input === \"undefined\")\n            return payload;\n        payload.issues.push({\n            expected: \"undefined\",\n            code: \"invalid_type\",\n            input,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodNull = /*@__PURE__*/ core.$constructor(\"$ZodNull\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.pattern = regexes.null;\n    inst._zod.values = new Set([null]);\n    inst._zod.parse = (payload, _ctx) => {\n        const input = payload.value;\n        if (input === null)\n            return payload;\n        payload.issues.push({\n            expected: \"null\",\n            code: \"invalid_type\",\n            input,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodAny = /*@__PURE__*/ core.$constructor(\"$ZodAny\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload) => payload;\n});\nexport const $ZodUnknown = /*@__PURE__*/ core.$constructor(\"$ZodUnknown\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload) => payload;\n});\nexport const $ZodNever = /*@__PURE__*/ core.$constructor(\"$ZodNever\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, _ctx) => {\n        payload.issues.push({\n            expected: \"never\",\n            code: \"invalid_type\",\n            input: payload.value,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodVoid = /*@__PURE__*/ core.$constructor(\"$ZodVoid\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, _ctx) => {\n        const input = payload.value;\n        if (typeof input === \"undefined\")\n            return payload;\n        payload.issues.push({\n            expected: \"void\",\n            code: \"invalid_type\",\n            input,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodDate = /*@__PURE__*/ core.$constructor(\"$ZodDate\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, _ctx) => {\n        if (def.coerce) {\n            try {\n                payload.value = new Date(payload.value);\n            }\n            catch (_err) { }\n        }\n        const input = payload.value;\n        const isDate = input instanceof Date;\n        const isValidDate = isDate && !Number.isNaN(input.getTime());\n        if (isValidDate)\n            return payload;\n        payload.issues.push({\n            expected: \"date\",\n            code: \"invalid_type\",\n            input,\n            ...(isDate ? { received: \"Invalid Date\" } : {}),\n            inst,\n        });\n        return payload;\n    };\n});\nfunction handleArrayResult(result, final, index) {\n    if (result.issues.length) {\n        final.issues.push(...util.prefixIssues(index, result.issues));\n    }\n    final.value[index] = result.value;\n}\nexport const $ZodArray = /*@__PURE__*/ core.$constructor(\"$ZodArray\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, ctx) => {\n        const input = payload.value;\n        if (!Array.isArray(input)) {\n            payload.issues.push({\n                expected: \"array\",\n                code: \"invalid_type\",\n                input,\n                inst,\n            });\n            return payload;\n        }\n        payload.value = Array(input.length);\n        const proms = [];\n        for (let i = 0; i < input.length; i++) {\n            const item = input[i];\n            const result = def.element._zod.run({\n                value: item,\n                issues: [],\n            }, ctx);\n            if (result instanceof Promise) {\n                proms.push(result.then((result) => handleArrayResult(result, payload, i)));\n            }\n            else {\n                handleArrayResult(result, payload, i);\n            }\n        }\n        if (proms.length) {\n            return Promise.all(proms).then(() => payload);\n        }\n        return payload; //handleArrayResultsAsync(parseResults, final);\n    };\n});\nfunction handlePropertyResult(result, final, key, input) {\n    if (result.issues.length) {\n        final.issues.push(...util.prefixIssues(key, result.issues));\n    }\n    if (result.value === undefined) {\n        if (key in input) {\n            final.value[key] = undefined;\n        }\n    }\n    else {\n        final.value[key] = result.value;\n    }\n}\nfunction normalizeDef(def) {\n    const keys = Object.keys(def.shape);\n    for (const k of keys) {\n        if (!def.shape[k]._zod.traits.has(\"$ZodType\")) {\n            throw new Error(`Invalid element at key \"${k}\": expected a Zod schema`);\n        }\n    }\n    const okeys = util.optionalKeys(def.shape);\n    return {\n        ...def,\n        keys,\n        keySet: new Set(keys),\n        numKeys: keys.length,\n        optionalKeys: new Set(okeys),\n    };\n}\nfunction handleCatchall(proms, input, payload, ctx, def, inst) {\n    const unrecognized = [];\n    // iterate over input keys\n    const keySet = def.keySet;\n    const _catchall = def.catchall._zod;\n    const t = _catchall.def.type;\n    for (const key of Object.keys(input)) {\n        if (keySet.has(key))\n            continue;\n        if (t === \"never\") {\n            unrecognized.push(key);\n            continue;\n        }\n        const r = _catchall.run({ value: input[key], issues: [] }, ctx);\n        if (r instanceof Promise) {\n            proms.push(r.then((r) => handlePropertyResult(r, payload, key, input)));\n        }\n        else {\n            handlePropertyResult(r, payload, key, input);\n        }\n    }\n    if (unrecognized.length) {\n        payload.issues.push({\n            code: \"unrecognized_keys\",\n            keys: unrecognized,\n            input,\n            inst,\n        });\n    }\n    if (!proms.length)\n        return payload;\n    return Promise.all(proms).then(() => {\n        return payload;\n    });\n}\nexport const $ZodObject = /*@__PURE__*/ core.$constructor(\"$ZodObject\", (inst, def) => {\n    // requires cast because technically $ZodObject doesn't extend\n    $ZodType.init(inst, def);\n    const _normalized = util.cached(() => normalizeDef(def));\n    util.defineLazy(inst._zod, \"propValues\", () => {\n        const shape = def.shape;\n        const propValues = {};\n        for (const key in shape) {\n            const field = shape[key]._zod;\n            if (field.values) {\n                propValues[key] ?? (propValues[key] = new Set());\n                for (const v of field.values)\n                    propValues[key].add(v);\n            }\n        }\n        return propValues;\n    });\n    const isObject = util.isObject;\n    const catchall = def.catchall;\n    let value;\n    inst._zod.parse = (payload, ctx) => {\n        value ?? (value = _normalized.value);\n        const input = payload.value;\n        if (!isObject(input)) {\n            payload.issues.push({\n                expected: \"object\",\n                code: \"invalid_type\",\n                input,\n                inst,\n            });\n            return payload;\n        }\n        payload.value = {};\n        const proms = [];\n        const shape = value.shape;\n        for (const key of value.keys) {\n            const el = shape[key];\n            const r = el._zod.run({ value: input[key], issues: [] }, ctx);\n            if (r instanceof Promise) {\n                proms.push(r.then((r) => handlePropertyResult(r, payload, key, input)));\n            }\n            else {\n                handlePropertyResult(r, payload, key, input);\n            }\n        }\n        if (!catchall) {\n            return proms.length ? Promise.all(proms).then(() => payload) : payload;\n        }\n        return handleCatchall(proms, input, payload, ctx, _normalized.value, inst);\n    };\n});\nexport const $ZodObjectJIT = /*@__PURE__*/ core.$constructor(\"$ZodObjectJIT\", (inst, def) => {\n    // requires cast because technically $ZodObject doesn't extend\n    $ZodObject.init(inst, def);\n    const superParse = inst._zod.parse;\n    const _normalized = util.cached(() => normalizeDef(def));\n    const generateFastpass = (shape) => {\n        const doc = new Doc([\"shape\", \"payload\", \"ctx\"]);\n        const normalized = _normalized.value;\n        const parseStr = (key) => {\n            const k = util.esc(key);\n            return `shape[${k}]._zod.run({ value: input[${k}], issues: [] }, ctx)`;\n        };\n        doc.write(`const input = payload.value;`);\n        const ids = Object.create(null);\n        let counter = 0;\n        for (const key of normalized.keys) {\n            ids[key] = `key_${counter++}`;\n        }\n        // A: preserve key order {\n        doc.write(`const newResult = {}`);\n        for (const key of normalized.keys) {\n            const id = ids[key];\n            const k = util.esc(key);\n            doc.write(`const ${id} = ${parseStr(key)};`);\n            doc.write(`\n        if (${id}.issues.length) {\n          payload.issues = payload.issues.concat(${id}.issues.map(iss => ({\n            ...iss,\n            path: iss.path ? [${k}, ...iss.path] : [${k}]\n          })));\n        }\n        \n        if (${id}.value === undefined) {\n          if (${k} in input) {\n            newResult[${k}] = undefined;\n          }\n        } else {\n          newResult[${k}] = ${id}.value;\n        }\n      `);\n        }\n        doc.write(`payload.value = newResult;`);\n        doc.write(`return payload;`);\n        const fn = doc.compile();\n        return (payload, ctx) => fn(shape, payload, ctx);\n    };\n    let fastpass;\n    const isObject = util.isObject;\n    const jit = !core.globalConfig.jitless;\n    const allowsEval = util.allowsEval;\n    const fastEnabled = jit && allowsEval.value; // && !def.catchall;\n    const catchall = def.catchall;\n    let value;\n    inst._zod.parse = (payload, ctx) => {\n        value ?? (value = _normalized.value);\n        const input = payload.value;\n        if (!isObject(input)) {\n            payload.issues.push({\n                expected: \"object\",\n                code: \"invalid_type\",\n                input,\n                inst,\n            });\n            return payload;\n        }\n        if (jit && fastEnabled && ctx?.async === false && ctx.jitless !== true) {\n            // always synchronous\n            if (!fastpass)\n                fastpass = generateFastpass(def.shape);\n            payload = fastpass(payload, ctx);\n            if (!catchall)\n                return payload;\n            return handleCatchall([], input, payload, ctx, value, inst);\n        }\n        return superParse(payload, ctx);\n    };\n});\nfunction handleUnionResults(results, final, inst, ctx) {\n    for (const result of results) {\n        if (result.issues.length === 0) {\n            final.value = result.value;\n            return final;\n        }\n    }\n    const nonaborted = results.filter((r) => !util.aborted(r));\n    if (nonaborted.length === 1) {\n        final.value = nonaborted[0].value;\n        return nonaborted[0];\n    }\n    final.issues.push({\n        code: \"invalid_union\",\n        input: final.value,\n        inst,\n        errors: results.map((result) => result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config()))),\n    });\n    return final;\n}\nexport const $ZodUnion = /*@__PURE__*/ core.$constructor(\"$ZodUnion\", (inst, def) => {\n    $ZodType.init(inst, def);\n    util.defineLazy(inst._zod, \"optin\", () => def.options.some((o) => o._zod.optin === \"optional\") ? \"optional\" : undefined);\n    util.defineLazy(inst._zod, \"optout\", () => def.options.some((o) => o._zod.optout === \"optional\") ? \"optional\" : undefined);\n    util.defineLazy(inst._zod, \"values\", () => {\n        if (def.options.every((o) => o._zod.values)) {\n            return new Set(def.options.flatMap((option) => Array.from(option._zod.values)));\n        }\n        return undefined;\n    });\n    util.defineLazy(inst._zod, \"pattern\", () => {\n        if (def.options.every((o) => o._zod.pattern)) {\n            const patterns = def.options.map((o) => o._zod.pattern);\n            return new RegExp(`^(${patterns.map((p) => util.cleanRegex(p.source)).join(\"|\")})$`);\n        }\n        return undefined;\n    });\n    const single = def.options.length === 1;\n    const first = def.options[0]._zod.run;\n    inst._zod.parse = (payload, ctx) => {\n        if (single) {\n            return first(payload, ctx);\n        }\n        let async = false;\n        const results = [];\n        for (const option of def.options) {\n            const result = option._zod.run({\n                value: payload.value,\n                issues: [],\n            }, ctx);\n            if (result instanceof Promise) {\n                results.push(result);\n                async = true;\n            }\n            else {\n                if (result.issues.length === 0)\n                    return result;\n                results.push(result);\n            }\n        }\n        if (!async)\n            return handleUnionResults(results, payload, inst, ctx);\n        return Promise.all(results).then((results) => {\n            return handleUnionResults(results, payload, inst, ctx);\n        });\n    };\n});\nexport const $ZodDiscriminatedUnion = \n/*@__PURE__*/\ncore.$constructor(\"$ZodDiscriminatedUnion\", (inst, def) => {\n    $ZodUnion.init(inst, def);\n    const _super = inst._zod.parse;\n    util.defineLazy(inst._zod, \"propValues\", () => {\n        const propValues = {};\n        for (const option of def.options) {\n            const pv = option._zod.propValues;\n            if (!pv || Object.keys(pv).length === 0)\n                throw new Error(`Invalid discriminated union option at index \"${def.options.indexOf(option)}\"`);\n            for (const [k, v] of Object.entries(pv)) {\n                if (!propValues[k])\n                    propValues[k] = new Set();\n                for (const val of v) {\n                    propValues[k].add(val);\n                }\n            }\n        }\n        return propValues;\n    });\n    const disc = util.cached(() => {\n        const opts = def.options;\n        const map = new Map();\n        for (const o of opts) {\n            const values = o._zod.propValues?.[def.discriminator];\n            if (!values || values.size === 0)\n                throw new Error(`Invalid discriminated union option at index \"${def.options.indexOf(o)}\"`);\n            for (const v of values) {\n                if (map.has(v)) {\n                    throw new Error(`Duplicate discriminator value \"${String(v)}\"`);\n                }\n                map.set(v, o);\n            }\n        }\n        return map;\n    });\n    inst._zod.parse = (payload, ctx) => {\n        const input = payload.value;\n        if (!util.isObject(input)) {\n            payload.issues.push({\n                code: \"invalid_type\",\n                expected: \"object\",\n                input,\n                inst,\n            });\n            return payload;\n        }\n        const opt = disc.value.get(input?.[def.discriminator]);\n        if (opt) {\n            return opt._zod.run(payload, ctx);\n        }\n        if (def.unionFallback) {\n            return _super(payload, ctx);\n        }\n        // no matching discriminator\n        payload.issues.push({\n            code: \"invalid_union\",\n            errors: [],\n            note: \"No matching discriminator\",\n            discriminator: def.discriminator,\n            input,\n            path: [def.discriminator],\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodIntersection = /*@__PURE__*/ core.$constructor(\"$ZodIntersection\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, ctx) => {\n        const input = payload.value;\n        const left = def.left._zod.run({ value: input, issues: [] }, ctx);\n        const right = def.right._zod.run({ value: input, issues: [] }, ctx);\n        const async = left instanceof Promise || right instanceof Promise;\n        if (async) {\n            return Promise.all([left, right]).then(([left, right]) => {\n                return handleIntersectionResults(payload, left, right);\n            });\n        }\n        return handleIntersectionResults(payload, left, right);\n    };\n});\nfunction mergeValues(a, b) {\n    // const aType = parse.t(a);\n    // const bType = parse.t(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    if (a instanceof Date && b instanceof Date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    if (util.isPlainObject(a) && util.isPlainObject(b)) {\n        const bKeys = Object.keys(b);\n        const sharedKeys = Object.keys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false,\n                    mergeErrorPath: [key, ...sharedValue.mergeErrorPath],\n                };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length) {\n            return { valid: false, mergeErrorPath: [] };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false,\n                    mergeErrorPath: [index, ...sharedValue.mergeErrorPath],\n                };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    return { valid: false, mergeErrorPath: [] };\n}\nfunction handleIntersectionResults(result, left, right) {\n    if (left.issues.length) {\n        result.issues.push(...left.issues);\n    }\n    if (right.issues.length) {\n        result.issues.push(...right.issues);\n    }\n    if (util.aborted(result))\n        return result;\n    const merged = mergeValues(left.value, right.value);\n    if (!merged.valid) {\n        throw new Error(`Unmergable intersection. Error path: ` + `${JSON.stringify(merged.mergeErrorPath)}`);\n    }\n    result.value = merged.data;\n    return result;\n}\nexport const $ZodTuple = /*@__PURE__*/ core.$constructor(\"$ZodTuple\", (inst, def) => {\n    $ZodType.init(inst, def);\n    const items = def.items;\n    const optStart = items.length - [...items].reverse().findIndex((item) => item._zod.optin !== \"optional\");\n    inst._zod.parse = (payload, ctx) => {\n        const input = payload.value;\n        if (!Array.isArray(input)) {\n            payload.issues.push({\n                input,\n                inst,\n                expected: \"tuple\",\n                code: \"invalid_type\",\n            });\n            return payload;\n        }\n        payload.value = [];\n        const proms = [];\n        if (!def.rest) {\n            const tooBig = input.length > items.length;\n            const tooSmall = input.length < optStart - 1;\n            if (tooBig || tooSmall) {\n                payload.issues.push({\n                    ...(tooBig ? { code: \"too_big\", maximum: items.length } : { code: \"too_small\", minimum: items.length }),\n                    input,\n                    inst,\n                    origin: \"array\",\n                });\n                return payload;\n            }\n        }\n        let i = -1;\n        for (const item of items) {\n            i++;\n            if (i >= input.length)\n                if (i >= optStart)\n                    continue;\n            const result = item._zod.run({\n                value: input[i],\n                issues: [],\n            }, ctx);\n            if (result instanceof Promise) {\n                proms.push(result.then((result) => handleTupleResult(result, payload, i)));\n            }\n            else {\n                handleTupleResult(result, payload, i);\n            }\n        }\n        if (def.rest) {\n            const rest = input.slice(items.length);\n            for (const el of rest) {\n                i++;\n                const result = def.rest._zod.run({\n                    value: el,\n                    issues: [],\n                }, ctx);\n                if (result instanceof Promise) {\n                    proms.push(result.then((result) => handleTupleResult(result, payload, i)));\n                }\n                else {\n                    handleTupleResult(result, payload, i);\n                }\n            }\n        }\n        if (proms.length)\n            return Promise.all(proms).then(() => payload);\n        return payload;\n    };\n});\nfunction handleTupleResult(result, final, index) {\n    if (result.issues.length) {\n        final.issues.push(...util.prefixIssues(index, result.issues));\n    }\n    final.value[index] = result.value;\n}\nexport const $ZodRecord = /*@__PURE__*/ core.$constructor(\"$ZodRecord\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, ctx) => {\n        const input = payload.value;\n        if (!util.isPlainObject(input)) {\n            payload.issues.push({\n                expected: \"record\",\n                code: \"invalid_type\",\n                input,\n                inst,\n            });\n            return payload;\n        }\n        const proms = [];\n        if (def.keyType._zod.values) {\n            const values = def.keyType._zod.values;\n            payload.value = {};\n            for (const key of values) {\n                if (typeof key === \"string\" || typeof key === \"number\" || typeof key === \"symbol\") {\n                    const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);\n                    if (result instanceof Promise) {\n                        proms.push(result.then((result) => {\n                            if (result.issues.length) {\n                                payload.issues.push(...util.prefixIssues(key, result.issues));\n                            }\n                            payload.value[key] = result.value;\n                        }));\n                    }\n                    else {\n                        if (result.issues.length) {\n                            payload.issues.push(...util.prefixIssues(key, result.issues));\n                        }\n                        payload.value[key] = result.value;\n                    }\n                }\n            }\n            let unrecognized;\n            for (const key in input) {\n                if (!values.has(key)) {\n                    unrecognized = unrecognized ?? [];\n                    unrecognized.push(key);\n                }\n            }\n            if (unrecognized && unrecognized.length > 0) {\n                payload.issues.push({\n                    code: \"unrecognized_keys\",\n                    input,\n                    inst,\n                    keys: unrecognized,\n                });\n            }\n        }\n        else {\n            payload.value = {};\n            for (const key of Reflect.ownKeys(input)) {\n                if (key === \"__proto__\")\n                    continue;\n                const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);\n                if (keyResult instanceof Promise) {\n                    throw new Error(\"Async schemas not supported in object keys currently\");\n                }\n                if (keyResult.issues.length) {\n                    payload.issues.push({\n                        code: \"invalid_key\",\n                        origin: \"record\",\n                        issues: keyResult.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\n                        input: key,\n                        path: [key],\n                        inst,\n                    });\n                    payload.value[keyResult.value] = keyResult.value;\n                    continue;\n                }\n                const result = def.valueType._zod.run({ value: input[key], issues: [] }, ctx);\n                if (result instanceof Promise) {\n                    proms.push(result.then((result) => {\n                        if (result.issues.length) {\n                            payload.issues.push(...util.prefixIssues(key, result.issues));\n                        }\n                        payload.value[keyResult.value] = result.value;\n                    }));\n                }\n                else {\n                    if (result.issues.length) {\n                        payload.issues.push(...util.prefixIssues(key, result.issues));\n                    }\n                    payload.value[keyResult.value] = result.value;\n                }\n            }\n        }\n        if (proms.length) {\n            return Promise.all(proms).then(() => payload);\n        }\n        return payload;\n    };\n});\nexport const $ZodMap = /*@__PURE__*/ core.$constructor(\"$ZodMap\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, ctx) => {\n        const input = payload.value;\n        if (!(input instanceof Map)) {\n            payload.issues.push({\n                expected: \"map\",\n                code: \"invalid_type\",\n                input,\n                inst,\n            });\n            return payload;\n        }\n        const proms = [];\n        payload.value = new Map();\n        for (const [key, value] of input) {\n            const keyResult = def.keyType._zod.run({ value: key, issues: [] }, ctx);\n            const valueResult = def.valueType._zod.run({ value: value, issues: [] }, ctx);\n            if (keyResult instanceof Promise || valueResult instanceof Promise) {\n                proms.push(Promise.all([keyResult, valueResult]).then(([keyResult, valueResult]) => {\n                    handleMapResult(keyResult, valueResult, payload, key, input, inst, ctx);\n                }));\n            }\n            else {\n                handleMapResult(keyResult, valueResult, payload, key, input, inst, ctx);\n            }\n        }\n        if (proms.length)\n            return Promise.all(proms).then(() => payload);\n        return payload;\n    };\n});\nfunction handleMapResult(keyResult, valueResult, final, key, input, inst, ctx) {\n    if (keyResult.issues.length) {\n        if (util.propertyKeyTypes.has(typeof key)) {\n            final.issues.push(...util.prefixIssues(key, keyResult.issues));\n        }\n        else {\n            final.issues.push({\n                code: \"invalid_key\",\n                origin: \"map\",\n                input,\n                inst,\n                issues: keyResult.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\n            });\n        }\n    }\n    if (valueResult.issues.length) {\n        if (util.propertyKeyTypes.has(typeof key)) {\n            final.issues.push(...util.prefixIssues(key, valueResult.issues));\n        }\n        else {\n            final.issues.push({\n                origin: \"map\",\n                code: \"invalid_element\",\n                input,\n                inst,\n                key: key,\n                issues: valueResult.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\n            });\n        }\n    }\n    final.value.set(keyResult.value, valueResult.value);\n}\nexport const $ZodSet = /*@__PURE__*/ core.$constructor(\"$ZodSet\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, ctx) => {\n        const input = payload.value;\n        if (!(input instanceof Set)) {\n            payload.issues.push({\n                input,\n                inst,\n                expected: \"set\",\n                code: \"invalid_type\",\n            });\n            return payload;\n        }\n        const proms = [];\n        payload.value = new Set();\n        for (const item of input) {\n            const result = def.valueType._zod.run({ value: item, issues: [] }, ctx);\n            if (result instanceof Promise) {\n                proms.push(result.then((result) => handleSetResult(result, payload)));\n            }\n            else\n                handleSetResult(result, payload);\n        }\n        if (proms.length)\n            return Promise.all(proms).then(() => payload);\n        return payload;\n    };\n});\nfunction handleSetResult(result, final) {\n    if (result.issues.length) {\n        final.issues.push(...result.issues);\n    }\n    final.value.add(result.value);\n}\nexport const $ZodEnum = /*@__PURE__*/ core.$constructor(\"$ZodEnum\", (inst, def) => {\n    $ZodType.init(inst, def);\n    const values = util.getEnumValues(def.entries);\n    const valuesSet = new Set(values);\n    inst._zod.values = valuesSet;\n    inst._zod.pattern = new RegExp(`^(${values\n        .filter((k) => util.propertyKeyTypes.has(typeof k))\n        .map((o) => (typeof o === \"string\" ? util.escapeRegex(o) : o.toString()))\n        .join(\"|\")})$`);\n    inst._zod.parse = (payload, _ctx) => {\n        const input = payload.value;\n        if (valuesSet.has(input)) {\n            return payload;\n        }\n        payload.issues.push({\n            code: \"invalid_value\",\n            values,\n            input,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodLiteral = /*@__PURE__*/ core.$constructor(\"$ZodLiteral\", (inst, def) => {\n    $ZodType.init(inst, def);\n    if (def.values.length === 0) {\n        throw new Error(\"Cannot create literal schema with no valid values\");\n    }\n    inst._zod.values = new Set(def.values);\n    inst._zod.pattern = new RegExp(`^(${def.values\n        .map((o) => (typeof o === \"string\" ? util.escapeRegex(o) : o ? util.escapeRegex(o.toString()) : String(o)))\n        .join(\"|\")})$`);\n    inst._zod.parse = (payload, _ctx) => {\n        const input = payload.value;\n        if (inst._zod.values.has(input)) {\n            return payload;\n        }\n        payload.issues.push({\n            code: \"invalid_value\",\n            values: def.values,\n            input,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodFile = /*@__PURE__*/ core.$constructor(\"$ZodFile\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, _ctx) => {\n        const input = payload.value;\n        // @ts-ignore\n        if (input instanceof File)\n            return payload;\n        payload.issues.push({\n            expected: \"file\",\n            code: \"invalid_type\",\n            input,\n            inst,\n        });\n        return payload;\n    };\n});\nexport const $ZodTransform = /*@__PURE__*/ core.$constructor(\"$ZodTransform\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, ctx) => {\n        if (ctx.direction === \"backward\") {\n            throw new core.$ZodEncodeError(inst.constructor.name);\n        }\n        const _out = def.transform(payload.value, payload);\n        if (ctx.async) {\n            const output = _out instanceof Promise ? _out : Promise.resolve(_out);\n            return output.then((output) => {\n                payload.value = output;\n                return payload;\n            });\n        }\n        if (_out instanceof Promise) {\n            throw new core.$ZodAsyncError();\n        }\n        payload.value = _out;\n        return payload;\n    };\n});\nfunction handleOptionalResult(result, input) {\n    if (result.issues.length && input === undefined) {\n        return { issues: [], value: undefined };\n    }\n    return result;\n}\nexport const $ZodOptional = /*@__PURE__*/ core.$constructor(\"$ZodOptional\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.optin = \"optional\";\n    inst._zod.optout = \"optional\";\n    util.defineLazy(inst._zod, \"values\", () => {\n        return def.innerType._zod.values ? new Set([...def.innerType._zod.values, undefined]) : undefined;\n    });\n    util.defineLazy(inst._zod, \"pattern\", () => {\n        const pattern = def.innerType._zod.pattern;\n        return pattern ? new RegExp(`^(${util.cleanRegex(pattern.source)})?$`) : undefined;\n    });\n    inst._zod.parse = (payload, ctx) => {\n        if (def.innerType._zod.optin === \"optional\") {\n            const result = def.innerType._zod.run(payload, ctx);\n            if (result instanceof Promise)\n                return result.then((r) => handleOptionalResult(r, payload.value));\n            return handleOptionalResult(result, payload.value);\n        }\n        if (payload.value === undefined) {\n            return payload;\n        }\n        return def.innerType._zod.run(payload, ctx);\n    };\n});\nexport const $ZodNullable = /*@__PURE__*/ core.$constructor(\"$ZodNullable\", (inst, def) => {\n    $ZodType.init(inst, def);\n    util.defineLazy(inst._zod, \"optin\", () => def.innerType._zod.optin);\n    util.defineLazy(inst._zod, \"optout\", () => def.innerType._zod.optout);\n    util.defineLazy(inst._zod, \"pattern\", () => {\n        const pattern = def.innerType._zod.pattern;\n        return pattern ? new RegExp(`^(${util.cleanRegex(pattern.source)}|null)$`) : undefined;\n    });\n    util.defineLazy(inst._zod, \"values\", () => {\n        return def.innerType._zod.values ? new Set([...def.innerType._zod.values, null]) : undefined;\n    });\n    inst._zod.parse = (payload, ctx) => {\n        // Forward direction (decode): allow null to pass through\n        if (payload.value === null)\n            return payload;\n        return def.innerType._zod.run(payload, ctx);\n    };\n});\nexport const $ZodDefault = /*@__PURE__*/ core.$constructor(\"$ZodDefault\", (inst, def) => {\n    $ZodType.init(inst, def);\n    // inst._zod.qin = \"true\";\n    inst._zod.optin = \"optional\";\n    util.defineLazy(inst._zod, \"values\", () => def.innerType._zod.values);\n    inst._zod.parse = (payload, ctx) => {\n        if (ctx.direction === \"backward\") {\n            return def.innerType._zod.run(payload, ctx);\n        }\n        // Forward direction (decode): apply defaults for undefined input\n        if (payload.value === undefined) {\n            payload.value = def.defaultValue;\n            /**\n             * $ZodDefault returns the default value immediately in forward direction.\n             * It doesn't pass the default value into the validator (\"prefault\"). There's no reason to pass the default value through validation. The validity of the default is enforced by TypeScript statically. Otherwise, it's the responsibility of the user to ensure the default is valid. In the case of pipes with divergent in/out types, you can specify the default on the `in` schema of your ZodPipe to set a \"prefault\" for the pipe.   */\n            return payload;\n        }\n        // Forward direction: continue with default handling\n        const result = def.innerType._zod.run(payload, ctx);\n        if (result instanceof Promise) {\n            return result.then((result) => handleDefaultResult(result, def));\n        }\n        return handleDefaultResult(result, def);\n    };\n});\nfunction handleDefaultResult(payload, def) {\n    if (payload.value === undefined) {\n        payload.value = def.defaultValue;\n    }\n    return payload;\n}\nexport const $ZodPrefault = /*@__PURE__*/ core.$constructor(\"$ZodPrefault\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.optin = \"optional\";\n    util.defineLazy(inst._zod, \"values\", () => def.innerType._zod.values);\n    inst._zod.parse = (payload, ctx) => {\n        if (ctx.direction === \"backward\") {\n            return def.innerType._zod.run(payload, ctx);\n        }\n        // Forward direction (decode): apply prefault for undefined input\n        if (payload.value === undefined) {\n            payload.value = def.defaultValue;\n        }\n        return def.innerType._zod.run(payload, ctx);\n    };\n});\nexport const $ZodNonOptional = /*@__PURE__*/ core.$constructor(\"$ZodNonOptional\", (inst, def) => {\n    $ZodType.init(inst, def);\n    util.defineLazy(inst._zod, \"values\", () => {\n        const v = def.innerType._zod.values;\n        return v ? new Set([...v].filter((x) => x !== undefined)) : undefined;\n    });\n    inst._zod.parse = (payload, ctx) => {\n        const result = def.innerType._zod.run(payload, ctx);\n        if (result instanceof Promise) {\n            return result.then((result) => handleNonOptionalResult(result, inst));\n        }\n        return handleNonOptionalResult(result, inst);\n    };\n});\nfunction handleNonOptionalResult(payload, inst) {\n    if (!payload.issues.length && payload.value === undefined) {\n        payload.issues.push({\n            code: \"invalid_type\",\n            expected: \"nonoptional\",\n            input: payload.value,\n            inst,\n        });\n    }\n    return payload;\n}\nexport const $ZodSuccess = /*@__PURE__*/ core.$constructor(\"$ZodSuccess\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, ctx) => {\n        if (ctx.direction === \"backward\") {\n            throw new core.$ZodEncodeError(\"ZodSuccess\");\n        }\n        const result = def.innerType._zod.run(payload, ctx);\n        if (result instanceof Promise) {\n            return result.then((result) => {\n                payload.value = result.issues.length === 0;\n                return payload;\n            });\n        }\n        payload.value = result.issues.length === 0;\n        return payload;\n    };\n});\nexport const $ZodCatch = /*@__PURE__*/ core.$constructor(\"$ZodCatch\", (inst, def) => {\n    $ZodType.init(inst, def);\n    util.defineLazy(inst._zod, \"optin\", () => def.innerType._zod.optin);\n    util.defineLazy(inst._zod, \"optout\", () => def.innerType._zod.optout);\n    util.defineLazy(inst._zod, \"values\", () => def.innerType._zod.values);\n    inst._zod.parse = (payload, ctx) => {\n        if (ctx.direction === \"backward\") {\n            return def.innerType._zod.run(payload, ctx);\n        }\n        // Forward direction (decode): apply catch logic\n        const result = def.innerType._zod.run(payload, ctx);\n        if (result instanceof Promise) {\n            return result.then((result) => {\n                payload.value = result.value;\n                if (result.issues.length) {\n                    payload.value = def.catchValue({\n                        ...payload,\n                        error: {\n                            issues: result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\n                        },\n                        input: payload.value,\n                    });\n                    payload.issues = [];\n                }\n                return payload;\n            });\n        }\n        payload.value = result.value;\n        if (result.issues.length) {\n            payload.value = def.catchValue({\n                ...payload,\n                error: {\n                    issues: result.issues.map((iss) => util.finalizeIssue(iss, ctx, core.config())),\n                },\n                input: payload.value,\n            });\n            payload.issues = [];\n        }\n        return payload;\n    };\n});\nexport const $ZodNaN = /*@__PURE__*/ core.$constructor(\"$ZodNaN\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, _ctx) => {\n        if (typeof payload.value !== \"number\" || !Number.isNaN(payload.value)) {\n            payload.issues.push({\n                input: payload.value,\n                inst,\n                expected: \"nan\",\n                code: \"invalid_type\",\n            });\n            return payload;\n        }\n        return payload;\n    };\n});\nexport const $ZodPipe = /*@__PURE__*/ core.$constructor(\"$ZodPipe\", (inst, def) => {\n    $ZodType.init(inst, def);\n    util.defineLazy(inst._zod, \"values\", () => def.in._zod.values);\n    util.defineLazy(inst._zod, \"optin\", () => def.in._zod.optin);\n    util.defineLazy(inst._zod, \"optout\", () => def.out._zod.optout);\n    util.defineLazy(inst._zod, \"propValues\", () => def.in._zod.propValues);\n    inst._zod.parse = (payload, ctx) => {\n        if (ctx.direction === \"backward\") {\n            const right = def.out._zod.run(payload, ctx);\n            if (right instanceof Promise) {\n                return right.then((right) => handlePipeResult(right, def.in, ctx));\n            }\n            return handlePipeResult(right, def.in, ctx);\n        }\n        const left = def.in._zod.run(payload, ctx);\n        if (left instanceof Promise) {\n            return left.then((left) => handlePipeResult(left, def.out, ctx));\n        }\n        return handlePipeResult(left, def.out, ctx);\n    };\n});\nfunction handlePipeResult(left, next, ctx) {\n    if (left.issues.length) {\n        // prevent further checks\n        left.aborted = true;\n        return left;\n    }\n    return next._zod.run({ value: left.value, issues: left.issues }, ctx);\n}\nexport const $ZodCodec = /*@__PURE__*/ core.$constructor(\"$ZodCodec\", (inst, def) => {\n    $ZodType.init(inst, def);\n    util.defineLazy(inst._zod, \"values\", () => def.in._zod.values);\n    util.defineLazy(inst._zod, \"optin\", () => def.in._zod.optin);\n    util.defineLazy(inst._zod, \"optout\", () => def.out._zod.optout);\n    util.defineLazy(inst._zod, \"propValues\", () => def.in._zod.propValues);\n    inst._zod.parse = (payload, ctx) => {\n        const direction = ctx.direction || \"forward\";\n        if (direction === \"forward\") {\n            const left = def.in._zod.run(payload, ctx);\n            if (left instanceof Promise) {\n                return left.then((left) => handleCodecAResult(left, def, ctx));\n            }\n            return handleCodecAResult(left, def, ctx);\n        }\n        else {\n            const right = def.out._zod.run(payload, ctx);\n            if (right instanceof Promise) {\n                return right.then((right) => handleCodecAResult(right, def, ctx));\n            }\n            return handleCodecAResult(right, def, ctx);\n        }\n    };\n});\nfunction handleCodecAResult(result, def, ctx) {\n    if (result.issues.length) {\n        // prevent further checks\n        result.aborted = true;\n        return result;\n    }\n    const direction = ctx.direction || \"forward\";\n    if (direction === \"forward\") {\n        const transformed = def.transform(result.value, result);\n        if (transformed instanceof Promise) {\n            return transformed.then((value) => handleCodecTxResult(result, value, def.out, ctx));\n        }\n        return handleCodecTxResult(result, transformed, def.out, ctx);\n    }\n    else {\n        const transformed = def.reverseTransform(result.value, result);\n        if (transformed instanceof Promise) {\n            return transformed.then((value) => handleCodecTxResult(result, value, def.in, ctx));\n        }\n        return handleCodecTxResult(result, transformed, def.in, ctx);\n    }\n}\nfunction handleCodecTxResult(left, value, nextSchema, ctx) {\n    // Check if transform added any issues\n    if (left.issues.length) {\n        left.aborted = true;\n        return left;\n    }\n    return nextSchema._zod.run({ value, issues: left.issues }, ctx);\n}\nexport const $ZodReadonly = /*@__PURE__*/ core.$constructor(\"$ZodReadonly\", (inst, def) => {\n    $ZodType.init(inst, def);\n    util.defineLazy(inst._zod, \"propValues\", () => def.innerType._zod.propValues);\n    util.defineLazy(inst._zod, \"values\", () => def.innerType._zod.values);\n    util.defineLazy(inst._zod, \"optin\", () => def.innerType._zod.optin);\n    util.defineLazy(inst._zod, \"optout\", () => def.innerType._zod.optout);\n    inst._zod.parse = (payload, ctx) => {\n        if (ctx.direction === \"backward\") {\n            return def.innerType._zod.run(payload, ctx);\n        }\n        const result = def.innerType._zod.run(payload, ctx);\n        if (result instanceof Promise) {\n            return result.then(handleReadonlyResult);\n        }\n        return handleReadonlyResult(result);\n    };\n});\nfunction handleReadonlyResult(payload) {\n    payload.value = Object.freeze(payload.value);\n    return payload;\n}\nexport const $ZodTemplateLiteral = /*@__PURE__*/ core.$constructor(\"$ZodTemplateLiteral\", (inst, def) => {\n    $ZodType.init(inst, def);\n    const regexParts = [];\n    for (const part of def.parts) {\n        if (typeof part === \"object\" && part !== null) {\n            // is Zod schema\n            if (!part._zod.pattern) {\n                // if (!source)\n                throw new Error(`Invalid template literal part, no pattern found: ${[...part._zod.traits].shift()}`);\n            }\n            const source = part._zod.pattern instanceof RegExp ? part._zod.pattern.source : part._zod.pattern;\n            if (!source)\n                throw new Error(`Invalid template literal part: ${part._zod.traits}`);\n            const start = source.startsWith(\"^\") ? 1 : 0;\n            const end = source.endsWith(\"$\") ? source.length - 1 : source.length;\n            regexParts.push(source.slice(start, end));\n        }\n        else if (part === null || util.primitiveTypes.has(typeof part)) {\n            regexParts.push(util.escapeRegex(`${part}`));\n        }\n        else {\n            throw new Error(`Invalid template literal part: ${part}`);\n        }\n    }\n    inst._zod.pattern = new RegExp(`^${regexParts.join(\"\")}$`);\n    inst._zod.parse = (payload, _ctx) => {\n        if (typeof payload.value !== \"string\") {\n            payload.issues.push({\n                input: payload.value,\n                inst,\n                expected: \"template_literal\",\n                code: \"invalid_type\",\n            });\n            return payload;\n        }\n        inst._zod.pattern.lastIndex = 0;\n        if (!inst._zod.pattern.test(payload.value)) {\n            payload.issues.push({\n                input: payload.value,\n                inst,\n                code: \"invalid_format\",\n                format: def.format ?? \"template_literal\",\n                pattern: inst._zod.pattern.source,\n            });\n            return payload;\n        }\n        return payload;\n    };\n});\nexport const $ZodFunction = /*@__PURE__*/ core.$constructor(\"$ZodFunction\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._def = def;\n    inst._zod.def = def;\n    inst.implement = (func) => {\n        if (typeof func !== \"function\") {\n            throw new Error(\"implement() must be called with a function\");\n        }\n        return function (...args) {\n            const parsedArgs = inst._def.input ? parse(inst._def.input, args) : args;\n            const result = Reflect.apply(func, this, parsedArgs);\n            if (inst._def.output) {\n                return parse(inst._def.output, result);\n            }\n            return result;\n        };\n    };\n    inst.implementAsync = (func) => {\n        if (typeof func !== \"function\") {\n            throw new Error(\"implementAsync() must be called with a function\");\n        }\n        return async function (...args) {\n            const parsedArgs = inst._def.input ? await parseAsync(inst._def.input, args) : args;\n            const result = await Reflect.apply(func, this, parsedArgs);\n            if (inst._def.output) {\n                return await parseAsync(inst._def.output, result);\n            }\n            return result;\n        };\n    };\n    inst._zod.parse = (payload, _ctx) => {\n        if (typeof payload.value !== \"function\") {\n            payload.issues.push({\n                code: \"invalid_type\",\n                expected: \"function\",\n                input: payload.value,\n                inst,\n            });\n            return payload;\n        }\n        // Check if output is a promise type to determine if we should use async implementation\n        const hasPromiseOutput = inst._def.output && inst._def.output._zod.def.type === \"promise\";\n        if (hasPromiseOutput) {\n            payload.value = inst.implementAsync(payload.value);\n        }\n        else {\n            payload.value = inst.implement(payload.value);\n        }\n        return payload;\n    };\n    inst.input = (...args) => {\n        const F = inst.constructor;\n        if (Array.isArray(args[0])) {\n            return new F({\n                type: \"function\",\n                input: new $ZodTuple({\n                    type: \"tuple\",\n                    items: args[0],\n                    rest: args[1],\n                }),\n                output: inst._def.output,\n            });\n        }\n        return new F({\n            type: \"function\",\n            input: args[0],\n            output: inst._def.output,\n        });\n    };\n    inst.output = (output) => {\n        const F = inst.constructor;\n        return new F({\n            type: \"function\",\n            input: inst._def.input,\n            output,\n        });\n    };\n    return inst;\n});\nexport const $ZodPromise = /*@__PURE__*/ core.$constructor(\"$ZodPromise\", (inst, def) => {\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, ctx) => {\n        return Promise.resolve(payload.value).then((inner) => def.innerType._zod.run({ value: inner, issues: [] }, ctx));\n    };\n});\nexport const $ZodLazy = /*@__PURE__*/ core.$constructor(\"$ZodLazy\", (inst, def) => {\n    $ZodType.init(inst, def);\n    // let _innerType!: any;\n    // util.defineLazy(def, \"getter\", () => {\n    //   if (!_innerType) {\n    //     _innerType = def.getter();\n    //   }\n    //   return () => _innerType;\n    // });\n    util.defineLazy(inst._zod, \"innerType\", () => def.getter());\n    util.defineLazy(inst._zod, \"pattern\", () => inst._zod.innerType._zod.pattern);\n    util.defineLazy(inst._zod, \"propValues\", () => inst._zod.innerType._zod.propValues);\n    util.defineLazy(inst._zod, \"optin\", () => inst._zod.innerType._zod.optin ?? undefined);\n    util.defineLazy(inst._zod, \"optout\", () => inst._zod.innerType._zod.optout ?? undefined);\n    inst._zod.parse = (payload, ctx) => {\n        const inner = inst._zod.innerType;\n        return inner._zod.run(payload, ctx);\n    };\n});\nexport const $ZodCustom = /*@__PURE__*/ core.$constructor(\"$ZodCustom\", (inst, def) => {\n    checks.$ZodCheck.init(inst, def);\n    $ZodType.init(inst, def);\n    inst._zod.parse = (payload, _) => {\n        return payload;\n    };\n    inst._zod.check = (payload) => {\n        const input = payload.value;\n        const r = def.fn(input);\n        if (r instanceof Promise) {\n            return r.then((r) => handleRefineResult(r, payload, input, inst));\n        }\n        handleRefineResult(r, payload, input, inst);\n        return;\n    };\n});\nfunction handleRefineResult(result, payload, input, inst) {\n    if (!result) {\n        const _iss = {\n            code: \"custom\",\n            input,\n            inst, // incorporates params.error into issue reporting\n            path: [...(inst._zod.def.path ?? [])], // incorporates params.error into issue reporting\n            continue: !inst._zod.def.abort,\n            // params: inst._zod.def.params,\n        };\n        if (inst._zod.def.params)\n            _iss.params = inst._zod.def.params;\n        payload.issues.push(util.issue(_iss));\n    }\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport type { Span } from '../types-hoist/span';\nimport { debug } from '../utils/debug-logger';\nimport { getRootSpan, spanIsSampled, spanToJSON } from '../utils/spanUtils';\n\n/**\n * Print a log message for a started span.\n */\nexport function logSpanStart(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = spanIsSampled(span);\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts: string[] = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  debug.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nexport function logSpanEnd(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  debug.log(msg);\n}\n","import type { Client } from '../client';\nimport type { DsnComponents } from '../types-hoist/dsn';\nimport { isURLObjectRelative, parseStringToURLObject } from './url';\n\n/**\n * Checks whether given url points to Sentry server\n *\n * @param url url to verify\n */\nexport function isSentryRequestUrl(url: string, client: Client | undefined): boolean {\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n  return checkDsn(url, dsn) || checkTunnel(url, tunnel);\n}\n\nfunction checkTunnel(url: string, tunnel: string | undefined): boolean {\n  if (!tunnel) {\n    return false;\n  }\n\n  return removeTrailingSlash(url) === removeTrailingSlash(tunnel);\n}\n\nfunction checkDsn(url: string, dsn: DsnComponents | undefined): boolean {\n  // Requests to Sentry's ingest endpoint must have a `sentry_key` in the query string\n  // This is equivalent to the public_key which is required in the DSN\n  // see https://develop.sentry.dev/sdk/overview/#parsing-the-dsn\n  // Therefore, a request to the same host and with a `sentry_key` in the query string\n  // can be considered a request to the ingest endpoint.\n  const urlParts = parseStringToURLObject(url);\n  if (!urlParts || isURLObjectRelative(urlParts)) {\n    return false;\n  }\n\n  return dsn ? urlParts.host.includes(dsn.host) && /(^|&|\\?)sentry_key=/.test(urlParts.search) : false;\n}\n\nfunction removeTrailingSlash(str: string): string {\n  return str[str.length - 1] === '/' ? str.slice(0, -1) : str;\n}\n","/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nexport function parseSampleRate(sampleRate: unknown): number | undefined {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    return undefined;\n  }\n\n  return rate;\n}\n","import type { ScopeData } from '../scope';\nimport { getDynamicSamplingContextFromSpan } from '../tracing/dynamicSamplingContext';\nimport type { Breadcrumb } from '../types-hoist/breadcrumb';\nimport type { Event } from '../types-hoist/event';\nimport type { Span } from '../types-hoist/span';\nimport { merge } from './merge';\nimport { getRootSpan, spanToJSON, spanToTraceContext } from './spanUtils';\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nexport function applyScopeDataToEvent(event: Event, data: ScopeData): void {\n  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n\n/** Merge data of two scopes together. */\nexport function mergeScopeData(data: ScopeData, mergeData: ScopeData): void {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    transactionName,\n    span,\n  } = mergeData;\n\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n\n  data.sdkProcessingMetadata = merge(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);\n\n  if (level) {\n    data.level = level;\n  }\n\n  if (transactionName) {\n    data.transactionName = transactionName;\n  }\n\n  if (span) {\n    data.span = span;\n  }\n\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n\n  data.propagationContext = { ...data.propagationContext, ...propagationContext };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nexport function mergeAndOverwriteScopeData<\n  Prop extends 'extra' | 'tags' | 'user' | 'contexts' | 'sdkProcessingMetadata',\n  Data extends ScopeData,\n>(data: Data, prop: Prop, mergeVal: Data[Prop]): void {\n  data[prop] = merge(data[prop], mergeVal, 1);\n}\n\n/** Exported only for tests */\nexport function mergeArray<Prop extends 'breadcrumbs' | 'fingerprint'>(\n  event: Event,\n  prop: Prop,\n  mergeVal: ScopeData[Prop],\n): void {\n  const prevVal = event[prop];\n  // If we are not merging any new values,\n  // we only need to proceed if there was an empty array before (as we want to replace it with undefined)\n  if (!mergeVal.length && (!prevVal || prevVal.length)) {\n    return;\n  }\n\n  const merged = [...(prevVal || []), ...mergeVal] as ScopeData[Prop];\n  event[prop] = merged.length ? merged : undefined;\n}\n\nfunction applyDataToEvent(event: Event, data: ScopeData): void {\n  const { extra, tags, user, contexts, level, transactionName } = data;\n\n  if (Object.keys(extra).length) {\n    event.extra = { ...extra, ...event.extra };\n  }\n\n  if (Object.keys(tags).length) {\n    event.tags = { ...tags, ...event.tags };\n  }\n\n  if (Object.keys(user).length) {\n    event.user = { ...user, ...event.user };\n  }\n\n  if (Object.keys(contexts).length) {\n    event.contexts = { ...contexts, ...event.contexts };\n  }\n\n  if (level) {\n    event.level = level;\n  }\n\n  // transaction events get their `transaction` from the root span name\n  if (transactionName && event.type !== 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\nfunction applyBreadcrumbsToEvent(event: Event, breadcrumbs: Breadcrumb[]): void {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\n\nfunction applySdkMetadataToEvent(event: Event, sdkProcessingMetadata: ScopeData['sdkProcessingMetadata']): void {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata,\n  };\n}\n\nfunction applySpanToEvent(event: Event, span: Span): void {\n  event.contexts = {\n    trace: spanToTraceContext(span),\n    ...event.contexts,\n  };\n\n  event.sdkProcessingMetadata = {\n    dynamicSamplingContext: getDynamicSamplingContextFromSpan(span),\n    ...event.sdkProcessingMetadata,\n  };\n\n  const rootSpan = getRootSpan(span);\n  const transactionName = spanToJSON(rootSpan).description;\n  if (transactionName && !event.transaction && event.type === 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event: Event, fingerprint: ScopeData['fingerprint'] | undefined): void {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint\n    ? Array.isArray(event.fingerprint)\n      ? event.fingerprint\n      : [event.fingerprint]\n    : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (!event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\n","/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */\nexport function merge<T>(initialObj: T, mergeObj: T, levels = 2): T {\n  // If the merge value is not an object, or we have no merge levels left,\n  // we just set the value to the merge value\n  if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {\n    return mergeObj;\n  }\n\n  // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n  if (initialObj && Object.keys(mergeObj).length === 0) {\n    return initialObj;\n  }\n\n  // Clone object\n  const output = { ...initialObj };\n\n  // Merge values into output, resursively\n  for (const key in mergeObj) {\n    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n      output[key] = merge(output[key], mergeObj[key], levels - 1);\n    }\n  }\n\n  return output;\n}\n","import type { Client } from '../client';\nimport { getDefaultCurrentScope, getDefaultIsolationScope } from '../defaultScopes';\nimport { Scope } from '../scope';\nimport { isThenable } from '../utils/is';\nimport { getMainCarrier, getSentryCarrier } from './../carrier';\nimport type { AsyncContextStrategy } from './types';\n\ninterface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * This is an object that holds a stack of scopes.\n */\nexport class AsyncContextStack {\n  private readonly _stack: [Layer, ...Layer[]];\n  private _isolationScope: Scope;\n\n  public constructor(scope?: Scope, isolationScope?: Scope) {\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new Scope();\n    } else {\n      assignedScope = scope;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new Scope();\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    // scope stack for domains or the process\n    this._stack = [{ scope: assignedScope }];\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Fork a scope for the stack.\n   */\n  public withScope<T>(callback: (scope: Scope) => T): T {\n    const scope = this._pushScope();\n\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      this._popScope();\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          this._popScope();\n          return res;\n        },\n        e => {\n          this._popScope();\n          throw e;\n        },\n      );\n    }\n\n    this._popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * Get the client of the stack.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   */\n  public getScope(): Scope {\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * Get the isolation scope for the stack.\n   */\n  public getIsolationScope(): Scope {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1] as Layer;\n  }\n\n  /**\n   * Push a scope to the stack.\n   */\n  private _pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = this.getScope().clone();\n    this._stack.push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * Pop a scope from the stack.\n   */\n  private _popScope(): boolean {\n    if (this._stack.length <= 1) return false;\n    return !!this._stack.pop();\n  }\n}\n\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */\nfunction getAsyncContextStack(): AsyncContextStack {\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n\n  return (sentry.stack = sentry.stack || new AsyncContextStack(getDefaultCurrentScope(), getDefaultIsolationScope()));\n}\n\nfunction withScope<T>(callback: (scope: Scope) => T): T {\n  return getAsyncContextStack().withScope(callback);\n}\n\nfunction withSetScope<T>(scope: Scope, callback: (scope: Scope) => T): T {\n  const stack = getAsyncContextStack() as AsyncContextStack;\n  return stack.withScope(() => {\n    stack.getStackTop().scope = scope;\n    return callback(scope);\n  });\n}\n\nfunction withIsolationScope<T>(callback: (isolationScope: Scope) => T): T {\n  return getAsyncContextStack().withScope(() => {\n    return callback(getAsyncContextStack().getIsolationScope());\n  });\n}\n\n/**\n * Get the stack-based async context strategy.\n */\nexport function getStackAsyncContextStrategy(): AsyncContextStrategy {\n  return {\n    withIsolationScope,\n    withScope,\n    withSetScope,\n    withSetIsolationScope: <T>(_isolationScope: Scope, callback: (isolationScope: Scope) => T) => {\n      return withIsolationScope(callback);\n    },\n    getCurrentScope: () => getAsyncContextStack().getScope(),\n    getIsolationScope: () => getAsyncContextStack().getIsolationScope(),\n  };\n}\n","import type { TraceContext } from '../../types-hoist/context';\nimport type { Span, SpanJSON } from '../../types-hoist/span';\nimport { GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE, GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE } from '../ai/gen-ai-attributes';\nimport { toolCallSpanMap } from './constants';\nimport type { TokenSummary } from './types';\n\n/**\n * Accumulates token data from a span to its parent in the token accumulator map.\n * This function extracts token usage from the current span and adds it to the\n * accumulated totals for its parent span.\n */\nexport function accumulateTokensForParent(span: SpanJSON, tokenAccumulator: Map<string, TokenSummary>): void {\n  const parentSpanId = span.parent_span_id;\n  if (!parentSpanId) {\n    return;\n  }\n\n  const inputTokens = span.data[GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE];\n  const outputTokens = span.data[GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE];\n\n  if (typeof inputTokens === 'number' || typeof outputTokens === 'number') {\n    const existing = tokenAccumulator.get(parentSpanId) || { inputTokens: 0, outputTokens: 0 };\n\n    if (typeof inputTokens === 'number') {\n      existing.inputTokens += inputTokens;\n    }\n    if (typeof outputTokens === 'number') {\n      existing.outputTokens += outputTokens;\n    }\n\n    tokenAccumulator.set(parentSpanId, existing);\n  }\n}\n\n/**\n * Applies accumulated token data to the `gen_ai.invoke_agent` span.\n * Only immediate children of the `gen_ai.invoke_agent` span are considered,\n * since aggregation will automatically occur for each parent span.\n */\nexport function applyAccumulatedTokens(\n  spanOrTrace: SpanJSON | TraceContext,\n  tokenAccumulator: Map<string, TokenSummary>,\n): void {\n  const accumulated = tokenAccumulator.get(spanOrTrace.span_id);\n  if (!accumulated || !spanOrTrace.data) {\n    return;\n  }\n\n  if (accumulated.inputTokens > 0) {\n    spanOrTrace.data[GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] = accumulated.inputTokens;\n  }\n  if (accumulated.outputTokens > 0) {\n    spanOrTrace.data[GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] = accumulated.outputTokens;\n  }\n  if (accumulated.inputTokens > 0 || accumulated.outputTokens > 0) {\n    spanOrTrace.data['gen_ai.usage.total_tokens'] = accumulated.inputTokens + accumulated.outputTokens;\n  }\n}\n\n/**\n * Get the span associated with a tool call ID\n */\nexport function _INTERNAL_getSpanForToolCallId(toolCallId: string): Span | undefined {\n  return toolCallSpanMap.get(toolCallId);\n}\n\n/**\n * Clean up the span mapping for a tool call ID\n */\nexport function _INTERNAL_cleanupToolCallSpan(toolCallId: string): void {\n  toolCallSpanMap.delete(toolCallId);\n}\n","import type { SeverityLevel } from '../types-hoist/severity';\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (\n    level === 'warn' ? 'warning' : ['fatal', 'error', 'warning', 'log', 'info', 'debug'].includes(level) ? level : 'log'\n  ) as SeverityLevel;\n}\n","export * as core from \"../core/index.js\";\nexport * from \"./schemas.js\";\nexport * from \"./checks.js\";\nexport * from \"./errors.js\";\nexport * from \"./parse.js\";\nexport * from \"./compat.js\";\n// zod-specified\nimport { config } from \"../core/index.js\";\nimport en from \"../locales/en.js\";\nconfig(en());\nexport { globalRegistry, registry, config, $output, $input, $brand, clone, regexes, treeifyError, prettifyError, formatError, flattenError, toJSONSchema, TimePrecision, util, NEVER, } from \"../core/index.js\";\nexport * as locales from \"../locales/index.js\";\n// iso\n// must be exported from top-level\n// https://github.com/colinhacks/zod/issues/4491\nexport { ZodISODateTime, ZodISODate, ZodISOTime, ZodISODuration } from \"./iso.js\";\nexport * as iso from \"./iso.js\";\nexport * as coerce from \"./coerce.js\";\n","import { DEBUG_BUILD } from '../debug-build';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n} from '../semanticAttributes';\nimport type { Measurements, MeasurementUnit } from '../types-hoist/measurement';\nimport type { TimedEvent } from '../types-hoist/timedEvent';\nimport { debug } from '../utils/debug-logger';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nexport function setMeasurement(name: string, value: number, unit: MeasurementUnit, activeSpan = getActiveSpan()): void {\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n  if (rootSpan) {\n    DEBUG_BUILD && debug.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit as string,\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nexport function timedEventsToMeasurements(events: TimedEvent[]): Measurements | undefined {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n\n  const measurements: Measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT] as MeasurementUnit | undefined;\n    const value = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE] as number | undefined;\n\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = { value, unit };\n    }\n  });\n\n  return measurements;\n}\n","import { defineIntegration } from '../integration';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { applyAggregateErrorsToEvent } from '../utils/aggregate-errors';\nimport { exceptionFromError } from '../utils/eventbuilder';\n\ninterface LinkedErrorsOptions {\n  key?: string;\n  limit?: number;\n}\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options: LinkedErrorsOptions = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      applyAggregateErrorsToEvent(exceptionFromError, options.stackParser, key, limit, event, hint);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\n","import type { ClientReport } from '../types-hoist/clientreport';\nimport type { ClientReportEnvelope, ClientReportItem } from '../types-hoist/envelope';\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n","// src/lib/env.ts\nimport { createEnv } from '@t3-oss/env-nextjs';\nimport { z } from 'zod';\n\n/**\n * IMPORTANT:\n * - Anything needed in the browser must start with NEXT_PUBLIC_ and be listed under `client`.\n * - Server secrets go under `server` and are NEVER available to the client bundle.\n * - Start optional now; mark as .min(1) / .url() later when you wire a service.\n */\nexport const env = createEnv({\n  server: {\n    NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),\n\n    // Sentry server-side configuration (optional for now)\n    SENTRY_DSN: z.string().url().optional(),\n    SENTRY_ORG: z.string().optional(),\n    SENTRY_PROJECT: z.string().optional(),\n\n    // Databases / vendors (optional for now; make required per project)\n    DATABASE_URL: z.string().url().optional(),\n    SUPABASE_URL: z.string().url().optional(),\n    SUPABASE_ANON_KEY: z.string().min(1).optional(),\n    STRIPE_WEBHOOK_SECRET: z.string().optional(),\n  },\n\n  client: {\n    NEXT_PUBLIC_APP_NAME: z.string().default('DL Starter'),\n    NEXT_PUBLIC_POSTHOG_KEY: z.string().optional(),\n    NEXT_PUBLIC_SENTRY_DSN: z.string().url().optional(),\n  },\n\n  runtimeEnv: {\n    NODE_ENV: process.env.NODE_ENV,\n\n    SENTRY_DSN: process.env.SENTRY_DSN,\n    SENTRY_ORG: process.env.SENTRY_ORG,\n    SENTRY_PROJECT: process.env.SENTRY_PROJECT,\n\n    DATABASE_URL: process.env.DATABASE_URL,\n    SUPABASE_URL: process.env.SUPABASE_URL,\n    SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY,\n    STRIPE_WEBHOOK_SECRET: process.env.STRIPE_WEBHOOK_SECRET,\n\n    NEXT_PUBLIC_APP_NAME: process.env.NEXT_PUBLIC_APP_NAME,\n    NEXT_PUBLIC_POSTHOG_KEY: process.env.NEXT_PUBLIC_POSTHOG_KEY,\n    NEXT_PUBLIC_SENTRY_DSN: process.env.NEXT_PUBLIC_SENTRY_DSN,\n  },\n\n  /**\n   * Treat empty strings as \"unset\" so CI/Vercel don't pass validation with \"\".\n   * Leave validation ON in CI; everything here is optional right now anyway.\n   */\n  emptyStringAsUndefined: true,\n});\n","import { isRegExp, isString, isVueViewModel } from './is';\n\nexport { escapeStringForRegex } from '../vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: unknown[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n","import type { Scope } from '../scope';\nimport type { Span } from '../types-hoist/span';\nimport { addNonEnumerableProperty } from '../utils/object';\n\nconst SCOPE_SPAN_FIELD = '_sentrySpan';\n\ntype ScopeWithMaybeSpan = Scope & {\n  [SCOPE_SPAN_FIELD]?: Span;\n};\n\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nexport function _setSpanForScope(scope: Scope, span: Span | undefined): void {\n  if (span) {\n    addNonEnumerableProperty(scope as ScopeWithMaybeSpan, SCOPE_SPAN_FIELD, span);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete (scope as ScopeWithMaybeSpan)[SCOPE_SPAN_FIELD];\n  }\n}\n\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nexport function _getSpanForScope(scope: ScopeWithMaybeSpan): Span | undefined {\n  return scope[SCOPE_SPAN_FIELD];\n}\n","import type { DebugImage } from '../types-hoist/debugMeta';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { GLOBAL_OBJ } from './worldwide';\n\ntype StackString = string;\ntype CachedResult = [string, string];\n\nlet parsedStackResults: Record<StackString, CachedResult> | undefined;\nlet lastKeysCount: number | undefined;\nlet cachedFilenameDebugIds: Record<string, string> | undefined;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nexport function getFilenameToDebugIdMap(stackParser: StackParser): Record<string, string> {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce<Record<string, string>>((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n\n    const result = parsedStackResults[stackKey];\n\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame?.filename;\n        const debugId = debugIdMap[stackKey];\n\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n\n    return acc;\n  }, {});\n\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nexport function getDebugImagesForResources(\n  stackParser: StackParser,\n  resource_paths: ReadonlyArray<string>,\n): DebugImage[] {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n\n  const images: DebugImage[] = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path] as string,\n      });\n    }\n  }\n\n  return images;\n}\n","import type { DataCategory } from '../types-hoist/datacategory';\nimport type { TransportMakeRequestResponse } from '../types-hoist/transport';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, dataCategory: DataCategory): number {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, dataCategory: DataCategory, now: number = Date.now()): boolean {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers?.['x-sentry-rate-limits'];\n  const retryAfterHeader = headers?.['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5) as [string, ...string[]];\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n","import { GLOBAL_OBJ } from './worldwide';\n\ninterface VercelRequestContextGlobal {\n  get?():\n    | {\n        waitUntil?: (task: Promise<unknown>) => void;\n      }\n    | undefined;\n}\n\n/**\n * Function that delays closing of a Vercel lambda until the provided promise is resolved.\n *\n * Vendored from https://www.npmjs.com/package/@vercel/functions\n */\nexport function vercelWaitUntil(task: Promise<unknown>): void {\n  const vercelRequestContextGlobal: VercelRequestContextGlobal | undefined =\n    // @ts-expect-error This is not typed\n    GLOBAL_OBJ[Symbol.for('@vercel/request-context')];\n\n  const ctx = vercelRequestContextGlobal?.get?.();\n\n  if (ctx?.waitUntil) {\n    ctx.waitUntil(task);\n  }\n}\n","import { getAsyncContextStrategy } from './asyncContext';\nimport { getGlobalSingleton, getMainCarrier } from './carrier';\nimport type { Client } from './client';\nimport { Scope } from './scope';\nimport type { TraceContext } from './types-hoist/context';\nimport { generateSpanId } from './utils/propagationContext';\n\n/**\n * Get the currently active scope.\n */\nexport function getCurrentScope(): Scope {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nexport function getIsolationScope(): Scope {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nexport function getGlobalScope(): Scope {\n  return getGlobalSingleton('globalScope', () => new Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\nexport function withScope<T>(callback: (scope: Scope) => T): T;\n/**\n * Set the given scope as the active scope in the callback.\n */\nexport function withScope<T>(scope: Scope | undefined, callback: (scope: Scope) => T): T;\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nexport function withScope<T>(\n  ...rest: [callback: (scope: Scope) => T] | [scope: Scope | undefined, callback: (scope: Scope) => T]\n): T {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n\n    return acs.withSetScope(scope, callback);\n  }\n\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\nexport function withIsolationScope<T>(callback: (isolationScope: Scope) => T): T;\n/**\n * Set the provided isolation scope as active in the given callback. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n *\n * If you pass in `undefined` as a scope, it will fork a new isolation scope, the same as if no scope is passed.\n */\nexport function withIsolationScope<T>(isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T): T;\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nexport function withIsolationScope<T>(\n  ...rest:\n    | [callback: (isolationScope: Scope) => T]\n    | [isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T]\n): T {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nexport function getClient<C extends Client>(): C | undefined {\n  return getCurrentScope().getClient<C>();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nexport function getTraceContextFromScope(scope: Scope): TraceContext {\n  const propagationContext = scope.getPropagationContext();\n\n  const { traceId, parentSpanId, propagationSpanId } = propagationContext;\n\n  const traceContext: TraceContext = {\n    trace_id: traceId,\n    span_id: propagationSpanId || generateSpanId(),\n  };\n\n  if (parentSpanId) {\n    traceContext.parent_span_id = parentSpanId;\n  }\n\n  return traceContext;\n}\n","import type { SerializedCheckIn } from './types-hoist/checkin';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type { CheckInEnvelope, CheckInItem, DynamicSamplingContext } from './types-hoist/envelope';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport { dsnToString } from './utils/dsn';\nimport { createEnvelope } from './utils/envelope';\n\n/**\n * Create envelope from check in item.\n */\nexport function createCheckInEnvelope(\n  checkIn: SerializedCheckIn,\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): CheckInEnvelope {\n  const headers: CheckInEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  if (dynamicSamplingContext) {\n    headers.trace = dynamicSamplingContext as DynamicSamplingContext;\n  }\n\n  const item = createCheckInEnvelopeItem(checkIn);\n  return createEnvelope<CheckInEnvelope>(headers, [item]);\n}\n\nfunction createCheckInEnvelopeItem(checkIn: SerializedCheckIn): CheckInItem {\n  const checkInHeaders: CheckInItem[0] = {\n    type: 'check_in',\n  };\n  return [checkInHeaders, checkIn];\n}\n","import type { Client } from '../client';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { PropagationContext } from '../types-hoist/tracing';\nimport type { TraceparentData } from '../types-hoist/transaction';\nimport { debug } from '../utils/debug-logger';\nimport { baggageHeaderToDynamicSamplingContext } from './baggage';\nimport { extractOrgIdFromClient } from './dsn';\nimport { parseSampleRate } from './parseSampleRate';\nimport { generateSpanId, generateTraceId } from './propagationContext';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * This is terrible naming but the function has nothing to do with the W3C traceparent header.\n * It can only parse the `sentry-trace` header and extract the \"trace parent\" data.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent?: string): TraceparentData | undefined {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nexport function propagationContextFromHeaders(\n  sentryTrace: string | undefined,\n  baggage: string | number | boolean | string[] | null | undefined,\n): PropagationContext {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  if (!traceparentData?.traceId) {\n    return {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  const sampleRand = getSampleRandFromTraceparentAndDsc(traceparentData, dynamicSamplingContext);\n\n  // The sample_rand on the DSC needs to be generated based on traceparent + baggage.\n  if (dynamicSamplingContext) {\n    dynamicSamplingContext.sample_rand = sampleRand.toString();\n  }\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData;\n\n  return {\n    traceId,\n    parentSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    sampleRand,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nexport function generateSentryTraceHeader(\n  traceId: string | undefined = generateTraceId(),\n  spanId: string | undefined = generateSpanId(),\n  sampled?: boolean,\n): string {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\n/**\n * Given any combination of an incoming trace, generate a sample rand based on its defined semantics.\n *\n * Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n */\nfunction getSampleRandFromTraceparentAndDsc(\n  traceparentData: TraceparentData | undefined,\n  dsc: Partial<DynamicSamplingContext> | undefined,\n): number {\n  // When there is an incoming sample rand use it.\n  const parsedSampleRand = parseSampleRate(dsc?.sample_rand);\n  if (parsedSampleRand !== undefined) {\n    return parsedSampleRand;\n  }\n\n  // Otherwise, if there is an incoming sampling decision + sample rate, generate a sample rand that would lead to the same sampling decision.\n  const parsedSampleRate = parseSampleRate(dsc?.sample_rate);\n  if (parsedSampleRate && traceparentData?.parentSampled !== undefined) {\n    return traceparentData.parentSampled\n      ? // Returns a sample rand with positive sampling decision [0, sampleRate)\n        Math.random() * parsedSampleRate\n      : // Returns a sample rand with negative sampling decision [sampleRate, 1)\n        parsedSampleRate + Math.random() * (1 - parsedSampleRate);\n  } else {\n    // If nothing applies, return a random sample rand.\n    return Math.random();\n  }\n}\n\n/**\n * Determines whether a new trace should be continued based on the provided baggage org ID and the client's `strictTraceContinuation` option.\n * If the trace should not be continued, a new trace will be started.\n *\n * The result is dependent on the `strictTraceContinuation` option in the client.\n * See https://develop.sentry.dev/sdk/telemetry/traces/#stricttracecontinuation\n */\nexport function shouldContinueTrace(client: Client, baggageOrgId?: string): boolean {\n  const clientOrgId = extractOrgIdFromClient(client);\n\n  // Case: baggage orgID and Client orgID don't match - always start new trace\n  if (baggageOrgId && clientOrgId && baggageOrgId !== clientOrgId) {\n    debug.log(\n      `Won't continue trace because org IDs don't match (incoming baggage: ${baggageOrgId}, SDK options: ${clientOrgId})`,\n    );\n    return false;\n  }\n\n  const strictTraceContinuation = client.getOptions().strictTraceContinuation || false; // default for `strictTraceContinuation` is `false`\n\n  if (strictTraceContinuation) {\n    // With strict continuation enabled, don't continue trace if:\n    // - Baggage has orgID, but Client doesn't have one\n    // - Client has orgID, but baggage doesn't have one\n    if ((baggageOrgId && !clientOrgId) || (!baggageOrgId && clientOrgId)) {\n      debug.log(\n        `Starting a new trace because strict trace continuation is enabled but one org ID is missing (incoming baggage: ${baggageOrgId}, Sentry client: ${clientOrgId})`,\n      );\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type { ParameterizedString } from '../types-hoist/parameterize';\n\n/**\n * Tagged template function which returns parameterized representation of the message\n * For example: parameterize`This is a log statement with ${x} and ${y} params`, would return:\n * \"__sentry_template_string__\": 'This is a log statement with %s and %s params',\n * \"__sentry_template_values__\": ['first', 'second']\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n *\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nexport function parameterize(strings: TemplateStringsArray, ...values: unknown[]): ParameterizedString {\n  const formatted = new String(String.raw(strings, ...values)) as ParameterizedString;\n  formatted.__sentry_template_string__ = strings.join('\\x00').replace(/%/g, '%%').replace(/\\0/g, '%s');\n  formatted.__sentry_template_values__ = values;\n  return formatted;\n}\n\n/**\n * Tagged template function which returns parameterized representation of the message.\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nexport const fmt = parameterize;\n","import type { HandlerDataError } from '../types-hoist/instrument';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\nlet _oldOnErrorHandler: (typeof GLOBAL_OBJ)['onerror'] | null = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalErrorInstrumentationHandler(handler: (data: HandlerDataError) => void): void {\n  const type = 'error';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentError);\n}\n\nfunction instrumentError(): void {\n  _oldOnErrorHandler = GLOBAL_OBJ.onerror;\n\n  // Note: The reason we are doing window.onerror instead of window.addEventListener('error')\n  // is that we are using this handler in the Loader Script, to handle buffered errors consistently\n  GLOBAL_OBJ.onerror = function (\n    msg: string | object,\n    url?: string,\n    line?: number,\n    column?: number,\n    error?: Error,\n  ): boolean {\n    const handlerData: HandlerDataError = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    triggerHandlers('error', handlerData);\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n","import type { Span } from '@sentry/core';\nimport { debug, fill, flush, setHttpStatus } from '@sentry/core';\nimport type { ServerResponse } from 'http';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ResponseEndMethod, WrappedResponseEndMethod } from '../types';\n\n/**\n * Wrap `res.end()` so that it ends the span and flushes events before letting the request finish.\n *\n * Note: This wraps a sync method with an async method. While in general that's not a great idea in terms of keeping\n * things in the right order, in this case it's safe, because the native `.end()` actually *is* (effectively) async, and\n * its run actually *is* (literally) awaited, just manually so (which reflects the fact that the core of the\n * request/response code in Node by far predates the introduction of `async`/`await`). When `.end()` is done, it emits\n * the `prefinish` event, and only once that fires does request processing continue. See\n * https://github.com/nodejs/node/commit/7c9b607048f13741173d397795bac37707405ba7.\n *\n * Also note: `res.end()` isn't called until *after* all response data and headers have been sent, so blocking inside of\n * `end` doesn't delay data getting to the end user. See\n * https://nodejs.org/api/http.html#responseenddata-encoding-callback.\n *\n * @param span The span tracking the request\n * @param res: The request's corresponding response\n */\nexport function autoEndSpanOnResponseEnd(span: Span, res: ServerResponse): void {\n  const wrapEndMethod = (origEnd: ResponseEndMethod): WrappedResponseEndMethod => {\n    return function sentryWrappedEnd(this: ServerResponse, ...args: unknown[]) {\n      finishSpan(span, this);\n      return origEnd.call(this, ...args);\n    };\n  };\n\n  // Prevent double-wrapping\n  // res.end may be undefined during build when using `next export` to statically export a Next.js app\n  if (res.end && !(res.end as WrappedResponseEndMethod).__sentry_original__) {\n    fill(res, 'end', wrapEndMethod);\n  }\n}\n\n/** Finish the given response's span and set HTTP status data */\nexport function finishSpan(span: Span, res: ServerResponse): void {\n  setHttpStatus(span, res.statusCode);\n  span.end();\n}\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nexport async function flushSafelyWithTimeout(): Promise<void> {\n  try {\n    DEBUG_BUILD && debug.log('Flushing events...');\n    await flush(2000);\n    DEBUG_BUILD && debug.log('Done flushing events');\n  } catch (e) {\n    DEBUG_BUILD && debug.log('Error while flushing events:\\n', e);\n  }\n}\n","import type { Client } from './client';\nimport { getDynamicSamplingContextFromSpan } from './tracing/dynamicSamplingContext';\nimport type { SentrySpan } from './tracing/sentrySpan';\nimport type { LegacyCSPReport } from './types-hoist/csp';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type {\n  DynamicSamplingContext,\n  EventEnvelope,\n  EventItem,\n  RawSecurityEnvelope,\n  RawSecurityItem,\n  SessionEnvelope,\n  SessionItem,\n  SpanEnvelope,\n  SpanItem,\n} from './types-hoist/envelope';\nimport type { Event } from './types-hoist/event';\nimport type { SdkInfo } from './types-hoist/sdkinfo';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport type { Session, SessionAggregates } from './types-hoist/session';\nimport { dsnToString } from './utils/dsn';\nimport {\n  createEnvelope,\n  createEventEnvelopeHeaders,\n  createSpanEnvelopeItem,\n  getSdkMetadataForEnvelopeHeader,\n} from './utils/envelope';\nimport { uuid4 } from './utils/misc';\nimport { shouldIgnoreSpan } from './utils/should-ignore-span';\nimport { showSpanDropWarning, spanToJSON } from './utils/spanUtils';\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n *\n * @internal, exported only for testing\n **/\nexport function _enhanceEventWithSdkInfo(event: Event, newSdkInfo?: SdkInfo): Event {\n  if (!newSdkInfo) {\n    return event;\n  }\n\n  const eventSdkInfo = event.sdk || {};\n\n  event.sdk = {\n    ...eventSdkInfo,\n    name: eventSdkInfo.name || newSdkInfo.name,\n    version: eventSdkInfo.version || newSdkInfo.version,\n    integrations: [...(event.sdk?.integrations || []), ...(newSdkInfo.integrations || [])],\n    packages: [...(event.sdk?.packages || []), ...(newSdkInfo.packages || [])],\n    settings:\n      event.sdk?.settings || newSdkInfo.settings\n        ? {\n            ...event.sdk?.settings,\n            ...newSdkInfo.settings,\n          }\n        : undefined,\n  };\n\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): SessionEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const envelopeItem: SessionItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session.toJSON()];\n\n  return createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nexport function createEventEnvelope(\n  event: Event,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n\n  _enhanceEventWithSdkInfo(event, metadata?.sdk);\n\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem: EventItem = [{ type: eventType }, event];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nexport function createSpanEnvelope(spans: [SentrySpan, ...SentrySpan[]], client?: Client): SpanEnvelope {\n  function dscHasRequiredProps(dsc: Partial<DynamicSamplingContext>): dsc is DynamicSamplingContext {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = getDynamicSamplingContextFromSpan(spans[0]);\n\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n\n  const headers: SpanEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && { trace: dsc }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const { beforeSendSpan, ignoreSpans } = client?.getOptions() || {};\n\n  const filteredSpans = ignoreSpans?.length\n    ? spans.filter(span => !shouldIgnoreSpan(spanToJSON(span), ignoreSpans))\n    : spans;\n  const droppedSpans = spans.length - filteredSpans.length;\n\n  if (droppedSpans) {\n    client?.recordDroppedEvent('before_send', 'span', droppedSpans);\n  }\n\n  const convertToSpanJSON = beforeSendSpan\n    ? (span: SentrySpan) => {\n        const spanJson = spanToJSON(span);\n        const processedSpan = beforeSendSpan(spanJson);\n\n        if (!processedSpan) {\n          showSpanDropWarning();\n          return spanJson;\n        }\n\n        return processedSpan;\n      }\n    : spanToJSON;\n\n  const items: SpanItem[] = [];\n  for (const span of filteredSpans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push(createSpanEnvelopeItem(spanJson));\n    }\n  }\n\n  return createEnvelope<SpanEnvelope>(headers, items);\n}\n\n/**\n * Create an Envelope from a CSP report.\n */\nexport function createRawSecurityEnvelope(\n  report: LegacyCSPReport,\n  dsn: DsnComponents,\n  tunnel?: string,\n  release?: string,\n  environment?: string,\n): RawSecurityEnvelope {\n  const envelopeHeaders = {\n    event_id: uuid4(),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const eventItem: RawSecurityItem = [\n    { type: 'raw_security', sentry_release: release, sentry_environment: environment },\n    report,\n  ];\n\n  return createEnvelope<RawSecurityEnvelope>(envelopeHeaders, [eventItem]);\n}\n","import { GLOBAL_OBJ } from './worldwide';\n\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport function dateTimestampInSeconds(): number {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc(): () => number {\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & { performance?: Performance };\n  // Some browser and environments don't have a performance or timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  if (!performance?.now || !performance.timeOrigin) {\n    return dateTimestampInSeconds;\n  }\n\n  const timeOrigin = performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\nlet _cachedTimestampInSeconds: (() => number) | undefined;\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport function timestampInSeconds(): number {\n  // We store this in a closure so that we don't have to create a new function every time this is called.\n  const func = _cachedTimestampInSeconds ?? (_cachedTimestampInSeconds = createUnixTimestampInSecondsFunc());\n  return func();\n}\n\n/**\n * Cached result of getBrowserTimeOrigin.\n */\nlet cachedTimeOrigin: [number | undefined, string] | undefined;\n\n/**\n * Gets the time origin and the mode used to determine it.\n */\nfunction getBrowserTimeOrigin(): [number | undefined, string] {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n  if (!performance?.now) {\n    return [undefined, 'none'];\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing?.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      return [performance.timeOrigin, 'timeOrigin'];\n    } else {\n      return [navigationStart, 'navigationStart'];\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  return [dateNow, 'dateNow'];\n}\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport function browserPerformanceTimeOrigin(): number | undefined {\n  if (!cachedTimeOrigin) {\n    cachedTimeOrigin = getBrowserTimeOrigin();\n  }\n\n  return cachedTimeOrigin[0];\n}\n","import type { ExtendedError } from '../types-hoist/error';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { isInstanceOf } from './is';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception?.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      hint.originalException as ExtendedError,\n      key,\n      event.exception.values,\n      originalException,\n      0,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n","/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Attributes that holds the sample rate that was locally applied to a span.\n * If this attribute is not defined, it means that the span inherited a sampling decision.\n *\n * NOTE: Is only defined on root spans.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Attribute holding the sample rate of the previous trace.\n * This is used to sample consistently across subsequent traces in the browser SDK.\n *\n * Note: Only defined on root spans, if opted into consistent sampling\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE = 'sentry.previous_trace_sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/** The reason why an idle span finished. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';\n\n/** The unit of a measurement, which may be stored as a TimedEvent. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';\n\n/** The value of a measurement, which may be stored as a TimedEvent. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';\n\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';\n\n/**\n * The id of the profile that this span occurred in.\n */\nexport const SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';\n\nexport const SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';\n\n/** TODO: Remove these once we update to latest semantic conventions */\nexport const SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';\nexport const SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';\n\n/**\n * A span link attribute to mark the link as a special span link.\n *\n * Known values:\n * - `previous_trace`: The span links to the frontend root span of the previous trace.\n * - `next_trace`: The span links to the frontend root span of the next trace. (Not set by the SDK)\n *\n * Other values may be set as appropriate.\n * @see https://develop.sentry.dev/sdk/telemetry/traces/span-links/#link-types\n */\nexport const SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = 'sentry.link.type';\n","// This code was originally forked from https://github.com/felixge/node-stack-trace\n// Since then it has been highly modified to fit our needs.\n\n// Copyright (c) 2011 Felix Geisendörfer (felix@debuggable.com)//\n//\n//  Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the \"Software\"), to deal\n//  in the Software without restriction, including without limitation the rights\n//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//  copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions://\n//\n//  The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.//\n//\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport type { StackLineParser, StackLineParserFn } from '../types-hoist/stacktrace';\nimport { UNKNOWN_FUNCTION } from './stacktrace';\n\nexport type GetModuleFn = (filename: string | undefined) => string | undefined;\n\n/**\n * Does this filename look like it's part of the app code?\n */\nexport function filenameIsInApp(filename: string, isNative: boolean = false): boolean {\n  const isInternal =\n    isNative ||\n    (filename &&\n      // It's not internal if it's an absolute linux path\n      !filename.startsWith('/') &&\n      // It's not internal if it's an absolute windows path\n      !filename.match(/^[A-Z]:/) &&\n      // It's not internal if the path is starting with a dot\n      !filename.startsWith('.') &&\n      // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n      !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//)); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nexport function node(getModule?: GetModuleFn): StackLineParserFn {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n  const DATA_URI_MATCH = /at (?:async )?(.+?) \\(data:(.*?),/;\n\n  // eslint-disable-next-line complexity\n  return (line: string) => {\n    const dataUriMatch = line.match(DATA_URI_MATCH);\n    if (dataUriMatch) {\n      return {\n        filename: `<data:${dataUriMatch[2]}>`,\n        function: dataUriMatch[1],\n      };\n    }\n\n    const lineMatch = line.match(FULL_MATCH);\n\n    if (lineMatch) {\n      let object: string | undefined;\n      let method: string | undefined;\n      let functionName: string | undefined;\n      let typeName: string | undefined;\n      let methodName: string | undefined;\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n\n      if (functionName === undefined) {\n        methodName = methodName || UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n\n      let filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename?.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative),\n      };\n    }\n\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n\nfunction _parseIntOrUndefined(input: string | undefined): number | undefined {\n  return parseInt(input || '', 10) || undefined;\n}\n","import {\n  SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  SEMANTIC_ATTRIBUTE_URL_FULL,\n} from '../semanticAttributes';\nimport type { SpanAttributes } from '../types-hoist/span';\n\ntype PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\ninterface URLwithCanParse extends URL {\n  canParse: (url: string, base?: string | URL | undefined) => boolean;\n}\n\n// A subset of the URL object that is valid for relative URLs\n// The URL object cannot handle relative URLs, so we need to handle them separately\ntype RelativeURL = {\n  isRelative: true;\n  pathname: URL['pathname'];\n  search: URL['search'];\n  hash: URL['hash'];\n};\n\ntype URLObject = RelativeURL | URL;\n\n// Curious about `thismessage:/`? See: https://www.rfc-editor.org/rfc/rfc2557.html\n//  > When the methods above do not yield an absolute URI, a base URL\n//  > of \"thismessage:/\" MUST be employed. This base URL has been\n//  > defined for the sole purpose of resolving relative references\n//  > within a multipart/related structure when no other base URI is\n//  > specified.\n//\n// We need to provide a base URL to `parseStringToURLObject` because the fetch API gives us a\n// relative URL sometimes.\n//\n// This is the only case where we need to provide a base URL to `parseStringToURLObject`\n// because the relative URL is not valid on its own.\nconst DEFAULT_BASE_URL = 'thismessage:/';\n\n/**\n * Checks if the URL object is relative\n *\n * @param url - The URL object to check\n * @returns True if the URL object is relative, false otherwise\n */\nexport function isURLObjectRelative(url: URLObject): url is RelativeURL {\n  return 'isRelative' in url;\n}\n\n/**\n * Parses string to a URL object\n *\n * @param url - The URL to parse\n * @returns The parsed URL object or undefined if the URL is invalid\n */\nexport function parseStringToURLObject(url: string, urlBase?: string | URL | undefined): URLObject | undefined {\n  const isRelative = url.indexOf('://') <= 0 && url.indexOf('//') !== 0;\n  const base = urlBase ?? (isRelative ? DEFAULT_BASE_URL : undefined);\n  try {\n    // Use `canParse` to short-circuit the URL constructor if it's not a valid URL\n    // This is faster than trying to construct the URL and catching the error\n    // Node 20+, Chrome 120+, Firefox 115+, Safari 17+\n    if ('canParse' in URL && !(URL as unknown as URLwithCanParse).canParse(url, base)) {\n      return undefined;\n    }\n\n    const fullUrlObject = new URL(url, base);\n    if (isRelative) {\n      // Because we used a fake base URL, we need to return a relative URL object.\n      // We cannot return anything about the origin, host, etc. because it will refer to the fake base URL.\n      return {\n        isRelative,\n        pathname: fullUrlObject.pathname,\n        search: fullUrlObject.search,\n        hash: fullUrlObject.hash,\n      };\n    }\n    return fullUrlObject;\n  } catch {\n    // empty body\n  }\n\n  return undefined;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlStringFromUrlObject(url: URLObject): string {\n  if (isURLObjectRelative(url)) {\n    return url.pathname;\n  }\n\n  const newUrl = new URL(url);\n  newUrl.search = '';\n  newUrl.hash = '';\n  if (['80', '443'].includes(newUrl.port)) {\n    newUrl.port = '';\n  }\n  if (newUrl.password) {\n    newUrl.password = '%filtered%';\n  }\n  if (newUrl.username) {\n    newUrl.username = '%filtered%';\n  }\n\n  return newUrl.toString();\n}\n\ntype PartialRequest = {\n  method?: string;\n};\n\nfunction getHttpSpanNameFromUrlObject(\n  urlObject: URLObject | undefined,\n  kind: 'server' | 'client',\n  request?: PartialRequest,\n  routeName?: string,\n): string {\n  const method = request?.method?.toUpperCase() ?? 'GET';\n  const route = routeName\n    ? routeName\n    : urlObject\n      ? kind === 'client'\n        ? getSanitizedUrlStringFromUrlObject(urlObject)\n        : urlObject.pathname\n      : '/';\n\n  return `${method} ${route}`;\n}\n\n/**\n * Takes a parsed URL object and returns a set of attributes for the span\n * that represents the HTTP request for that url. This is used for both server\n * and client http spans.\n *\n * Follows https://opentelemetry.io/docs/specs/semconv/http/.\n *\n * @param urlObject - see {@link parseStringToURLObject}\n * @param kind - The type of HTTP operation (server or client)\n * @param spanOrigin - The origin of the span\n * @param request - The request object, see {@link PartialRequest}\n * @param routeName - The name of the route, must be low cardinality\n * @returns The span name and attributes for the HTTP operation\n */\nexport function getHttpSpanDetailsFromUrlObject(\n  urlObject: URLObject | undefined,\n  kind: 'server' | 'client',\n  spanOrigin: string,\n  request?: PartialRequest,\n  routeName?: string,\n): [name: string, attributes: SpanAttributes] {\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n  };\n\n  if (routeName) {\n    // This is based on https://opentelemetry.io/docs/specs/semconv/http/http-spans/#name\n    attributes[kind === 'server' ? 'http.route' : 'url.template'] = routeName;\n    attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n  }\n\n  if (request?.method) {\n    attributes[SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD] = request.method.toUpperCase();\n  }\n\n  if (urlObject) {\n    if (urlObject.search) {\n      attributes['url.query'] = urlObject.search;\n    }\n    if (urlObject.hash) {\n      attributes['url.fragment'] = urlObject.hash;\n    }\n    if (urlObject.pathname) {\n      attributes['url.path'] = urlObject.pathname;\n      if (urlObject.pathname === '/') {\n        attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n      }\n    }\n\n    if (!isURLObjectRelative(urlObject)) {\n      attributes[SEMANTIC_ATTRIBUTE_URL_FULL] = urlObject.href;\n      if (urlObject.port) {\n        attributes['url.port'] = urlObject.port;\n      }\n      if (urlObject.protocol) {\n        attributes['url.scheme'] = urlObject.protocol;\n      }\n      if (urlObject.hostname) {\n        attributes[kind === 'server' ? 'server.address' : 'url.domain'] = urlObject.hostname;\n      }\n    }\n  }\n\n  return [getHttpSpanNameFromUrlObject(urlObject, kind, request, routeName), attributes];\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  return (urlPath.split(/[?#]/, 1) as [string, ...string[]])[0];\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    host\n      // Always filter out authority\n      ?.replace(/^.*@/, '[filtered]:[filtered]@')\n      // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n      // TODO: Use new URL global if it exists\n      .replace(/(:80)$/, '')\n      .replace(/(:443)$/, '') || '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n","import { isThenable } from '../utils/is';\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nexport function handleCallbackErrors<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Fn extends () => any,\n>(fn: Fn, onError: (error: unknown) => void, onFinally: () => void = () => {}): ReturnType<Fn> {\n  let maybePromiseResult: ReturnType<Fn>;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection<MaybePromise>(\n  value: MaybePromise,\n  onError: (error: unknown) => void,\n  onFinally: () => void,\n): MaybePromise {\n  if (isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(\n      res => {\n        onFinally();\n        return res;\n      },\n      e => {\n        onError(e);\n        onFinally();\n        throw e;\n      },\n    );\n  }\n\n  onFinally();\n  return value;\n}\n","import type { Client } from '../client';\nimport { getClient } from '../currentScopes';\nimport { defineIntegration } from '../integration';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { getOriginalFunction } from '../utils/object';\n\nlet originalFunctionToString: () => void;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst SETUP_CLIENTS = new WeakMap<Client, boolean>();\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function (this: WrappedFunction, ...args: unknown[]): string {\n          const originalFunction = getOriginalFunction(this);\n          const context =\n            SETUP_CLIENTS.has(getClient() as Client) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nexport const functionToStringIntegration = defineIntegration(_functionToStringIntegration);\n","import type { CoreOptions } from '../types-hoist/options';\nimport { SDK_VERSION } from '../utils/version';\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nexport function applySdkMetadata(options: CoreOptions, name: string, names = [name], source = 'npm'): void {\n  const metadata = options._metadata || {};\n\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: SDK_VERSION,\n      })),\n      version: SDK_VERSION,\n    };\n  }\n\n  options._metadata = metadata;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n\nexport function isValidTraceId(traceId: string): boolean {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\n\nexport function isValidSpanId(spanId: string): boolean {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext: SpanContext): boolean {\n  return (\n    isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId)\n  );\n}\n\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext: SpanContext): Span {\n  return new NonRecordingSpan(spanContext);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/core too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n    ? self\n    : typeof window === 'object'\n    ? window\n    : typeof global === 'object'\n    ? global\n    : ({} as typeof globalThis);\n","import type {\n  SentrySpanArguments,\n  Span,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContextData,\n  SpanTimeInput,\n} from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport { generateSpanId, generateTraceId } from '../utils/propagationContext';\nimport { TRACE_FLAG_NONE } from '../utils/spanUtils';\n\n/**\n * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.\n */\nexport class SentryNonRecordingSpan implements Span {\n  private _traceId: string;\n  private _spanId: string;\n\n  public constructor(spanContext: SentrySpanArguments = {}) {\n    this._traceId = spanContext.traceId || generateTraceId();\n    this._spanId = spanContext.spanId || generateSpanId();\n  }\n\n  /** @inheritdoc */\n  public spanContext(): SpanContextData {\n    return {\n      spanId: this._spanId,\n      traceId: this._traceId,\n      traceFlags: TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n  public end(_timestamp?: SpanTimeInput): void {}\n\n  /** @inheritdoc */\n  public setAttribute(_key: string, _value: SpanAttributeValue | undefined): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setAttributes(_values: SpanAttributes): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public updateName(_name: string): this {\n    return this;\n  }\n\n  /** @inheritdoc */\n  public isRecording(): boolean {\n    return false;\n  }\n\n  /** @inheritdoc */\n  public addEvent(\n    _name: string,\n    _attributesOrStartTime?: SpanAttributes | SpanTimeInput,\n    _startTime?: SpanTimeInput,\n  ): this {\n    return this;\n  }\n\n  /** @inheritDoc */\n  public addLink(_link: unknown): this {\n    return this;\n  }\n\n  /** @inheritDoc */\n  public addLinks(_links: unknown[]): this {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  public recordException(_exception: unknown, _time?: number | undefined): void {\n    // noop\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from './types';\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description: string) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nclass BaseContext implements Context {\n  private _currentContext!: Map<symbol, unknown>;\n\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  constructor(parentContext?: Map<symbol, unknown>) {\n    // for minification\n    const self = this;\n\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = (key: symbol) => self._currentContext.get(key);\n\n    self.setValue = (key: symbol, value: unknown): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n\n    self.deleteValue = (key: symbol): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n\n  /**\n   * Get a value from the context.\n   *\n   * @param key key which identifies a context value\n   */\n  public getValue!: (key: symbol) => unknown;\n\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key context key for which to set the value\n   * @param value value to set for the given key\n   */\n  public setValue!: (key: symbol, value: unknown) => Context;\n\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key context key for which to clear a value\n   */\n  public deleteValue!: (key: symbol) => Context;\n}\n\n/** The root context is used as the default parent context when there is no active context */\nexport const ROOT_CONTEXT: Context = new BaseContext();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n","import { DEBUG_BUILD } from './debug-build';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport { debug } from './utils/debug-logger';\nimport { isThenable } from './utils/is';\nimport { SyncPromise } from './utils/syncpromise';\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nexport function notifyEventProcessors(\n  processors: EventProcessor[],\n  event: Event | null,\n  hint: EventHint,\n  index: number = 0,\n): PromiseLike<Event | null> {\n  return new SyncPromise<Event | null>((resolve, reject) => {\n    const processor = processors[index];\n    if (event === null || typeof processor !== 'function') {\n      resolve(event);\n    } else {\n      const result = processor({ ...event }, hint) as Event | null;\n\n      DEBUG_BUILD && processor.id && result === null && debug.log(`Event processor \"${processor.id}\" dropped event`);\n\n      if (isThenable(result)) {\n        void result\n          .then(final => notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n          .then(null, reject);\n      } else {\n        void notifyEventProcessors(processors, result, hint, index + 1)\n          .then(resolve)\n          .then(null, reject);\n      }\n    }\n  });\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport {\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '../propagation/TextMapPropagator';\nimport {\n  getBaggage,\n  getActiveBaggage,\n  setBaggage,\n  deleteBaggage,\n} from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'propagation';\nconst NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nexport class PropagationAPI {\n  private static _instance?: PropagationAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Propagator API */\n  public static getInstance(): PropagationAPI {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  public setGlobalPropagator(propagator: TextMapPropagator): boolean {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  }\n\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  public inject<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier> = defaultTextMapSetter\n  ): void {\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  }\n\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  public extract<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier> = defaultTextMapGetter\n  ): Context {\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  }\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  public fields(): string[] {\n    return this._getGlobalPropagator().fields();\n  }\n\n  /** Remove the global propagator */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n\n  public createBaggage = createBaggage;\n\n  public getBaggage = getBaggage;\n\n  public getActiveBaggage = getActiveBaggage;\n\n  public setBaggage = setBaggage;\n\n  public deleteBaggage = deleteBaggage;\n\n  private _getGlobalPropagator(): TextMapPropagator {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  }\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport { debug } from './debug-logger';\nimport { GLOBAL_OBJ } from './worldwide';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\ndeclare const EdgeRuntime: string | undefined;\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  return 'history' in WINDOW && !!WINDOW.history;\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nexport const supportsFetch = _isFetchSupported;\n\nfunction _isFetchSupported(): boolean {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * isNative checks if the given function is a native implementation\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFunction(func: Function): boolean {\n  return func && /^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFunction(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow?.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFunction(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      DEBUG_BUILD && debug.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import type { Client } from '../client';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { Extras } from '../types-hoist/extra';\nimport type { Mechanism } from '../types-hoist/mechanism';\nimport type { ParameterizedString } from '../types-hoist/parameterize';\nimport type { SeverityLevel } from '../types-hoist/severity';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { isError, isErrorEvent, isParameterizedString, isPlainObject } from './is';\nimport { addExceptionMechanism, addExceptionTypeValue } from './misc';\nimport { normalizeToSize } from './normalize';\nimport { extractExceptionKeysForMessage } from './object';\n\n/**\n * Extracts stack frames from the error.stack string\n */\nexport function parseStackFrames(stackParser: StackParser, error: Error): StackFrame[] {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nexport function exceptionFromError(stackParser: StackParser, error: Error): Exception {\n  const exception: Exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj: Record<string, unknown>): Error | undefined {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (value instanceof Error) {\n        return value;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getMessageForObject(exception: Record<string, unknown>): string {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  }\n\n  const keys = extractExceptionKeysForMessage(exception);\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n  }\n\n  const className = getObjectClassName(exception);\n\n  return `${\n    className && className !== 'Object' ? `'${className}'` : 'Object'\n  } captured as exception with keys: ${keys}`;\n}\n\nfunction getObjectClassName(obj: unknown): string | undefined | void {\n  try {\n    const prototype: unknown | null = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch {\n    // ignore errors here\n  }\n}\n\nfunction getException(\n  client: Client,\n  mechanism: Mechanism,\n  exception: unknown,\n  hint?: EventHint,\n): [Error, Extras | undefined] {\n  if (isError(exception)) {\n    return [exception, undefined];\n  }\n\n  // Mutate this!\n  mechanism.synthetic = true;\n\n  if (isPlainObject(exception)) {\n    const normalizeDepth = client?.getOptions().normalizeDepth;\n    const extras = { ['__serialized__']: normalizeToSize(exception as Record<string, unknown>, normalizeDepth) };\n\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    if (errorFromProp) {\n      return [errorFromProp, extras];\n    }\n\n    const message = getMessageForObject(exception);\n    const ex = hint?.syntheticException || new Error(message);\n    ex.message = message;\n\n    return [ex, extras];\n  }\n\n  // This handles when someone does: `throw \"something awesome\";`\n  // We use synthesized Error here so we can extract a (rough) stack trace.\n  const ex = hint?.syntheticException || new Error(exception as string);\n  ex.message = `${exception}`;\n\n  return [ex, undefined];\n}\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromUnknownInput(\n  client: Client,\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n): Event {\n  const providedMechanism: Mechanism | undefined = hint?.data && (hint.data as { mechanism: Mechanism }).mechanism;\n  const mechanism: Mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  const [ex, extras] = getException(client, mechanism, exception, hint);\n\n  const event: Event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n\n  if (extras) {\n    event.extra = extras;\n  }\n\n  addExceptionTypeValue(event, undefined, undefined);\n  addExceptionMechanism(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint?.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  level: SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    event_id: hint?.event_id,\n    level,\n  };\n\n  if (attachStacktrace && hint?.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [\n          {\n            value: message,\n            stacktrace: { frames },\n          },\n        ],\n      };\n      addExceptionMechanism(event, { synthetic: true });\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nimport { Baggage, BaggageEntry, BaggageEntryMetadata } from './types';\n\nconst diag = DiagAPI.instance();\n\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(\n  entries: Record<string, BaggageEntry> = {}\n): Baggage {\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(\n  str: string\n): BaggageEntryMetadata {\n  if (typeof str !== 'string') {\n    diag.error(\n      `Cannot create baggage metadata from unknown type: ${typeof str}`\n    );\n    str = '';\n  }\n\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString() {\n      return str;\n    },\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanContext } from './span_context';\nimport { TraceFlags } from './trace_flags';\n\nexport const INVALID_SPANID = '0000000000000000';\nexport const INVALID_TRACEID = '00000000000000000000000000000000';\nexport const INVALID_SPAN_CONTEXT: SpanContext = {\n  traceId: INVALID_TRACEID,\n  spanId: INVALID_SPANID,\n  traceFlags: TraceFlags.NONE,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes, AttributeValue, diag } from '@opentelemetry/api';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_TELEMETRY_SDK_LANGUAGE,\n  ATTR_TELEMETRY_SDK_NAME,\n  ATTR_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { Resource } from './Resource';\nimport { defaultServiceName } from './platform';\nimport {\n  DetectedResource,\n  DetectedResourceAttributes,\n  MaybePromise,\n  RawResourceAttribute,\n  ResourceOptions,\n} from './types';\nimport { isPromiseLike } from './utils';\n\nclass ResourceImpl implements Resource {\n  private _rawAttributes: RawResourceAttribute[];\n  private _asyncAttributesPending = false;\n  private _schemaUrl?: string;\n\n  private _memoizedAttributes?: Attributes;\n\n  static FromAttributeList(\n    attributes: [string, MaybePromise<AttributeValue | undefined>][],\n    options?: ResourceOptions\n  ): Resource {\n    const res = new ResourceImpl({}, options);\n    res._rawAttributes = guardedRawAttributes(attributes);\n    res._asyncAttributesPending =\n      attributes.filter(([_, val]) => isPromiseLike(val)).length > 0;\n    return res;\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    resource: DetectedResource,\n    options?: ResourceOptions\n  ) {\n    const attributes = resource.attributes ?? {};\n    this._rawAttributes = Object.entries(attributes).map(([k, v]) => {\n      if (isPromiseLike(v)) {\n        // side-effect\n        this._asyncAttributesPending = true;\n      }\n\n      return [k, v];\n    });\n\n    this._rawAttributes = guardedRawAttributes(this._rawAttributes);\n    this._schemaUrl = validateSchemaUrl(options?.schemaUrl);\n  }\n\n  public get asyncAttributesPending(): boolean {\n    return this._asyncAttributesPending;\n  }\n\n  public async waitForAsyncAttributes(): Promise<void> {\n    if (!this.asyncAttributesPending) {\n      return;\n    }\n\n    for (let i = 0; i < this._rawAttributes.length; i++) {\n      const [k, v] = this._rawAttributes[i];\n      this._rawAttributes[i] = [k, isPromiseLike(v) ? await v : v];\n    }\n\n    this._asyncAttributesPending = false;\n  }\n\n  public get attributes(): Attributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    if (this._memoizedAttributes) {\n      return this._memoizedAttributes;\n    }\n\n    const attrs: Attributes = {};\n    for (const [k, v] of this._rawAttributes) {\n      if (isPromiseLike(v)) {\n        diag.debug(`Unsettled resource attribute ${k} skipped`);\n        continue;\n      }\n      if (v != null) {\n        attrs[k] ??= v;\n      }\n    }\n\n    // only memoize output if all attributes are settled\n    if (!this._asyncAttributesPending) {\n      this._memoizedAttributes = attrs;\n    }\n\n    return attrs;\n  }\n\n  public getRawAttributes(): RawResourceAttribute[] {\n    return this._rawAttributes;\n  }\n\n  public get schemaUrl(): string | undefined {\n    return this._schemaUrl;\n  }\n\n  public merge(resource: Resource | null): Resource {\n    if (resource == null) return this;\n\n    // Order is important\n    // Spec states incoming attributes override existing attributes\n    const mergedSchemaUrl = mergeSchemaUrl(this, resource);\n    const mergedOptions: ResourceOptions | undefined = mergedSchemaUrl\n      ? { schemaUrl: mergedSchemaUrl }\n      : undefined;\n\n    return ResourceImpl.FromAttributeList(\n      [...resource.getRawAttributes(), ...this.getRawAttributes()],\n      mergedOptions\n    );\n  }\n}\n\nexport function resourceFromAttributes(\n  attributes: DetectedResourceAttributes,\n  options?: ResourceOptions\n): Resource {\n  return ResourceImpl.FromAttributeList(Object.entries(attributes), options);\n}\n\nexport function resourceFromDetectedResource(\n  detectedResource: DetectedResource,\n  options?: ResourceOptions\n): Resource {\n  return new ResourceImpl(detectedResource, options);\n}\n\nexport function emptyResource(): Resource {\n  return resourceFromAttributes({});\n}\n\nexport function defaultResource(): Resource {\n  return resourceFromAttributes({\n    [ATTR_SERVICE_NAME]: defaultServiceName(),\n    [ATTR_TELEMETRY_SDK_LANGUAGE]: SDK_INFO[ATTR_TELEMETRY_SDK_LANGUAGE],\n    [ATTR_TELEMETRY_SDK_NAME]: SDK_INFO[ATTR_TELEMETRY_SDK_NAME],\n    [ATTR_TELEMETRY_SDK_VERSION]: SDK_INFO[ATTR_TELEMETRY_SDK_VERSION],\n  });\n}\n\nfunction guardedRawAttributes(\n  attributes: RawResourceAttribute[]\n): RawResourceAttribute[] {\n  return attributes.map(([k, v]) => {\n    if (isPromiseLike(v)) {\n      return [\n        k,\n        v.catch(err => {\n          diag.debug(\n            'promise rejection for resource attribute: %s - %s',\n            k,\n            err\n          );\n          return undefined;\n        }),\n      ];\n    }\n    return [k, v];\n  });\n}\n\nfunction validateSchemaUrl(schemaUrl?: string): string | undefined {\n  if (typeof schemaUrl === 'string' || schemaUrl === undefined) {\n    return schemaUrl;\n  }\n\n  diag.warn(\n    'Schema URL must be string or undefined, got %s. Schema URL will be ignored.',\n    schemaUrl\n  );\n\n  return undefined;\n}\n\nfunction mergeSchemaUrl(\n  old: Resource,\n  updating: Resource | null\n): string | undefined {\n  const oldSchemaUrl = old?.schemaUrl;\n  const updatingSchemaUrl = updating?.schemaUrl;\n\n  const isOldEmpty = oldSchemaUrl === undefined || oldSchemaUrl === '';\n  const isUpdatingEmpty =\n    updatingSchemaUrl === undefined || updatingSchemaUrl === '';\n\n  if (isOldEmpty) {\n    return updatingSchemaUrl;\n  }\n\n  if (isUpdatingEmpty) {\n    return oldSchemaUrl;\n  }\n\n  if (oldSchemaUrl === updatingSchemaUrl) {\n    return oldSchemaUrl;\n  }\n\n  diag.warn(\n    'Schema URL merge conflict: old resource has \"%s\", updating resource has \"%s\". Resulting resource will have undefined Schema URL.',\n    oldSchemaUrl,\n    updatingSchemaUrl\n  );\n\n  return undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport {\n  isSpanContextValid,\n  wrapSpanContext,\n} from '../trace/spancontext-utils';\nimport { Tracer } from '../trace/tracer';\nimport { TracerProvider } from '../trace/tracer_provider';\nimport {\n  deleteSpan,\n  getActiveSpan,\n  getSpan,\n  getSpanContext,\n  setSpan,\n  setSpanContext,\n} from '../trace/context-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'trace';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nexport class TraceAPI {\n  private static _instance?: TraceAPI;\n\n  private _proxyTracerProvider = new ProxyTracerProvider();\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Trace API */\n  public static getInstance(): TraceAPI {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  public setGlobalTracerProvider(provider: TracerProvider): boolean {\n    const success = registerGlobal(\n      API_NAME,\n      this._proxyTracerProvider,\n      DiagAPI.instance()\n    );\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  }\n\n  /**\n   * Returns the global tracer provider.\n   */\n  public getTracerProvider(): TracerProvider {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  }\n\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  public getTracer(name: string, version?: string): Tracer {\n    return this.getTracerProvider().getTracer(name, version);\n  }\n\n  /** Remove the global tracer provider */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  }\n\n  public wrapSpanContext = wrapSpanContext;\n\n  public isSpanContextValid = isSpanContextValid;\n\n  public deleteSpan = deleteSpan;\n\n  public getSpan = getSpan;\n\n  public getActiveSpan = getActiveSpan;\n\n  public getSpanContext = getSpanContext;\n\n  public setSpan = setSpan;\n\n  public setSpanContext = setSpanContext;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n\n/**\n * ASP.NET Core exception middleware handling result.\n *\n * @example handled\n * @example unhandled\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = 'aspnetcore.diagnostics.exception.result' as const;\n\n/**\n * Enum value \"aborted\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling didn't run because the request was aborted.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = \"aborted\" as const;\n\n/**\n * Enum value \"handled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was handled by the exception handling middleware.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = \"handled\" as const;\n\n/**\n * Enum value \"skipped\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling was skipped because the response had started.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = \"skipped\" as const;\n\n/**\n * Enum value \"unhandled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was not handled by the exception handling middleware.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = \"unhandled\" as const;\n\n/**\n * Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.\n *\n * @example Contoso.MyHandler\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = 'aspnetcore.diagnostics.handler.type' as const;\n\n/**\n * Rate limiting policy name.\n *\n * @example fixed\n * @example sliding\n * @example token\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_POLICY = 'aspnetcore.rate_limiting.policy' as const;\n\n/**\n * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason\n *\n * @example acquired\n * @example request_canceled\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_RESULT = 'aspnetcore.rate_limiting.result' as const;\n\n/**\n * Enum value \"acquired\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease was acquired\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = \"acquired\" as const;\n\n/**\n * Enum value \"endpoint_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the endpoint limiter\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = \"endpoint_limiter\" as const;\n\n/**\n * Enum value \"global_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the global limiter\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = \"global_limiter\" as const;\n\n/**\n * Enum value \"request_canceled\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was canceled\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = \"request_canceled\" as const;\n\n/**\n * Flag indicating if request was handled by the application pipeline.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = 'aspnetcore.request.is_unhandled' as const;\n\n/**\n * A value that indicates whether the matched route is a fallback route.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = 'aspnetcore.routing.is_fallback' as const;\n\n/**\n * Match result - success or failure\n *\n * @example success\n * @example failure\n */\nexport const ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = 'aspnetcore.routing.match_status' as const;\n\n/**\n * Enum value \"failure\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match failed\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = \"failure\" as const;\n\n/**\n * Enum value \"success\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match succeeded\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = \"success\" as const;\n\n/**\n * A value that indicates whether the user is authenticated.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_USER_IS_AUTHENTICATED = 'aspnetcore.user.is_authenticated' as const;\n\n/**\n * Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example client.example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.address` **SHOULD** represent the client address behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_ADDRESS = 'client.address' as const;\n\n/**\n * Client port number.\n *\n * @example 65123\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.port` **SHOULD** represent the client port behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_PORT = 'client.port' as const;\n\n/**\n * The column number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 16\n */\nexport const ATTR_CODE_COLUMN_NUMBER = 'code.column.number' as const;\n\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"/usr/local/MyApplication/content_root/app/index.php\"\n */\nexport const ATTR_CODE_FILE_PATH = 'code.file.path' as const;\n\n/**\n * The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example com.example.MyHttpService.serveRequest\n * @example GuzzleHttp\\\\Client::transfer\n * @example fopen\n *\n * @note Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\n * The values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n * `code.stacktrace` without information on arguments.\n *\n * Examples:\n *\n *   - Java method: `com.example.MyHttpService.serveRequest`\n *   - Java anonymous class method: `com.mycompany.Main$1.myMethod`\n *   - Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n *   - PHP function: `GuzzleHttp\\Client::transfer`\n *   - Go function: `github.com/my/repo/pkg.foo.func5`\n *   - Elixir: `OpenTelemetry.Ctx.new`\n *   - Erlang: `opentelemetry_ctx:new`\n *   - Rust: `playground::my_module::my_cool_func`\n *   - C function: `fopen`\n */\nexport const ATTR_CODE_FUNCTION_NAME = 'code.function.name' as const;\n\n/**\n * The line number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 42\n */\nexport const ATTR_CODE_LINE_NUMBER = 'code.line.number' as const;\n\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Location'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_CODE_STACKTRACE = 'code.stacktrace' as const;\n\n/**\n * The name of a collection (table, container) within the database.\n *\n * @example public.users\n * @example customers\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The collection name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple collections\n * in non-batch operations.\n *\n * For batch operations, if the individual operations are known to have the same\n * collection name then that collection name **SHOULD** be used.\n */\nexport const ATTR_DB_COLLECTION_NAME = 'db.collection.name' as const;\n\n/**\n * The name of the database, fully qualified within the server address and port.\n *\n * @example customers\n * @example test.users\n *\n * @note If a database system has multiple namespace components, they **SHOULD** be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) **SHOULD** be omitted.\n * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.\n * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n */\nexport const ATTR_DB_NAMESPACE = 'db.namespace' as const;\n\n/**\n * The number of queries included in a batch operation.\n *\n * @example 2\n * @example 3\n * @example 4\n *\n * @note Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` **SHOULD** never be `1`.\n */\nexport const ATTR_DB_OPERATION_BATCH_SIZE = 'db.operation.batch.size' as const;\n\n/**\n * The name of the operation or command being executed.\n *\n * @example findAndModify\n * @example HMSET\n * @example SELECT\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The operation name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple operations\n * in non-batch operations.\n *\n * If spaces can occur in the operation name, multiple consecutive spaces\n * **SHOULD** be normalized to a single space.\n *\n * For batch operations, if the individual operations are known to have the same operation name\n * then that operation name **SHOULD** be used prepended by `BATCH `,\n * otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database\n * system specific term if more applicable.\n */\nexport const ATTR_DB_OPERATION_NAME = 'db.operation.name' as const;\n\n/**\n * Low cardinality summary of a database query.\n *\n * @example SELECT wuser_table\n * @example INSERT shipping_details SELECT orders\n * @example get user by id\n *\n * @note The query summary describes a class of database queries and is useful\n * as a grouping key, especially when analyzing telemetry for database\n * calls involving complex queries.\n *\n * Summary may be available to the instrumentation through\n * instrumentation hooks or other means. If it is not available, instrumentations\n * that support query parsing **SHOULD** generate a summary following\n * [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\n * section.\n */\nexport const ATTR_DB_QUERY_SUMMARY = 'db.query.summary' as const;\n\n/**\n * The database query being executed.\n *\n * @example SELECT * FROM wuser_table where username = ?\n * @example SET mykey ?\n *\n * @note For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\n * For batch operations, if the individual operations are known to have the same query text then that query text **SHOULD** be used, otherwise all of the individual query texts **SHOULD** be concatenated with separator `; ` or some other database system specific separator if more applicable.\n * Parameterized query text **SHOULD NOT** be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n */\nexport const ATTR_DB_QUERY_TEXT = 'db.query.text' as const;\n\n/**\n * Database response status code.\n *\n * @example 102\n * @example ORA-17002\n * @example 08P01\n * @example 404\n *\n * @note The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\n * Semantic conventions for individual database systems **SHOULD** document what `db.response.status_code` means in the context of that system.\n */\nexport const ATTR_DB_RESPONSE_STATUS_CODE = 'db.response.status_code' as const;\n\n/**\n * The name of a stored procedure within the database.\n *\n * @example GetCustomer\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * For batch operations, if the individual operations are known to have the same\n * stored procedure name then that stored procedure name **SHOULD** be used.\n */\nexport const ATTR_DB_STORED_PROCEDURE_NAME = 'db.stored_procedure.name' as const;\n\n/**\n * The database management system (DBMS) product as identified by the client instrumentation.\n *\n * @note The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n */\nexport const ATTR_DB_SYSTEM_NAME = 'db.system.name' as const;\n\n/**\n * Enum value \"mariadb\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MariaDB](https://mariadb.org/)\n */\nexport const DB_SYSTEM_NAME_VALUE_MARIADB = \"mariadb\" as const;\n\n/**\n * Enum value \"microsoft.sql_server\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [Microsoft SQL Server](https://www.microsoft.com/sql-server)\n */\nexport const DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER = \"microsoft.sql_server\" as const;\n\n/**\n * Enum value \"mysql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MySQL](https://www.mysql.com/)\n */\nexport const DB_SYSTEM_NAME_VALUE_MYSQL = \"mysql\" as const;\n\n/**\n * Enum value \"postgresql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [PostgreSQL](https://www.postgresql.org/)\n */\nexport const DB_SYSTEM_NAME_VALUE_POSTGRESQL = \"postgresql\" as const;\n\n/**\n * Name of the garbage collector managed heap generation.\n *\n * @example gen0\n * @example gen1\n * @example gen2\n */\nexport const ATTR_DOTNET_GC_HEAP_GENERATION = 'dotnet.gc.heap.generation' as const;\n\n/**\n * Enum value \"gen0\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 0\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = \"gen0\" as const;\n\n/**\n * Enum value \"gen1\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 1\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = \"gen1\" as const;\n\n/**\n * Enum value \"gen2\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 2\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = \"gen2\" as const;\n\n/**\n * Enum value \"loh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Large Object Heap\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_LOH = \"loh\" as const;\n\n/**\n * Enum value \"poh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Pinned Object Heap\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_POH = \"poh\" as const;\n\n/**\n * Describes a class of error the operation ended with.\n *\n * @example timeout\n * @example java.net.UnknownHostException\n * @example server_certificate_invalid\n * @example 500\n *\n * @note The `error.type` **SHOULD** be predictable, and **SHOULD** have low cardinality.\n *\n * When `error.type` is set to a type (e.g., an exception type), its\n * canonical class name identifying the type within the artifact **SHOULD** be used.\n *\n * Instrumentations **SHOULD** document the list of errors they report.\n *\n * The cardinality of `error.type` within one instrumentation library **SHOULD** be low.\n * Telemetry consumers that aggregate data from multiple instrumentation libraries and applications\n * should be prepared for `error.type` to have high cardinality at query time when no\n * additional filters are applied.\n *\n * If the operation has completed successfully, instrumentations **SHOULD NOT** set `error.type`.\n *\n * If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\n * it's **RECOMMENDED** to:\n *\n *   - Use a domain-specific attribute\n *   - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n */\nexport const ATTR_ERROR_TYPE = 'error.type' as const;\n\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_ERROR_TYPE}.\n *\n * A fallback error value to be used when the instrumentation doesn't define a custom value.\n */\nexport const ERROR_TYPE_VALUE_OTHER = \"_OTHER\" as const;\n\n/**\n * Indicates that the exception is escaping the scope of the span.\n *\n * @deprecated It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n */\nexport const ATTR_EXCEPTION_ESCAPED = 'exception.escaped' as const;\n\n/**\n * The exception message.\n *\n * @example Division by zero\n * @example Can't convert 'int' object to str implicitly\n */\nexport const ATTR_EXCEPTION_MESSAGE = 'exception.message' as const;\n\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @example \"Exception in thread \"main\" java.lang.RuntimeException: Test exception\\\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_EXCEPTION_STACKTRACE = 'exception.stacktrace' as const;\n\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @example java.net.ConnectException\n * @example OSError\n */\nexport const ATTR_EXCEPTION_TYPE = 'exception.type' as const;\n\n/**\n * HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"1.2.3.4\", \"1.2.3.5\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * The `User-Agent` header is already captured in the `user_agent.original` attribute.\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` **SHOULD** be recorded as the `http.request.header.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` **SHOULD** be recorded as the `http.request.header.x-forwarded-for`\n *     attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_REQUEST_HEADER = (key: string) => `http.request.header.${key}`;\n\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nexport const ATTR_HTTP_REQUEST_METHOD = 'http.request.method' as const;\n\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * Any HTTP method that the instrumentation has no prior knowledge of.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OTHER = \"_OTHER\" as const;\n\n/**\n * Enum value \"CONNECT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * CONNECT method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_CONNECT = \"CONNECT\" as const;\n\n/**\n * Enum value \"DELETE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * DELETE method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_DELETE = \"DELETE\" as const;\n\n/**\n * Enum value \"GET\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * GET method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_GET = \"GET\" as const;\n\n/**\n * Enum value \"HEAD\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * HEAD method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_HEAD = \"HEAD\" as const;\n\n/**\n * Enum value \"OPTIONS\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * OPTIONS method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OPTIONS = \"OPTIONS\" as const;\n\n/**\n * Enum value \"PATCH\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PATCH method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PATCH = \"PATCH\" as const;\n\n/**\n * Enum value \"POST\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * POST method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_POST = \"POST\" as const;\n\n/**\n * Enum value \"PUT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PUT method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PUT = \"PUT\" as const;\n\n/**\n * Enum value \"TRACE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * TRACE method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_TRACE = \"TRACE\" as const;\n\n/**\n * Original HTTP method sent by the client in the request line.\n *\n * @example GeT\n * @example ACL\n * @example foo\n */\nexport const ATTR_HTTP_REQUEST_METHOD_ORIGINAL = 'http.request.method_original' as const;\n\n/**\n * The ordinal number of request resending attempt (for any reason, including redirects).\n *\n * @example 3\n *\n * @note The resend count **SHOULD** be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n */\nexport const ATTR_HTTP_REQUEST_RESEND_COUNT = 'http.request.resend_count' as const;\n\n/**\n * HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"abc\", \"def\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` header **SHOULD** be recorded as the `http.request.response.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `My-custom-header: abc, def` header **SHOULD** be recorded as the `http.response.header.my-custom-header`\n *     attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_RESPONSE_HEADER = (key: string) => `http.response.header.${key}`;\n\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nexport const ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code' as const;\n\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nexport const ATTR_HTTP_ROUTE = 'http.route' as const;\n\n/**\n * Name of the garbage collector action.\n *\n * @example end of minor GC\n * @example end of major GC\n *\n * @note Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n */\nexport const ATTR_JVM_GC_ACTION = 'jvm.gc.action' as const;\n\n/**\n * Name of the garbage collector.\n *\n * @example G1 Young Generation\n * @example G1 Old Generation\n *\n * @note Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n */\nexport const ATTR_JVM_GC_NAME = 'jvm.gc.name' as const;\n\n/**\n * Name of the memory pool.\n *\n * @example G1 Old Gen\n * @example G1 Eden space\n * @example G1 Survivor Space\n *\n * @note Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n */\nexport const ATTR_JVM_MEMORY_POOL_NAME = 'jvm.memory.pool.name' as const;\n\n/**\n * The type of memory.\n *\n * @example heap\n * @example non_heap\n */\nexport const ATTR_JVM_MEMORY_TYPE = 'jvm.memory.type' as const;\n\n/**\n * Enum value \"heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Heap memory.\n */\nexport const JVM_MEMORY_TYPE_VALUE_HEAP = \"heap\" as const;\n\n/**\n * Enum value \"non_heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Non-heap memory\n */\nexport const JVM_MEMORY_TYPE_VALUE_NON_HEAP = \"non_heap\" as const;\n\n/**\n * Whether the thread is daemon or not.\n */\nexport const ATTR_JVM_THREAD_DAEMON = 'jvm.thread.daemon' as const;\n\n/**\n * State of the thread.\n *\n * @example runnable\n * @example blocked\n */\nexport const ATTR_JVM_THREAD_STATE = 'jvm.thread.state' as const;\n\n/**\n * Enum value \"blocked\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is blocked waiting for a monitor lock is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_BLOCKED = \"blocked\" as const;\n\n/**\n * Enum value \"new\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has not yet started is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_NEW = \"new\" as const;\n\n/**\n * Enum value \"runnable\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread executing in the Java virtual machine is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_RUNNABLE = \"runnable\" as const;\n\n/**\n * Enum value \"terminated\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has exited is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_TERMINATED = \"terminated\" as const;\n\n/**\n * Enum value \"timed_waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_TIMED_WAITING = \"timed_waiting\" as const;\n\n/**\n * Enum value \"waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting indefinitely for another thread to perform a particular action is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_WAITING = \"waiting\" as const;\n\n/**\n * Local address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_LOCAL_ADDRESS = 'network.local.address' as const;\n\n/**\n * Local port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_LOCAL_PORT = 'network.local.port' as const;\n\n/**\n * Peer address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_PEER_ADDRESS = 'network.peer.address' as const;\n\n/**\n * Peer port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_PEER_PORT = 'network.peer.port' as const;\n\n/**\n * [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.\n *\n * @example amqp\n * @example http\n * @example mqtt\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_PROTOCOL_NAME = 'network.protocol.name' as const;\n\n/**\n * The actual version of the protocol used for network communication.\n *\n * @example 1.1\n * @example 2\n *\n * @note If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute **SHOULD** be set to the negotiated version. If the actual protocol version is not known, this attribute **SHOULD NOT** be set.\n */\nexport const ATTR_NETWORK_PROTOCOL_VERSION = 'network.protocol.version' as const;\n\n/**\n * [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n *\n * @example tcp\n * @example udp\n *\n * @note The value **SHOULD** be normalized to lowercase.\n *\n * Consider always setting the transport when setting a port number, since\n * a port number is ambiguous without knowing the transport. For example\n * different processes could be listening on TCP port 12345 and UDP port 12345.\n */\nexport const ATTR_NETWORK_TRANSPORT = 'network.transport' as const;\n\n/**\n * Enum value \"pipe\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Named or anonymous pipe.\n */\nexport const NETWORK_TRANSPORT_VALUE_PIPE = \"pipe\" as const;\n\n/**\n * Enum value \"quic\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * QUIC\n */\nexport const NETWORK_TRANSPORT_VALUE_QUIC = \"quic\" as const;\n\n/**\n * Enum value \"tcp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * TCP\n */\nexport const NETWORK_TRANSPORT_VALUE_TCP = \"tcp\" as const;\n\n/**\n * Enum value \"udp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * UDP\n */\nexport const NETWORK_TRANSPORT_VALUE_UDP = \"udp\" as const;\n\n/**\n * Enum value \"unix\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Unix domain socket\n */\nexport const NETWORK_TRANSPORT_VALUE_UNIX = \"unix\" as const;\n\n/**\n * [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.\n *\n * @example ipv4\n * @example ipv6\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_TYPE = 'network.type' as const;\n\n/**\n * Enum value \"ipv4\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv4\n */\nexport const NETWORK_TYPE_VALUE_IPV4 = \"ipv4\" as const;\n\n/**\n * Enum value \"ipv6\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv6\n */\nexport const NETWORK_TYPE_VALUE_IPV6 = \"ipv6\" as const;\n\n/**\n * The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).\n *\n * @example io.opentelemetry.contrib.mongodb\n */\nexport const ATTR_OTEL_SCOPE_NAME = 'otel.scope.name' as const;\n\n/**\n * The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).\n *\n * @example 1.0.0\n */\nexport const ATTR_OTEL_SCOPE_VERSION = 'otel.scope.version' as const;\n\n/**\n * Name of the code, either \"OK\" or \"ERROR\". **MUST NOT** be set if the status code is UNSET.\n */\nexport const ATTR_OTEL_STATUS_CODE = 'otel.status_code' as const;\n\n/**\n * Enum value \"ERROR\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation contains an error.\n */\nexport const OTEL_STATUS_CODE_VALUE_ERROR = \"ERROR\" as const;\n\n/**\n * Enum value \"OK\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation has been validated by an Application developer or Operator to have completed successfully.\n */\nexport const OTEL_STATUS_CODE_VALUE_OK = \"OK\" as const;\n\n/**\n * Description of the Status if it has a value, otherwise not set.\n *\n * @example resource not found\n */\nexport const ATTR_OTEL_STATUS_DESCRIPTION = 'otel.status_description' as const;\n\n/**\n * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.address` **SHOULD** represent the server address behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_ADDRESS = 'server.address' as const;\n\n/**\n * Server port number.\n *\n * @example 80\n * @example 8080\n * @example 443\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.port` **SHOULD** represent the server port behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_PORT = 'server.port' as const;\n\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nexport const ATTR_SERVICE_NAME = 'service.name' as const;\n\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nexport const ATTR_SERVICE_VERSION = 'service.version' as const;\n\n/**\n * SignalR HTTP connection closure status.\n *\n * @example app_shutdown\n * @example timeout\n */\nexport const ATTR_SIGNALR_CONNECTION_STATUS = 'signalr.connection.status' as const;\n\n/**\n * Enum value \"app_shutdown\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed because the app is shutting down.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = \"app_shutdown\" as const;\n\n/**\n * Enum value \"normal_closure\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed normally.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = \"normal_closure\" as const;\n\n/**\n * Enum value \"timeout\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed due to a timeout.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = \"timeout\" as const;\n\n/**\n * [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)\n *\n * @example web_sockets\n * @example long_polling\n */\nexport const ATTR_SIGNALR_TRANSPORT = 'signalr.transport' as const;\n\n/**\n * Enum value \"long_polling\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * LongPolling protocol\n */\nexport const SIGNALR_TRANSPORT_VALUE_LONG_POLLING = \"long_polling\" as const;\n\n/**\n * Enum value \"server_sent_events\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * ServerSentEvents protocol\n */\nexport const SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = \"server_sent_events\" as const;\n\n/**\n * Enum value \"web_sockets\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * WebSockets protocol\n */\nexport const SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = \"web_sockets\" as const;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const ATTR_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language' as const;\n\n/**\n * Enum value \"cpp\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_CPP = \"cpp\" as const;\n\n/**\n * Enum value \"dotnet\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = \"dotnet\" as const;\n\n/**\n * Enum value \"erlang\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = \"erlang\" as const;\n\n/**\n * Enum value \"go\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_GO = \"go\" as const;\n\n/**\n * Enum value \"java\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = \"java\" as const;\n\n/**\n * Enum value \"nodejs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = \"nodejs\" as const;\n\n/**\n * Enum value \"php\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PHP = \"php\" as const;\n\n/**\n * Enum value \"python\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = \"python\" as const;\n\n/**\n * Enum value \"ruby\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = \"ruby\" as const;\n\n/**\n * Enum value \"rust\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUST = \"rust\" as const;\n\n/**\n * Enum value \"swift\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = \"swift\" as const;\n\n/**\n * Enum value \"webjs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = \"webjs\" as const;\n\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @example opentelemetry\n *\n * @note The OpenTelemetry SDK **MUST** set the `telemetry.sdk.name` attribute to `opentelemetry`.\n * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK **MUST** set the\n * `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\n * or another suitable identifier depending on the language.\n * The identifier `opentelemetry` is reserved and **MUST NOT** be used in this case.\n * All custom identifiers **SHOULD** be stable across different versions of an implementation.\n */\nexport const ATTR_TELEMETRY_SDK_NAME = 'telemetry.sdk.name' as const;\n\n/**\n * The version string of the telemetry SDK.\n *\n * @example 1.2.3\n */\nexport const ATTR_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version' as const;\n\n/**\n * The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n *\n * @example SemConv\n */\nexport const ATTR_URL_FRAGMENT = 'url.fragment' as const;\n\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\n * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n *\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.\n * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n *\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).\n *\n * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the\n * value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `https://www.example.com/path?color=blue&sig=REDACTED`.\n */\nexport const ATTR_URL_FULL = 'url.full' as const;\n\n/**\n * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n *\n * @example /search\n *\n * @note Sensitive content provided in `url.path` **SHOULD** be scrubbed when instrumentations can identify it.\n */\nexport const ATTR_URL_PATH = 'url.path' as const;\n\n/**\n * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n *\n * @example q=OpenTelemetry\n *\n * @note Sensitive content provided in `url.query` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `q=OpenTelemetry&sig=REDACTED`.\n */\nexport const ATTR_URL_QUERY = 'url.query' as const;\n\n/**\n * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n *\n * @example https\n * @example ftp\n * @example telnet\n */\nexport const ATTR_URL_SCHEME = 'url.scheme' as const;\n\n/**\n * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n * @example YourApp/1.0.0 grpc-java-okhttp/1.27.2\n */\nexport const ATTR_USER_AGENT_ORIGINAL = 'user_agent.original' as const;\n\n","import { getClient, getCurrentScope, getIsolationScope, withIsolationScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { CaptureContext } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\nimport type { CheckIn, FinishedCheckIn, MonitorConfig } from './types-hoist/checkin';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { Extra, Extras } from './types-hoist/extra';\nimport type { Primitive } from './types-hoist/misc';\nimport type { Session, SessionContext } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { User } from './types-hoist/user';\nimport { debug } from './utils/debug-logger';\nimport { isThenable } from './utils/is';\nimport { uuid4 } from './utils/misc';\nimport type { ExclusiveEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { parseEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { timestampInSeconds } from './utils/time';\nimport { GLOBAL_OBJ } from './utils/worldwide';\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nexport function captureException(exception: unknown, hint?: ExclusiveEventHintOrCaptureContext): string {\n  return getCurrentScope().captureException(exception, parseEventHintOrCaptureContext(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | SeverityLevel): string {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return getCurrentScope().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nexport function captureEvent(event: Event, hint?: EventHint): string {\n  return getCurrentScope().captureEvent(event, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\nexport function setContext(name: string, context: { [key: string]: unknown } | null): void {\n  getIsolationScope().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  getIsolationScope().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  getIsolationScope().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  getIsolationScope().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  getIsolationScope().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  getIsolationScope().setUser(user);\n}\n\n/**\n * The last error event id of the isolation scope.\n *\n * Warning: This function really returns the last recorded error event id on the current\n * isolation scope. If you call this function after handling a certain error and another error\n * is captured in between, the last one is returned instead of the one you might expect.\n * Also, ids of events that were never sent to Sentry (for example because\n * they were dropped in `beforeSend`) could be returned.\n *\n * @returns The last event id of the isolation scope.\n */\nexport function lastEventId(): string | undefined {\n  return getIsolationScope().lastEventId();\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function captureCheckIn(checkIn: CheckIn, upsertMonitorConfig?: MonitorConfig): string {\n  const scope = getCurrentScope();\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && debug.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    DEBUG_BUILD && debug.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n\n  return uuid4();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param callback Callback to be monitored\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function withMonitor<T>(\n  monitorSlug: CheckIn['monitorSlug'],\n  callback: () => T,\n  upsertMonitorConfig?: MonitorConfig,\n): T {\n  const checkInId = captureCheckIn({ monitorSlug, status: 'in_progress' }, upsertMonitorConfig);\n  const now = timestampInSeconds();\n\n  function finishCheckIn(status: FinishedCheckIn['status']): void {\n    captureCheckIn({ monitorSlug, status, checkInId, duration: timestampInSeconds() - now });\n  }\n\n  return withIsolationScope(() => {\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback();\n    } catch (e) {\n      finishCheckIn('error');\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      return maybePromiseResult.then(\n        r => {\n          finishCheckIn('ok');\n          return r;\n        },\n        e => {\n          finishCheckIn('error');\n          throw e;\n        },\n      ) as T;\n    }\n    finishCheckIn('ok');\n\n    return maybePromiseResult;\n  });\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  DEBUG_BUILD && debug.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  DEBUG_BUILD && debug.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Returns true if Sentry has been properly initialized.\n */\nexport function isInitialized(): boolean {\n  return !!getClient();\n}\n\n/** If the SDK is initialized & enabled. */\nexport function isEnabled(): boolean {\n  const client = getClient();\n  return client?.getOptions().enabled !== false && !!client?.getTransport();\n}\n\n/**\n * Add an event processor.\n * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n * context will have the processor applied.\n */\nexport function addEventProcessor(callback: EventProcessor): void {\n  getIsolationScope().addEventProcessor(callback);\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nexport function startSession(context?: SessionContext): Session {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  // Will fetch userAgent if called from browser sdk\n  const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n  const session = makeSession({\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && { userAgent }),\n    ...context,\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession?.status === 'ok') {\n    updateSession(currentSession, { status: 'exited' });\n  }\n\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session);\n\n  return session;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nexport function endSession(): void {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session) {\n    closeSession(session);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate(): void {\n  const isolationScope = getIsolationScope();\n  const client = getClient();\n  const session = isolationScope.getSession();\n  if (session && client) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nexport function captureSession(end: boolean = false): void {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\n","import { getSentryCarrier } from '../carrier';\nimport type { Attachment } from '../types-hoist/attachment';\nimport type { DataCategory } from '../types-hoist/datacategory';\nimport type { DsnComponents } from '../types-hoist/dsn';\nimport type {\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  Envelope,\n  EnvelopeItemType,\n  EventEnvelopeHeaders,\n  SpanItem,\n} from '../types-hoist/envelope';\nimport type { Event } from '../types-hoist/event';\nimport type { SdkInfo } from '../types-hoist/sdkinfo';\nimport type { SdkMetadata } from '../types-hoist/sdkmetadata';\nimport type { SpanJSON } from '../types-hoist/span';\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as unknown as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input: string): Uint8Array {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.encodePolyfill ? carrier.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input: Uint8Array): string {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.decodePolyfill ? carrier.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(env: string | Uint8Array): Envelope {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(decodeUTF8(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nexport function createSpanEnvelopeItem(spanJson: Partial<SpanJSON>): SpanItem {\n  const spanHeaders: SpanItem[0] = {\n    type: 'span',\n  };\n\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(attachment: Attachment): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n\n  return [\n    {\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    },\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  raw_security: 'security',\n  log: 'log_item',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent?.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn?: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata?.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dynamicSamplingContext,\n    }),\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport const propagation = PropagationAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag/types';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      `@opentelemetry/api: Registration of version v${api.version} for ${type} does not match previously registered API v${VERSION}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  metrics?: MeterProvider;\n  propagation?: TextMapPropagator;\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { htmlTreeAsString } from './browser';\nimport { debug } from './debug-logger';\nimport { isElement, isError, isEvent, isInstanceOf, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * If the method on the passed object is not a function, the wrapper will not be applied.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  // explicitly casting to unknown because we don't know the type of the method initially at all\n  const original = source[name] as unknown;\n\n  if (typeof original !== 'function') {\n    return;\n  }\n\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  try {\n    source[name] = wrapped;\n  } catch {\n    DEBUG_BUILD && debug.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: object, name: string, value: unknown): void {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch {\n    DEBUG_BUILD && debug.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function getOriginalFunction<T extends Function>(func: WrappedFunction<T>): T | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(value: V):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  const firstKey = keys[0];\n\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n\n  if (firstKey.length >= maxLength) {\n    return truncate(firstKey, maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n *\n * @deprecated This function is no longer used by the SDK and will be removed in a future major version.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  // Early return for primitive values\n  if (inputValue === null || typeof inputValue !== 'object') {\n    return inputValue;\n  }\n\n  // Check memo map first for all object types\n  const memoVal = memoizationMap.get(inputValue);\n  if (memoVal !== undefined) {\n    return memoVal as T;\n  }\n\n  // handle arrays\n  if (Array.isArray(inputValue)) {\n    const returnValue: unknown[] = [];\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach(value => {\n      returnValue.push(_dropUndefinedKeys(value, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  if (isPojo(inputValue)) {\n    const returnValue: { [key: string]: unknown } = {};\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    const keys = Object.keys(inputValue);\n\n    keys.forEach(key => {\n      const val = inputValue[key];\n      if (val !== undefined) {\n        returnValue[key] = _dropUndefinedKeys(val, memoizationMap);\n      }\n    });\n\n    return returnValue as T;\n  }\n\n  // For other object types, return as is\n  return inputValue;\n}\n\nfunction isPojo(input: unknown): input is Record<string, unknown> {\n  // Plain objects have Object as constructor or no constructor\n  const constructor = (input as object).constructor;\n  return constructor === Object || constructor === undefined;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  ATTR_TELEMETRY_SDK_NAME,\n  ATTR_TELEMETRY_SDK_LANGUAGE,\n  TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS,\n  ATTR_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { ATTR_PROCESS_RUNTIME_NAME } from '../../semconv';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [ATTR_TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [ATTR_PROCESS_RUNTIME_NAME]: 'browser',\n  [ATTR_TELEMETRY_SDK_LANGUAGE]: TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS,\n  [ATTR_TELEMETRY_SDK_VERSION]: VERSION,\n};\n","import { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { debug } from '../utils/debug-logger';\nimport { getFramesFromEvent } from '../utils/stacktrace';\n\nconst INTEGRATION_NAME = 'Dedupe';\n\nconst _dedupeIntegration = (() => {\n  let previousEvent: Event | undefined;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          DEBUG_BUILD && debug.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch {} // eslint-disable-line no-empty\n\n      return (previousEvent = currentEvent);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Deduplication filter.\n */\nexport const dedupeIntegration = defineIntegration(_dedupeIntegration);\n\n/** only exported for tests. */\nexport function _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = getFramesFromEvent(currentEvent);\n  let previousFrames = getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i]!;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i]!;\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch {\n    return false;\n  }\n}\n\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception?.values?.[0];\n}\n","import type { Client } from '../client';\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getClient } from '../currentScopes';\nimport type { Scope } from '../scope';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { Span } from '../types-hoist/span';\nimport { baggageHeaderToDynamicSamplingContext, dynamicSamplingContextToSentryBaggageHeader } from '../utils/baggage';\nimport { extractOrgIdFromClient } from '../utils/dsn';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { addNonEnumerableProperty } from '../utils/object';\nimport { getRootSpan, spanIsSampled, spanToJSON } from '../utils/spanUtils';\nimport { getCapturedScopesOnSpan } from './utils';\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */\nconst FROZEN_DSC_FIELD = '_frozenDsc';\n\ntype SpanWithMaybeDsc = Span & {\n  [FROZEN_DSC_FIELD]?: Partial<DynamicSamplingContext> | undefined;\n};\n\n/**\n * Freeze the given DSC on the given span.\n */\nexport function freezeDscOnSpan(span: Span, dsc: Partial<DynamicSamplingContext>): void {\n  const spanWithMaybeDsc = span as SpanWithMaybeDsc;\n  addNonEnumerableProperty(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nexport function getDynamicSamplingContextFromClient(trace_id: string, client: Client): DynamicSamplingContext {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n\n  // Instead of conditionally adding non-undefined values, we add them and then remove them if needed\n  // otherwise, the order of baggage entries changes, which \"breaks\" a bunch of tests etc.\n  const dsc: DynamicSamplingContext = {\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    public_key,\n    trace_id,\n    org_id: extractOrgIdFromClient(client),\n  };\n\n  client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */\nexport function getDynamicSamplingContextFromScope(client: Client, scope: Scope): Partial<DynamicSamplingContext> {\n  const propagationContext = scope.getPropagationContext();\n  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nexport function getDynamicSamplingContextFromSpan(span: Span): Readonly<Partial<DynamicSamplingContext>> {\n  const client = getClient();\n  if (!client) {\n    return {};\n  }\n\n  const rootSpan = getRootSpan(span);\n  const rootSpanJson = spanToJSON(rootSpan);\n  const rootSpanAttributes = rootSpanJson.data;\n  const traceState = rootSpan.spanContext().traceState;\n\n  // The span sample rate that was locally applied to the root span should also always be applied to the DSC, even if the DSC is frozen.\n  // This is so that the downstream traces/services can use parentSampleRate in their `tracesSampler` to make consistent sampling decisions across the entire trace.\n  const rootSpanSampleRate =\n    traceState?.get('sentry.sample_rate') ??\n    rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ??\n    rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE];\n\n  function applyLocalSampleRateToDsc(dsc: Partial<DynamicSamplingContext>): Partial<DynamicSamplingContext> {\n    if (typeof rootSpanSampleRate === 'number' || typeof rootSpanSampleRate === 'string') {\n      dsc.sample_rate = `${rootSpanSampleRate}`;\n    }\n    return dsc;\n  }\n\n  // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n  const frozenDsc = (rootSpan as SpanWithMaybeDsc)[FROZEN_DSC_FIELD];\n  if (frozenDsc) {\n    return applyLocalSampleRateToDsc(frozenDsc);\n  }\n\n  // For OpenTelemetry, we freeze the DSC on the trace state\n  const traceStateDsc = traceState?.get('sentry.dsc');\n\n  // If the span has a DSC, we want it to take precedence\n  const dscOnTraceState = traceStateDsc && baggageHeaderToDynamicSamplingContext(traceStateDsc);\n\n  if (dscOnTraceState) {\n    return applyLocalSampleRateToDsc(dscOnTraceState);\n  }\n\n  // Else, we generate it from the span\n  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const source = rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  const name = rootSpanJson.description;\n  if (source !== 'url' && name) {\n    dsc.transaction = name;\n  }\n\n  // How can we even land here with hasSpansEnabled() returning false?\n  // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n  // So we end up with an active span that is not sampled (neither positively nor negatively)\n  if (hasSpansEnabled()) {\n    dsc.sampled = String(spanIsSampled(rootSpan));\n    dsc.sample_rand =\n      // In OTEL we store the sample rand on the trace state because we cannot access scopes for NonRecordingSpans\n      // The Sentry OTEL SpanSampler takes care of writing the sample rand on the root span\n      traceState?.get('sentry.sample_rand') ??\n      // On all other platforms we can actually get the scopes from a root span (we use this as a fallback)\n      getCapturedScopesOnSpan(rootSpan).scope?.getPropagationContext().sampleRand.toString();\n  }\n\n  applyLocalSampleRateToDsc(dsc);\n\n  client.emit('createDsc', dsc, rootSpan);\n\n  return dsc;\n}\n\n/**\n * Convert a Span to a baggage header.\n */\nexport function spanToBaggageHeader(span: Span): string | undefined {\n  const dsc = getDynamicSamplingContextFromSpan(span);\n  return dynamicSamplingContextToSentryBaggageHeader(dsc);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n\n/**\n * span key\n */\nconst SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return (context.getValue(SPAN_KEY) as Span) || undefined;\n}\n\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan(): Span | undefined {\n  return getSpan(ContextAPI.getInstance().active());\n}\n\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return context.setValue(SPAN_KEY, span);\n}\n\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context: Context): Context {\n  return context.deleteValue(SPAN_KEY);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(\n  context: Context,\n  spanContext: SpanContext\n): Context {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return getSpan(context)?.spanContext();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { TextMapPropagator } from './TextMapPropagator';\n\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nexport class NoopTextMapPropagator implements TextMapPropagator {\n  /** Noop inject function does nothing */\n  inject(_context: Context, _carrier: unknown): void {}\n  /** Noop extract function does nothing and returns the input context */\n  extract(context: Context, _carrier: unknown): Context {\n    return context;\n  }\n  fields(): string[] {\n    return [];\n  }\n}\n","import { getClient, getIsolationScope } from './currentScopes';\nimport type { Breadcrumb, BreadcrumbHint } from './types-hoist/breadcrumb';\nimport { consoleSandbox } from './utils/debug-logger';\nimport { dateTimestampInSeconds } from './utils/time';\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n  const client = getClient();\n  const isolationScope = getIsolationScope();\n\n  if (!client) return;\n\n  const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();\n\n  if (maxBreadcrumbs <= 0) return;\n\n  const timestamp = dateTimestampInSeconds();\n  const mergedBreadcrumb = { timestamp, ...breadcrumb };\n  const finalBreadcrumb = beforeBreadcrumb\n    ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n    : mergedBreadcrumb;\n\n  if (finalBreadcrumb === null) return;\n\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\n","import type { Client } from '../client';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { DsnComponents, DsnLike, DsnProtocol } from '../types-hoist/dsn';\nimport { consoleSandbox, debug } from './debug-logger';\n\n/** Regular expression used to extract org ID from a DSN host. */\nconst ORG_ID_REGEX = /^o(\\d+)\\./;\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      debug.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    debug.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    debug.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    debug.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Extract the org ID from a DSN host.\n *\n * @param host The host from a DSN\n * @returns The org ID if found, undefined otherwise\n */\nexport function extractOrgIdFromDsnHost(host: string): string | undefined {\n  const match = host.match(ORG_ID_REGEX);\n\n  return match?.[1];\n}\n\n/**\n *  Returns the organization ID of the client.\n *\n *  The organization ID is extracted from the DSN. If the client options include a `orgId`, this will always take precedence.\n */\nexport function extractOrgIdFromClient(client: Client): string | undefined {\n  const options = client.getOptions();\n\n  const { host } = client.getDsn() || {};\n\n  let org_id: string | undefined;\n\n  if (options.orgId) {\n    org_id = String(options.orgId);\n  } else if (host) {\n    org_id = extractOrgIdFromDsnHost(host);\n  }\n\n  return org_id;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n","import type { AsyncContextStack } from './asyncContext/stackStrategy';\nimport type { AsyncContextStrategy } from './asyncContext/types';\nimport type { Client } from './client';\nimport type { Scope } from './scope';\nimport type { SerializedLog } from './types-hoist/log';\nimport { SDK_VERSION } from './utils/version';\nimport { GLOBAL_OBJ } from './utils/worldwide';\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: VersionedCarrier;\n}\n\ntype VersionedCarrier = {\n  version?: string;\n} & Record<Exclude<string, 'version'>, SentryCarrier>;\n\nexport interface SentryCarrier {\n  acs?: AsyncContextStrategy;\n  stack?: AsyncContextStack;\n\n  globalScope?: Scope;\n  defaultIsolationScope?: Scope;\n  defaultCurrentScope?: Scope;\n  loggerSettings?: { enabled: boolean };\n  /**\n   * A map of Sentry clients to their log buffers.\n   * This is used to store logs that are sent to Sentry.\n   */\n  clientToLogBufferMap?: WeakMap<Client, Array<SerializedLog>>;\n\n  /** Overwrites TextEncoder used in `@sentry/core`, need for `react-native@0.73` and older */\n  encodePolyfill?: (input: string) => Uint8Array;\n  /** Overwrites TextDecoder used in `@sentry/core`, need for `react-native@0.73` and older */\n  decodePolyfill?: (input: Uint8Array) => string;\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  // This ensures a Sentry carrier exists\n  getSentryCarrier(GLOBAL_OBJ);\n  return GLOBAL_OBJ;\n}\n\n/** Will either get the existing sentry carrier, or create a new one. */\nexport function getSentryCarrier(carrier: Carrier): SentryCarrier {\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n\n  // For now: First SDK that sets the .version property wins\n  __SENTRY__.version = __SENTRY__.version || SDK_VERSION;\n\n  // Intentionally populating and returning the version of \"this\" SDK instance\n  // rather than what's set in .version so that \"this\" SDK always gets its carrier\n  return (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<Prop extends keyof SentryCarrier>(\n  name: Prop,\n  creator: () => NonNullable<SentryCarrier[Prop]>,\n  obj = GLOBAL_OBJ,\n): NonNullable<SentryCarrier[Prop]> {\n  const __SENTRY__ = (obj.__SENTRY__ = obj.__SENTRY__ || {});\n  const carrier = (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n  // Note: We do not want to set `carrier.version` here, as this may be called before any `init` is called, e.g. for the default scopes\n  return carrier[name] || (carrier[name] = creator());\n}\n","import { getGlobalSingleton } from '../carrier';\nimport type { Client } from '../client';\nimport { _getTraceInfoFromScope } from '../client';\nimport { getClient, getCurrentScope, getGlobalScope, getIsolationScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Scope, ScopeData } from '../scope';\nimport type { Log, SerializedLog, SerializedLogAttributeValue } from '../types-hoist/log';\nimport { mergeScopeData } from '../utils/applyScopeDataToEvent';\nimport { consoleSandbox, debug } from '../utils/debug-logger';\nimport { isParameterizedString } from '../utils/is';\nimport { _getSpanForScope } from '../utils/spanOnScope';\nimport { timestampInSeconds } from '../utils/time';\nimport { SEVERITY_TEXT_TO_SEVERITY_NUMBER } from './constants';\nimport { createLogEnvelope } from './envelope';\n\nconst MAX_LOG_BUFFER_SIZE = 100;\n\n/**\n * Converts a log attribute to a serialized log attribute.\n *\n * @param key - The key of the log attribute.\n * @param value - The value of the log attribute.\n * @returns The serialized log attribute.\n */\nexport function logAttributeToSerializedLogAttribute(value: unknown): SerializedLogAttributeValue {\n  switch (typeof value) {\n    case 'number':\n      if (Number.isInteger(value)) {\n        return {\n          value,\n          type: 'integer',\n        };\n      }\n      return {\n        value,\n        type: 'double',\n      };\n    case 'boolean':\n      return {\n        value,\n        type: 'boolean',\n      };\n    case 'string':\n      return {\n        value,\n        type: 'string',\n      };\n    default: {\n      let stringValue = '';\n      try {\n        stringValue = JSON.stringify(value) ?? '';\n      } catch {\n        // Do nothing\n      }\n      return {\n        value: stringValue,\n        type: 'string',\n      };\n    }\n  }\n}\n\n/**\n * Sets a log attribute if the value exists and the attribute key is not already present.\n *\n * @param logAttributes - The log attributes object to modify.\n * @param key - The attribute key to set.\n * @param value - The value to set (only sets if truthy and key not present).\n * @param setEvenIfPresent - Whether to set the attribute if it is present. Defaults to true.\n */\nfunction setLogAttribute(\n  logAttributes: Record<string, unknown>,\n  key: string,\n  value: unknown,\n  setEvenIfPresent = true,\n): void {\n  if (value && (!logAttributes[key] || setEvenIfPresent)) {\n    logAttributes[key] = value;\n  }\n}\n\n/**\n * Captures a serialized log event and adds it to the log buffer for the given client.\n *\n * @param client - A client. Uses the current client if not provided.\n * @param serializedLog - The serialized log event to capture.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureSerializedLog(client: Client, serializedLog: SerializedLog): void {\n  const bufferMap = _getBufferMap();\n\n  const logBuffer = _INTERNAL_getLogBuffer(client);\n  if (logBuffer === undefined) {\n    bufferMap.set(client, [serializedLog]);\n  } else {\n    bufferMap.set(client, [...logBuffer, serializedLog]);\n    if (logBuffer.length >= MAX_LOG_BUFFER_SIZE) {\n      _INTERNAL_flushLogsBuffer(client, logBuffer);\n    }\n  }\n}\n\n/**\n * Captures a log event and sends it to Sentry.\n *\n * @param log - The log event to capture.\n * @param scope - A scope. Uses the current scope if not provided.\n * @param client - A client. Uses the current client if not provided.\n * @param captureSerializedLog - A function to capture the serialized log.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_captureLog(\n  beforeLog: Log,\n  client: Client | undefined = getClient(),\n  currentScope = getCurrentScope(),\n  captureSerializedLog: (client: Client, log: SerializedLog) => void = _INTERNAL_captureSerializedLog,\n): void {\n  if (!client) {\n    DEBUG_BUILD && debug.warn('No client available to capture log.');\n    return;\n  }\n\n  const { release, environment, enableLogs = false, beforeSendLog } = client.getOptions();\n  if (!enableLogs) {\n    DEBUG_BUILD && debug.warn('logging option not enabled, log will not be captured.');\n    return;\n  }\n\n  const [, traceContext] = _getTraceInfoFromScope(client, currentScope);\n\n  const processedLogAttributes = {\n    ...beforeLog.attributes,\n  };\n\n  const {\n    user: { id, email, username },\n  } = getMergedScopeData(currentScope);\n  setLogAttribute(processedLogAttributes, 'user.id', id, false);\n  setLogAttribute(processedLogAttributes, 'user.email', email, false);\n  setLogAttribute(processedLogAttributes, 'user.name', username, false);\n\n  setLogAttribute(processedLogAttributes, 'sentry.release', release);\n  setLogAttribute(processedLogAttributes, 'sentry.environment', environment);\n\n  const { name, version } = client.getSdkMetadata()?.sdk ?? {};\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.name', name);\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.version', version);\n\n  const beforeLogMessage = beforeLog.message;\n  if (isParameterizedString(beforeLogMessage)) {\n    const { __sentry_template_string__, __sentry_template_values__ = [] } = beforeLogMessage;\n    if (__sentry_template_values__?.length) {\n      processedLogAttributes['sentry.message.template'] = __sentry_template_string__;\n    }\n    __sentry_template_values__.forEach((param, index) => {\n      processedLogAttributes[`sentry.message.parameter.${index}`] = param;\n    });\n  }\n\n  const span = _getSpanForScope(currentScope);\n  // Add the parent span ID to the log attributes for trace context\n  setLogAttribute(processedLogAttributes, 'sentry.trace.parent_span_id', span?.spanContext().spanId);\n\n  const processedLog = { ...beforeLog, attributes: processedLogAttributes };\n\n  client.emit('beforeCaptureLog', processedLog);\n\n  // We need to wrap this in `consoleSandbox` to avoid recursive calls to `beforeSendLog`\n  const log = beforeSendLog ? consoleSandbox(() => beforeSendLog(processedLog)) : processedLog;\n  if (!log) {\n    client.recordDroppedEvent('before_send', 'log_item', 1);\n    DEBUG_BUILD && debug.warn('beforeSendLog returned null, log will not be captured.');\n    return;\n  }\n\n  const { level, message, attributes = {}, severityNumber } = log;\n\n  const serializedLog: SerializedLog = {\n    timestamp: timestampInSeconds(),\n    level,\n    body: message,\n    trace_id: traceContext?.trace_id,\n    severity_number: severityNumber ?? SEVERITY_TEXT_TO_SEVERITY_NUMBER[level],\n    attributes: Object.keys(attributes).reduce(\n      (acc, key) => {\n        acc[key] = logAttributeToSerializedLogAttribute(attributes[key]);\n        return acc;\n      },\n      {} as Record<string, SerializedLogAttributeValue>,\n    ),\n  };\n\n  captureSerializedLog(client, serializedLog);\n\n  client.emit('afterCaptureLog', log);\n}\n\n/**\n * Flushes the logs buffer to Sentry.\n *\n * @param client - A client.\n * @param maybeLogBuffer - A log buffer. Uses the log buffer for the given client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nexport function _INTERNAL_flushLogsBuffer(client: Client, maybeLogBuffer?: Array<SerializedLog>): void {\n  const logBuffer = maybeLogBuffer ?? _INTERNAL_getLogBuffer(client) ?? [];\n  if (logBuffer.length === 0) {\n    return;\n  }\n\n  const clientOptions = client.getOptions();\n  const envelope = createLogEnvelope(logBuffer, clientOptions._metadata, clientOptions.tunnel, client.getDsn());\n\n  // Clear the log buffer after envelopes have been constructed.\n  _getBufferMap().set(client, []);\n\n  client.emit('flushLogs');\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\n/**\n * Returns the log buffer for a given client.\n *\n * Exported for testing purposes.\n *\n * @param client - The client to get the log buffer for.\n * @returns The log buffer for the given client.\n */\nexport function _INTERNAL_getLogBuffer(client: Client): Array<SerializedLog> | undefined {\n  return _getBufferMap().get(client);\n}\n\n/**\n * Get the scope data for the current scope after merging with the\n * global scope and isolation scope.\n *\n * @param currentScope - The current scope.\n * @returns The scope data.\n */\nfunction getMergedScopeData(currentScope: Scope): ScopeData {\n  const scopeData = getGlobalScope().getScopeData();\n  mergeScopeData(scopeData, getIsolationScope().getScopeData());\n  mergeScopeData(scopeData, currentScope.getScopeData());\n  return scopeData;\n}\n\nfunction _getBufferMap(): WeakMap<Client, Array<SerializedLog>> {\n  // The reference to the Client <> LogBuffer map is stored on the carrier to ensure it's always the same\n  return getGlobalSingleton('clientToLogBufferMap', () => new WeakMap<Client, Array<SerializedLog>>());\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport { addGlobalErrorInstrumentationHandler } from '../instrument/globalError';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from '../instrument/globalUnhandledRejection';\nimport { debug } from '../utils/debug-logger';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\n\nlet errorsInstrumented = false;\n\n/**  Only exposed for testing */\nexport function _resetErrorsInstrumented(): void {\n  errorsInstrumented = false;\n}\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nexport function registerSpanErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  /**\n   * If an error or unhandled promise occurs, we mark the active root span as failed\n   */\n  function errorCallback(): void {\n    const activeSpan = getActiveSpan();\n    const rootSpan = activeSpan && getRootSpan(activeSpan);\n    if (rootSpan) {\n      const message = 'internal_error';\n      DEBUG_BUILD && debug.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n      rootSpan.setStatus({ code: SPAN_STATUS_ERROR, message });\n    }\n  }\n\n  // The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n  // node.js default exit behaviour\n  errorCallback.tag = 'sentry_tracingErrorCallback';\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n","import { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { RequestEventData } from '../types-hoist/request';\nimport { parseCookie } from '../utils/cookie';\nimport { getClientIPAddress, ipHeaderNames } from '../vendor/getIpAddress';\n\ninterface RequestDataIncludeOptions {\n  cookies?: boolean;\n  data?: boolean;\n  headers?: boolean;\n  ip?: boolean;\n  query_string?: boolean;\n  url?: boolean;\n}\n\ntype RequestDataIntegrationOptions = {\n  /**\n   * Controls what data is pulled from the request and added to the event.\n   */\n  include?: RequestDataIncludeOptions;\n};\n\n// TODO(v11): Change defaults based on `sendDefaultPii`\nconst DEFAULT_INCLUDE: RequestDataIncludeOptions = {\n  cookies: true,\n  data: true,\n  headers: true,\n  query_string: true,\n  url: true,\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options: RequestDataIntegrationOptions = {}) => {\n  const include = {\n    ...DEFAULT_INCLUDE,\n    ...options.include,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const { sdkProcessingMetadata = {} } = event;\n      const { normalizedRequest, ipAddress } = sdkProcessingMetadata;\n\n      const includeWithDefaultPiiApplied: RequestDataIncludeOptions = {\n        ...include,\n        ip: include.ip ?? client.getOptions().sendDefaultPii,\n      };\n\n      if (normalizedRequest) {\n        addNormalizedRequestDataToEvent(event, normalizedRequest, { ipAddress }, includeWithDefaultPiiApplied);\n      }\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nexport const requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(\n  event: Event,\n  req: RequestEventData,\n  // Data that should not go into `event.request` but is somehow related to requests\n  additionalData: { ipAddress?: string },\n  include: RequestDataIncludeOptions,\n): void {\n  event.request = {\n    ...event.request,\n    ...extractNormalizedRequestData(req, include),\n  };\n\n  if (include.ip) {\n    const ip = (req.headers && getClientIPAddress(req.headers)) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n}\n\nfunction extractNormalizedRequestData(\n  normalizedRequest: RequestEventData,\n  include: RequestDataIncludeOptions,\n): RequestEventData {\n  const requestData: RequestEventData = {};\n  const headers = { ...normalizedRequest.headers };\n\n  if (include.headers) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.cookies) {\n      delete (headers as { cookie?: string }).cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.ip) {\n      ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete (headers as Record<string, unknown>)[ipHeaderName];\n      });\n    }\n  }\n\n  requestData.method = normalizedRequest.method;\n\n  if (include.url) {\n    requestData.url = normalizedRequest.url;\n  }\n\n  if (include.cookies) {\n    const cookies = normalizedRequest.cookies || (headers?.cookie ? parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n\n  if (include.query_string) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n\n  if (include.data) {\n    requestData.data = normalizedRequest.data;\n  }\n\n  return requestData;\n}\n","type DebouncedCallback = {\n  (): void | unknown;\n  flush: () => void | unknown;\n  cancel: () => void;\n};\ntype CallbackFunction = () => unknown;\ntype DebounceOptions = {\n  /** The max. time in ms to wait for the callback to be invoked. */\n  maxWait?: number;\n  /** This can be overwritten to use a different setTimeout implementation, e.g. to avoid triggering change detection in Angular  */\n  setTimeoutImpl?: typeof setTimeout;\n};\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nexport function debounce(func: CallbackFunction, wait: number, options?: DebounceOptions): DebouncedCallback {\n  let callbackReturnValue: unknown;\n\n  let timerId: ReturnType<typeof setTimeout> | undefined;\n  let maxTimerId: ReturnType<typeof setTimeout> | undefined;\n\n  const maxWait = options?.maxWait ? Math.max(options.maxWait, wait) : 0;\n  const setTimeoutImpl = options?.setTimeoutImpl || setTimeout;\n\n  function invokeFunc(): unknown {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers(): void {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush(): unknown {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced(): unknown {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeoutImpl(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeoutImpl(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n","import type { Primitive } from '../types-hoist/misc';\nimport { isSyntheticEvent, isVueViewModel } from './is';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor?: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\ntype MemoFunc = [\n  // memoize\n  (obj: object) => boolean,\n  // unmemoize\n  (obj: object) => void,\n];\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    ['boolean', 'string'].includes(typeof value) ||\n    (typeof value === 'number' && Number.isFinite(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && !Number.isFinite(value)) {\n      return `[${value}]`;\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype?.constructor ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrlToBase(url: string, basePath: string): string {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n\n/**\n * Helper to decycle json objects\n */\nfunction memoBuilder(): MemoFunc {\n  const inner = new WeakSet<object>();\n  function memoize(obj: object): boolean {\n    if (inner.has(obj)) {\n      return true;\n    }\n    inner.add(obj);\n    return false;\n  }\n\n  function unmemoize(obj: object): void {\n    inner.delete(obj);\n  }\n  return [memoize, unmemoize];\n}\n","import { getAsyncContextStrategy } from '../asyncContext';\nimport { getMainCarrier } from '../carrier';\nimport type { Client } from '../client';\nimport { getClient, getCurrentScope } from '../currentScopes';\nimport { isEnabled } from '../exports';\nimport type { Scope } from '../scope';\nimport { getDynamicSamplingContextFromScope, getDynamicSamplingContextFromSpan } from '../tracing';\nimport type { Span } from '../types-hoist/span';\nimport type { SerializedTraceData } from '../types-hoist/tracing';\nimport { dynamicSamplingContextToSentryBaggageHeader } from './baggage';\nimport { debug } from './debug-logger';\nimport { getActiveSpan, spanToTraceHeader } from './spanUtils';\nimport { extractTraceparentData, generateSentryTraceHeader, TRACEPARENT_REGEXP } from './tracing';\n\n/**\n * Extracts trace propagation data from the current span or from the client's scope (via transaction or propagation\n * context) and serializes it to `sentry-trace` and `baggage` values. These values can be used to propagate\n * a trace via our tracing Http headers or Html `<meta>` tags.\n *\n * This function also applies some validation to the generated sentry-trace and baggage values to ensure that\n * only valid strings are returned.\n *\n * If (@param options.propagateTraceparent) is `true`, the function will also generate a `traceparent` value,\n * following the W3C traceparent header format.\n *\n * @returns an object with the tracing data values. The object keys are the name of the tracing key to be used as header\n * or meta tag name.\n */\nexport function getTraceData(\n  options: { span?: Span; scope?: Scope; client?: Client; propagateTraceparent?: boolean } = {},\n): SerializedTraceData {\n  const client = options.client || getClient();\n  if (!isEnabled() || !client) {\n    return {};\n  }\n\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.getTraceData) {\n    return acs.getTraceData(options);\n  }\n\n  const scope = options.scope || getCurrentScope();\n  const span = options.span || getActiveSpan();\n  const sentryTrace = span ? spanToTraceHeader(span) : scopeToTraceHeader(scope);\n  const dsc = span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromScope(client, scope);\n  const baggage = dynamicSamplingContextToSentryBaggageHeader(dsc);\n\n  const isValidSentryTraceHeader = TRACEPARENT_REGEXP.test(sentryTrace);\n  if (!isValidSentryTraceHeader) {\n    debug.warn('Invalid sentry-trace data. Cannot generate trace data');\n    return {};\n  }\n\n  const traceData: SerializedTraceData = {\n    'sentry-trace': sentryTrace,\n    baggage,\n  };\n\n  if (options.propagateTraceparent) {\n    const traceparent = _sentryTraceToTraceParentHeader(sentryTrace);\n    if (traceparent) {\n      traceData.traceparent = traceparent;\n    }\n  }\n\n  return traceData;\n}\n\n/**\n * Get a sentry-trace header value for the given scope.\n */\nfunction scopeToTraceHeader(scope: Scope): string {\n  const { traceId, sampled, propagationSpanId } = scope.getPropagationContext();\n  return generateSentryTraceHeader(traceId, propagationSpanId, sampled);\n}\n\n/**\n * Builds a W3C traceparent header from the given sentry-trace header.\n *\n * Why parse that header and not create traceparent from primitives?\n * We want these two headers to always have the same ids. The easiest way to do this is to take\n * one of them as the source of truth (sentry-trace) and derive the other from it.\n *\n * Most importantly, this guarantees parentSpanId consistency between sentry-trace and traceparent\n * in tracing without performance (TwP) mode, where we always generate a random parentSpanId.\n *\n * Exported for testing\n */\nexport function _sentryTraceToTraceParentHeader(sentryTrace: string): string | undefined {\n  const { traceId, parentSpanId, parentSampled } = extractTraceparentData(sentryTrace) || {};\n  if (!traceId || !parentSpanId) {\n    return undefined;\n  }\n  return `00-${traceId}-${parentSpanId}-${parentSampled ? '01' : '00'}`;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopTracer } from './NoopTracer';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\nimport { TracerProvider } from './tracer_provider';\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nexport class NoopTracerProvider implements TracerProvider {\n  getTracer(\n    _name?: string,\n    _version?: string,\n    _options?: TracerOptions\n  ): Tracer {\n    return new NoopTracer();\n  }\n}\n","import { addBreadcrumb } from '../breadcrumbs';\nimport { getClient } from '../currentScopes';\nimport { addConsoleInstrumentationHandler } from '../instrument/console';\nimport { defineIntegration } from '../integration';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { CONSOLE_LEVELS } from '../utils/debug-logger';\nimport { severityLevelFromString } from '../utils/severity';\nimport { safeJoin } from '../utils/string';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\n\ninterface ConsoleIntegrationOptions {\n  levels: ConsoleLevel[];\n}\n\ntype GlobalObjectWithUtil = typeof GLOBAL_OBJ & {\n  util: {\n    format: (...args: unknown[]) => string;\n  };\n};\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Captures calls to the `console` API as breadcrumbs in Sentry.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```js\n * Sentry.init({\n *   integrations: [Sentry.consoleIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nexport const consoleIntegration = defineIntegration((options: Partial<ConsoleIntegrationOptions> = {}) => {\n  const levels = new Set(options.levels || CONSOLE_LEVELS);\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.has(level)) {\n          return;\n        }\n\n        addConsoleBreadcrumb(level, args);\n      });\n    },\n  };\n});\n\n/**\n * Capture a console breadcrumb.\n *\n * Exported just for tests.\n */\nexport function addConsoleBreadcrumb(level: ConsoleLevel, args: unknown[]): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(level),\n    message: formatConsoleArgs(args),\n  };\n\n  if (level === 'assert') {\n    if (args[0] === false) {\n      const assertionArgs = args.slice(1);\n      breadcrumb.message =\n        assertionArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(assertionArgs)}` : 'Assertion failed';\n      breadcrumb.data.arguments = assertionArgs;\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  addBreadcrumb(breadcrumb, {\n    input: args,\n    level,\n  });\n}\n\nfunction formatConsoleArgs(values: unknown[]): string {\n  return 'util' in GLOBAL_OBJ && typeof (GLOBAL_OBJ as GlobalObjectWithUtil).util.format === 'function'\n    ? (GLOBAL_OBJ as GlobalObjectWithUtil).util.format(...values)\n    : safeJoin(values, ' ');\n}\n","import { getAsyncContextStrategy } from '../asyncContext';\nimport { getMainCarrier } from '../carrier';\nimport { getCurrentScope } from '../currentScopes';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { SentrySpan } from '../tracing/sentrySpan';\nimport { SPAN_STATUS_OK, SPAN_STATUS_UNSET } from '../tracing/spanstatus';\nimport { getCapturedScopesOnSpan } from '../tracing/utils';\nimport type { TraceContext } from '../types-hoist/context';\nimport type { SpanLink, SpanLinkJSON } from '../types-hoist/link';\nimport type { Span, SpanAttributes, SpanJSON, SpanOrigin, SpanTimeInput } from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport { addNonEnumerableProperty } from '../utils/object';\nimport { generateSpanId } from '../utils/propagationContext';\nimport { timestampInSeconds } from '../utils/time';\nimport { generateSentryTraceHeader } from '../utils/tracing';\nimport { consoleSandbox } from './debug-logger';\nimport { _getSpanForScope } from './spanOnScope';\n\n// These are aligned with OpenTelemetry trace flags\nexport const TRACE_FLAG_NONE = 0x0;\nexport const TRACE_FLAG_SAMPLED = 0x1;\n\nlet hasShownSpanDropWarning = false;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */\nexport function spanToTransactionTraceContext(span: Span): TraceContext {\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n  const { data, op, parent_span_id, status, origin, links } = spanToJSON(span);\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data,\n    op,\n    status,\n    origin,\n    links,\n  };\n}\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */\nexport function spanToTraceContext(span: Span): TraceContext {\n  const { spanId, traceId: trace_id, isRemote } = span.spanContext();\n\n  // If the span is remote, we use a random/virtual span as span_id to the trace context,\n  // and the remote span as parent_span_id\n  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n  const scope = getCapturedScopesOnSpan(span).scope;\n\n  const span_id = isRemote ? scope?.getPropagationContext().propagationSpanId || generateSpanId() : spanId;\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n  };\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nexport function spanToTraceHeader(span: Span): string {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n *  Converts the span links array to a flattened version to be sent within an envelope.\n *\n *  If the links array is empty, it returns `undefined` so the empty value can be dropped before it's sent.\n */\nexport function convertSpanLinksForEnvelope(links?: SpanLink[]): SpanLinkJSON[] | undefined {\n  if (links && links.length > 0) {\n    return links.map(({ context: { spanId, traceId, traceFlags, ...restContext }, attributes }) => ({\n      span_id: spanId,\n      trace_id: traceId,\n      sampled: traceFlags === TRACE_FLAG_SAMPLED,\n      attributes,\n      ...restContext,\n    }));\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Convert a span time input into a timestamp in seconds.\n */\nexport function spanTimeInputToSeconds(input: SpanTimeInput | undefined): number {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n\n  return timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp: number): number {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n */\n// Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nexport function spanToJSON(span: Span): SpanJSON {\n  if (spanIsSentrySpan(span)) {\n    return span.getSpanJSON();\n  }\n\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n\n  // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n  if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n    const { attributes, startTime, name, endTime, status, links } = span;\n\n    // In preparation for the next major of OpenTelemetry, we want to support\n    // looking up the parent span id according to the new API\n    // In OTel v1, the parent span id is accessed as `parentSpanId`\n    // In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n    const parentSpanId =\n      'parentSpanId' in span\n        ? span.parentSpanId\n        : 'parentSpanContext' in span\n          ? (span.parentSpanContext as { spanId?: string } | undefined)?.spanId\n          : undefined;\n\n    return {\n      span_id,\n      trace_id,\n      data: attributes,\n      description: name,\n      parent_span_id: parentSpanId,\n      start_timestamp: spanTimeInputToSeconds(startTime),\n      // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n      timestamp: spanTimeInputToSeconds(endTime) || undefined,\n      status: getStatusMessage(status),\n      op: attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      origin: attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined,\n      links: convertSpanLinksForEnvelope(links),\n    };\n  }\n\n  // Finally, at least we have `spanContext()`....\n  // This should not actually happen in reality, but we need to handle it for type safety.\n  return {\n    span_id,\n    trace_id,\n    start_timestamp: 0,\n    data: {},\n  };\n}\n\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span: Span): span is OpenTelemetrySdkTraceBaseSpan {\n  const castSpan = span as Partial<OpenTelemetrySdkTraceBaseSpan>;\n  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n\n/** Exported only for tests. */\nexport interface OpenTelemetrySdkTraceBaseSpan extends Span {\n  attributes: SpanAttributes;\n  startTime: SpanTimeInput;\n  name: string;\n  status: SpanStatus;\n  endTime: SpanTimeInput;\n  parentSpanId?: string;\n  links?: SpanLink[];\n}\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSentrySpan(span: Span): span is SentrySpan {\n  return typeof (span as SentrySpan).getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nexport function spanIsSampled(span: Span): boolean {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const { traceFlags } = span.spanContext();\n  return traceFlags === TRACE_FLAG_SAMPLED;\n}\n\n/** Get the status message to use for a JSON representation of a span. */\nexport function getStatusMessage(status: SpanStatus | undefined): string | undefined {\n  if (!status || status.code === SPAN_STATUS_UNSET) {\n    return undefined;\n  }\n\n  if (status.code === SPAN_STATUS_OK) {\n    return 'ok';\n  }\n\n  return status.message || 'unknown_error';\n}\n\nconst CHILD_SPANS_FIELD = '_sentryChildSpans';\nconst ROOT_SPAN_FIELD = '_sentryRootSpan';\n\ntype SpanWithPotentialChildren = Span & {\n  [CHILD_SPANS_FIELD]?: Set<Span>;\n  [ROOT_SPAN_FIELD]?: Span;\n};\n\n/**\n * Adds an opaque child span reference to a span.\n */\nexport function addChildSpanToSpan(span: SpanWithPotentialChildren, childSpan: Span): void {\n  // We store the root span reference on the child span\n  // We need this for `getRootSpan()` to work\n  const rootSpan = span[ROOT_SPAN_FIELD] || span;\n  addNonEnumerableProperty(childSpan as SpanWithPotentialChildren, ROOT_SPAN_FIELD, rootSpan);\n\n  // We store a list of child spans on the parent span\n  // We need this for `getSpanDescendants()` to work\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].add(childSpan);\n  } else {\n    addNonEnumerableProperty(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n  }\n}\n\n/** This is only used internally by Idle Spans. */\nexport function removeChildSpanFromSpan(span: SpanWithPotentialChildren, childSpan: Span): void {\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].delete(childSpan);\n  }\n}\n\n/**\n * Returns an array of the given span and all of its descendants.\n */\nexport function getSpanDescendants(span: SpanWithPotentialChildren): Span[] {\n  const resultSet = new Set<Span>();\n\n  function addSpanChildren(span: SpanWithPotentialChildren): void {\n    // This exit condition is required to not infinitely loop in case of a circular dependency.\n    if (resultSet.has(span)) {\n      return;\n      // We want to ignore unsampled spans (e.g. non recording spans)\n    } else if (spanIsSampled(span)) {\n      resultSet.add(span);\n      const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n      for (const childSpan of childSpans) {\n        addSpanChildren(childSpan);\n      }\n    }\n  }\n\n  addSpanChildren(span);\n\n  return Array.from(resultSet);\n}\n\n/**\n * Returns the root span of a given span.\n */\nexport function getRootSpan(span: SpanWithPotentialChildren): Span {\n  return span[ROOT_SPAN_FIELD] || span;\n}\n\n/**\n * Returns the currently active span.\n */\nexport function getActiveSpan(): Span | undefined {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.getActiveSpan) {\n    return acs.getActiveSpan();\n  }\n\n  return _getSpanForScope(getCurrentScope());\n}\n\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n */\nexport function showSpanDropWarning(): void {\n  if (!hasShownSpanDropWarning) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] Returning null from `beforeSendSpan` is disallowed. To drop certain spans, configure the respective integrations directly.',\n      );\n    });\n    hasShownSpanDropWarning = true;\n  }\n}\n\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */\nexport function updateSpanName(span: Span, name: string): void {\n  span.updateName(name);\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n    [SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name,\n  });\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanAttributes } from './attributes';\nimport { TraceState } from './trace_state';\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n","import type { Carrier } from './../carrier';\nimport { getMainCarrier, getSentryCarrier } from './../carrier';\nimport { getStackAsyncContextStrategy } from './stackStrategy';\nimport type { AsyncContextStrategy } from './types';\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n  sentry.acs = strategy;\n}\n\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */\nexport function getAsyncContextStrategy(carrier: Carrier): AsyncContextStrategy {\n  const sentry = getSentryCarrier(carrier);\n\n  if (sentry.acs) {\n    return sentry.acs;\n  }\n\n  // Otherwise, use the default one (stack)\n  return getStackAsyncContextStrategy();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { Context } from '../context/types';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { isSpanContextValid } from './spancontext-utils';\nimport { SpanOptions } from './SpanOptions';\nimport { SpanContext } from './span_context';\nimport { Tracer } from './tracer';\n\nconst contextApi = ContextAPI.getInstance();\n\n/**\n * No-op implementations of {@link Tracer}.\n */\nexport class NoopTracer implements Tracer {\n  // startSpan starts a noop span.\n  startSpan(\n    name: string,\n    options?: SpanOptions,\n    context = contextApi.active()\n  ): Span {\n    const root = Boolean(options?.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    const parentFromContext = context && getSpanContext(context);\n\n    if (\n      isSpanContext(parentFromContext) &&\n      isSpanContextValid(parentFromContext)\n    ) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  }\n\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    ctx: Context | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | SpanOptions,\n    arg3?: F | Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: SpanOptions | undefined;\n    let ctx: Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as SpanOptions | undefined;\n      ctx = arg3 as Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? contextApi.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = setSpan(parentContext, span);\n\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  }\n}\n\nfunction isSpanContext(spanContext: any): spanContext is SpanContext {\n  return (\n    typeof spanContext === 'object' &&\n    typeof spanContext['spanId'] === 'string' &&\n    typeof spanContext['traceId'] === 'string' &&\n    typeof spanContext['traceFlags'] === 'number'\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { NoopTracer } from './NoopTracer';\nimport { Span } from './span';\nimport { SpanOptions } from './SpanOptions';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER = new NoopTracer();\n\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nexport class ProxyTracer implements Tracer {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Tracer;\n\n  constructor(\n    private _provider: TracerDelegator,\n    public readonly name: string,\n    public readonly version?: string,\n    public readonly options?: TracerOptions\n  ) {}\n\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    return this._getTracer().startSpan(name, options, context);\n  }\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    _name: string,\n    _options: F | SpanOptions,\n    _context?: F | Context,\n    _fn?: F\n  ): ReturnType<F> {\n    const tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  }\n\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  private _getTracer() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    const tracer = this._provider.getDelegateTracer(\n      this.name,\n      this.version,\n      this.options\n    );\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  }\n}\n\nexport interface TracerDelegator {\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n\n/**\n * The name of the runtime of this process.\n *\n * @example OpenJDK Runtime Environment\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_PROCESS_RUNTIME_NAME = 'process.runtime.name' as const;\n","// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0] || '';\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2] || '';\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\n","/* eslint-disable max-lines */\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { getCurrentScope, getIsolationScope, getTraceContextFromScope, withScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport type { IntegrationIndex } from './integration';\nimport { afterSetupIntegrations, setupIntegration, setupIntegrations } from './integration';\nimport type { Scope } from './scope';\nimport { updateSession } from './session';\nimport {\n  getDynamicSamplingContextFromScope,\n  getDynamicSamplingContextFromSpan,\n} from './tracing/dynamicSamplingContext';\nimport type { Breadcrumb, BreadcrumbHint, FetchBreadcrumbHint, XhrBreadcrumbHint } from './types-hoist/breadcrumb';\nimport type { CheckIn, MonitorConfig } from './types-hoist/checkin';\nimport type { EventDropReason, Outcome } from './types-hoist/clientreport';\nimport type { TraceContext } from './types-hoist/context';\nimport type { DataCategory } from './types-hoist/datacategory';\nimport type { DsnComponents } from './types-hoist/dsn';\nimport type { DynamicSamplingContext, Envelope } from './types-hoist/envelope';\nimport type { ErrorEvent, Event, EventHint, TransactionEvent } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { FeedbackEvent } from './types-hoist/feedback';\nimport type { Integration } from './types-hoist/integration';\nimport type { Log } from './types-hoist/log';\nimport type { ClientOptions } from './types-hoist/options';\nimport type { ParameterizedString } from './types-hoist/parameterize';\nimport type { SdkMetadata } from './types-hoist/sdkmetadata';\nimport type { Session, SessionAggregates } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { Span, SpanAttributes, SpanContextData, SpanJSON } from './types-hoist/span';\nimport type { StartSpanOptions } from './types-hoist/startSpanOptions';\nimport type { Transport, TransportMakeRequestResponse } from './types-hoist/transport';\nimport { createClientReportEnvelope } from './utils/clientreport';\nimport { debug } from './utils/debug-logger';\nimport { dsnToString, makeDsn } from './utils/dsn';\nimport { addItemToEnvelope, createAttachmentEnvelopeItem } from './utils/envelope';\nimport { getPossibleEventMessages } from './utils/eventUtils';\nimport { isParameterizedString, isPlainObject, isPrimitive, isThenable } from './utils/is';\nimport { merge } from './utils/merge';\nimport { checkOrSetAlreadyCaught, uuid4 } from './utils/misc';\nimport { parseSampleRate } from './utils/parseSampleRate';\nimport { prepareEvent } from './utils/prepareEvent';\nimport { reparentChildSpans, shouldIgnoreSpan } from './utils/should-ignore-span';\nimport { getActiveSpan, showSpanDropWarning, spanToTraceContext } from './utils/spanUtils';\nimport { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './utils/syncpromise';\nimport { convertSpanJsonToTransactionEvent, convertTransactionEventToSpanJson } from './utils/transactionEvent';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\nconst MISSING_RELEASE_FOR_SESSION_ERROR = 'Discarded session because of missing or non-string release';\n\nconst INTERNAL_ERROR_SYMBOL = Symbol.for('SentryInternalError');\nconst DO_NOT_SEND_EVENT_SYMBOL = Symbol.for('SentryDoNotSendEventError');\n\ninterface InternalError {\n  message: string;\n  [INTERNAL_ERROR_SYMBOL]: true;\n}\n\ninterface DoNotSendEventError {\n  message: string;\n  [DO_NOT_SEND_EVENT_SYMBOL]: true;\n}\n\nfunction _makeInternalError(message: string): InternalError {\n  return {\n    message,\n    [INTERNAL_ERROR_SYMBOL]: true,\n  };\n}\n\nfunction _makeDoNotSendEventError(message: string): DoNotSendEventError {\n  return {\n    message,\n    [DO_NOT_SEND_EVENT_SYMBOL]: true,\n  };\n}\n\nfunction _isInternalError(error: unknown): error is InternalError {\n  return !!error && typeof error === 'object' && INTERNAL_ERROR_SYMBOL in error;\n}\n\nfunction _isDoNotSendEventError(error: unknown): error is DoNotSendEventError {\n  return !!error && typeof error === 'object' && DO_NOT_SEND_EVENT_SYMBOL in error;\n}\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link Client._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends Client<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class Client<O extends ClientOptions = ClientOptions> {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number;\n\n  protected _eventProcessors: EventProcessor[];\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number };\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _hooks: Record<string, Function[]>;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n    this._integrations = {};\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    } else {\n      DEBUG_BUILD && debug.warn('No DSN provided, client will not send events.');\n    }\n\n    if (this._dsn) {\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(\n        this._dsn,\n        options.tunnel,\n        options._metadata ? options._metadata.sdk : undefined,\n      );\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * Unlike `captureException` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureException(exception: unknown, hint?: EventHint, scope?: Scope): string {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      DEBUG_BUILD && debug.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    this._process(\n      this.eventFromException(exception, hintWithEventId).then(event =>\n        this._captureEvent(event, hintWithEventId, scope),\n      ),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * Unlike `captureMessage` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureMessage(\n    message: ParameterizedString,\n    level?: SeverityLevel,\n    hint?: EventHint,\n    currentScope?: Scope,\n  ): string {\n    const hintWithEventId = {\n      event_id: uuid4(),\n      ...hint,\n    };\n\n    const eventMessage = isParameterizedString(message) ? message : String(message);\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(eventMessage, level, hintWithEventId)\n      : this.eventFromException(message, hintWithEventId);\n\n    this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * Unlike `captureEvent` exported from every SDK, this method requires that you pass it the current scope.\n   */\n  public captureEvent(event: Event, hint?: EventHint, currentScope?: Scope): string {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (hint?.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      DEBUG_BUILD && debug.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope: Scope | undefined = sdkProcessingMetadata.capturedSpanScope;\n    const capturedSpanIsolationScope: Scope | undefined = sdkProcessingMetadata.capturedSpanIsolationScope;\n\n    this._process(\n      this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope, capturedSpanIsolationScope),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a session.\n   */\n  public captureSession(session: Session): void {\n    this.sendSession(session);\n    // After sending, we set init false to indicate it's not the first occurrence\n    updateSession(session, { init: false });\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry. This method is not available on all clients.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   * @param scope An optional scope containing event metadata.\n   * @returns A string representing the id of the check in.\n   */\n  public captureCheckIn?(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string;\n\n  /**\n   * Get the current Dsn.\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * Get the current options.\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * Get the SDK metadata.\n   * @see SdkMetadata\n   */\n  public getSdkMetadata(): SdkMetadata | undefined {\n    return this._options._metadata;\n  }\n\n  /**\n   * Returns the transport that is used by the client.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * Wait for all events to be sent or the timeout to expire, whichever comes first.\n   *\n   * @param timeout Maximum time in ms the client should wait for events to be flushed. Omitting this parameter will\n   *   cause the client to wait until all events are sent before resolving the promise.\n   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\n   * still events in the queue when the timeout is reached.\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      this.emit('flush');\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * Flush the event queue and set the client to `enabled = false`. See {@link Client.flush}.\n   *\n   * @param {number} timeout Maximum time in ms the client should wait before shutting down. Omitting this parameter will cause\n   *   the client to wait until all events are sent before disabling itself.\n   * @returns {Promise<boolean>} A promise which resolves to `true` if the flush completes successfully before the timeout, or `false` if\n   * it doesn't.\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      this.emit('close');\n      return result;\n    });\n  }\n\n  /**\n   * Get all installed event processors.\n   */\n  public getEventProcessors(): EventProcessor[] {\n    return this._eventProcessors;\n  }\n\n  /**\n   * Adds an event processor that applies to any event processed by this client.\n   */\n  public addEventProcessor(eventProcessor: EventProcessor): void {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /**\n   * Initialize this client.\n   * Call this after the client was set on a scope.\n   */\n  public init(): void {\n    if (\n      this._isEnabled() ||\n      // Force integrations to be setup even if no DSN was set when we have\n      // Spotlight enabled. This is particularly important for browser as we\n      // don't support the `spotlight` option there and rely on the users\n      // adding the `spotlightBrowserIntegration()` to their integrations which\n      // wouldn't get initialized with the check below when there's no DSN set.\n      this._options.integrations.some(({ name }) => name.startsWith('Spotlight'))\n    ) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns {Integration|undefined} The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n  public getIntegrationByName<T extends Integration = Integration>(integrationName: string): T | undefined {\n    return this._integrations[integrationName] as T | undefined;\n  }\n\n  /**\n   * Add an integration to the client.\n   * This can be used to e.g. lazy load integrations.\n   * In most cases, this should not be necessary,\n   * and you're better off just passing the integrations via `integrations: []` at initialization time.\n   * However, if you find the need to conditionally load & add an integration, you can use `addIntegration` to do so.\n   */\n  public addIntegration(integration: Integration): void {\n    const isAlreadyInstalled = this._integrations[integration.name];\n\n    // This hook takes care of only installing if not already installed\n    setupIntegration(this, integration, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      afterSetupIntegrations(this, [integration]);\n    }\n  }\n\n  /**\n   * Send a fully prepared event to Sentry.\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    this.emit('beforeSendEvent', event, hint);\n\n    let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n    for (const attachment of hint.attachments || []) {\n      env = addItemToEnvelope(env, createAttachmentEnvelopeItem(attachment));\n    }\n\n    const promise = this.sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * Send a session or session aggregrates to Sentry.\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    // Backfill release and environment on session\n    const { release: clientReleaseOption, environment: clientEnvironmentOption = DEFAULT_ENVIRONMENT } = this._options;\n    if ('aggregates' in session) {\n      const sessionAttrs = session.attrs || {};\n      if (!sessionAttrs.release && !clientReleaseOption) {\n        DEBUG_BUILD && debug.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      sessionAttrs.release = sessionAttrs.release || clientReleaseOption;\n      sessionAttrs.environment = sessionAttrs.environment || clientEnvironmentOption;\n      session.attrs = sessionAttrs;\n    } else {\n      if (!session.release && !clientReleaseOption) {\n        DEBUG_BUILD && debug.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      session.release = session.release || clientReleaseOption;\n      session.environment = session.environment || clientEnvironmentOption;\n    }\n\n    this.emit('beforeSendSession', session);\n\n    const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(env);\n  }\n\n  /**\n   * Record on the client that an event got dropped (ie, an event that will not be sent to Sentry).\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory, count: number = 1): void {\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      DEBUG_BUILD && debug.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n      this._outcomes[key] = (this._outcomes[key] || 0) + count;\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/unified-signatures */\n  /**\n   * Register a callback for whenever a span is started.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'spanStart', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback before span sampling runs. Receives a `samplingDecision` object argument with a `decision`\n   * property that can be used to make a sampling decision that will be enforced, before any span sampling runs.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeSampling',\n    callback: (\n      samplingData: {\n        spanAttributes: SpanAttributes;\n        spanName: string;\n        parentSampled?: boolean;\n        parentSampleRate?: number;\n        parentContext?: SpanContextData;\n      },\n      samplingDecision: { decision: boolean },\n    ) => void,\n  ): void;\n\n  /**\n   * Register a callback for after a span is ended.\n   * NOTE: The span cannot be mutated anymore in this callback.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'spanEnd', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback for when an idle span is allowed to auto-finish.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'idleSpanEnableAutoFinish', callback: (span: Span) => void): () => void;\n\n  /**\n   * Register a callback for transaction start and finish.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): () => void;\n\n  /**\n   * Register a callback that runs when stack frame metadata should be applied to an event.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'applyFrameMetadata', callback: (event: Event) => void): () => void;\n\n  /**\n   * Register a callback for before sending an event.\n   * This is called right before an event is sent and should not be used to mutate the event.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeSendEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for before sending a session or session aggregrates..\n   * Receives the session/aggregate as second argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeSendSession', callback: (session: Session | SessionAggregates) => void): () => void;\n\n  /**\n   * Register a callback for preprocessing an event,\n   * before it is passed to (global) event processors.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'preprocessEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for postprocessing an event,\n   * after it was passed to (global) event processors, before it is being sent.\n   * Receives an Event & EventHint as arguments.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'postprocessEvent', callback: (event: Event, hint?: EventHint | undefined) => void): () => void;\n\n  /**\n   * Register a callback for when an event has been sent.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'afterSendEvent',\n    callback: (event: Event, sendResponse: TransportMakeRequestResponse) => void,\n  ): () => void;\n\n  /**\n   * Register a callback before a breadcrumb is added.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeAddBreadcrumb', callback: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void): () => void;\n\n  /**\n   * Register a callback when a DSC (Dynamic Sampling Context) is created.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'createDsc', callback: (dsc: DynamicSamplingContext, rootSpan?: Span) => void): () => void;\n\n  /**\n   * Register a callback when a Feedback event has been prepared.\n   * This should be used to mutate the event. The options argument can hint\n   * about what kind of mutation it expects.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeSendFeedback',\n    callback: (feedback: FeedbackEvent, options?: { includeReplay?: boolean }) => void,\n  ): () => void;\n\n  /**\n   * Register a callback when the feedback widget is opened in a user's browser\n   */\n  public on(hook: 'openFeedbackWidget', callback: () => void): () => void;\n\n  /**\n   * A hook for the browser tracing integrations to trigger a span start for a page load.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'startPageLoadSpan',\n    callback: (\n      options: StartSpanOptions,\n      traceOptions?: { sentryTrace?: string | undefined; baggage?: string | undefined },\n    ) => void,\n  ): () => void;\n\n  /**\n   * A hook for the browser tracing integrations to trigger after the pageload span was started.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'afterStartPageLoadSpan', callback: (span: Span) => void): () => void;\n\n  /**\n   * A hook for triggering right before a navigation span is started.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeStartNavigationSpan',\n    callback: (options: StartSpanOptions, navigationOptions?: { isRedirect?: boolean }) => void,\n  ): () => void;\n\n  /**\n   * A hook for browser tracing integrations to trigger a span for a navigation.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'startNavigationSpan',\n    callback: (options: StartSpanOptions, navigationOptions?: { isRedirect?: boolean }) => void,\n  ): () => void;\n\n  /**\n   * A hook for GraphQL client integration to enhance a span with request data.\n   * @returns A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeOutgoingRequestSpan',\n    callback: (span: Span, hint: XhrBreadcrumbHint | FetchBreadcrumbHint) => void,\n  ): () => void;\n\n  /**\n   * A hook for GraphQL client integration to enhance a breadcrumb with request data.\n   * @returns A function that, when executed, removes the registered callback.\n   */\n  public on(\n    hook: 'beforeOutgoingRequestBreadcrumb',\n    callback: (breadcrumb: Breadcrumb, hint: XhrBreadcrumbHint | FetchBreadcrumbHint) => void,\n  ): () => void;\n\n  /**\n   * A hook that is called when the client is flushing\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'flush', callback: () => void): () => void;\n\n  /**\n   * A hook that is called when the client is closing\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'close', callback: () => void): () => void;\n\n  /**\n   * A hook that is called before a log is captured. This hooks runs before `beforeSendLog` is fired.\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'beforeCaptureLog', callback: (log: Log) => void): () => void;\n\n  /**\n   * A hook that is called after a log is captured\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'afterCaptureLog', callback: (log: Log) => void): () => void;\n\n  /**\n   * A hook that is called when the client is flushing logs\n   *\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n  public on(hook: 'flushLogs', callback: () => void): () => void;\n\n  /**\n   * Register a hook on this client.\n   */\n  public on(hook: string, callback: unknown): () => void {\n    const hooks = (this._hooks[hook] = this._hooks[hook] || []);\n\n    // @ts-expect-error We assume the types are correct\n    hooks.push(callback);\n\n    // This function returns a callback execution handler that, when invoked,\n    // deregisters a callback. This is crucial for managing instances where callbacks\n    // need to be unregistered to prevent self-referencing in callback closures,\n    // ensuring proper garbage collection.\n    return () => {\n      // @ts-expect-error We assume the types are correct\n      const cbIndex = hooks.indexOf(callback);\n      if (cbIndex > -1) {\n        hooks.splice(cbIndex, 1);\n      }\n    };\n  }\n\n  /** Fire a hook whenever a span starts. */\n  public emit(hook: 'spanStart', span: Span): void;\n\n  /** A hook that is called every time before a span is sampled. */\n  public emit(\n    hook: 'beforeSampling',\n    samplingData: {\n      spanAttributes: SpanAttributes;\n      spanName: string;\n      parentSampled?: boolean;\n      parentSampleRate?: number;\n      parentContext?: SpanContextData;\n    },\n    samplingDecision: { decision: boolean },\n  ): void;\n\n  /** Fire a hook whenever a span ends. */\n  public emit(hook: 'spanEnd', span: Span): void;\n\n  /**\n   * Fire a hook indicating that an idle span is allowed to auto finish.\n   */\n  public emit(hook: 'idleSpanEnableAutoFinish', span: Span): void;\n\n  /*\n   * Fire a hook event for envelope creation and sending. Expects to be given an envelope as the\n   * second argument.\n   */\n  public emit(hook: 'beforeEnvelope', envelope: Envelope): void;\n\n  /*\n   * Fire a hook indicating that stack frame metadata should be applied to the event passed to the hook.\n   */\n  public emit(hook: 'applyFrameMetadata', event: Event): void;\n\n  /**\n   * Fire a hook event before sending an event.\n   * This is called right before an event is sent and should not be used to mutate the event.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'beforeSendEvent', event: Event, hint?: EventHint): void;\n\n  /**\n   * Fire a hook event before sending a session/aggregates.\n   * Expects to be given the prepared session/aggregates as second argument.\n   */\n  public emit(hook: 'beforeSendSession', session: Session | SessionAggregates): void;\n\n  /**\n   * Fire a hook event to process events before they are passed to (global) event processors.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'preprocessEvent', event: Event, hint?: EventHint): void;\n\n  /**\n   * Fire a hook event to process a user on an event before it is sent to Sentry, after all other processors have run.\n   * Expects to be given an Event & EventHint as the second/third argument.\n   */\n  public emit(hook: 'postprocessEvent', event: Event, hint?: EventHint): void;\n\n  /*\n   * Fire a hook event after sending an event. Expects to be given an Event as the\n   * second argument.\n   */\n  public emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse): void;\n\n  /**\n   * Fire a hook for when a breadcrumb is added. Expects the breadcrumb as second argument.\n   */\n  public emit(hook: 'beforeAddBreadcrumb', breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void;\n\n  /**\n   * Fire a hook for when a DSC (Dynamic Sampling Context) is created. Expects the DSC as second argument.\n   */\n  public emit(hook: 'createDsc', dsc: DynamicSamplingContext, rootSpan?: Span): void;\n\n  /**\n   * Fire a hook event for after preparing a feedback event. Events to be given\n   * a feedback event as the second argument, and an optional options object as\n   * third argument.\n   */\n  public emit(hook: 'beforeSendFeedback', feedback: FeedbackEvent, options?: { includeReplay?: boolean }): void;\n\n  /**\n   * Fire a hook event for when the feedback widget is opened in a user's browser\n   */\n  public emit(hook: 'openFeedbackWidget'): void;\n\n  /**\n   * Emit a hook event for browser tracing integrations to trigger a span start for a page load.\n   */\n  public emit(\n    hook: 'startPageLoadSpan',\n    options: StartSpanOptions,\n    traceOptions?: { sentryTrace?: string | undefined; baggage?: string | undefined },\n  ): void;\n\n  /**\n   * Emit a hook event for browser tracing integrations to trigger aafter the pageload span was started.\n   */\n  public emit(hook: 'afterStartPageLoadSpan', span: Span): void;\n\n  /**\n   * Emit a hook event for triggering right before a navigation span is started.\n   */\n  public emit(\n    hook: 'beforeStartNavigationSpan',\n    options: StartSpanOptions,\n    navigationOptions?: { isRedirect?: boolean },\n  ): void;\n\n  /**\n   * Emit a hook event for browser tracing integrations to trigger a span for a navigation.\n   */\n  public emit(\n    hook: 'startNavigationSpan',\n    options: StartSpanOptions,\n    navigationOptions?: { isRedirect?: boolean },\n  ): void;\n\n  /**\n   * Emit a hook event for GraphQL client integration to enhance a span with request data.\n   */\n  public emit(hook: 'beforeOutgoingRequestSpan', span: Span, hint: XhrBreadcrumbHint | FetchBreadcrumbHint): void;\n\n  /**\n   * Emit a hook event for GraphQL client integration to enhance a breadcrumb with request data.\n   */\n  public emit(\n    hook: 'beforeOutgoingRequestBreadcrumb',\n    breadcrumb: Breadcrumb,\n    hint: XhrBreadcrumbHint | FetchBreadcrumbHint,\n  ): void;\n\n  /**\n   * Emit a hook event for client flush\n   */\n  public emit(hook: 'flush'): void;\n\n  /**\n   * Emit a hook event for client close\n   */\n  public emit(hook: 'close'): void;\n\n  /**\n   * Emit a hook event for client before capturing a log. This hooks runs before `beforeSendLog` is fired.\n   */\n  public emit(hook: 'beforeCaptureLog', log: Log): void;\n\n  /**\n   * Emit a hook event for client after capturing a log.\n   */\n  public emit(hook: 'afterCaptureLog', log: Log): void;\n\n  /**\n   * Emit a hook event for client flush logs\n   */\n  public emit(hook: 'flushLogs'): void;\n\n  /**\n   * Emit a hook that was previously registered via `on()`.\n   */\n  public emit(hook: string, ...rest: unknown[]): void {\n    const callbacks = this._hooks[hook];\n    if (callbacks) {\n      callbacks.forEach(callback => callback(...rest));\n    }\n  }\n\n  /**\n   * Send an envelope to Sentry.\n   */\n  public sendEnvelope(envelope: Envelope): PromiseLike<TransportMakeRequestResponse> {\n    this.emit('beforeEnvelope', envelope);\n\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        DEBUG_BUILD && debug.error('Error while sending envelope:', reason);\n        return reason;\n      });\n    }\n\n    DEBUG_BUILD && debug.error('Transport disabled');\n\n    return resolvedSyncPromise({});\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n  protected _setupIntegrations(): void {\n    const { integrations } = this._options;\n    this._integrations = setupIntegrations(this, integrations);\n    afterSetupIntegrations(this, integrations);\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = event.level === 'fatal';\n    let errored = false;\n    const exceptions = event.exception?.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism?.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event | null> {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations?.length) {\n      hint.integrations = integrations;\n    }\n\n    this.emit('preprocessEvent', event, hint);\n\n    if (!event.type) {\n      isolationScope.setLastEventId(event.event_id || hint.event_id);\n    }\n\n    return prepareEvent(options, event, hint, currentScope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n\n      this.emit('postprocessEvent', evt, hint);\n\n      evt.contexts = {\n        trace: getTraceContextFromScope(currentScope),\n        ...evt.contexts,\n      };\n\n      const dynamicSamplingContext = getDynamicSamplingContextFromScope(this, currentScope);\n\n      evt.sdkProcessingMetadata = {\n        dynamicSamplingContext,\n        ...evt.sdkProcessingMetadata,\n      };\n\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(\n    event: Event,\n    hint: EventHint = {},\n    currentScope = getCurrentScope(),\n    isolationScope = getIsolationScope(),\n  ): PromiseLike<string | undefined> {\n    if (DEBUG_BUILD && isErrorEvent(event)) {\n      debug.log(`Captured error event \\`${getPossibleEventMessages(event)[0] || '<unknown>'}\\``);\n    }\n\n    return this._processEvent(event, hint, currentScope, isolationScope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (DEBUG_BUILD) {\n          if (_isDoNotSendEventError(reason)) {\n            debug.log(reason.message);\n          } else if (_isInternalError(reason)) {\n            debug.warn(reason.message);\n          } else {\n            debug.warn(reason);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event> {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : parseSampleRate(sampleRate);\n    if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error');\n      return rejectedSyncPromise(\n        _makeDoNotSendEventError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    const dataCategory = (eventType === 'replay_event' ? 'replay' : eventType) satisfies DataCategory;\n\n    return this._prepareEvent(event, hint, currentScope, isolationScope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory);\n          throw _makeDoNotSendEventError('An event processor returned `null`, will not send event.');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(this, options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory);\n          if (isTransaction) {\n            const spans = event.spans || [];\n            // the transaction itself counts as one span, plus all the child spans that are added\n            const spanCount = 1 + spans.length;\n            this.recordDroppedEvent('before_send', 'span', spanCount);\n          }\n          throw _makeDoNotSendEventError(`${beforeSendLabel} returned \\`null\\`, will not send event.`);\n        }\n\n        const session = currentScope.getSession() || isolationScope.getSession();\n        if (isError && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        if (isTransaction) {\n          const spanCountBefore = processedEvent.sdkProcessingMetadata?.spanCountBeforeProcessing || 0;\n          const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n\n          const droppedSpanCount = spanCountBefore - spanCountAfter;\n          if (droppedSpanCount > 0) {\n            this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n          }\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (_isDoNotSendEventError(reason) || _isInternalError(reason)) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          mechanism: {\n            handled: false,\n            type: 'internal',\n          },\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw _makeInternalError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.entries(outcomes).map(([key, quantity]) => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity,\n      };\n    });\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  protected _flushOutcomes(): void {\n    DEBUG_BUILD && debug.log('Flushing outcomes...');\n\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      DEBUG_BUILD && debug.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      DEBUG_BUILD && debug.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    DEBUG_BUILD && debug.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n\n  /**\n   * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n   */\n  public abstract eventFromException(_exception: unknown, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * Creates an {@link Event} from primitive inputs to `captureMessage`.\n   */\n  public abstract eventFromMessage(\n    _message: ParameterizedString,\n    _level?: SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult: PromiseLike<Event | null> | Event | null,\n  beforeSendLabel: string,\n): PromiseLike<Event | null> | Event | null {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw _makeInternalError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw _makeInternalError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw _makeInternalError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  client: Client,\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n): PromiseLike<Event | null> | Event | null {\n  const { beforeSend, beforeSendTransaction, beforeSendSpan, ignoreSpans } = options;\n  let processedEvent = event;\n\n  if (isErrorEvent(processedEvent) && beforeSend) {\n    return beforeSend(processedEvent, hint);\n  }\n\n  if (isTransactionEvent(processedEvent)) {\n    // Avoid processing if we don't have to\n    if (beforeSendSpan || ignoreSpans) {\n      // 1. Process root span\n      const rootSpanJson = convertTransactionEventToSpanJson(processedEvent);\n\n      // 1.1 If the root span should be ignored, drop the whole transaction\n      if (ignoreSpans?.length && shouldIgnoreSpan(rootSpanJson, ignoreSpans)) {\n        // dropping the whole transaction!\n        return null;\n      }\n\n      // 1.2 If a `beforeSendSpan` callback is defined, process the root span\n      if (beforeSendSpan) {\n        const processedRootSpanJson = beforeSendSpan(rootSpanJson);\n        if (!processedRootSpanJson) {\n          showSpanDropWarning();\n        } else {\n          // update event with processed root span values\n          processedEvent = merge(event, convertSpanJsonToTransactionEvent(processedRootSpanJson));\n        }\n      }\n\n      // 2. Process child spans\n      if (processedEvent.spans) {\n        const processedSpans: SpanJSON[] = [];\n\n        const initialSpans = processedEvent.spans;\n\n        for (const span of initialSpans) {\n          // 2.a If the child span should be ignored, reparent it to the root span\n          if (ignoreSpans?.length && shouldIgnoreSpan(span, ignoreSpans)) {\n            reparentChildSpans(initialSpans, span);\n            continue;\n          }\n\n          // 2.b If a `beforeSendSpan` callback is defined, process the child span\n          if (beforeSendSpan) {\n            const processedSpan = beforeSendSpan(span);\n            if (!processedSpan) {\n              showSpanDropWarning();\n              processedSpans.push(span);\n            } else {\n              processedSpans.push(processedSpan);\n            }\n          } else {\n            processedSpans.push(span);\n          }\n        }\n\n        const droppedSpans = processedEvent.spans.length - processedSpans.length;\n        if (droppedSpans) {\n          client.recordDroppedEvent('before_send', 'span', droppedSpans);\n        }\n        processedEvent.spans = processedSpans;\n      }\n    }\n\n    if (beforeSendTransaction) {\n      if (processedEvent.spans) {\n        // We store the # of spans before processing in SDK metadata,\n        // so we can compare it afterwards to determine how many spans were dropped\n        const spanCountBefore = processedEvent.spans.length;\n        processedEvent.sdkProcessingMetadata = {\n          ...event.sdkProcessingMetadata,\n          spanCountBeforeProcessing: spanCountBefore,\n        };\n      }\n      return beforeSendTransaction(processedEvent as TransactionEvent, hint);\n    }\n  }\n\n  return processedEvent;\n}\n\nfunction isErrorEvent(event: Event): event is ErrorEvent {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n\n/** Extract trace information from scope */\nexport function _getTraceInfoFromScope(\n  client: Client,\n  scope: Scope | undefined,\n): [dynamicSamplingContext: Partial<DynamicSamplingContext> | undefined, traceContext: TraceContext | undefined] {\n  if (!scope) {\n    return [undefined, undefined];\n  }\n\n  return withScope(scope, () => {\n    const span = getActiveSpan();\n    const traceContext = span ? spanToTraceContext(span) : getTraceContextFromScope(scope);\n    const dynamicSamplingContext = span\n      ? getDynamicSamplingContextFromSpan(span)\n      : getDynamicSamplingContextFromScope(client, scope);\n    return [dynamicSamplingContext, traceContext];\n  });\n}\n","/**\n * OpenAI Integration Telemetry Attributes\n * Based on OpenTelemetry Semantic Conventions for Generative AI\n * @see https://opentelemetry.io/docs/specs/semconv/gen-ai/\n */\n\n// =============================================================================\n// OPENTELEMETRY SEMANTIC CONVENTIONS FOR GENAI\n// =============================================================================\n\n/**\n * The input messages sent to the model\n */\nexport const GEN_AI_PROMPT_ATTRIBUTE = 'gen_ai.prompt';\n\n/**\n * The Generative AI system being used\n * For OpenAI, this should always be \"openai\"\n */\nexport const GEN_AI_SYSTEM_ATTRIBUTE = 'gen_ai.system';\n\n/**\n * The name of the model as requested\n * Examples: \"gpt-4\", \"gpt-3.5-turbo\"\n */\nexport const GEN_AI_REQUEST_MODEL_ATTRIBUTE = 'gen_ai.request.model';\n\n/**\n * Whether streaming was enabled for the request\n */\nexport const GEN_AI_REQUEST_STREAM_ATTRIBUTE = 'gen_ai.request.stream';\n\n/**\n * The temperature setting for the model request\n */\nexport const GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE = 'gen_ai.request.temperature';\n\n/**\n * The maximum number of tokens requested\n */\nexport const GEN_AI_REQUEST_MAX_TOKENS_ATTRIBUTE = 'gen_ai.request.max_tokens';\n\n/**\n * The frequency penalty setting for the model request\n */\nexport const GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE = 'gen_ai.request.frequency_penalty';\n\n/**\n * The presence penalty setting for the model request\n */\nexport const GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE = 'gen_ai.request.presence_penalty';\n\n/**\n * The top_p (nucleus sampling) setting for the model request\n */\nexport const GEN_AI_REQUEST_TOP_P_ATTRIBUTE = 'gen_ai.request.top_p';\n\n/**\n * The top_k setting for the model request\n */\nexport const GEN_AI_REQUEST_TOP_K_ATTRIBUTE = 'gen_ai.request.top_k';\n\n/**\n * Stop sequences for the model request\n */\nexport const GEN_AI_REQUEST_STOP_SEQUENCES_ATTRIBUTE = 'gen_ai.request.stop_sequences';\n\n/**\n * Array of reasons why the model stopped generating tokens\n */\nexport const GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE = 'gen_ai.response.finish_reasons';\n\n/**\n * The name of the model that generated the response\n */\nexport const GEN_AI_RESPONSE_MODEL_ATTRIBUTE = 'gen_ai.response.model';\n\n/**\n * The unique identifier for the response\n */\nexport const GEN_AI_RESPONSE_ID_ATTRIBUTE = 'gen_ai.response.id';\n\n/**\n * The number of tokens used in the prompt\n */\nexport const GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.input_tokens';\n\n/**\n * The number of tokens used in the response\n */\nexport const GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.output_tokens';\n\n/**\n * The total number of tokens used (input + output)\n */\nexport const GEN_AI_USAGE_TOTAL_TOKENS_ATTRIBUTE = 'gen_ai.usage.total_tokens';\n\n/**\n * The operation name\n */\nexport const GEN_AI_OPERATION_NAME_ATTRIBUTE = 'gen_ai.operation.name';\n\n/**\n * The prompt messages\n * Only recorded when recordInputs is enabled\n */\nexport const GEN_AI_REQUEST_MESSAGES_ATTRIBUTE = 'gen_ai.request.messages';\n\n/**\n * The response text\n * Only recorded when recordOutputs is enabled\n */\nexport const GEN_AI_RESPONSE_TEXT_ATTRIBUTE = 'gen_ai.response.text';\n\n/**\n * The available tools from incoming request\n * Only recorded when recordInputs is enabled\n */\nexport const GEN_AI_REQUEST_AVAILABLE_TOOLS_ATTRIBUTE = 'gen_ai.request.available_tools';\n\n/**\n * Whether the response is a streaming response\n */\nexport const GEN_AI_RESPONSE_STREAMING_ATTRIBUTE = 'gen_ai.response.streaming';\n\n/**\n * The tool calls from the response\n * Only recorded when recordOutputs is enabled\n */\nexport const GEN_AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = 'gen_ai.response.tool_calls';\n\n// =============================================================================\n// OPENAI-SPECIFIC ATTRIBUTES\n// =============================================================================\n\n/**\n * The response ID from OpenAI\n */\nexport const OPENAI_RESPONSE_ID_ATTRIBUTE = 'openai.response.id';\n\n/**\n * The response model from OpenAI\n */\nexport const OPENAI_RESPONSE_MODEL_ATTRIBUTE = 'openai.response.model';\n\n/**\n * The response timestamp from OpenAI (ISO string)\n */\nexport const OPENAI_RESPONSE_TIMESTAMP_ATTRIBUTE = 'openai.response.timestamp';\n\n/**\n * The number of completion tokens used\n */\nexport const OPENAI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = 'openai.usage.completion_tokens';\n\n/**\n * The number of prompt tokens used\n */\nexport const OPENAI_USAGE_PROMPT_TOKENS_ATTRIBUTE = 'openai.usage.prompt_tokens';\n\n// =============================================================================\n// OPENAI OPERATIONS\n// =============================================================================\n\n/**\n * OpenAI API operations\n */\nexport const OPENAI_OPERATIONS = {\n  CHAT: 'chat',\n  RESPONSES: 'responses',\n} as const;\n\n// =============================================================================\n// ANTHROPIC AI OPERATIONS\n// =============================================================================\n\n/**\n * The response timestamp from Anthropic AI (ISO string)\n */\nexport const ANTHROPIC_AI_RESPONSE_TIMESTAMP_ATTRIBUTE = 'anthropic.response.timestamp';\n","import { DEBUG_BUILD } from '../debug-build';\nimport type { EventDropReason } from '../types-hoist/clientreport';\nimport type { Envelope, EnvelopeItem } from '../types-hoist/envelope';\nimport type {\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '../types-hoist/transport';\nimport { debug } from '../utils/debug-logger';\nimport {\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  serializeEnvelope,\n} from '../utils/envelope';\nimport { type PromiseBuffer, makePromiseBuffer, SENTRY_BUFFER_FULL_ERROR } from '../utils/promisebuffer';\nimport { type RateLimits, isRateLimited, updateRateLimits } from '../utils/ratelimit';\nimport { resolvedSyncPromise } from '../utils/syncpromise';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const dataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, dataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise({});\n    }\n\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as (typeof envelope)[1]);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type));\n      });\n    };\n\n    const requestTask = (): PromiseLike<TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            DEBUG_BUILD && debug.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          DEBUG_BUILD && debug.error('Encountered error running transport request:', error);\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error === SENTRY_BUFFER_FULL_ERROR) {\n          DEBUG_BUILD && debug.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise({});\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport { debug } from '../utils/debug-logger';\nimport { getFunctionName } from '../utils/stacktrace';\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'fetch-body-resolved'\n  | 'history'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n// We keep the handlers globally\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Add a handler function. */\nexport function addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nexport function resetInstrumentationHandlers(): void {\n  Object.keys(handlers).forEach(key => {\n    handlers[key as InstrumentHandlerType] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nexport function maybeInstrument(type: InstrumentHandlerType, instrumentFn: () => void): void {\n  if (!instrumented[type]) {\n    instrumented[type] = true;\n    try {\n      instrumentFn();\n    } catch (e) {\n      DEBUG_BUILD && debug.error(`Error while instrumenting ${type}`, e);\n    }\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nexport function triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        debug.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { ConsoleLevel, HandlerDataConsole } from '../types-hoist/instrument';\nimport { CONSOLE_LEVELS, originalConsoleMethods } from '../utils/debug-logger';\nimport { fill } from '../utils/object';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addConsoleInstrumentationHandler(handler: (data: HandlerDataConsole) => void): void {\n  const type = 'console';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentConsole);\n}\n\nfunction instrumentConsole(): void {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: ConsoleLevel): void {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod: () => any): Function {\n      originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args: any[]): void {\n        const handlerData: HandlerDataConsole = { args, level };\n        triggerHandlers('console', handlerData);\n\n        const log = originalConsoleMethods[level];\n        log?.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n","import type { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport type { ServerRuntimeClientOptions } from '@sentry/core';\nimport { applySdkMetadata, ServerRuntimeClient } from '@sentry/core';\nimport type { VercelEdgeClientOptions } from './types';\n\ndeclare const process: {\n  env: Record<string, string>;\n};\n\n/**\n * The Sentry Vercel Edge Runtime SDK Client.\n *\n * @see VercelEdgeClientOptions for documentation on configuration options.\n * @see ServerRuntimeClient for usage documentation.\n */\nexport class VercelEdgeClient extends ServerRuntimeClient<VercelEdgeClientOptions> {\n  public traceProvider: BasicTracerProvider | undefined;\n\n  /**\n   * Creates a new Vercel Edge Runtime SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: VercelEdgeClientOptions) {\n    applySdkMetadata(options, 'vercel-edge');\n    options._metadata = options._metadata || {};\n\n    const clientOptions: ServerRuntimeClientOptions = {\n      ...options,\n      platform: 'javascript',\n      // TODO: Grab version information\n      runtime: { name: 'vercel-edge' },\n      serverName: options.serverName || process.env.SENTRY_NAME,\n    };\n\n    super(clientOptions);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public async flush(timeout?: number): Promise<boolean> {\n    const provider = this.traceProvider;\n\n    await provider?.forceFlush();\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\nimport { Link } from './link';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  addLink(_link: Link): this {\n    return this;\n  }\n\n  addLinks(_links: Link[]): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Tracer } from './tracer';\nimport { TracerProvider } from './tracer_provider';\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nexport class ProxyTracerProvider implements TracerProvider {\n  private _delegate?: TracerProvider;\n\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  getTracer(name: string, version?: string, options?: TracerOptions): Tracer {\n    return (\n      this.getDelegateTracer(name, version, options) ??\n      new ProxyTracer(this, name, version, options)\n    );\n  }\n\n  getDelegate(): TracerProvider {\n    return this._delegate ?? NOOP_TRACER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate tracer provider\n   */\n  setDelegate(delegate: TracerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined {\n    return this._delegate?.getTracer(name, version, options);\n  }\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport type { CoreOptions } from '../types-hoist/options';\nimport type { SamplingContext } from '../types-hoist/samplingcontext';\nimport { debug } from '../utils/debug-logger';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { parseSampleRate } from '../utils/parseSampleRate';\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nexport function sampleSpan(\n  options: Pick<CoreOptions, 'tracesSampleRate' | 'tracesSampler'>,\n  samplingContext: SamplingContext,\n  sampleRand: number,\n): [sampled: boolean, sampleRate?: number, localSampleRateWasApplied?: boolean] {\n  // nothing to do if span recording is not enabled\n  if (!hasSpansEnabled(options)) {\n    return [false];\n  }\n\n  let localSampleRateWasApplied = undefined;\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      ...samplingContext,\n      inheritOrSampleWith: fallbackSampleRate => {\n        // If we have an incoming parent sample rate, we'll just use that one.\n        // The sampling decision will be inherited because of the sample_rand that was generated when the trace reached the incoming boundaries of the SDK.\n        if (typeof samplingContext.parentSampleRate === 'number') {\n          return samplingContext.parentSampleRate;\n        }\n\n        // Fallback if parent sample rate is not on the incoming trace (e.g. if there is no baggage)\n        // This is to provide backwards compatibility if there are incoming traces from older SDKs that don't send a parent sample rate or a sample rand. In these cases we just want to force either a sampling decision on the downstream traces via the sample rate.\n        if (typeof samplingContext.parentSampled === 'boolean') {\n          return Number(samplingContext.parentSampled);\n        }\n\n        return fallbackSampleRate;\n      },\n    });\n    localSampleRateWasApplied = true;\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    localSampleRateWasApplied = true;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = parseSampleRate(sampleRate);\n\n  if (parsedSampleRate === undefined) {\n    DEBUG_BUILD &&\n      debug.warn(\n        `[Tracing] Discarding root span because of invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          sampleRate,\n        )} of type ${JSON.stringify(typeof sampleRate)}.`,\n      );\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    DEBUG_BUILD &&\n      debug.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    return [false, parsedSampleRate, localSampleRateWasApplied];\n  }\n\n  // We always compare the sample rand for the current execution context against the chosen sample rate.\n  // Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n  const shouldSample = sampleRand < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    DEBUG_BUILD &&\n      debug.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n  }\n\n  return [shouldSample, parsedSampleRate, localSampleRateWasApplied];\n}\n","// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 14+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n","import { getClient } from './currentScopes';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from './semanticAttributes';\nimport { setHttpStatus, SPAN_STATUS_ERROR, startInactiveSpan } from './tracing';\nimport { SentryNonRecordingSpan } from './tracing/sentryNonRecordingSpan';\nimport type { FetchBreadcrumbHint } from './types-hoist/breadcrumb';\nimport type { HandlerDataFetch } from './types-hoist/instrument';\nimport type { Span, SpanAttributes, SpanOrigin } from './types-hoist/span';\nimport { SENTRY_BAGGAGE_KEY_PREFIX } from './utils/baggage';\nimport { hasSpansEnabled } from './utils/hasSpansEnabled';\nimport { isInstanceOf, isRequest } from './utils/is';\nimport { getActiveSpan } from './utils/spanUtils';\nimport { getTraceData } from './utils/traceData';\nimport { getSanitizedUrlStringFromUrlObject, isURLObjectRelative, parseStringToURLObject } from './utils/url';\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not precisely the Header type used in Request, but it'll pass duck-typing\n  | {\n      append: (key: string, value: string) => void;\n      get: (key: string) => string | null | undefined;\n    };\n\ninterface InstrumentFetchRequestOptions {\n  spanOrigin?: SpanOrigin;\n  propagateTraceparent?: boolean;\n}\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @deprecated pass an options object instead of the spanOrigin parameter\n *\n * @returns Span if a span was created, otherwise void.\n */\nexport function instrumentFetchRequest(\n  handlerData: HandlerDataFetch,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n  spanOrigin: SpanOrigin,\n): Span | undefined;\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nexport function instrumentFetchRequest(\n  handlerData: HandlerDataFetch,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n  // eslint-disable-next-line @typescript-eslint/unified-signatures -- needed because the other overload is deprecated\n  instrumentFetchRequestOptions: InstrumentFetchRequestOptions,\n): Span | undefined;\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nexport function instrumentFetchRequest(\n  handlerData: HandlerDataFetch,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n  spanOriginOrOptions?: SpanOrigin | InstrumentFetchRequestOptions,\n): Span | undefined {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n\n  const { method, url } = handlerData.fetchData;\n\n  const shouldCreateSpanResult = hasSpansEnabled() && shouldCreateSpan(url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  // Backwards-compatible with the old signature. Needed to introduce the combined optional parameter\n  // to avoid API breakage for anyone calling this function with the optional spanOrigin parameter\n  // TODO (v11): remove this backwards-compatible code and only accept the options parameter\n  const { spanOrigin = 'auto.http.browser', propagateTraceparent = false } =\n    typeof spanOriginOrOptions === 'object' ? spanOriginOrOptions : { spanOrigin: spanOriginOrOptions };\n\n  const hasParent = !!getActiveSpan();\n\n  const span =\n    shouldCreateSpanResult && hasParent\n      ? startInactiveSpan(getSpanStartOptions(url, method, spanOrigin))\n      : new SentryNonRecordingSpan();\n\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n\n  if (shouldAttachHeaders(handlerData.fetchData.url)) {\n    const request: string | Request = handlerData.args[0];\n\n    const options: { [key: string]: unknown } = handlerData.args[1] || {};\n\n    const headers = _addTracingHeadersToFetchRequest(\n      request,\n      options,\n      // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n      // we do not want to use the span as base for the trace headers,\n      // which means that the headers will be generated from the scope and the sampling decision is deferred\n      hasSpansEnabled() && hasParent ? span : undefined,\n      propagateTraceparent,\n    );\n    if (headers) {\n      // Ensure this is actually set, if no options have been passed previously\n      handlerData.args[1] = options;\n      options.headers = headers;\n    }\n  }\n\n  const client = getClient();\n\n  if (client) {\n    const fetchHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp: handlerData.startTimestamp,\n      endTimestamp: handlerData.endTimestamp,\n    } satisfies FetchBreadcrumbHint;\n\n    client.emit('beforeOutgoingRequestSpan', span, fetchHint);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n * exported only for testing purposes\n *\n * When we determine if we should add a baggage header, there are 3 cases:\n * 1. No previous baggage header -> add baggage\n * 2. Previous baggage header has no sentry baggage values -> add our baggage\n * 3. Previous baggage header has sentry baggage values -> do nothing (might have been added manually by users)\n */\n// eslint-disable-next-line complexity -- yup it's this complicated :(\nexport function _addTracingHeadersToFetchRequest(\n  request: string | Request,\n  fetchOptionsObj: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | PolymorphicRequestHeaders;\n  },\n  span?: Span,\n  propagateTraceparent?: boolean,\n): PolymorphicRequestHeaders | undefined {\n  const traceHeaders = getTraceData({ span, propagateTraceparent });\n  const sentryTrace = traceHeaders['sentry-trace'];\n  const baggage = traceHeaders.baggage;\n  const traceparent = traceHeaders.traceparent;\n\n  // Nothing to do, when we return undefined here, the original headers will be used\n  if (!sentryTrace) {\n    return undefined;\n  }\n\n  const originalHeaders = fetchOptionsObj.headers || (isRequest(request) ? request.headers : undefined);\n\n  if (!originalHeaders) {\n    return { ...traceHeaders };\n  } else if (isHeaders(originalHeaders)) {\n    const newHeaders = new Headers(originalHeaders);\n\n    // We don't want to override manually added sentry headers\n    if (!newHeaders.get('sentry-trace')) {\n      newHeaders.set('sentry-trace', sentryTrace);\n    }\n\n    if (propagateTraceparent && traceparent && !newHeaders.get('traceparent')) {\n      newHeaders.set('traceparent', traceparent);\n    }\n\n    if (baggage) {\n      const prevBaggageHeader = newHeaders.get('baggage');\n\n      if (!prevBaggageHeader) {\n        newHeaders.set('baggage', baggage);\n      } else if (!baggageHeaderHasSentryBaggageValues(prevBaggageHeader)) {\n        newHeaders.set('baggage', `${prevBaggageHeader},${baggage}`);\n      }\n    }\n\n    return newHeaders;\n  } else if (Array.isArray(originalHeaders)) {\n    const newHeaders = [...originalHeaders];\n\n    if (!originalHeaders.find(header => header[0] === 'sentry-trace')) {\n      newHeaders.push(['sentry-trace', sentryTrace]);\n    }\n\n    if (propagateTraceparent && traceparent && !originalHeaders.find(header => header[0] === 'traceparent')) {\n      newHeaders.push(['traceparent', traceparent]);\n    }\n\n    const prevBaggageHeaderWithSentryValues = originalHeaders.find(\n      header => header[0] === 'baggage' && baggageHeaderHasSentryBaggageValues(header[1]),\n    );\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push(['baggage', baggage]);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else {\n    const existingSentryTraceHeader = 'sentry-trace' in originalHeaders ? originalHeaders['sentry-trace'] : undefined;\n    const existingTraceparentHeader = 'traceparent' in originalHeaders ? originalHeaders.traceparent : undefined;\n    const existingBaggageHeader = 'baggage' in originalHeaders ? originalHeaders.baggage : undefined;\n\n    const newBaggageHeaders: string[] = existingBaggageHeader\n      ? Array.isArray(existingBaggageHeader)\n        ? [...existingBaggageHeader]\n        : [existingBaggageHeader]\n      : [];\n\n    const prevBaggageHeaderWithSentryValues =\n      existingBaggageHeader &&\n      (Array.isArray(existingBaggageHeader)\n        ? existingBaggageHeader.find(headerItem => baggageHeaderHasSentryBaggageValues(headerItem))\n        : baggageHeaderHasSentryBaggageValues(existingBaggageHeader));\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      newBaggageHeaders.push(baggage);\n    }\n\n    const newHeaders: {\n      'sentry-trace': string;\n      baggage: string | undefined;\n      traceparent?: string;\n    } = {\n      ...(originalHeaders as Exclude<typeof originalHeaders, Headers>),\n      'sentry-trace': (existingSentryTraceHeader as string | undefined) ?? sentryTrace,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n\n    if (propagateTraceparent && traceparent && !existingTraceparentHeader) {\n      newHeaders.traceparent = traceparent;\n    }\n\n    return newHeaders;\n  }\n}\n\nfunction endSpan(span: Span, handlerData: HandlerDataFetch): void {\n  if (handlerData.response) {\n    setHttpStatus(span, handlerData.response.status);\n\n    const contentLength = handlerData.response?.headers?.get('content-length');\n\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n  }\n  span.end();\n}\n\nfunction baggageHeaderHasSentryBaggageValues(baggageHeader: string): boolean {\n  return baggageHeader.split(',').some(baggageEntry => baggageEntry.trim().startsWith(SENTRY_BAGGAGE_KEY_PREFIX));\n}\n\nfunction isHeaders(headers: unknown): headers is Headers {\n  return typeof Headers !== 'undefined' && isInstanceOf(headers, Headers);\n}\n\nfunction getSpanStartOptions(\n  url: string,\n  method: string,\n  spanOrigin: SpanOrigin,\n): Parameters<typeof startInactiveSpan>[0] {\n  const parsedUrl = parseStringToURLObject(url);\n  return {\n    name: parsedUrl ? `${method} ${getSanitizedUrlStringFromUrlObject(parsedUrl)}` : method,\n    attributes: getFetchSpanAttributes(url, parsedUrl, method, spanOrigin),\n  };\n}\n\nfunction getFetchSpanAttributes(\n  url: string,\n  parsedUrl: ReturnType<typeof parseStringToURLObject>,\n  method: string,\n  spanOrigin: SpanOrigin,\n): SpanAttributes {\n  const attributes: SpanAttributes = {\n    url,\n    type: 'fetch',\n    'http.method': method,\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',\n  };\n  if (parsedUrl) {\n    if (!isURLObjectRelative(parsedUrl)) {\n      attributes['http.url'] = parsedUrl.href;\n      attributes['server.address'] = parsedUrl.host;\n    }\n    if (parsedUrl.search) {\n      attributes['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      attributes['http.fragment'] = parsedUrl.hash;\n    }\n  }\n  return attributes;\n}\n","import type { Client } from '../client';\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getGlobalScope } from '../currentScopes';\nimport { notifyEventProcessors } from '../eventProcessors';\nimport type { CaptureContext, ScopeContext } from '../scope';\nimport { Scope } from '../scope';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { ClientOptions } from '../types-hoist/options';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { applyScopeDataToEvent, mergeScopeData } from './applyScopeDataToEvent';\nimport { getFilenameToDebugIdMap } from './debug-ids';\nimport { addExceptionMechanism, uuid4 } from './misc';\nimport { normalize } from './normalize';\nimport { truncate } from './string';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\nexport type ExclusiveEventHintOrCaptureContext =\n  | (CaptureContext & Partial<{ [key in keyof EventHint]: never }>)\n  | (EventHint & Partial<{ [key in keyof ScopeContext]: never }>);\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nexport function prepareEvent(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n  scope?: Scope,\n  client?: Client,\n  isolationScope?: Scope,\n): PromiseLike<Event | null> {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = options;\n  const prepared: Event = {\n    ...event,\n    event_id: event.event_id || hint.event_id || uuid4(),\n    timestamp: event.timestamp || dateTimestampInSeconds(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  if (client) {\n    client.emit('applyFrameMetadata', event);\n  }\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n\n  if (hint.mechanism) {\n    addExceptionMechanism(prepared, hint.mechanism);\n  }\n\n  const clientEventProcessors = client ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Scope.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = getGlobalScope().getScopeData();\n\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    mergeScopeData(data, isolationData);\n  }\n\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    mergeScopeData(data, finalScopeData);\n  }\n\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n\n  applyScopeDataToEvent(prepared, data);\n\n  const eventProcessors = [\n    ...clientEventProcessors,\n    // Run scope event processors _after_ all other processors\n    ...data.eventProcessors,\n  ];\n\n  const result = notifyEventProcessors(eventProcessors, prepared, hint);\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n * Enhances event using the client configuration.\n * It takes care of all \"static\" values like environment, release and `dist`,\n * as well as truncating overly long values.\n *\n * Only exported for tests.\n *\n * @param event event instance to be enhanced\n */\nexport function applyClientOptions(event: Event, options: ClientOptions): void {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  // empty strings do not make sense for environment, release, and dist\n  // so we handle them the same as if they were not provided\n  event.environment = event.environment || environment || DEFAULT_ENVIRONMENT;\n\n  if (!event.release && release) {\n    event.release = release;\n  }\n\n  if (!event.dist && dist) {\n    event.dist = dist;\n  }\n\n  const request = event.request;\n  if (request?.url) {\n    request.url = truncate(request.url, maxValueLength);\n  }\n}\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nexport function applyDebugIds(event: Event, stackParser: StackParser): void {\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.filename) {\n        frame.debug_id = filenameDebugIdMap[frame.filename];\n      }\n    });\n  });\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nexport function applyDebugMeta(event: Event): void {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap: Record<string, string> = {};\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.debug_id) {\n        if (frame.abs_path) {\n          filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n        } else if (frame.filename) {\n          filenameDebugIdMap[frame.filename] = frame.debug_id;\n        }\n        delete frame.debug_id;\n      }\n    });\n  });\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id,\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event: Event, integrationNames: string[]): void {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n  if (!event) {\n    return null;\n  }\n\n  const normalized: Event = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: normalize(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: normalize(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: normalize(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts?.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      return {\n        ...span,\n        ...(span.data && {\n          data: normalize(span.data, depth, maxBreadth),\n        }),\n      };\n    });\n  }\n\n  // event.contexts.flags (FeatureFlagContext) stores context for our feature\n  // flag integrations. It has a greater nesting depth than our other typed\n  // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n  // to skip this in case of conflicting, user-provided context.\n  if (event.contexts?.flags && normalized.contexts) {\n    normalized.contexts.flags = normalize(event.contexts.flags, 3, maxBreadth);\n  }\n\n  return normalized;\n}\n\nfunction getFinalScope(scope: Scope | undefined, captureContext: CaptureContext | undefined): Scope | undefined {\n  if (!captureContext) {\n    return scope;\n  }\n\n  const finalScope = scope ? scope.clone() : new Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nexport function parseEventHintOrCaptureContext(\n  hint: ExclusiveEventHintOrCaptureContext | undefined,\n): EventHint | undefined {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return { captureContext: hint };\n  }\n\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint,\n    };\n  }\n\n  return hint;\n}\n\nfunction hintIsScopeOrFunction(hint: CaptureContext | EventHint): hint is Scope | ((scope: Scope) => Scope) {\n  return hint instanceof Scope || typeof hint === 'function';\n}\n\ntype ScopeContextProperty = keyof ScopeContext;\nconst captureContextKeys: readonly ScopeContextProperty[] = [\n  'user',\n  'level',\n  'extra',\n  'contexts',\n  'tags',\n  'fingerprint',\n  'propagationContext',\n] as const;\n\nfunction hintIsScopeContext(hint: Partial<ScopeContext> | EventHint): hint is Partial<ScopeContext> {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key as ScopeContextProperty));\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n","/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Parses a cookie string\n */\nexport function parseCookie(str: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  let index = 0;\n\n  while (index < str.length) {\n    const eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n\n    let endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n\n    const key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      try {\n        obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;\n      } catch {\n        obj[key] = val;\n      }\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n","import {\n  applySdkMetadata,\n  getGlobalScope,\n  getRootSpan,\n  GLOBAL_OBJ,\n  registerSpanErrorInstrumentation,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanToJSON,\n  stripUrlQueryAndFragment,\n  vercelWaitUntil,\n} from '@sentry/core';\nimport type { VercelEdgeOptions } from '@sentry/vercel-edge';\nimport { getDefaultIntegrations, init as vercelEdgeInit } from '@sentry/vercel-edge';\nimport { isBuild } from '../common/utils/isBuild';\nimport { flushSafelyWithTimeout } from '../common/utils/responseEnd';\nimport { distDirRewriteFramesIntegration } from './distDirRewriteFramesIntegration';\n\nexport * from '@sentry/vercel-edge';\nexport * from '../common';\nexport { captureUnderscoreErrorException } from '../common/pages-router-instrumentation/_error';\nexport { wrapApiHandlerWithSentry } from './wrapApiHandlerWithSentry';\n\nexport type EdgeOptions = VercelEdgeOptions;\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryRewriteFramesDistDir?: string;\n  _sentryRelease?: string;\n};\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nexport function init(options: VercelEdgeOptions = {}): void {\n  registerSpanErrorInstrumentation();\n\n  if (isBuild()) {\n    return;\n  }\n\n  const customDefaultIntegrations = getDefaultIntegrations(options);\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = process.env._sentryRewriteFramesDistDir || globalWithInjectedValues._sentryRewriteFramesDistDir;\n\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration({ distDirName }));\n  }\n\n  const opts = {\n    defaultIntegrations: customDefaultIntegrations,\n    release: process.env._sentryRelease || globalWithInjectedValues._sentryRelease,\n    ...options,\n  };\n\n  applySdkMetadata(opts, 'nextjs', ['nextjs', 'vercel-edge']);\n\n  const client = vercelEdgeInit(opts);\n\n  client?.on('spanStart', span => {\n    const spanAttributes = spanToJSON(span).data;\n\n    // Mark all spans generated by Next.js as 'auto'\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // Make sure middleware spans get the right op\n    if (spanAttributes?.['next.span_type'] === 'Middleware.execute') {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'http.server.middleware');\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'url');\n    }\n  });\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // The otel auto inference will clobber the transaction name because the span has an http.target\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'Middleware.execute' &&\n      event.contexts?.trace?.data?.['next.span_name']\n    ) {\n      if (event.transaction) {\n        event.transaction = stripUrlQueryAndFragment(event.contexts.trace.data['next.span_name']);\n      }\n    }\n  });\n\n  client?.on('spanEnd', span => {\n    if (span === getRootSpan(span)) {\n      vercelWaitUntil(flushSafelyWithTimeout());\n    }\n  });\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (process.turbopack) {\n      getGlobalScope().setTag('turbopack', true);\n    }\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n}\n\n/**\n * Just a passthrough in case this is imported from the client.\n */\nexport function withSentryConfig<T>(exportedUserNextConfig: T): T {\n  return exportedUserNextConfig;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { HandlerDataFetch } from '../types-hoist/instrument';\nimport type { WebFetchHeaders } from '../types-hoist/webfetchapi';\nimport { isError, isRequest } from '../utils/is';\nimport { addNonEnumerableProperty, fill } from '../utils/object';\nimport { supportsNativeFetch } from '../utils/supports';\nimport { timestampInSeconds } from '../utils/time';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\ntype FetchResource = string | { toString(): string } | { url: string };\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addFetchInstrumentationHandler(\n  handler: (data: HandlerDataFetch) => void,\n  skipNativeFetchCheck?: boolean,\n): void {\n  const type = 'fetch';\n  addHandler(type, handler);\n  maybeInstrument(type, () => instrumentFetch(undefined, skipNativeFetchCheck));\n}\n\n/**\n * Add an instrumentation handler for long-lived fetch requests, like consuming server-sent events (SSE) via fetch.\n * The handler will resolve the request body and emit the actual `endTimestamp`, so that the\n * span can be updated accordingly.\n *\n * Only used internally\n * @hidden\n */\nexport function addFetchEndInstrumentationHandler(handler: (data: HandlerDataFetch) => void): void {\n  const type = 'fetch-body-resolved';\n  addHandler(type, handler);\n  maybeInstrument(type, () => instrumentFetch(streamHandler));\n}\n\nfunction instrumentFetch(onFetchResolved?: (response: Response) => void, skipNativeFetchCheck: boolean = false): void {\n  if (skipNativeFetchCheck && !supportsNativeFetch()) {\n    return;\n  }\n\n  fill(GLOBAL_OBJ, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      // We capture the error right here and not in the Promise error callback because Safari (and probably other\n      // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.\n\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n      //       it means the error, that was caused by your fetch call did not\n      //       have a stack trace, so the SDK backfilled the stack trace so\n      //       you can see which fetch call failed.\n      const virtualError = new Error();\n\n      const { method, url } = parseFetchArgs(args);\n      const handlerData: HandlerDataFetch = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: timestampInSeconds() * 1000,\n        // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation\n        virtualError,\n        headers: getHeadersFromFetchArgs(args),\n      };\n\n      // if there is no callback, fetch is instrumented directly\n      if (!onFetchResolved) {\n        triggerHandlers('fetch', {\n          ...handlerData,\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(GLOBAL_OBJ, args).then(\n        async (response: Response) => {\n          if (onFetchResolved) {\n            onFetchResolved(response);\n          } else {\n            triggerHandlers('fetch', {\n              ...handlerData,\n              endTimestamp: timestampInSeconds() * 1000,\n              response,\n            });\n          }\n\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: timestampInSeconds() * 1000,\n            error,\n          });\n\n          if (isError(error) && error.stack === undefined) {\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n            //       it means the error, that was caused by your fetch call did not\n            //       have a stack trace, so the SDK backfilled the stack trace so\n            //       you can see which fetch call failed.\n            error.stack = virtualError.stack;\n            addNonEnumerableProperty(error, 'framesToPop', 1);\n          }\n\n          // We enhance the not-so-helpful \"Failed to fetch\" error messages with the host\n          // Possible messages we handle here:\n          // * \"Failed to fetch\" (chromium)\n          // * \"Load failed\" (webkit)\n          // * \"NetworkError when attempting to fetch resource.\" (firefox)\n          if (\n            error instanceof TypeError &&\n            (error.message === 'Failed to fetch' ||\n              error.message === 'Load failed' ||\n              error.message === 'NetworkError when attempting to fetch resource.')\n          ) {\n            try {\n              const url = new URL(handlerData.fetchData.url);\n              error.message = `${error.message} (${url.host})`;\n            } catch {\n              // ignore it if errors happen here\n            }\n          }\n\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nasync function resolveResponse(res: Response | undefined, onFinishedResolving: () => void): Promise<void> {\n  if (res?.body) {\n    const body = res.body;\n    const responseReader = body.getReader();\n\n    // Define a maximum duration after which we just cancel\n    const maxFetchDurationTimeout = setTimeout(\n      () => {\n        body.cancel().then(null, () => {\n          // noop\n        });\n      },\n      90 * 1000, // 90s\n    );\n\n    let readingActive = true;\n    while (readingActive) {\n      let chunkTimeout;\n      try {\n        // abort reading if read op takes more than 5s\n        chunkTimeout = setTimeout(() => {\n          body.cancel().then(null, () => {\n            // noop on error\n          });\n        }, 5000);\n\n        // This .read() call will reject/throw when we abort due to timeouts through `body.cancel()`\n        const { done } = await responseReader.read();\n\n        clearTimeout(chunkTimeout);\n\n        if (done) {\n          onFinishedResolving();\n          readingActive = false;\n        }\n      } catch {\n        readingActive = false;\n      } finally {\n        clearTimeout(chunkTimeout);\n      }\n    }\n\n    clearTimeout(maxFetchDurationTimeout);\n\n    responseReader.releaseLock();\n    body.cancel().then(null, () => {\n      // noop on error\n    });\n  }\n}\n\nfunction streamHandler(response: Response): void {\n  // clone response for awaiting stream\n  let clonedResponseForResolving: Response;\n  try {\n    clonedResponseForResolving = response.clone();\n  } catch {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  resolveResponse(clonedResponseForResolving, () => {\n    triggerHandlers('fetch-body-resolved', {\n      endTimestamp: timestampInSeconds() * 1000,\n      response,\n    });\n  });\n}\n\nfunction hasProp<T extends string>(obj: unknown, prop: T): obj is Record<string, string> {\n  return !!obj && typeof obj === 'object' && !!(obj as Record<string, string>)[prop];\n}\n\nfunction getUrlFromResource(resource: FetchResource): string {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nexport function parseFetchArgs(fetchArgs: unknown[]): { method: string; url: string } {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs as [FetchResource, object];\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg as FetchResource),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n\nfunction getHeadersFromFetchArgs(fetchArgs: unknown[]): WebFetchHeaders | undefined {\n  const [requestArgument, optionsArgument] = fetchArgs;\n\n  try {\n    if (\n      typeof optionsArgument === 'object' &&\n      optionsArgument !== null &&\n      'headers' in optionsArgument &&\n      optionsArgument.headers\n    ) {\n      return new Headers(optionsArgument.headers as any);\n    }\n\n    if (isRequest(requestArgument)) {\n      return new Headers(requestArgument.headers);\n    }\n  } catch {\n    // noop\n  }\n\n  return;\n}\n","/* eslint-disable max-lines */\n\nimport { getAsyncContextStrategy } from '../asyncContext';\nimport type { AsyncContextStrategy } from '../asyncContext/types';\nimport { getMainCarrier } from '../carrier';\nimport { getClient, getCurrentScope, getIsolationScope, withScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Scope } from '../scope';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { ClientOptions } from '../types-hoist/options';\nimport type { SentrySpanArguments, Span, SpanTimeInput } from '../types-hoist/span';\nimport type { StartSpanOptions } from '../types-hoist/startSpanOptions';\nimport { baggageHeaderToDynamicSamplingContext } from '../utils/baggage';\nimport { debug } from '../utils/debug-logger';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { parseSampleRate } from '../utils/parseSampleRate';\nimport { generateTraceId } from '../utils/propagationContext';\nimport { _getSpanForScope, _setSpanForScope } from '../utils/spanOnScope';\nimport { addChildSpanToSpan, getRootSpan, spanIsSampled, spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\nimport { propagationContextFromHeaders, shouldContinueTrace } from '../utils/tracing';\nimport { freezeDscOnSpan, getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { logSpanStart } from './logSpans';\nimport { sampleSpan } from './sampling';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan';\nimport { SentrySpan } from './sentrySpan';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\nimport { setCapturedScopesOnSpan } from './utils';\n\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpan<T>(options: StartSpanOptions, callback: (span: Span) => T): T {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  // We still need to fork a potentially passed scope, as we set the active span on it\n  // and we need to ensure that it is cleaned up properly once the span ends.\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope, customParentSpan);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n        () => {\n          activeSpan.end();\n        },\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. Use `span.end()` to end the span.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startSpanManual<T>(options: StartSpanOptions, callback: (span: Span, finish: () => void) => T): T {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper<T>(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope, customParentSpan);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        // We pass the `finish` function to the callback, so the user can finish the span manually\n        // this is mainly here for historic purposes because previously, we instructed users to call\n        // `finish` instead of `span.end()` to also clean up the scope. Nowadays, calling `span.end()`\n        // or `finish` has the same effect and we simply leave it here to avoid breaking user code.\n        () => callback(activeSpan, () => activeSpan.end()),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nexport function startInactiveSpan(options: StartSpanOptions): Span {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope\n    ? (callback: () => Span) => withScope(options.scope, callback)\n    : customParentSpan !== undefined\n      ? (callback: () => Span) => withActiveSpan(customParentSpan, callback)\n      : (callback: () => Span) => callback();\n\n  return wrapper(() => {\n    const scope = getCurrentScope();\n    const parentSpan = getParentSpan(scope, customParentSpan);\n\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n\n    if (shouldSkipSpan) {\n      return new SentryNonRecordingSpan();\n    }\n\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope,\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nexport const continueTrace = <V>(\n  options: {\n    sentryTrace: Parameters<typeof propagationContextFromHeaders>[0];\n    baggage: Parameters<typeof propagationContextFromHeaders>[1];\n  },\n  callback: () => V,\n): V => {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n\n  const { sentryTrace, baggage } = options;\n\n  const client = getClient();\n  const incomingDsc = baggageHeaderToDynamicSamplingContext(baggage);\n  if (client && !shouldContinueTrace(client, incomingDsc?.org_id)) {\n    return startNewTrace(callback);\n  }\n\n  return withScope(scope => {\n    const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nexport function withActiveSpan<T>(span: Span | null, callback: (scope: Scope) => T): T {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n\n  return withScope(scope => {\n    _setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nexport function suppressTracing<T>(callback: () => T): T {\n  const acs = getAcs();\n\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n\n  return withScope(scope => {\n    // Note: We do not wait for the callback to finish before we reset the metadata\n    // the reason for this is that otherwise, in the browser this can lead to very weird behavior\n    // as there is only a single top scope, if the callback takes longer to finish,\n    // other, unrelated spans may also be suppressed, which we do not want\n    // so instead, we only suppress tracing synchronoysly in the browser\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: true });\n    const res = callback();\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: undefined });\n    return res;\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nexport function startNewTrace<T>(callback: () => T): T {\n  return withScope(scope => {\n    scope.setPropagationContext({\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    });\n    DEBUG_BUILD && debug.log(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\n\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope,\n}: {\n  parentSpan: SentrySpan | undefined;\n  spanArguments: SentrySpanArguments;\n  forceTransaction?: boolean;\n  scope: Scope;\n}): Span {\n  if (!hasSpansEnabled()) {\n    const span = new SentryNonRecordingSpan();\n\n    // If this is a root span, we ensure to freeze a DSC\n    // So we can have at least partial data here\n    if (forceTransaction || !parentSpan) {\n      const dsc = {\n        sampled: 'false',\n        sample_rate: '0',\n        transaction: spanArguments.name,\n        ...getDynamicSamplingContextFromSpan(span),\n      } satisfies Partial<DynamicSamplingContext>;\n      freezeDscOnSpan(span, dsc);\n    }\n\n    return span;\n  }\n\n  const isolationScope = getIsolationScope();\n\n  let span: Span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const parentSampled = spanIsSampled(parentSpan);\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled,\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    if (dsc) {\n      freezeDscOnSpan(span, dsc);\n    }\n  }\n\n  logSpanStart(span);\n\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options: StartSpanOptions): SentrySpanArguments {\n  const exp = options.experimental || {};\n  const initialCtx: SentrySpanArguments = {\n    isStandalone: exp.standalone,\n    ...options,\n  };\n\n  if (options.startTime) {\n    const ctx: SentrySpanArguments & { startTime?: SpanTimeInput } = { ...initialCtx };\n    ctx.startTimestamp = spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return initialCtx;\n}\n\nfunction getAcs(): AsyncContextStrategy {\n  const carrier = getMainCarrier();\n  return getAsyncContextStrategy(carrier);\n}\n\nfunction _startRootSpan(spanArguments: SentrySpanArguments, scope: Scope, parentSampled?: boolean): SentrySpan {\n  const client = getClient();\n  const options: Partial<ClientOptions> = client?.getOptions() || {};\n\n  const { name = '' } = spanArguments;\n\n  const mutableSpanSamplingData = { spanAttributes: { ...spanArguments.attributes }, spanName: name, parentSampled };\n\n  // we don't care about the decision for the moment; this is just a placeholder\n  client?.emit('beforeSampling', mutableSpanSamplingData, { decision: false });\n\n  // If hook consumers override the parentSampled flag, we will use that value instead of the actual one\n  const finalParentSampled = mutableSpanSamplingData.parentSampled ?? parentSampled;\n  const finalAttributes = mutableSpanSamplingData.spanAttributes;\n\n  const currentPropagationContext = scope.getPropagationContext();\n  const [sampled, sampleRate, localSampleRateWasApplied] = scope.getScopeData().sdkProcessingMetadata[\n    SUPPRESS_TRACING_KEY\n  ]\n    ? [false]\n    : sampleSpan(\n        options,\n        {\n          name,\n          parentSampled: finalParentSampled,\n          attributes: finalAttributes,\n          parentSampleRate: parseSampleRate(currentPropagationContext.dsc?.sample_rate),\n        },\n        currentPropagationContext.sampleRand,\n      );\n\n  const rootSpan = new SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]:\n        sampleRate !== undefined && localSampleRateWasApplied ? sampleRate : undefined,\n      ...finalAttributes,\n    },\n    sampled,\n  });\n\n  if (!sampled && client) {\n    DEBUG_BUILD && debug.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n    client.recordDroppedEvent('sample_rate', 'transaction');\n  }\n\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan: Span, scope: Scope, spanArguments: SentrySpanArguments): Span {\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanIsSampled(parentSpan);\n\n  const childSpan = sampled\n    ? new SentrySpan({\n        ...spanArguments,\n        parentSpanId: spanId,\n        traceId,\n        sampled,\n      })\n    : new SentryNonRecordingSpan({ traceId });\n\n  addChildSpanToSpan(parentSpan, childSpan);\n\n  const client = getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n\n  return childSpan;\n}\n\nfunction getParentSpan(scope: Scope, customParentSpan: Span | null | undefined): SentrySpan | undefined {\n  // always use the passed in span directly\n  if (customParentSpan) {\n    return customParentSpan as SentrySpan;\n  }\n\n  // This is different from `undefined` as it means the user explicitly wants no parent span\n  if (customParentSpan === null) {\n    return undefined;\n  }\n\n  const span = _getSpanForScope(scope) as SentrySpan | undefined;\n\n  if (!span) {\n    return undefined;\n  }\n\n  const client = getClient();\n  const options: Partial<ClientOptions> = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return getRootSpan(span) as SentrySpan;\n  }\n\n  return span;\n}\n\nfunction getActiveSpanWrapper<T>(parentSpan: Span | undefined | null): (callback: () => T) => T {\n  return parentSpan !== undefined\n    ? (callback: () => T) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback: () => T) => callback();\n}\n","import { getClient, getCurrentScope } from '../currentScopes';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { createSpanEnvelope } from '../envelope';\nimport {\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_PROFILE_ID,\n  SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { SpanEnvelope } from '../types-hoist/envelope';\nimport type { TransactionEvent } from '../types-hoist/event';\nimport type { SpanLink } from '../types-hoist/link';\nimport type {\n  SentrySpanArguments,\n  Span,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContextData,\n  SpanJSON,\n  SpanOrigin,\n  SpanTimeInput,\n} from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport type { TimedEvent } from '../types-hoist/timedEvent';\nimport type { TransactionSource } from '../types-hoist/transaction';\nimport { debug } from '../utils/debug-logger';\nimport { generateSpanId, generateTraceId } from '../utils/propagationContext';\nimport {\n  convertSpanLinksForEnvelope,\n  getRootSpan,\n  getSpanDescendants,\n  getStatusMessage,\n  spanTimeInputToSeconds,\n  spanToJSON,\n  spanToTransactionTraceContext,\n  TRACE_FLAG_NONE,\n  TRACE_FLAG_SAMPLED,\n} from '../utils/spanUtils';\nimport { timestampInSeconds } from '../utils/time';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { logSpanEnd } from './logSpans';\nimport { timedEventsToMeasurements } from './measurement';\nimport { getCapturedScopesOnSpan } from './utils';\n\nconst MAX_SPAN_COUNT = 1000;\n\n/**\n * Span contains all data about a span\n */\nexport class SentrySpan implements Span {\n  protected _traceId: string;\n  protected _spanId: string;\n  protected _parentSpanId?: string | undefined;\n  protected _sampled: boolean | undefined;\n  protected _name?: string | undefined;\n  protected _attributes: SpanAttributes;\n  protected _links?: SpanLink[];\n  /** Epoch timestamp in seconds when the span started. */\n  protected _startTime: number;\n  /** Epoch timestamp in seconds when the span ended. */\n  protected _endTime?: number | undefined;\n  /** Internal keeper of the status */\n  protected _status?: SpanStatus;\n  /** The timed events added to this span. */\n  protected _events: TimedEvent[];\n\n  /** if true, treat span as a standalone span (not part of a transaction) */\n  private _isStandaloneSpan?: boolean;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startSpan()`\n   * or other span methods.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext: SentrySpanArguments = {}) {\n    this._traceId = spanContext.traceId || generateTraceId();\n    this._spanId = spanContext.spanId || generateSpanId();\n    this._startTime = spanContext.startTimestamp || timestampInSeconds();\n    this._links = spanContext.links;\n\n    this._attributes = {};\n    this.setAttributes({\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes,\n    });\n\n    this._name = spanContext.name;\n\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n\n    this._events = [];\n\n    this._isStandaloneSpan = spanContext.isStandalone;\n\n    // If the span is already ended, ensure we finalize the span immediately\n    if (this._endTime) {\n      this._onSpanEnded();\n    }\n  }\n\n  /** @inheritDoc */\n  public addLink(link: SpanLink): this {\n    if (this._links) {\n      this._links.push(link);\n    } else {\n      this._links = [link];\n    }\n    return this;\n  }\n\n  /** @inheritDoc */\n  public addLinks(links: SpanLink[]): this {\n    if (this._links) {\n      this._links.push(...links);\n    } else {\n      this._links = links;\n    }\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  public recordException(_exception: unknown, _time?: number | undefined): void {\n    // noop\n  }\n\n  /** @inheritdoc */\n  public spanContext(): SpanContextData {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? TRACE_FLAG_SAMPLED : TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n  public setAttribute(key: string, value: SpanAttributeValue | undefined): this {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setAttributes(attributes: SpanAttributes): this {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for browser tracing where we want to adjust the start time afterwards.\n   * USE THIS WITH CAUTION!\n   *\n   * @hidden\n   * @internal\n   */\n  public updateStartTime(timeInput: SpanTimeInput): void {\n    this._startTime = spanTimeInputToSeconds(timeInput);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatus): this {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateName(name: string): this {\n    this._name = name;\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');\n    return this;\n  }\n\n  /** @inheritdoc */\n  public end(endTimestamp?: SpanTimeInput): void {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n\n    this._endTime = spanTimeInputToSeconds(endTimestamp);\n    logSpanEnd(this);\n\n    this._onSpanEnded();\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n  public getSpanJSON(): SpanJSON {\n    return {\n      data: this._attributes,\n      description: this._name,\n      op: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: getStatusMessage(this._status),\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined,\n      profile_id: this._attributes[SEMANTIC_ATTRIBUTE_PROFILE_ID] as string | undefined,\n      exclusive_time: this._attributes[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] as number | undefined,\n      measurements: timedEventsToMeasurements(this._events),\n      is_segment: (this._isStandaloneSpan && getRootSpan(this) === this) || undefined,\n      segment_id: this._isStandaloneSpan ? getRootSpan(this).spanContext().spanId : undefined,\n      links: convertSpanLinksForEnvelope(this._links),\n    };\n  }\n\n  /** @inheritdoc */\n  public isRecording(): boolean {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | SpanTimeInput,\n    startTime?: SpanTimeInput,\n  ): this {\n    DEBUG_BUILD && debug.log('[Tracing] Adding an event to span:', name);\n\n    const time = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || timestampInSeconds();\n    const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n\n    const event: TimedEvent = {\n      name,\n      time: spanTimeInputToSeconds(time),\n      attributes,\n    };\n\n    this._events.push(event);\n\n    return this;\n  }\n\n  /**\n   * This method should generally not be used,\n   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n   * USE THIS WITH CAUTION!\n   * @internal\n   * @hidden\n   * @experimental\n   */\n  public isStandaloneSpan(): boolean {\n    return !!this._isStandaloneSpan;\n  }\n\n  /** Emit `spanEnd` when the span is ended. */\n  private _onSpanEnded(): void {\n    const client = getClient();\n    if (client) {\n      client.emit('spanEnd', this);\n    }\n\n    // A segment span is basically the root span of a local span tree.\n    // So for now, this is either what we previously refer to as the root span,\n    // or a standalone span.\n    const isSegmentSpan = this._isStandaloneSpan || this === getRootSpan(this);\n\n    if (!isSegmentSpan) {\n      return;\n    }\n\n    // if this is a standalone span, we send it immediately\n    if (this._isStandaloneSpan) {\n      if (this._sampled) {\n        sendSpanEnvelope(createSpanEnvelope([this], client));\n      } else {\n        DEBUG_BUILD &&\n          debug.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'span');\n        }\n      }\n      return;\n    }\n\n    const transactionEvent = this._convertSpanToTransaction();\n    if (transactionEvent) {\n      const scope = getCapturedScopesOnSpan(this).scope || getCurrentScope();\n      scope.captureEvent(transactionEvent);\n    }\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  private _convertSpanToTransaction(): TransactionEvent | undefined {\n    // We can only convert finished spans\n    if (!isFullFinishedSpan(spanToJSON(this))) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      DEBUG_BUILD && debug.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = getCapturedScopesOnSpan(this);\n\n    const normalizedRequest = capturedSpanScope?.getScopeData().sdkProcessingMetadata?.normalizedRequest;\n\n    if (this._sampled !== true) {\n      return undefined;\n    }\n\n    // The transaction span itself as well as any potential standalone spans should be filtered out\n    const finishedSpans = getSpanDescendants(this).filter(span => span !== this && !isStandaloneSpan(span));\n\n    const spans = finishedSpans.map(span => spanToJSON(span)).filter(isFullFinishedSpan);\n\n    const source = this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] as TransactionSource | undefined;\n\n    // remove internal root span attributes we don't need to send.\n    /* eslint-disable @typescript-eslint/no-dynamic-delete */\n    delete this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    spans.forEach(span => {\n      delete span.data[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    });\n    // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete\n\n    const transaction: TransactionEvent = {\n      contexts: {\n        trace: spanToTransactionTraceContext(this),\n      },\n      spans:\n        // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n        // we do not use spans anymore after this point\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans,\n      start_timestamp: this._startTime,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        dynamicSamplingContext: getDynamicSamplingContextFromSpan(this),\n      },\n      request: normalizedRequest,\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const measurements = timedEventsToMeasurements(this._events);\n    const hasMeasurements = measurements && Object.keys(measurements).length;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        debug.log(\n          '[Measurements] Adding measurements to transaction event',\n          JSON.stringify(measurements, undefined, 2),\n        );\n      transaction.measurements = measurements;\n    }\n\n    return transaction;\n  }\n}\n\nfunction isSpanTimeInput(value: undefined | SpanAttributes | SpanTimeInput): value is SpanTimeInput {\n  return (value && typeof value === 'number') || value instanceof Date || Array.isArray(value);\n}\n\n// We want to filter out any incomplete SpanJSON objects\nfunction isFullFinishedSpan(input: Partial<SpanJSON>): input is SpanJSON {\n  return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n}\n\n/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\nfunction isStandaloneSpan(span: Span): boolean {\n  return span instanceof SentrySpan && span.isStandaloneSpan();\n}\n\n/**\n * Sends a `SpanEnvelope`.\n *\n * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n * the envelope will not be sent either.\n */\nfunction sendSpanEnvelope(envelope: SpanEnvelope): void {\n  const client = getClient();\n  if (!client) {\n    return;\n  }\n\n  const spanItems = envelope[1];\n  if (!spanItems || spanItems.length === 0) {\n    client.recordDroppedEvent('before_send', 'span');\n    return;\n  }\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n","import type { DsnComponents } from '../types-hoist/dsn';\nimport type { LogContainerItem, LogEnvelope } from '../types-hoist/envelope';\nimport type { SerializedLog } from '../types-hoist/log';\nimport type { SdkMetadata } from '../types-hoist/sdkmetadata';\nimport { dsnToString } from '../utils/dsn';\nimport { createEnvelope } from '../utils/envelope';\n\n/**\n * Creates a log container envelope item for a list of logs.\n *\n * @param items - The logs to include in the envelope.\n * @returns The created log container envelope item.\n */\nexport function createLogContainerEnvelopeItem(items: Array<SerializedLog>): LogContainerItem {\n  return [\n    {\n      type: 'log',\n      item_count: items.length,\n      content_type: 'application/vnd.sentry.items.log+json',\n    },\n    {\n      items,\n    },\n  ];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * Logs from multiple traces can be included in the same envelope.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nexport function createLogEnvelope(\n  logs: Array<SerializedLog>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): LogEnvelope {\n  const headers: LogEnvelope[0] = {};\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  return createEnvelope<LogEnvelope>(headers, [createLogContainerEnvelopeItem(logs)]);\n}\n","import type { Event } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { Mechanism } from '../types-hoist/mechanism';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\nimport { GLOBAL_OBJ } from './worldwide';\n\ninterface CryptoInternal {\n  getRandomValues(array: Uint8Array): Uint8Array;\n  randomUUID?(): string;\n}\n\n/** An interface for common properties on global */\ninterface CryptoGlobal {\n  msCrypto?: CryptoInternal;\n  crypto?: CryptoInternal;\n}\n\nfunction getCrypto(): CryptoInternal | undefined {\n  const gbl = GLOBAL_OBJ as typeof GLOBAL_OBJ & CryptoGlobal;\n  return gbl.crypto || gbl.msCrypto;\n}\n\n/**\n * UUID4 generator\n * @param crypto Object that provides the crypto API.\n * @returns string Generated UUID4.\n */\nexport function uuid4(crypto = getCrypto()): string {\n  let getRandomByte = (): number => Math.random() * 16;\n  try {\n    if (crypto?.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto?.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return typedArray[0]!;\n      };\n    }\n  } catch {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception?.values?.[0];\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\nfunction _parseInt(input: string | undefined): number {\n  return parseInt(input || '', 10);\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = _parseInt(match[1]);\n  const minor = _parseInt(match[2]);\n  const patch = _parseInt(match[3]);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  // We guard here to ensure this is not larger than the existing number of lines\n  const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  frame.context_line = snipLine(lines[lineIndex]!, frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  if (isAlreadyCaptured(exception)) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\nfunction isAlreadyCaptured(exception: unknown): boolean | void {\n  try {\n    return (exception as { __sentry_captured__?: boolean }).__sentry_captured__;\n  } catch {} // eslint-disable-line no-empty\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { debug } from '../utils/debug-logger';\nimport { getPossibleEventMessages } from '../utils/eventUtils';\nimport { getEventDescription } from '../utils/misc';\nimport { stringMatchesSomePattern } from '../utils/string';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n  /^Script error\\.?$/,\n  /^Javascript error: Script error\\.? on line 0$/,\n  /^ResizeObserver loop completed with undelivered notifications.$/, // The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.\n  /^Cannot redefine property: googletag$/, // This is thrown when google tag manager is used in combination with an ad blocker\n  /^Can't find variable: gmo$/, // Error from Google Search App https://issuetracker.google.com/issues/396043331\n  /^undefined is not an object \\(evaluating 'a\\.[A-Z]'\\)$/, // Random error that happens but not actionable or noticeable to end-users.\n  'can\\'t redefine non-configurable property \"solana\"', // Probably a browser extension or custom browser (Brave) throwing this error\n  \"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\", // Error thrown by GTM, seemingly not affecting end-users\n  \"Can't find variable: _AutofillCallbackHandler\", // Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/\n  /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/, // unactionable error from CEFSharp, a .NET library that embeds chromium in .NET apps\n  /^Java exception was raised during method invocation$/, // error from Facebook Mobile browser (https://github.com/getsentry/sentry-javascript/issues/15065)\n];\n\n/** Options for the EventFilters integration */\nexport interface EventFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreTransactions: Array<string | RegExp>;\n  ignoreInternal: boolean;\n  disableErrorDefaults: boolean;\n}\n\nconst INTEGRATION_NAME = 'EventFilters';\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n */\nexport const eventFiltersIntegration = defineIntegration((options: Partial<EventFiltersOptions> = {}) => {\n  let mergedOptions: Partial<EventFiltersOptions> | undefined;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const clientOptions = client.getOptions();\n      mergedOptions = _mergeOptions(options, clientOptions);\n    },\n    processEvent(event, _hint, client) {\n      if (!mergedOptions) {\n        const clientOptions = client.getOptions();\n        mergedOptions = _mergeOptions(options, clientOptions);\n      }\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    },\n  };\n});\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n *\n * @deprecated this integration was renamed and will be removed in a future major version.\n * Use `eventFiltersIntegration` instead.\n */\nexport const inboundFiltersIntegration = defineIntegration(((options: Partial<EventFiltersOptions> = {}) => {\n  return {\n    ...eventFiltersIntegration(options),\n    name: 'InboundFilters',\n  };\n}) satisfies IntegrationFn);\n\nfunction _mergeOptions(\n  internalOptions: Partial<EventFiltersOptions> = {},\n  clientOptions: Partial<EventFiltersOptions> = {},\n): Partial<EventFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],\n  };\n}\n\nfunction _shouldDropEvent(event: Event, options: Partial<EventFiltersOptions>): boolean {\n  if (!event.type) {\n    // Filter errors\n    if (_isIgnoredError(event, options.ignoreErrors)) {\n      DEBUG_BUILD &&\n        debug.warn(\n          `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n        );\n      return true;\n    }\n    if (_isUselessError(event)) {\n      DEBUG_BUILD &&\n        debug.warn(\n          `Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${getEventDescription(\n            event,\n          )}`,\n        );\n      return true;\n    }\n    if (_isDeniedUrl(event, options.denyUrls)) {\n      DEBUG_BUILD &&\n        debug.warn(\n          `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n    if (!_isAllowedUrl(event, options.allowUrls)) {\n      DEBUG_BUILD &&\n        debug.warn(\n          `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n  } else if (event.type === 'transaction') {\n    // Filter transactions\n\n    if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n      DEBUG_BUILD &&\n        debug.warn(\n          `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${getEventDescription(event)}`,\n        );\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  if (!ignoreErrors?.length) {\n    return false;\n  }\n\n  return getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event: Event, ignoreTransactions?: Array<string | RegExp>): boolean {\n  if (!ignoreTransactions?.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  if (!denyUrls?.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  if (!allowUrls?.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    // If there are linked exceptions or exception aggregates we only want to match against the top frame of the \"root\" (the main exception)\n    // The root always comes last in linked exceptions\n    const rootException = [...(event.exception?.values ?? [])]\n      .reverse()\n      .find(value => value.mechanism?.parent_id === undefined && value.stacktrace?.frames?.length);\n    const frames = rootException?.stacktrace?.frames;\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch {\n    DEBUG_BUILD && debug.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n\nfunction _isUselessError(event: Event): boolean {\n  // We only want to consider events for dropping that actually have recorded exception values.\n  if (!event.exception?.values?.length) {\n    return false;\n  }\n\n  return (\n    // No top-level message\n    !event.message &&\n    // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some(value => value.stacktrace || (value.type && value.type !== 'Error') || value.value)\n  );\n}\n","import { createCheckInEnvelope } from './checkin';\nimport { _getTraceInfoFromScope, Client } from './client';\nimport { getIsolationScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport { _INTERNAL_flushLogsBuffer } from './logs/exports';\nimport type { Scope } from './scope';\nimport { registerSpanErrorInstrumentation } from './tracing';\nimport type { CheckIn, MonitorConfig, SerializedCheckIn } from './types-hoist/checkin';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { Log } from './types-hoist/log';\nimport type { Primitive } from './types-hoist/misc';\nimport type { ClientOptions } from './types-hoist/options';\nimport type { ParameterizedString } from './types-hoist/parameterize';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { BaseTransportOptions } from './types-hoist/transport';\nimport { debug } from './utils/debug-logger';\nimport { eventFromMessage, eventFromUnknownInput } from './utils/eventbuilder';\nimport { isPrimitive } from './utils/is';\nimport { uuid4 } from './utils/misc';\nimport { resolvedSyncPromise } from './utils/syncpromise';\n\n// TODO: Make this configurable\nconst DEFAULT_LOG_FLUSH_INTERVAL = 5000;\n\nexport interface ServerRuntimeClientOptions extends ClientOptions<BaseTransportOptions> {\n  platform?: string;\n  runtime?: { name: string; version?: string };\n  serverName?: string;\n}\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nexport class ServerRuntimeClient<\n  O extends ClientOptions & ServerRuntimeClientOptions = ServerRuntimeClientOptions,\n> extends Client<O> {\n  private _logFlushIdleTimeout: ReturnType<typeof setTimeout> | undefined;\n  private _logWeight: number;\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: O) {\n    // Server clients always support tracing\n    registerSpanErrorInstrumentation();\n\n    super(options);\n\n    this._logWeight = 0;\n\n    if (this._options.enableLogs) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const client = this;\n\n      client.on('flushLogs', () => {\n        client._logWeight = 0;\n        clearTimeout(client._logFlushIdleTimeout);\n      });\n\n      client.on('afterCaptureLog', log => {\n        client._logWeight += estimateLogSizeInBytes(log);\n\n        // We flush the logs buffer if it exceeds 0.8 MB\n        // The log weight is a rough estimate, so we flush way before\n        // the payload gets too big.\n        if (client._logWeight >= 800_000) {\n          _INTERNAL_flushLogsBuffer(client);\n        } else {\n          // start an idle timeout to flush the logs buffer if no logs are captured for a while\n          client._logFlushIdleTimeout = setTimeout(() => {\n            _INTERNAL_flushLogsBuffer(client);\n          }, DEFAULT_LOG_FLUSH_INTERVAL);\n        }\n      });\n\n      client.on('flush', () => {\n        _INTERNAL_flushLogsBuffer(client);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    const event = eventFromUnknownInput(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n\n    return resolvedSyncPromise(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: ParameterizedString,\n    level: SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return resolvedSyncPromise(\n      eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: unknown, hint?: EventHint, scope?: Scope): string {\n    setCurrentRequestSessionErroredOrCrashed(hint);\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string {\n    // If the event is of type Exception, then a request session should be captured\n    const isException = !event.type && event.exception?.values && event.exception.values.length > 0;\n    if (isException) {\n      setCurrentRequestSessionErroredOrCrashed(hint);\n    }\n\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  public captureCheckIn(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : uuid4();\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && debug.warn('SDK not enabled, will not capture check-in.');\n      return id;\n    }\n\n    const options = this.getOptions();\n    const { release, environment, tunnel } = options;\n\n    const serializedCheckIn: SerializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment,\n    };\n\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold,\n      };\n    }\n\n    const [dynamicSamplingContext, traceContext] = _getTraceInfoFromScope(this, scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext,\n      };\n    }\n\n    const envelope = createCheckInEnvelope(\n      serializedCheckIn,\n      dynamicSamplingContext,\n      this.getSdkMetadata(),\n      tunnel,\n      this.getDsn(),\n    );\n\n    DEBUG_BUILD && debug.log('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n\n    return id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event | null> {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: event.contexts?.runtime || this._options.runtime,\n      };\n    }\n\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n\n    return super._prepareEvent(event, hint, currentScope, isolationScope);\n  }\n}\n\nfunction setCurrentRequestSessionErroredOrCrashed(eventHint?: EventHint): void {\n  const requestSession = getIsolationScope().getScopeData().sdkProcessingMetadata.requestSession;\n  if (requestSession) {\n    // We mutate instead of doing `setSdkProcessingMetadata` because the http integration stores away a particular\n    // isolationScope. If that isolation scope is forked, setting the processing metadata here will not mutate the\n    // original isolation scope that the http integration stored away.\n    const isHandledException = eventHint?.mechanism?.handled ?? true;\n    // A request session can go from \"errored\" -> \"crashed\" but not \"crashed\" -> \"errored\".\n    // Crashed (unhandled exception) is worse than errored (handled exception).\n    if (isHandledException && requestSession.status !== 'crashed') {\n      requestSession.status = 'errored';\n    } else if (!isHandledException) {\n      requestSession.status = 'crashed';\n    }\n  }\n}\n\n/**\n * Estimate the size of a log in bytes.\n *\n * @param log - The log to estimate the size of.\n * @returns The estimated size of the log in bytes.\n */\nfunction estimateLogSizeInBytes(log: Log): number {\n  let weight = 0;\n\n  // Estimate byte size of 2 bytes per character. This is a rough estimate JS strings are stored as UTF-16.\n  if (log.message) {\n    weight += log.message.length * 2;\n  }\n\n  if (log.attributes) {\n    Object.values(log.attributes).forEach(value => {\n      if (Array.isArray(value)) {\n        weight += value.length * estimatePrimitiveSizeInBytes(value[0]);\n      } else if (isPrimitive(value)) {\n        weight += estimatePrimitiveSizeInBytes(value);\n      } else {\n        // For objects values, we estimate the size of the object as 100 bytes\n        weight += 100;\n      }\n    });\n  }\n\n  return weight;\n}\n\nfunction estimatePrimitiveSizeInBytes(value: Primitive): number {\n  if (typeof value === 'string') {\n    return value.length * 2;\n  } else if (typeof value === 'number') {\n    return 8;\n  } else if (typeof value === 'boolean') {\n    return 4;\n  }\n\n  return 0;\n}\n","import { getGlobalSingleton } from '../carrier';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { GLOBAL_OBJ } from './worldwide';\n\nexport interface SentryDebugLogger {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n  log(...args: Parameters<typeof console.log>): void;\n  warn(...args: Parameters<typeof console.warn>): void;\n  error(...args: Parameters<typeof console.error>): void;\n}\n\nexport const CONSOLE_LEVELS: readonly ConsoleLevel[] = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] as const;\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: Partial<{\n  log(...args: Parameters<typeof console.log>): void;\n  info(...args: Parameters<typeof console.info>): void;\n  warn(...args: Parameters<typeof console.warn>): void;\n  error(...args: Parameters<typeof console.error>): void;\n  debug(...args: Parameters<typeof console.debug>): void;\n  assert(...args: Parameters<typeof console.assert>): void;\n  trace(...args: Parameters<typeof console.trace>): void;\n}> = {};\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<Record<ConsoleLevel, (...args: unknown[]) => void>> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level] as (...args: unknown[]) => void;\n    console[level] = originalConsoleMethod as (...args: unknown[]) => void;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as (...args: unknown[]) => void;\n    });\n  }\n}\n\nfunction enable(): void {\n  _getLoggerSettings().enabled = true;\n}\n\nfunction disable(): void {\n  _getLoggerSettings().enabled = false;\n}\n\nfunction isEnabled(): boolean {\n  return _getLoggerSettings().enabled;\n}\n\nfunction log(...args: Parameters<typeof console.log>): void {\n  _maybeLog('log', ...args);\n}\n\nfunction info(...args: Parameters<typeof console.info>): void {\n  _maybeLog('info', ...args);\n}\n\nfunction warn(...args: Parameters<typeof console.warn>): void {\n  _maybeLog('warn', ...args);\n}\n\nfunction error(...args: Parameters<typeof console.error>): void {\n  _maybeLog('error', ...args);\n}\n\nfunction _maybeLog(level: ConsoleLevel, ...args: Parameters<(typeof console)[typeof level]>): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  if (isEnabled()) {\n    consoleSandbox(() => {\n      GLOBAL_OBJ.console[level](`${PREFIX}[${level}]:`, ...args);\n    });\n  }\n}\n\nfunction _getLoggerSettings(): { enabled: boolean } {\n  if (!DEBUG_BUILD) {\n    return { enabled: false };\n  }\n\n  return getGlobalSingleton('loggerSettings', () => ({ enabled: false }));\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n */\nexport const debug = {\n  /** Enable logging. */\n  enable,\n  /** Disable logging. */\n  disable,\n  /** Check if logging is enabled. */\n  isEnabled,\n  /** Log a message. */\n  log,\n  /** Log a warning. */\n  warn,\n  /** Log an error. */\n  error,\n} satisfies SentryDebugLogger;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { Context, ContextManager } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'context';\nconst NOOP_CONTEXT_MANAGER = new NoopContextManager();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport class ContextAPI {\n  private static _instance?: ContextAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Context API */\n  public static getInstance(): ContextAPI {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  public setGlobalContextManager(contextManager: ContextManager): boolean {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  }\n\n  /**\n   * Get the currently active context\n   */\n  public active(): Context {\n    return this._getContextManager().active();\n  }\n\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return this._getContextManager().with(context, fn, thisArg, ...args);\n  }\n\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  public bind<T>(context: Context, target: T): T {\n    return this._getContextManager().bind(context, target);\n  }\n\n  private _getContextManager(): ContextManager {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  }\n\n  /** Disable and remove the global context manager */\n  public disable() {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport {\n  ComponentLoggerOptions,\n  DiagLogFunction,\n  DiagLogger,\n  DiagLoggerApi,\n  DiagLogLevel,\n} from '../diag/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\n\nconst API_NAME = 'diag';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nexport class DiagAPI implements DiagLogger, DiagLoggerApi {\n  private static _instance?: DiagAPI;\n\n  /** Get the singleton instance of the DiagAPI API */\n  public static instance(): DiagAPI {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Private internal constructor\n   * @private\n   */\n  private constructor() {\n    function _logProxy(funcName: keyof DiagLogger): DiagLogFunction {\n      return function (...args) {\n        const logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName](...args);\n      };\n    }\n\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    const self = this;\n\n    // DiagAPI specific functions\n\n    const setLogger: DiagLoggerApi['setLogger'] = (\n      logger,\n      optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }\n    ) => {\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        const err = new Error(\n          'Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation'\n        );\n        self.error(err.stack ?? err.message);\n        return false;\n      }\n\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel,\n        };\n      }\n\n      const oldLogger = getGlobal('diag');\n      const newLogger = createLogLevelDiagLogger(\n        optionsOrLogLevel.logLevel ?? DiagLogLevel.INFO,\n        logger\n      );\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        const stack = new Error().stack ?? '<failed to generate stacktrace>';\n        oldLogger.warn(`Current logger will be overwritten from ${stack}`);\n        newLogger.warn(\n          `Current logger will overwrite one already registered from ${stack}`\n        );\n      }\n\n      return registerGlobal('diag', newLogger, self, true);\n    };\n\n    self.setLogger = setLogger;\n\n    self.disable = () => {\n      unregisterGlobal(API_NAME, self);\n    };\n\n    self.createComponentLogger = (options: ComponentLoggerOptions) => {\n      return new DiagComponentLogger(options);\n    };\n\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n\n  public setLogger!: DiagLoggerApi['setLogger'];\n  /**\n   *\n   */\n  public createComponentLogger!: (\n    options: ComponentLoggerOptions\n  ) => DiagLogger;\n\n  // DiagLogger implementation\n  public verbose!: DiagLogFunction;\n  public debug!: DiagLogFunction;\n  public info!: DiagLogFunction;\n  public warn!: DiagLogFunction;\n  public error!: DiagLogFunction;\n\n  /**\n   * Unregister the global logger and return to Noop\n   */\n  public disable!: () => void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Baggage } from './types';\n\n/**\n * Baggage key\n */\nconst BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context: Context): Baggage | undefined {\n  return (context.getValue(BAGGAGE_KEY) as Baggage) || undefined;\n}\n\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage(): Baggage | undefined {\n  return getBaggage(ContextAPI.getInstance().active());\n}\n\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context: Context, baggage: Baggage): Context {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context: Context): Context {\n  return context.deleteValue(BAGGAGE_KEY);\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst STATE_PENDING = 0;\nconst STATE_RESOLVED = 1;\nconst STATE_REJECTED = 2;\n\ntype State = typeof STATE_PENDING | typeof STATE_RESOLVED | typeof STATE_REJECTED;\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\ntype Executor<T> = (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void;\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nexport class SyncPromise<T> implements PromiseLike<T> {\n  private _state: State;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]>;\n  private _value: any;\n\n  public constructor(executor: Executor<T>) {\n    this._state = STATE_PENDING;\n    this._handlers = [];\n\n    this._runExecutor(executor);\n  }\n\n  /** @inheritdoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** @inheritdoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** @inheritdoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** Excute the resolve/reject handlers. */\n  private _executeHandlers(): void {\n    if (this._state === STATE_PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === STATE_RESOLVED) {\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === STATE_REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  }\n\n  /** Run the executor for the SyncPromise. */\n  private _runExecutor(executor: Executor<T>): void {\n    const setResult = (state: State, value?: T | PromiseLike<T> | any): void => {\n      if (this._state !== STATE_PENDING) {\n        return;\n      }\n\n      if (isThenable(value)) {\n        void (value as PromiseLike<T>).then(resolve, reject);\n        return;\n      }\n\n      this._state = state;\n      this._value = value;\n\n      this._executeHandlers();\n    };\n\n    const resolve = (value: unknown): void => {\n      setResult(STATE_RESOLVED, value);\n    };\n\n    const reject = (reason: unknown): void => {\n      setResult(STATE_REJECTED, reason);\n    };\n\n    try {\n      executor(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ROOT_CONTEXT } from './context';\nimport * as types from './types';\n\nexport class NoopContextManager implements types.ContextManager {\n  active(): types.Context {\n    return ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    _context: types.Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return fn.call(thisArg, ...args);\n  }\n\n  bind<T>(_context: types.Context, target: T): T {\n    return target;\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    return this;\n  }\n}\n","import type { SerializedSession, Session, SessionContext, SessionStatus } from './types-hoist/session';\nimport { uuid4 } from './utils/misc';\nimport { timestampInSeconds } from './utils/time';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see Client.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return {\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobal } from '../internal/global-utils';\nimport { ComponentLoggerOptions, DiagLogger, DiagLogFunction } from './types';\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nexport class DiagComponentLogger implements DiagLogger {\n  private _namespace: string;\n\n  constructor(props: ComponentLoggerOptions) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  public debug(...args: any[]): void {\n    return logProxy('debug', this._namespace, args);\n  }\n\n  public error(...args: any[]): void {\n    return logProxy('error', this._namespace, args);\n  }\n\n  public info(...args: any[]): void {\n    return logProxy('info', this._namespace, args);\n  }\n\n  public warn(...args: any[]): void {\n    return logProxy('warn', this._namespace, args);\n  }\n\n  public verbose(...args: any[]): void {\n    return logProxy('verbose', this._namespace, args);\n  }\n}\n\nfunction logProxy(\n  funcName: keyof DiagLogger,\n  namespace: string,\n  args: any\n): void {\n  const logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName](...(args as Parameters<DiagLogFunction>));\n}\n","// Vendored / modified from @sergiodxa/remix-utils\n\n// https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts\n// MIT License\n\n// Copyright (c) 2021 Sergio Xalambrí\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// The headers to check, in priority order\nexport const ipHeaderNames = [\n  'X-Client-IP',\n  'X-Forwarded-For',\n  'Fly-Client-IP',\n  'CF-Connecting-IP',\n  'Fastly-Client-Ip',\n  'True-Client-Ip',\n  'X-Real-IP',\n  'X-Cluster-Client-IP',\n  'X-Forwarded',\n  'Forwarded-For',\n  'Forwarded',\n  'X-Vercel-Forwarded-For',\n];\n\n/**\n * Get the IP address of the client sending a request.\n *\n * It receives a Request headers object and use it to get the\n * IP address from one of the following headers in order.\n *\n * If the IP address is valid, it will be returned. Otherwise, null will be\n * returned.\n *\n * If the header values contains more than one IP address, the first valid one\n * will be returned.\n */\nexport function getClientIPAddress(headers: { [key: string]: string | string[] | undefined }): string | null {\n  // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header\n  // can take\n  const headerValues = ipHeaderNames.map((headerName: string) => {\n    const rawValue = headers[headerName];\n    const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;\n\n    if (headerName === 'Forwarded') {\n      return parseForwardedHeader(value);\n    }\n\n    return value?.split(',').map((v: string) => v.trim());\n  });\n\n  // Flatten the array and filter out any falsy entries\n  const flattenedHeaderValues = headerValues.reduce((acc: string[], val) => {\n    if (!val) {\n      return acc;\n    }\n\n    return acc.concat(val);\n  }, []);\n\n  // Find the first value which is a valid IP address, if any\n  const ipAddress = flattenedHeaderValues.find(ip => ip !== null && isIP(ip));\n\n  return ipAddress || null;\n}\n\nfunction parseForwardedHeader(value: string | null | undefined): string | null {\n  if (!value) {\n    return null;\n  }\n\n  for (const part of value.split(';')) {\n    if (part.startsWith('for=')) {\n      return part.slice(4);\n    }\n  }\n\n  return null;\n}\n\n//\n/**\n * Custom method instead of importing this from `net` package, as this only exists in node\n * Accepts:\n * 127.0.0.1\n * 192.168.1.1\n * 192.168.1.255\n * 255.255.255.255\n * 10.1.1.1\n * 0.0.0.0\n * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5\n *\n * Rejects:\n * 1.1.1.01\n * 30.168.1.255.1\n * 127.1\n * 192.168.1.256\n * -1.2.3.4\n * 1.1.1.1.\n * 3...3\n * 192.168.1.099\n */\nfunction isIP(str: string): boolean {\n  const regex =\n    /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;\n  return regex.test(str);\n}\n","/* eslint-disable max-lines */\nimport type { Client } from './client';\nimport { DEBUG_BUILD } from './debug-build';\nimport { updateSession } from './session';\nimport type { Attachment } from './types-hoist/attachment';\nimport type { Breadcrumb } from './types-hoist/breadcrumb';\nimport type { Context, Contexts } from './types-hoist/context';\nimport type { DynamicSamplingContext } from './types-hoist/envelope';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { Extra, Extras } from './types-hoist/extra';\nimport type { Primitive } from './types-hoist/misc';\nimport type { RequestEventData } from './types-hoist/request';\nimport type { Session } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { Span } from './types-hoist/span';\nimport type { PropagationContext } from './types-hoist/tracing';\nimport type { User } from './types-hoist/user';\nimport { debug } from './utils/debug-logger';\nimport { isPlainObject } from './utils/is';\nimport { merge } from './utils/merge';\nimport { uuid4 } from './utils/misc';\nimport { generateTraceId } from './utils/propagationContext';\nimport { _getSpanForScope, _setSpanForScope } from './utils/spanOnScope';\nimport { truncate } from './utils/string';\nimport { dateTimestampInSeconds } from './utils/time';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * A context to be used for capturing an event.\n * This can either be a Scope, or a partial ScopeContext,\n * or a callback that receives the current scope and returns a new scope to use.\n */\nexport type CaptureContext = Scope | Partial<ScopeContext> | ((scope: Scope) => Scope);\n\n/**\n * Data that can be converted to a Scope.\n */\nexport interface ScopeContext {\n  user: User;\n  level: SeverityLevel;\n  extra: Extras;\n  contexts: Contexts;\n  tags: { [key: string]: Primitive };\n  fingerprint: string[];\n  propagationContext: PropagationContext;\n}\n\nexport interface SdkProcessingMetadata {\n  [key: string]: unknown;\n  requestSession?: {\n    status: 'ok' | 'errored' | 'crashed';\n  };\n  normalizedRequest?: RequestEventData;\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>;\n  capturedSpanScope?: Scope;\n  capturedSpanIsolationScope?: Scope;\n  spanCountBeforeProcessing?: number;\n  ipAddress?: string;\n}\n\n/**\n * Normalized data of the Scope, ready to be used.\n */\nexport interface ScopeData {\n  eventProcessors: EventProcessor[];\n  breadcrumbs: Breadcrumb[];\n  user: User;\n  tags: { [key: string]: Primitive };\n  extra: Extras;\n  contexts: Contexts;\n  attachments: Attachment[];\n  propagationContext: PropagationContext;\n  sdkProcessingMetadata: SdkProcessingMetadata;\n  fingerprint: string[];\n  level?: SeverityLevel;\n  transactionName?: string;\n  span?: Span;\n}\n\n/**\n * Holds additional event information.\n */\nexport class Scope {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called during event processing. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /** Propagation Context for distributed tracing */\n  protected _propagationContext: PropagationContext;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: SdkProcessingMetadata;\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: SeverityLevel;\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n  protected _transactionName?: string;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** The client on this scope */\n  protected _client?: Client;\n\n  /** Contains the last event id of a captured event.  */\n  protected _lastEventId?: string;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  /**\n   * Clone all data from this scope into a new scope.\n   */\n  public clone(): Scope {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values],\n      };\n    }\n\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n\n    _setSpanForScope(newScope, _getSpanForScope(this));\n\n    return newScope;\n  }\n\n  /**\n   * Update the client assigned to this scope.\n   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,\n   * as well as manually created scopes.\n   */\n  public setClient(client: Client | undefined): void {\n    this._client = client;\n  }\n\n  /**\n   * Set the ID of the last captured error event.\n   * This is generally only captured on the isolation scope.\n   */\n  public setLastEventId(lastEventId: string | undefined): void {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this._client as C | undefined;\n  }\n\n  /**\n   * Get the ID of the last captured error event.\n   * This is generally only available on the isolation scope.\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * Add an event processor that will be called before an event is sent.\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * Set the user for this scope.\n   * Set to `null` to unset the user.\n   */\n  public setUser(user: User | null): this {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the user from this scope.\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * Set an object that will be merged into existing tags on the scope,\n   * and will be sent as tags data with the event.\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single tag that will be sent as tags data with the event.\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set an object that will be merged into existing extra on the scope,\n   * and will be sent as extra data with the event.\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single key:value extra entry that will be sent as extra data with the event.\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param {string[]} fingerprint Fingerprint to group events in Sentry.\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   */\n  public setLevel(level: SeverityLevel): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets context data with the given name.\n   * Data passed as context will be normalized. You can also pass `null` to unset the context.\n   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set the session for the scope.\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the session from the scope.\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    const scopeInstance =\n      scopeToMerge instanceof Scope\n        ? scopeToMerge.getScopeData()\n        : isPlainObject(scopeToMerge)\n          ? (captureContext as ScopeContext)\n          : undefined;\n\n    const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};\n\n    this._tags = { ...this._tags, ...tags };\n    this._extra = { ...this._extra, ...extra };\n    this._contexts = { ...this._contexts, ...contexts };\n\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n\n    if (level) {\n      this._level = level;\n    }\n\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the current scope and resets its properties.\n   * Note: The client will not be cleared.\n   */\n  public clear(): this {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._session = undefined;\n    _setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Adds a breadcrumb to the scope.\n   * By default, the last 100 breadcrumbs are kept.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb: Breadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory\n      message: breadcrumb.message ? truncate(breadcrumb.message, 2048) : breadcrumb.message,\n    };\n\n    this._breadcrumbs.push(mergedBreadcrumb);\n    if (this._breadcrumbs.length > maxCrumbs) {\n      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n      this._client?.recordDroppedEvent('buffer_overflow', 'log_item');\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * Get the last breadcrumb of the scope.\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * Clear all breadcrumbs from the scope.\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Add an attachment to the scope.\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * Clear all attachments from the scope.\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Get the data of this scope, which should be applied to an event during processing.\n   */\n  public getScopeData(): ScopeData {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: _getSpanForScope(this),\n    };\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry.\n   */\n  public setSDKProcessingMetadata(newData: SdkProcessingMetadata): this {\n    this._sdkProcessingMetadata = merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * Add propagation context to the scope, used for distributed tracing\n   */\n  public setPropagationContext(context: PropagationContext): this {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * Get propagation context from the scope, used for distributed tracing\n   */\n  public getPropagationContext(): PropagationContext {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @returns {string} The id of the captured Sentry event.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @returns {string} The id of the captured message.\n   */\n  public captureMessage(message: string, level?: SeverityLevel, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a Sentry event for this scope.\n   *\n   * @returns {string} The id of the captured event.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n","/* eslint-disable max-lines */\n/**\n * AI SDK Telemetry Attributes\n * Based on https://ai-sdk.dev/docs/ai-sdk-core/telemetry#collected-data\n */\n\n// =============================================================================\n// COMMON ATTRIBUTES\n// =============================================================================\n\n/**\n * Common attribute for operation name across all functions and spans\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#collected-data\n */\nexport const OPERATION_NAME_ATTRIBUTE = 'operation.name';\n\n/**\n * Common attribute for AI operation ID across all functions and spans\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#collected-data\n */\nexport const AI_OPERATION_ID_ATTRIBUTE = 'ai.operationId';\n\n// =============================================================================\n// SHARED ATTRIBUTES\n// =============================================================================\n\n/**\n * `generateText` function - `ai.generateText` span\n * `streamText` function - `ai.streamText` span\n *\n * The prompt that was used when calling the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_PROMPT_ATTRIBUTE = 'ai.prompt';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The JSON schema version of the schema that was passed into the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SCHEMA_ATTRIBUTE = 'ai.schema';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The name of the schema that was passed into the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SCHEMA_NAME_ATTRIBUTE = 'ai.schema.name';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The description of the schema that was passed into the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SCHEMA_DESCRIPTION_ATTRIBUTE = 'ai.schema.description';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The object that was generated (stringified JSON)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_RESPONSE_OBJECT_ATTRIBUTE = 'ai.response.object';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The object generation mode, e.g. `json`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SETTINGS_MODE_ATTRIBUTE = 'ai.settings.mode';\n\n/**\n * `generateObject` function - `ai.generateObject` span\n * `streamObject` function - `ai.streamObject` span\n *\n * The output type that was used, e.g. `object` or `no-schema`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_SETTINGS_OUTPUT_ATTRIBUTE = 'ai.settings.output';\n\n/**\n * `embed` function - `ai.embed.doEmbed` span\n * `embedMany` function - `ai.embedMany` span\n *\n * The values that were passed into the function (array)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embedmany-function\n */\nexport const AI_VALUES_ATTRIBUTE = 'ai.values';\n\n/**\n * `embed` function - `ai.embed.doEmbed` span\n * `embedMany` function - `ai.embedMany` span\n *\n * An array of JSON-stringified embeddings\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embedmany-function\n */\nexport const AI_EMBEDDINGS_ATTRIBUTE = 'ai.embeddings';\n\n// =============================================================================\n// GENERATETEXT FUNCTION - UNIQUE ATTRIBUTES\n// =============================================================================\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The text that was generated\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_RESPONSE_TEXT_ATTRIBUTE = 'ai.response.text';\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The tool calls that were made as part of the generation (stringified JSON)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = 'ai.response.toolCalls';\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The reason why the generation finished\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_RESPONSE_FINISH_REASON_ATTRIBUTE = 'ai.response.finishReason';\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The maximum number of steps that were set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_SETTINGS_MAX_STEPS_ATTRIBUTE = 'ai.settings.maxSteps';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * The format of the prompt\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_PROMPT_FORMAT_ATTRIBUTE = 'ai.prompt.format';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * The messages that were passed into the provider\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_PROMPT_MESSAGES_ATTRIBUTE = 'ai.prompt.messages';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * Array of stringified tool definitions\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_PROMPT_TOOLS_ATTRIBUTE = 'ai.prompt.tools';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * The stringified tool choice setting (JSON)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_PROMPT_TOOL_CHOICE_ATTRIBUTE = 'ai.prompt.toolChoice';\n\n// =============================================================================\n// STREAMTEXT FUNCTION - UNIQUE ATTRIBUTES\n// =============================================================================\n\n/**\n * `streamText` function - `ai.streamText.doStream` span\n *\n * The time it took to receive the first chunk in milliseconds\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_RESPONSE_MS_TO_FIRST_CHUNK_ATTRIBUTE = 'ai.response.msToFirstChunk';\n\n/**\n * `streamText` function - `ai.streamText.doStream` span\n *\n * The time it took to receive the finish part of the LLM stream in milliseconds\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_RESPONSE_MS_TO_FINISH_ATTRIBUTE = 'ai.response.msToFinish';\n\n/**\n * `streamText` function - `ai.streamText.doStream` span\n *\n * The average completion tokens per second\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_RESPONSE_AVG_COMPLETION_TOKENS_PER_SECOND_ATTRIBUTE = 'ai.response.avgCompletionTokensPerSecond';\n\n// =============================================================================\n// EMBED FUNCTION - UNIQUE ATTRIBUTES\n// =============================================================================\n\n/**\n * `embed` function - `ai.embed` span\n *\n * The value that was passed into the `embed` function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n */\nexport const AI_VALUE_ATTRIBUTE = 'ai.value';\n\n/**\n * `embed` function - `ai.embed` span\n *\n * A JSON-stringified embedding\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n */\nexport const AI_EMBEDDING_ATTRIBUTE = 'ai.embedding';\n\n// =============================================================================\n// BASIC LLM SPAN INFORMATION\n// =============================================================================\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The functionId that was set through `telemetry.functionId`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const RESOURCE_NAME_ATTRIBUTE = 'resource.name';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The id of the model\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_MODEL_ID_ATTRIBUTE = 'ai.model.id';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The provider of the model\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_MODEL_PROVIDER_ATTRIBUTE = 'ai.model.provider';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The request headers that were passed in through `headers`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_REQUEST_HEADERS_ATTRIBUTE = 'ai.request.headers';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * Provider specific metadata returned with the generation response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_RESPONSE_PROVIDER_METADATA_ATTRIBUTE = 'ai.response.providerMetadata';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The maximum number of retries that were set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_SETTINGS_MAX_RETRIES_ATTRIBUTE = 'ai.settings.maxRetries';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The functionId that was set through `telemetry.functionId`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE = 'ai.telemetry.functionId';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The metadata that was passed in through `telemetry.metadata`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_TELEMETRY_METADATA_ATTRIBUTE = 'ai.telemetry.metadata';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The number of completion tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = 'ai.usage.completionTokens';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The number of prompt tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nexport const AI_USAGE_PROMPT_TOKENS_ATTRIBUTE = 'ai.usage.promptTokens';\n\n// =============================================================================\n// CALL LLM SPAN INFORMATION\n// =============================================================================\n\n/**\n * Call LLM span information\n * Individual LLM call spans\n *\n * The model that was used to generate the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const AI_RESPONSE_MODEL_ATTRIBUTE = 'ai.response.model';\n\n/**\n * Call LLM span information\n * Individual LLM call spans\n *\n * The id of the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const AI_RESPONSE_ID_ATTRIBUTE = 'ai.response.id';\n\n/**\n * Call LLM span information\n * Individual LLM call spans\n *\n * The timestamp of the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const AI_RESPONSE_TIMESTAMP_ATTRIBUTE = 'ai.response.timestamp';\n\n// =============================================================================\n// SEMANTIC CONVENTIONS FOR GENAI OPERATIONS\n// =============================================================================\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The provider that was used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_SYSTEM_ATTRIBUTE = 'gen_ai.system';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The model that was requested\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_MODEL_ATTRIBUTE = 'gen_ai.request.model';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The temperature that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE = 'gen_ai.request.temperature';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The maximum number of tokens that were set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_MAX_TOKENS_ATTRIBUTE = 'gen_ai.request.max_tokens';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The frequency penalty that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE = 'gen_ai.request.frequency_penalty';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The presence penalty that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE = 'gen_ai.request.presence_penalty';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The topK parameter value that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_TOP_K_ATTRIBUTE = 'gen_ai.request.top_k';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The topP parameter value that was set\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_TOP_P_ATTRIBUTE = 'gen_ai.request.top_p';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The stop sequences\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_REQUEST_STOP_SEQUENCES_ATTRIBUTE = 'gen_ai.request.stop_sequences';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The finish reasons that were returned by the provider\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE = 'gen_ai.response.finish_reasons';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The model that was used to generate the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_RESPONSE_MODEL_ATTRIBUTE = 'gen_ai.response.model';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The id of the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_RESPONSE_ID_ATTRIBUTE = 'gen_ai.response.id';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The number of prompt tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.input_tokens';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The number of completion tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nexport const GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.output_tokens';\n\n// =============================================================================\n// BASIC EMBEDDING SPAN INFORMATION\n// =============================================================================\n\n/**\n * Basic embedding span information\n * Embedding spans\n *\n * The number of tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-embedding-span-information\n */\nexport const AI_USAGE_TOKENS_ATTRIBUTE = 'ai.usage.tokens';\n\n// =============================================================================\n// TOOL CALL SPANS\n// =============================================================================\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The name of the tool\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_NAME_ATTRIBUTE = 'ai.toolCall.name';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The id of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_ID_ATTRIBUTE = 'ai.toolCall.id';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The parameters of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_ARGS_ATTRIBUTE = 'ai.toolCall.args';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The result of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_RESULT_ATTRIBUTE = 'ai.toolCall.result';\n\n// =============================================================================\n// SPAN ATTRIBUTE OBJECTS\n// =============================================================================\n\n/**\n * Attributes collected for `ai.generateText` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_GENERATE_TEXT_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_PROMPT: AI_PROMPT_ATTRIBUTE,\n  AI_RESPONSE_TEXT: AI_RESPONSE_TEXT_ATTRIBUTE,\n  AI_RESPONSE_TOOL_CALLS: AI_RESPONSE_TOOL_CALLS_ATTRIBUTE,\n  AI_RESPONSE_FINISH_REASON: AI_RESPONSE_FINISH_REASON_ATTRIBUTE,\n  AI_SETTINGS_MAX_STEPS: AI_SETTINGS_MAX_STEPS_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.generateText.doGenerate` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nexport const AI_GENERATE_TEXT_DO_GENERATE_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_PROMPT_FORMAT: AI_PROMPT_FORMAT_ATTRIBUTE,\n  AI_PROMPT_MESSAGES: AI_PROMPT_MESSAGES_ATTRIBUTE,\n  AI_PROMPT_TOOLS: AI_PROMPT_TOOLS_ATTRIBUTE,\n  AI_PROMPT_TOOL_CHOICE: AI_PROMPT_TOOL_CHOICE_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n  // Call LLM span information\n  AI_RESPONSE_MODEL: AI_RESPONSE_MODEL_ATTRIBUTE,\n  AI_RESPONSE_ID: AI_RESPONSE_ID_ATTRIBUTE,\n  AI_RESPONSE_TIMESTAMP: AI_RESPONSE_TIMESTAMP_ATTRIBUTE,\n  // Semantic Conventions for GenAI operations\n  GEN_AI_SYSTEM: GEN_AI_SYSTEM_ATTRIBUTE,\n  GEN_AI_REQUEST_MODEL: GEN_AI_REQUEST_MODEL_ATTRIBUTE,\n  GEN_AI_REQUEST_TEMPERATURE: GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE,\n  GEN_AI_REQUEST_MAX_TOKENS: GEN_AI_REQUEST_MAX_TOKENS_ATTRIBUTE,\n  GEN_AI_REQUEST_FREQUENCY_PENALTY: GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE,\n  GEN_AI_REQUEST_PRESENCE_PENALTY: GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE,\n  GEN_AI_REQUEST_TOP_K: GEN_AI_REQUEST_TOP_K_ATTRIBUTE,\n  GEN_AI_REQUEST_TOP_P: GEN_AI_REQUEST_TOP_P_ATTRIBUTE,\n  GEN_AI_REQUEST_STOP_SEQUENCES: GEN_AI_REQUEST_STOP_SEQUENCES_ATTRIBUTE,\n  GEN_AI_RESPONSE_FINISH_REASONS: GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE,\n  GEN_AI_RESPONSE_MODEL: GEN_AI_RESPONSE_MODEL_ATTRIBUTE,\n  GEN_AI_RESPONSE_ID: GEN_AI_RESPONSE_ID_ATTRIBUTE,\n  GEN_AI_USAGE_INPUT_TOKENS: GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE,\n  GEN_AI_USAGE_OUTPUT_TOKENS: GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.streamText` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_STREAM_TEXT_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_PROMPT: AI_PROMPT_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.streamText.doStream` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nexport const AI_STREAM_TEXT_DO_STREAM_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_RESPONSE_MS_TO_FIRST_CHUNK: AI_RESPONSE_MS_TO_FIRST_CHUNK_ATTRIBUTE,\n  AI_RESPONSE_MS_TO_FINISH: AI_RESPONSE_MS_TO_FINISH_ATTRIBUTE,\n  AI_RESPONSE_AVG_COMPLETION_TOKENS_PER_SECOND: AI_RESPONSE_AVG_COMPLETION_TOKENS_PER_SECOND_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n  // Call LLM span information\n  AI_RESPONSE_MODEL: AI_RESPONSE_MODEL_ATTRIBUTE,\n  AI_RESPONSE_ID: AI_RESPONSE_ID_ATTRIBUTE,\n  AI_RESPONSE_TIMESTAMP: AI_RESPONSE_TIMESTAMP_ATTRIBUTE,\n  // Semantic Conventions for GenAI operations\n  GEN_AI_SYSTEM: GEN_AI_SYSTEM_ATTRIBUTE,\n  GEN_AI_REQUEST_MODEL: GEN_AI_REQUEST_MODEL_ATTRIBUTE,\n  GEN_AI_REQUEST_TEMPERATURE: GEN_AI_REQUEST_TEMPERATURE_ATTRIBUTE,\n  GEN_AI_REQUEST_MAX_TOKENS: GEN_AI_REQUEST_MAX_TOKENS_ATTRIBUTE,\n  GEN_AI_REQUEST_FREQUENCY_PENALTY: GEN_AI_REQUEST_FREQUENCY_PENALTY_ATTRIBUTE,\n  GEN_AI_REQUEST_PRESENCE_PENALTY: GEN_AI_REQUEST_PRESENCE_PENALTY_ATTRIBUTE,\n  GEN_AI_REQUEST_TOP_K: GEN_AI_REQUEST_TOP_K_ATTRIBUTE,\n  GEN_AI_REQUEST_TOP_P: GEN_AI_REQUEST_TOP_P_ATTRIBUTE,\n  GEN_AI_REQUEST_STOP_SEQUENCES: GEN_AI_REQUEST_STOP_SEQUENCES_ATTRIBUTE,\n  GEN_AI_RESPONSE_FINISH_REASONS: GEN_AI_RESPONSE_FINISH_REASONS_ATTRIBUTE,\n  GEN_AI_RESPONSE_MODEL: GEN_AI_RESPONSE_MODEL_ATTRIBUTE,\n  GEN_AI_RESPONSE_ID: GEN_AI_RESPONSE_ID_ATTRIBUTE,\n  GEN_AI_USAGE_INPUT_TOKENS: GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE,\n  GEN_AI_USAGE_OUTPUT_TOKENS: GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.generateObject` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generateobject-function\n */\nexport const AI_GENERATE_OBJECT_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_SCHEMA: AI_SCHEMA_ATTRIBUTE,\n  AI_SCHEMA_NAME: AI_SCHEMA_NAME_ATTRIBUTE,\n  AI_SCHEMA_DESCRIPTION: AI_SCHEMA_DESCRIPTION_ATTRIBUTE,\n  AI_RESPONSE_OBJECT: AI_RESPONSE_OBJECT_ATTRIBUTE,\n  AI_SETTINGS_MODE: AI_SETTINGS_MODE_ATTRIBUTE,\n  AI_SETTINGS_OUTPUT: AI_SETTINGS_OUTPUT_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.streamObject` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamobject-function\n */\nexport const AI_STREAM_OBJECT_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_SCHEMA: AI_SCHEMA_ATTRIBUTE,\n  AI_SCHEMA_NAME: AI_SCHEMA_NAME_ATTRIBUTE,\n  AI_SCHEMA_DESCRIPTION: AI_SCHEMA_DESCRIPTION_ATTRIBUTE,\n  AI_RESPONSE_OBJECT: AI_RESPONSE_OBJECT_ATTRIBUTE,\n  AI_SETTINGS_MODE: AI_SETTINGS_MODE_ATTRIBUTE,\n  AI_SETTINGS_OUTPUT: AI_SETTINGS_OUTPUT_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS: AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS: AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.embed` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n */\nexport const AI_EMBED_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_VALUE: AI_VALUE_ATTRIBUTE,\n  AI_EMBEDDING: AI_EMBEDDING_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  // Basic embedding span information\n  AI_USAGE_TOKENS: AI_USAGE_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.embed.doEmbed` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embed-function\n */\nexport const AI_EMBED_DO_EMBED_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_VALUES: AI_VALUES_ATTRIBUTE,\n  AI_EMBEDDINGS: AI_EMBEDDINGS_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  // Basic embedding span information\n  AI_USAGE_TOKENS: AI_USAGE_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.embedMany` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#embedmany-function\n */\nexport const AI_EMBED_MANY_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_VALUES: AI_VALUES_ATTRIBUTE,\n  AI_EMBEDDINGS: AI_EMBEDDINGS_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n  // Basic embedding span information\n  AI_USAGE_TOKENS: AI_USAGE_TOKENS_ATTRIBUTE,\n} as const;\n\n/**\n * Attributes collected for `ai.toolCall` span\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nexport const AI_TOOL_CALL_SPAN_ATTRIBUTES = {\n  OPERATION_NAME: OPERATION_NAME_ATTRIBUTE,\n  AI_OPERATION_ID: AI_OPERATION_ID_ATTRIBUTE,\n  AI_TOOL_CALL_NAME: AI_TOOL_CALL_NAME_ATTRIBUTE,\n  AI_TOOL_CALL_ID: AI_TOOL_CALL_ID_ATTRIBUTE,\n  AI_TOOL_CALL_ARGS: AI_TOOL_CALL_ARGS_ATTRIBUTE,\n  AI_TOOL_CALL_RESULT: AI_TOOL_CALL_RESULT_ATTRIBUTE,\n  // Basic LLM span information\n  RESOURCE_NAME: RESOURCE_NAME_ATTRIBUTE,\n  AI_MODEL_ID: AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER: AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_REQUEST_HEADERS: AI_REQUEST_HEADERS_ATTRIBUTE,\n  AI_SETTINGS_MAX_RETRIES: AI_SETTINGS_MAX_RETRIES_ATTRIBUTE,\n  AI_TELEMETRY_FUNCTION_ID: AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE,\n  AI_TELEMETRY_METADATA: AI_TELEMETRY_METADATA_ATTRIBUTE,\n} as const;\n\n// =============================================================================\n// PROVIDER METADATA\n// =============================================================================\n\n/**\n * OpenAI Provider Metadata\n * @see https://ai-sdk.dev/providers/ai-sdk-providers/openai\n * @see https://github.com/vercel/ai/blob/65e042afde6aad4da9d7a62526ece839eb34f9a5/packages/openai/src/openai-chat-language-model.ts#L397-L416\n * @see https://github.com/vercel/ai/blob/65e042afde6aad4da9d7a62526ece839eb34f9a5/packages/openai/src/responses/openai-responses-language-model.ts#L377C7-L384\n */\ninterface OpenAiProviderMetadata {\n  /**\n   * The number of predicted output tokens that were accepted.\n   * @see https://ai-sdk.dev/providers/ai-sdk-providers/openai#predicted-outputs\n   */\n  acceptedPredictionTokens?: number;\n\n  /**\n   * The number of predicted output tokens that were rejected.\n   * @see https://ai-sdk.dev/providers/ai-sdk-providers/openai#predicted-outputs\n   */\n  rejectedPredictionTokens?: number;\n\n  /**\n   * The number of reasoning tokens that the model generated.\n   * @see https://ai-sdk.dev/providers/ai-sdk-providers/openai#responses-models\n   */\n  reasoningTokens?: number;\n\n  /**\n   * The number of prompt tokens that were a cache hit.\n   * @see https://ai-sdk.dev/providers/ai-sdk-providers/openai#responses-models\n   */\n  cachedPromptTokens?: number;\n\n  /**\n   * @see https://ai-sdk.dev/providers/ai-sdk-providers/openai#responses-models\n   *\n   * The ID of the response. Can be used to continue a conversation.\n   */\n  responseId?: string;\n}\n\n/**\n * Anthropic Provider Metadata\n * @see https://ai-sdk.dev/providers/ai-sdk-providers/anthropic\n * @see https://github.com/vercel/ai/blob/65e042afde6aad4da9d7a62526ece839eb34f9a5/packages/anthropic/src/anthropic-messages-language-model.ts#L346-L352\n */\ninterface AnthropicProviderMetadata {\n  /**\n   * The number of tokens that were used to create the cache.\n   * @see https://ai-sdk.dev/providers/ai-sdk-providers/anthropic#cache-control\n   */\n  cacheCreationInputTokens?: number;\n\n  /**\n   * The number of tokens that were read from the cache.\n   * @see https://ai-sdk.dev/providers/ai-sdk-providers/anthropic#cache-control\n   */\n  cacheReadInputTokens?: number;\n}\n\n/**\n * Amazon Bedrock Provider Metadata\n * @see https://ai-sdk.dev/providers/ai-sdk-providers/amazon-bedrock\n * @see https://github.com/vercel/ai/blob/65e042afde6aad4da9d7a62526ece839eb34f9a5/packages/amazon-bedrock/src/bedrock-chat-language-model.ts#L263-L280\n */\ninterface AmazonBedrockProviderMetadata {\n  /**\n   * @see https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_ConverseTrace.html\n   */\n  trace?: {\n    /**\n     * The guardrail trace object.\n     * @see https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_GuardrailTraceAssessment.html\n     *\n     * This was purposely left as unknown as it's a complex object. This can be typed in the future\n     * if the SDK decides to support bedrock in a more advanced way.\n     */\n    guardrail?: unknown;\n    /**\n     * The request's prompt router.\n     * @see https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_PromptRouterTrace.html\n     */\n    promptRouter?: {\n      /**\n       * The ID of the invoked model.\n       */\n      invokedModelId?: string;\n    };\n  };\n  usage?: {\n    /**\n     * The number of tokens that were read from the cache.\n     * @see https://ai-sdk.dev/providers/ai-sdk-providers/amazon-bedrock#cache-points\n     */\n    cacheReadInputTokens?: number;\n\n    /**\n     * The number of tokens that were written to the cache.\n     * @see https://ai-sdk.dev/providers/ai-sdk-providers/amazon-bedrock#cache-points\n     */\n    cacheWriteInputTokens?: number;\n  };\n}\n\n/**\n * Google Generative AI Provider Metadata\n * @see https://ai-sdk.dev/providers/ai-sdk-providers/google-generative-ai\n */\nexport interface GoogleGenerativeAIProviderMetadata {\n  /**\n   * @see https://github.com/vercel/ai/blob/65e042afde6aad4da9d7a62526ece839eb34f9a5/packages/google/src/google-generative-ai-prompt.ts#L28-L30\n   */\n  groundingMetadata: null | {\n    /**\n     * Array of search queries used to retrieve information\n     * @example [\"What's the weather in Chicago this weekend?\"]\n     *\n     * @see https://ai-sdk.dev/providers/ai-sdk-providers/google-generative-ai#search-grounding\n     */\n    webSearchQueries: string[] | null;\n    /**\n     * Contains the main search result content used as an entry point\n     * The `renderedContent` field contains the formatted content\n     * @see https://ai-sdk.dev/providers/ai-sdk-providers/google-generative-ai#search-grounding\n     */\n    searchEntryPoint?: {\n      renderedContent: string;\n    } | null;\n    /**\n     * Contains details about how specific response parts are supported by search results\n     * @see https://ai-sdk.dev/providers/ai-sdk-providers/google-generative-ai#search-grounding\n     */\n    groundingSupports: Array<{\n      /**\n       * Information about the grounded text segment.\n       */\n      segment: {\n        /**\n         * The start index of the text segment.\n         */\n        startIndex?: number | null;\n        /**\n         * The end index of the text segment.\n         */\n        endIndex?: number | null;\n        /**\n         * The actual text segment.\n         */\n        text?: string | null;\n      };\n      /**\n       * References to supporting search result chunks.\n       */\n      groundingChunkIndices?: number[] | null;\n      /**\n       * Confidence scores (0-1) for each supporting chunk.\n       */\n      confidenceScores?: number[] | null;\n    }> | null;\n  };\n  /**\n   * @see https://github.com/vercel/ai/blob/65e042afde6aad4da9d7a62526ece839eb34f9a5/packages/google/src/google-generative-ai-language-model.ts#L620-L627\n   * @see https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/configure-safety-filters\n   */\n  safetyRatings?: null | unknown;\n}\n\n/**\n * DeepSeek Provider Metadata\n * @see https://ai-sdk.dev/providers/ai-sdk-providers/deepseek\n */\ninterface DeepSeekProviderMetadata {\n  /**\n   * The number of tokens that were cache hits.\n   * @see https://ai-sdk.dev/providers/ai-sdk-providers/deepseek#cache-token-usage\n   */\n  promptCacheHitTokens?: number;\n\n  /**\n   * The number of tokens that were cache misses.\n   * @see https://ai-sdk.dev/providers/ai-sdk-providers/deepseek#cache-token-usage\n   */\n  promptCacheMissTokens?: number;\n}\n\n/**\n * Perplexity Provider Metadata\n * @see https://ai-sdk.dev/providers/ai-sdk-providers/perplexity\n */\ninterface PerplexityProviderMetadata {\n  /**\n   * Object containing citationTokens and numSearchQueries metrics\n   */\n  usage?: {\n    citationTokens?: number;\n    numSearchQueries?: number;\n  };\n  /**\n   * Array of image URLs when return_images is enabled.\n   *\n   * You can enable image responses by setting return_images: true in the provider options.\n   * This feature is only available to Perplexity Tier-2 users and above.\n   */\n  images?: Array<{\n    imageUrl?: string;\n    originUrl?: string;\n    height?: number;\n    width?: number;\n  }>;\n}\n\nexport interface ProviderMetadata {\n  openai?: OpenAiProviderMetadata;\n  anthropic?: AnthropicProviderMetadata;\n  bedrock?: AmazonBedrockProviderMetadata;\n  google?: GoogleGenerativeAIProviderMetadata;\n  deepseek?: DeepSeekProviderMetadata;\n  perplexity?: PerplexityProviderMetadata;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nexport function sanitizeAttributes(attributes) {\n    const out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    for (const [key, val] of Object.entries(attributes)) {\n        if (!isAttributeKey(key)) {\n            diag.warn(`Invalid attribute key: ${key}`);\n            continue;\n        }\n        if (!isAttributeValue(val)) {\n            diag.warn(`Invalid attribute value set for key: ${key}`);\n            continue;\n        }\n        if (Array.isArray(val)) {\n            out[key] = val.slice();\n        }\n        else {\n            out[key] = val;\n        }\n    }\n    return out;\n}\nexport function isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nexport function isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    let type;\n    for (const element of arr) {\n        // null/undefined elements are allowed\n        if (element == null)\n            continue;\n        if (!type) {\n            if (isValidPrimitiveAttributeValue(element)) {\n                type = typeof element;\n                continue;\n            }\n            // encountered an invalid primitive\n            return false;\n        }\n        if (typeof element === type) {\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return (ex) => {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    const result = {};\n    let current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(propertyName => {\n            if (result[propertyName])\n                return;\n            const value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { inspect } from 'util';\n/**\n * Retrieves a number from an environment variable.\n * - Returns `undefined` if the environment variable is empty, unset, contains only whitespace, or is not a number.\n * - Returns a number in all other cases.\n *\n * @param {string} key - The name of the environment variable to retrieve.\n * @returns {number | undefined} - The number value or `undefined`.\n */\nexport function getNumberFromEnv(key) {\n    const raw = process.env[key];\n    if (raw == null || raw.trim() === '') {\n        return undefined;\n    }\n    const value = Number(raw);\n    if (isNaN(value)) {\n        diag.warn(`Unknown value ${inspect(raw)} for ${key}, expected a number, using defaults`);\n        return undefined;\n    }\n    return value;\n}\n/**\n * Retrieves a string from an environment variable.\n * - Returns `undefined` if the environment variable is empty, unset, or contains only whitespace.\n *\n * @param {string} key - The name of the environment variable to retrieve.\n * @returns {string | undefined} - The string value or `undefined`.\n */\nexport function getStringFromEnv(key) {\n    const raw = process.env[key];\n    if (raw == null || raw.trim() === '') {\n        return undefined;\n    }\n    return raw;\n}\n/**\n * Retrieves a boolean value from an environment variable.\n * - Trims leading and trailing whitespace and ignores casing.\n * - Returns `false` if the environment variable is empty, unset, or contains only whitespace.\n * - Returns `false` for strings that cannot be mapped to a boolean.\n *\n * @param {string} key - The name of the environment variable to retrieve.\n * @returns {boolean} - The boolean value or `false` if the environment variable is unset empty, unset, or contains only whitespace.\n */\nexport function getBooleanFromEnv(key) {\n    const raw = process.env[key]?.trim().toLowerCase();\n    if (raw == null || raw === '') {\n        // NOTE: falling back to `false` instead of `undefined` as required by the specification.\n        // If you have a use-case that requires `undefined`, consider using `getStringFromEnv()` and applying the necessary\n        // normalizations in the consuming code.\n        return false;\n    }\n    if (raw === 'true') {\n        return true;\n    }\n    else if (raw === 'false') {\n        return false;\n    }\n    else {\n        diag.warn(`Unknown value ${inspect(raw)} for ${key}, expected 'true' or 'false', falling back to 'false' (default)`);\n        return false;\n    }\n}\n/**\n * Retrieves a list of strings from an environment variable.\n * - Uses ',' as the delimiter.\n * - Trims leading and trailing whitespace from each entry.\n * - Excludes empty entries.\n * - Returns `undefined` if the environment variable is empty or contains only whitespace.\n * - Returns an empty array if all entries are empty or whitespace.\n *\n * @param {string} key - The name of the environment variable to retrieve.\n * @returns {string[] | undefined} - The list of strings or `undefined`.\n */\nexport function getStringListFromEnv(key) {\n    return getStringFromEnv(key)\n        ?.split(',')\n        .map(v => v.trim())\n        .filter(s => s !== '');\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { performance } from 'perf_hooks';\nexport const otperformance = performance;\n//# sourceMappingURL=performance.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nconst TMP_DB_SYSTEM = 'db.system';\nconst TMP_DB_CONNECTION_STRING = 'db.connection_string';\nconst TMP_DB_USER = 'db.user';\nconst TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nconst TMP_DB_NAME = 'db.name';\nconst TMP_DB_STATEMENT = 'db.statement';\nconst TMP_DB_OPERATION = 'db.operation';\nconst TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nconst TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nconst TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nconst TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nconst TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nconst TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nconst TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';\nconst TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nconst TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nconst TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nconst TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nconst TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nconst TMP_DB_SQL_TABLE = 'db.sql.table';\nconst TMP_EXCEPTION_TYPE = 'exception.type';\nconst TMP_EXCEPTION_MESSAGE = 'exception.message';\nconst TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nconst TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nconst TMP_FAAS_TRIGGER = 'faas.trigger';\nconst TMP_FAAS_EXECUTION = 'faas.execution';\nconst TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nconst TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nconst TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nconst TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nconst TMP_FAAS_TIME = 'faas.time';\nconst TMP_FAAS_CRON = 'faas.cron';\nconst TMP_FAAS_COLDSTART = 'faas.coldstart';\nconst TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nconst TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nconst TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nconst TMP_NET_TRANSPORT = 'net.transport';\nconst TMP_NET_PEER_IP = 'net.peer.ip';\nconst TMP_NET_PEER_PORT = 'net.peer.port';\nconst TMP_NET_PEER_NAME = 'net.peer.name';\nconst TMP_NET_HOST_IP = 'net.host.ip';\nconst TMP_NET_HOST_PORT = 'net.host.port';\nconst TMP_NET_HOST_NAME = 'net.host.name';\nconst TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nconst TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nconst TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nconst TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nconst TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nconst TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nconst TMP_PEER_SERVICE = 'peer.service';\nconst TMP_ENDUSER_ID = 'enduser.id';\nconst TMP_ENDUSER_ROLE = 'enduser.role';\nconst TMP_ENDUSER_SCOPE = 'enduser.scope';\nconst TMP_THREAD_ID = 'thread.id';\nconst TMP_THREAD_NAME = 'thread.name';\nconst TMP_CODE_FUNCTION = 'code.function';\nconst TMP_CODE_NAMESPACE = 'code.namespace';\nconst TMP_CODE_FILEPATH = 'code.filepath';\nconst TMP_CODE_LINENO = 'code.lineno';\nconst TMP_HTTP_METHOD = 'http.method';\nconst TMP_HTTP_URL = 'http.url';\nconst TMP_HTTP_TARGET = 'http.target';\nconst TMP_HTTP_HOST = 'http.host';\nconst TMP_HTTP_SCHEME = 'http.scheme';\nconst TMP_HTTP_STATUS_CODE = 'http.status_code';\nconst TMP_HTTP_FLAVOR = 'http.flavor';\nconst TMP_HTTP_USER_AGENT = 'http.user_agent';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\nconst TMP_HTTP_SERVER_NAME = 'http.server_name';\nconst TMP_HTTP_ROUTE = 'http.route';\nconst TMP_HTTP_CLIENT_IP = 'http.client_ip';\nconst TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nconst TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nconst TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';\nconst TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';\nconst TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';\nconst TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nconst TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nconst TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nconst TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nconst TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nconst TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';\nconst TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';\nconst TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';\nconst TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nconst TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nconst TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nconst TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nconst TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nconst TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nconst TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';\nconst TMP_MESSAGING_SYSTEM = 'messaging.system';\nconst TMP_MESSAGING_DESTINATION = 'messaging.destination';\nconst TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nconst TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nconst TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nconst TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nconst TMP_MESSAGING_URL = 'messaging.url';\nconst TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nconst TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = 'messaging.message_payload_size_bytes';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = 'messaging.message_payload_compressed_size_bytes';\nconst TMP_MESSAGING_OPERATION = 'messaging.operation';\nconst TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nconst TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nconst TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nconst TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nconst TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nconst TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nconst TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nconst TMP_RPC_SYSTEM = 'rpc.system';\nconst TMP_RPC_SERVICE = 'rpc.service';\nconst TMP_RPC_METHOD = 'rpc.method';\nconst TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nconst TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nconst TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nconst TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nconst TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nconst TMP_MESSAGE_TYPE = 'message.type';\nconst TMP_MESSAGE_ID = 'message.id';\nconst TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nconst TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n *\n * @deprecated Use ATTR_AWS_LAMBDA_INVOKED_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n *\n * @deprecated Use ATTR_DB_CONNECTION_STRING in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n/**\n * Username for accessing the database.\n *\n * @deprecated Use ATTR_DB_USER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_USER = TMP_DB_USER;\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n *\n * @deprecated Use ATTR_DB_JDBC_DRIVER_CLASSNAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_NAME = TMP_DB_NAME;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n *\n * @deprecated Use ATTR_DB_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n *\n * @deprecated Use ATTR_DB_MSSQL_INSTANCE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_PAGE_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n/**\n * Whether or not the query is idempotent.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_IDEMPOTENCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n/**\n * The ID of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;\n/**\n * The data center of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_DC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_REDIS_DATABASE_INDEX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n/**\n * The collection being accessed within the database stated in `db.name`.\n *\n * @deprecated Use ATTR_DB_MONGODB_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_SQL_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nexport const SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nexport const SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nexport const SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*\n* @deprecated Use ATTR_EXCEPTION_ESCAPED.\n*/\nexport const SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * The execution ID of the current function execution.\n *\n * @deprecated Use ATTR_FAAS_INVOCATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n *\n * @deprecated Use ATTR_FAAS_CRON in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n *\n * @deprecated Use ATTR_FAAS_COLDSTART in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use ATTR_NET_TRANSPORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n *\n * @deprecated Use ATTR_NET_PEER_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n/**\n * Remote port number.\n *\n * @deprecated Use ATTR_NET_PEER_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n/**\n * Remote hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_PEER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n *\n * @deprecated Use ATTR_NET_HOST_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n/**\n * Like `net.peer.port` but for the host port.\n *\n * @deprecated Use ATTR_NET_HOST_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n/**\n * Local hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_SUBTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;\n/**\n * The name of the mobile carrier.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n/**\n * The mobile carrier country code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MCC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n/**\n * The mobile carrier network code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MNC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_ICC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n *\n * @deprecated Use ATTR_PEER_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n *\n * @deprecated Use ATTR_ENDUSER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n *\n * @deprecated Use ATTR_ENDUSER_ROLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n *\n * @deprecated Use ATTR_ENDUSER_SCOPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n *\n * @deprecated Use ATTR_THREAD_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n/**\n * Current thread name.\n *\n * @deprecated Use ATTR_THREAD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n *\n * @deprecated Use ATTR_CODE_FUNCTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n *\n * @deprecated Use ATTR_CODE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n *\n * @deprecated Use ATTR_CODE_FILEPATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n *\n * @deprecated Use ATTR_CODE_LINENO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n *\n * @deprecated Use ATTR_HTTP_HOST in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n/**\n * The URI scheme identifying the used protocol.\n *\n * @deprecated Use ATTR_HTTP_SCHEME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use ATTR_HTTP_FLAVOR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n *\n * @deprecated Use ATTR_HTTP_USER_AGENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n *\n * @deprecated Use ATTR_HTTP_SERVER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n/**\n * The matched route (path template).\n *\n * @deprecated Use ATTR_HTTP_ROUTE.\n */\nexport const SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*\n* @deprecated Use ATTR_HTTP_CLIENT_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n/**\n * The keys in the `RequestItems` object field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n/**\n * The value of the `ConsistentRead` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSISTENT_READ in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;\n/**\n * The value of the `ProjectionExpression` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROJECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n/**\n * The value of the `Limit` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LIMIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n/**\n * The value of the `AttributesToGet` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n/**\n * The value of the `IndexName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_INDEX_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n/**\n * The value of the `Select` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SELECT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n/**\n * The the number of items in the `TableNames` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n/**\n * The value of the `ScanIndexForward` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCAN_FORWARD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n/**\n * The value of the `Segment` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SEGMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n/**\n * The value of the `TotalSegments` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n/**\n * The value of the `Count` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n/**\n * The value of the `ScannedCount` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCANNED_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;\n/**\n * A boolean that is true if the message destination is temporary.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_TEMPORARY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;\n/**\n * The name of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_NAME.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n/**\n * The version of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_VERSION.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;\n/**\n * Connection string.\n *\n * @deprecated Removed in semconv v1.17.0.\n */\nexport const SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_CONVERSATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_BODY_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n/**\n * The compressed size of the message payload in bytes.\n *\n * @deprecated Removed in semconv v1.22.0.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use ATTR_MESSAGING_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n *\n * @deprecated Removed in semconv v1.21.0.\n */\nexport const SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n/**\n * RabbitMQ message routing key.\n *\n * @deprecated Use ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_CONSUMER_GROUP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n *\n * @deprecated Use ATTR_MESSAGING_CLIENT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n/**\n * Partition the message is sent to.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n/**\n * A boolean that is true if the message is a tombstone.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n/**\n * A string identifying the remoting system.\n *\n * @deprecated Use ATTR_RPC_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n *\n * @deprecated Use ATTR_RPC_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_REQUEST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n/**\n * `error.code` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n/**\n * `error.message` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_MESSAGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use ATTR_MESSAGE_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n *\n * @deprecated Use ATTR_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n/**\n * Compressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_COMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n/**\n * Uncompressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_UNCOMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nexport const SemanticAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nconst TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nconst TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nconst TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nconst TMP_DBSYSTEMVALUES_DB2 = 'db2';\nconst TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nconst TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nconst TMP_DBSYSTEMVALUES_HIVE = 'hive';\nconst TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nconst TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nconst TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nconst TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nconst TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nconst TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nconst TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nconst TMP_DBSYSTEMVALUES_EDB = 'edb';\nconst TMP_DBSYSTEMVALUES_CACHE = 'cache';\nconst TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nconst TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nconst TMP_DBSYSTEMVALUES_DERBY = 'derby';\nconst TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nconst TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nconst TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nconst TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nconst TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nconst TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nconst TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nconst TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nconst TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nconst TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nconst TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nconst TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nconst TMP_DBSYSTEMVALUES_H2 = 'h2';\nconst TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nconst TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nconst TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nconst TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nconst TMP_DBSYSTEMVALUES_REDIS = 'redis';\nconst TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nconst TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nconst TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nconst TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nconst TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nconst TMP_DBSYSTEMVALUES_GEODE = 'geode';\nconst TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nconst TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nconst TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_OTHER_SQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MSSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MYSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ORACLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DB2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POSTGRESQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDSHIFT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CLOUDSCAPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HSQLDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PROGRESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MAXDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HANADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INGRES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIRSTSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_EDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CACHE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ADABAS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIREBIRD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DERBY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FILEMAKER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INFORMIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INSTANTDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INTERBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MARIADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NETEZZA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PERVASIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POINTBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SQLITE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SYBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_TERADATA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_VERTICA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_H2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COLDFUSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CASSANDRA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MONGODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COSMOSDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DYNAMODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NEO4J in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_GEODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ELASTICSEARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MEMCACHED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COCKROACHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport const DbSystemValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport const DbCassandraConsistencyLevelValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nconst TMP_FAASTRIGGERVALUES_HTTP = 'http';\nconst TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nconst TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nconst TMP_FAASTRIGGERVALUES_OTHER = 'other';\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_DATASOURCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_HTTP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_PUBSUB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_TIMER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport const FaasTriggerValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_INSERT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_EDIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_DELETE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport const FaasDocumentOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport const FaasInvokedProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nconst TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nconst TMP_NETTRANSPORTVALUES_IP = 'ip';\nconst TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nconst TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nconst TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nconst TMP_NETTRANSPORTVALUES_OTHER = 'other';\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_TCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_UDP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport const NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport const NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_PIPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_INPROC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport const NetTransportValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIFI in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIRED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_CELL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GSM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionSubtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nconst TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nconst TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nconst TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nconst TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_1 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_2_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_SPDY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_QUIC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport const HttpFlavorValues = {\n    HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n    HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n    HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n    SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n    QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport const MessagingDestinationKindValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nconst TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_RECEIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_PROCESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport const MessagingOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nconst TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nconst TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nconst TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nconst TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nconst TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nconst TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_CANCELLED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ABORTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INTERNAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport const RpcGrpcStatusCodeValues = {\n    OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n    CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n    UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n    INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n    DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n    NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n    ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n    PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n    RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n    FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n    ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n    OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n    UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n    INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n    UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n    DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n    UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nconst TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_SENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_RECEIVED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport const MessageTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n]);\n//# sourceMappingURL=SemanticAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUD_PROVIDER = 'cloud.provider';\nconst TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nconst TMP_CLOUD_REGION = 'cloud.region';\nconst TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nconst TMP_CLOUD_PLATFORM = 'cloud.platform';\nconst TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nconst TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nconst TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nconst TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nconst TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nconst TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nconst TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nconst TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nconst TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nconst TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nconst TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nconst TMP_CONTAINER_NAME = 'container.name';\nconst TMP_CONTAINER_ID = 'container.id';\nconst TMP_CONTAINER_RUNTIME = 'container.runtime';\nconst TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nconst TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nconst TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nconst TMP_DEVICE_ID = 'device.id';\nconst TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nconst TMP_DEVICE_MODEL_NAME = 'device.model.name';\nconst TMP_FAAS_NAME = 'faas.name';\nconst TMP_FAAS_ID = 'faas.id';\nconst TMP_FAAS_VERSION = 'faas.version';\nconst TMP_FAAS_INSTANCE = 'faas.instance';\nconst TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nconst TMP_HOST_ID = 'host.id';\nconst TMP_HOST_NAME = 'host.name';\nconst TMP_HOST_TYPE = 'host.type';\nconst TMP_HOST_ARCH = 'host.arch';\nconst TMP_HOST_IMAGE_NAME = 'host.image.name';\nconst TMP_HOST_IMAGE_ID = 'host.image.id';\nconst TMP_HOST_IMAGE_VERSION = 'host.image.version';\nconst TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nconst TMP_K8S_NODE_NAME = 'k8s.node.name';\nconst TMP_K8S_NODE_UID = 'k8s.node.uid';\nconst TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nconst TMP_K8S_POD_UID = 'k8s.pod.uid';\nconst TMP_K8S_POD_NAME = 'k8s.pod.name';\nconst TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nconst TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nconst TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nconst TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nconst TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nconst TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nconst TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nconst TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nconst TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nconst TMP_K8S_JOB_UID = 'k8s.job.uid';\nconst TMP_K8S_JOB_NAME = 'k8s.job.name';\nconst TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nconst TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nconst TMP_OS_TYPE = 'os.type';\nconst TMP_OS_DESCRIPTION = 'os.description';\nconst TMP_OS_NAME = 'os.name';\nconst TMP_OS_VERSION = 'os.version';\nconst TMP_PROCESS_PID = 'process.pid';\nconst TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nconst TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nconst TMP_PROCESS_COMMAND = 'process.command';\nconst TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nconst TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nconst TMP_PROCESS_OWNER = 'process.owner';\nconst TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nconst TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nconst TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nconst TMP_SERVICE_NAME = 'service.name';\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\nconst TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nconst TMP_SERVICE_VERSION = 'service.version';\nconst TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nconst TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nconst TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nconst TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nconst TMP_WEBENGINE_NAME = 'webengine.name';\nconst TMP_WEBENGINE_VERSION = 'webengine.version';\nconst TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nexport const SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nexport const SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport const SemanticResourceAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nconst TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport const CloudProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nconst TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nconst TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nconst TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nconst TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport const CloudPlatformValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nconst TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport const AwsEcsLaunchtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nconst TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nconst TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nconst TMP_HOSTARCHVALUES_IA64 = 'ia64';\nconst TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nconst TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nconst TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport const HostArchValues = \n/*#__PURE__*/ createConstMap([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_OSTYPEVALUES_WINDOWS = 'windows';\nconst TMP_OSTYPEVALUES_LINUX = 'linux';\nconst TMP_OSTYPEVALUES_DARWIN = 'darwin';\nconst TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nconst TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nconst TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nconst TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nconst TMP_OSTYPEVALUES_HPUX = 'hpux';\nconst TMP_OSTYPEVALUES_AIX = 'aix';\nconst TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nconst TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport const OsTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport const TelemetrySdkLanguageValues = \n/*#__PURE__*/ createConstMap([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n/**\n * ASP.NET Core exception middleware handling result\n *\n * @example handled\n * @example unhandled\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = 'aspnetcore.diagnostics.exception.result';\n/**\n * Enum value \"aborted\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling didn't run because the request was aborted.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = \"aborted\";\n/**\n * Enum value \"handled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was handled by the exception handling middleware.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = \"handled\";\n/**\n * Enum value \"skipped\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception handling was skipped because the response had started.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = \"skipped\";\n/**\n * Enum value \"unhandled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n *\n * Exception was not handled by the exception handling middleware.\n */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = \"unhandled\";\n/**\n * Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.\n *\n * @example Contoso.MyHandler\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = 'aspnetcore.diagnostics.handler.type';\n/**\n * Rate limiting policy name.\n *\n * @example fixed\n * @example sliding\n * @example token\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_POLICY = 'aspnetcore.rate_limiting.policy';\n/**\n * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason\n *\n * @example acquired\n * @example request_canceled\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_RESULT = 'aspnetcore.rate_limiting.result';\n/**\n * Enum value \"acquired\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease was acquired\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = \"acquired\";\n/**\n * Enum value \"endpoint_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the endpoint limiter\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = \"endpoint_limiter\";\n/**\n * Enum value \"global_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was rejected by the global limiter\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = \"global_limiter\";\n/**\n * Enum value \"request_canceled\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n *\n * Lease request was canceled\n */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = \"request_canceled\";\n/**\n * Flag indicating if request was handled by the application pipeline.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = 'aspnetcore.request.is_unhandled';\n/**\n * A value that indicates whether the matched route is a fallback route.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = 'aspnetcore.routing.is_fallback';\n/**\n * Match result - success or failure\n *\n * @example success\n * @example failure\n */\nexport const ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = 'aspnetcore.routing.match_status';\n/**\n * Enum value \"failure\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match failed\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = \"failure\";\n/**\n * Enum value \"success\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n *\n * Match succeeded\n */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = \"success\";\n/**\n * Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example client.example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.address` **SHOULD** represent the client address behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_ADDRESS = 'client.address';\n/**\n * Client port number.\n *\n * @example 65123\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.port` **SHOULD** represent the client port behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_PORT = 'client.port';\n/**\n * The column number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 16\n */\nexport const ATTR_CODE_COLUMN_NUMBER = 'code.column.number';\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"/usr/local/MyApplication/content_root/app/index.php\"\n */\nexport const ATTR_CODE_FILE_PATH = 'code.file.path';\n/**\n * The method or function fully-qualified name without arguments. The value should fit the natural representation of the language runtime, which is also likely the same used within `code.stacktrace` attribute value. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Function'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example com.example.MyHttpService.serveRequest\n * @example GuzzleHttp\\\\Client::transfer\n * @example fopen\n *\n * @note Values and format depends on each language runtime, thus it is impossible to provide an exhaustive list of examples.\n * The values are usually the same (or prefixes of) the ones found in native stack trace representation stored in\n * `code.stacktrace` without information on arguments.\n *\n * Examples:\n *\n *   - Java method: `com.example.MyHttpService.serveRequest`\n *   - Java anonymous class method: `com.mycompany.Main$1.myMethod`\n *   - Java lambda method: `com.mycompany.Main$$Lambda/0x0000748ae4149c00.myMethod`\n *   - PHP function: `GuzzleHttp\\Client::transfer`\n *   - Go function: `github.com/my/repo/pkg.foo.func5`\n *   - Elixir: `OpenTelemetry.Ctx.new`\n *   - Erlang: `opentelemetry_ctx:new`\n *   - Rust: `playground::my_module::my_cool_func`\n *   - C function: `fopen`\n */\nexport const ATTR_CODE_FUNCTION_NAME = 'code.function.name';\n/**\n * The line number in `code.file.path` best representing the operation. It **SHOULD** point within the code unit named in `code.function.name`. This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Line'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example 42\n */\nexport const ATTR_CODE_LINE_NUMBER = 'code.line.number';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is identical to [`exception.stacktrace`](/docs/exceptions/exceptions-spans.md#stacktrace-representation). This attribute **MUST NOT** be used on the Profile signal since the data is already captured in 'message Location'. This constraint is imposed to prevent redundancy and maintain data integrity.\n *\n * @example \"at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_CODE_STACKTRACE = 'code.stacktrace';\n/**\n * The name of a collection (table, container) within the database.\n *\n * @example public.users\n * @example customers\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The collection name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple collections\n * in non-batch operations.\n *\n * For batch operations, if the individual operations are known to have the same\n * collection name then that collection name **SHOULD** be used.\n */\nexport const ATTR_DB_COLLECTION_NAME = 'db.collection.name';\n/**\n * The name of the database, fully qualified within the server address and port.\n *\n * @example customers\n * @example test.users\n *\n * @note If a database system has multiple namespace components, they **SHOULD** be concatenated from the most general to the most specific namespace component, using `|` as a separator between the components. Any missing components (and their associated separators) **SHOULD** be omitted.\n * Semantic conventions for individual database systems **SHOULD** document what `db.namespace` means in the context of that system.\n * It is **RECOMMENDED** to capture the value as provided by the application without attempting to do any case normalization.\n */\nexport const ATTR_DB_NAMESPACE = 'db.namespace';\n/**\n * The number of queries included in a batch operation.\n *\n * @example 2\n * @example 3\n * @example 4\n *\n * @note Operations are only considered batches when they contain two or more operations, and so `db.operation.batch.size` **SHOULD** never be `1`.\n */\nexport const ATTR_DB_OPERATION_BATCH_SIZE = 'db.operation.batch.size';\n/**\n * The name of the operation or command being executed.\n *\n * @example findAndModify\n * @example HMSET\n * @example SELECT\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * The operation name **SHOULD NOT** be extracted from `db.query.text`,\n * when the database system supports query text with multiple operations\n * in non-batch operations.\n *\n * If spaces can occur in the operation name, multiple consecutive spaces\n * **SHOULD** be normalized to a single space.\n *\n * For batch operations, if the individual operations are known to have the same operation name\n * then that operation name **SHOULD** be used prepended by `BATCH `,\n * otherwise `db.operation.name` **SHOULD** be `BATCH` or some other database\n * system specific term if more applicable.\n */\nexport const ATTR_DB_OPERATION_NAME = 'db.operation.name';\n/**\n * Low cardinality summary of a database query.\n *\n * @example SELECT wuser_table\n * @example INSERT shipping_details SELECT orders\n * @example get user by id\n *\n * @note The query summary describes a class of database queries and is useful\n * as a grouping key, especially when analyzing telemetry for database\n * calls involving complex queries.\n *\n * Summary may be available to the instrumentation through\n * instrumentation hooks or other means. If it is not available, instrumentations\n * that support query parsing **SHOULD** generate a summary following\n * [Generating query summary](/docs/database/database-spans.md#generating-a-summary-of-the-query)\n * section.\n */\nexport const ATTR_DB_QUERY_SUMMARY = 'db.query.summary';\n/**\n * The database query being executed.\n *\n * @example SELECT * FROM wuser_table where username = ?\n * @example SET mykey ?\n *\n * @note For sanitization see [Sanitization of `db.query.text`](/docs/database/database-spans.md#sanitization-of-dbquerytext).\n * For batch operations, if the individual operations are known to have the same query text then that query text **SHOULD** be used, otherwise all of the individual query texts **SHOULD** be concatenated with separator `; ` or some other database system specific separator if more applicable.\n * Parameterized query text **SHOULD NOT** be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.\n */\nexport const ATTR_DB_QUERY_TEXT = 'db.query.text';\n/**\n * Database response status code.\n *\n * @example 102\n * @example ORA-17002\n * @example 08P01\n * @example 404\n *\n * @note The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.\n * Semantic conventions for individual database systems **SHOULD** document what `db.response.status_code` means in the context of that system.\n */\nexport const ATTR_DB_RESPONSE_STATUS_CODE = 'db.response.status_code';\n/**\n * The name of a stored procedure within the database.\n *\n * @example GetCustomer\n *\n * @note It is **RECOMMENDED** to capture the value as provided by the application\n * without attempting to do any case normalization.\n *\n * For batch operations, if the individual operations are known to have the same\n * stored procedure name then that stored procedure name **SHOULD** be used.\n */\nexport const ATTR_DB_STORED_PROCEDURE_NAME = 'db.stored_procedure.name';\n/**\n * The database management system (DBMS) product as identified by the client instrumentation.\n *\n * @note The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the `db.system.name` is set to `postgresql` based on the instrumentation's best knowledge.\n */\nexport const ATTR_DB_SYSTEM_NAME = 'db.system.name';\n/**\n * Enum value \"mariadb\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MariaDB](https://mariadb.org/)\n */\nexport const DB_SYSTEM_NAME_VALUE_MARIADB = \"mariadb\";\n/**\n * Enum value \"microsoft.sql_server\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [Microsoft SQL Server](https://www.microsoft.com/sql-server)\n */\nexport const DB_SYSTEM_NAME_VALUE_MICROSOFT_SQL_SERVER = \"microsoft.sql_server\";\n/**\n * Enum value \"mysql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [MySQL](https://www.mysql.com/)\n */\nexport const DB_SYSTEM_NAME_VALUE_MYSQL = \"mysql\";\n/**\n * Enum value \"postgresql\" for attribute {@link ATTR_DB_SYSTEM_NAME}.\n *\n * [PostgreSQL](https://www.postgresql.org/)\n */\nexport const DB_SYSTEM_NAME_VALUE_POSTGRESQL = \"postgresql\";\n/**\n * Name of the garbage collector managed heap generation.\n *\n * @example gen0\n * @example gen1\n * @example gen2\n */\nexport const ATTR_DOTNET_GC_HEAP_GENERATION = 'dotnet.gc.heap.generation';\n/**\n * Enum value \"gen0\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 0\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = \"gen0\";\n/**\n * Enum value \"gen1\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 1\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = \"gen1\";\n/**\n * Enum value \"gen2\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Generation 2\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = \"gen2\";\n/**\n * Enum value \"loh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Large Object Heap\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_LOH = \"loh\";\n/**\n * Enum value \"poh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n *\n * Pinned Object Heap\n */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_POH = \"poh\";\n/**\n * Describes a class of error the operation ended with.\n *\n * @example timeout\n * @example java.net.UnknownHostException\n * @example server_certificate_invalid\n * @example 500\n *\n * @note The `error.type` **SHOULD** be predictable, and **SHOULD** have low cardinality.\n *\n * When `error.type` is set to a type (e.g., an exception type), its\n * canonical class name identifying the type within the artifact **SHOULD** be used.\n *\n * Instrumentations **SHOULD** document the list of errors they report.\n *\n * The cardinality of `error.type` within one instrumentation library **SHOULD** be low.\n * Telemetry consumers that aggregate data from multiple instrumentation libraries and applications\n * should be prepared for `error.type` to have high cardinality at query time when no\n * additional filters are applied.\n *\n * If the operation has completed successfully, instrumentations **SHOULD NOT** set `error.type`.\n *\n * If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\n * it's **RECOMMENDED** to:\n *\n *   - Use a domain-specific attribute\n *   - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n */\nexport const ATTR_ERROR_TYPE = 'error.type';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_ERROR_TYPE}.\n *\n * A fallback error value to be used when the instrumentation doesn't define a custom value.\n */\nexport const ERROR_TYPE_VALUE_OTHER = \"_OTHER\";\n/**\n * Indicates that the exception is escaping the scope of the span.\n *\n * @deprecated It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n */\nexport const ATTR_EXCEPTION_ESCAPED = 'exception.escaped';\n/**\n * The exception message.\n *\n * @example Division by zero\n * @example Can't convert 'int' object to str implicitly\n */\nexport const ATTR_EXCEPTION_MESSAGE = 'exception.message';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @example \"Exception in thread \"main\" java.lang.RuntimeException: Test exception\\\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_EXCEPTION_STACKTRACE = 'exception.stacktrace';\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @example java.net.ConnectException\n * @example OSError\n */\nexport const ATTR_EXCEPTION_TYPE = 'exception.type';\n/**\n * HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"1.2.3.4\", \"1.2.3.5\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * The `User-Agent` header is already captured in the `user_agent.original` attribute.\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` **SHOULD** be recorded as the `http.request.header.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `X-Forwarded-For: 1.2.3.4, 1.2.3.5` **SHOULD** be recorded as the `http.request.header.x-forwarded-for`\n *     attribute with value `[\"1.2.3.4\", \"1.2.3.5\"]` or `[\"1.2.3.4, 1.2.3.5\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_REQUEST_HEADER = (key) => `http.request.header.${key}`;\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nexport const ATTR_HTTP_REQUEST_METHOD = 'http.request.method';\n/**\n * Enum value \"_OTHER\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * Any HTTP method that the instrumentation has no prior knowledge of.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OTHER = \"_OTHER\";\n/**\n * Enum value \"CONNECT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * CONNECT method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_CONNECT = \"CONNECT\";\n/**\n * Enum value \"DELETE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * DELETE method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_DELETE = \"DELETE\";\n/**\n * Enum value \"GET\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * GET method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_GET = \"GET\";\n/**\n * Enum value \"HEAD\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * HEAD method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_HEAD = \"HEAD\";\n/**\n * Enum value \"OPTIONS\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * OPTIONS method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_OPTIONS = \"OPTIONS\";\n/**\n * Enum value \"PATCH\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PATCH method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PATCH = \"PATCH\";\n/**\n * Enum value \"POST\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * POST method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_POST = \"POST\";\n/**\n * Enum value \"PUT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * PUT method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_PUT = \"PUT\";\n/**\n * Enum value \"TRACE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n *\n * TRACE method.\n */\nexport const HTTP_REQUEST_METHOD_VALUE_TRACE = \"TRACE\";\n/**\n * Original HTTP method sent by the client in the request line.\n *\n * @example GeT\n * @example ACL\n * @example foo\n */\nexport const ATTR_HTTP_REQUEST_METHOD_ORIGINAL = 'http.request.method_original';\n/**\n * The ordinal number of request resending attempt (for any reason, including redirects).\n *\n * @example 3\n *\n * @note The resend count **SHOULD** be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n */\nexport const ATTR_HTTP_REQUEST_RESEND_COUNT = 'http.request.resend_count';\n/**\n * HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example [\"application/json\"]\n * @example [\"abc\", \"def\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured.\n * Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n *\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n *\n * The attribute value **MUST** consist of either multiple header values as an array of strings\n * or a single-item array containing a possibly comma-concatenated string, depending on the way\n * the HTTP library provides access to headers.\n *\n * Examples:\n *\n *   - A header `Content-Type: application/json` header **SHOULD** be recorded as the `http.request.response.content-type`\n *     attribute with value `[\"application/json\"]`.\n *   - A header `My-custom-header: abc, def` header **SHOULD** be recorded as the `http.response.header.my-custom-header`\n *     attribute with value `[\"abc\", \"def\"]` or `[\"abc, def\"]` depending on the HTTP library.\n */\nexport const ATTR_HTTP_RESPONSE_HEADER = (key) => `http.response.header.${key}`;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nexport const ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code';\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nexport const ATTR_HTTP_ROUTE = 'http.route';\n/**\n * Name of the garbage collector action.\n *\n * @example end of minor GC\n * @example end of major GC\n *\n * @note Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n */\nexport const ATTR_JVM_GC_ACTION = 'jvm.gc.action';\n/**\n * Name of the garbage collector.\n *\n * @example G1 Young Generation\n * @example G1 Old Generation\n *\n * @note Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n */\nexport const ATTR_JVM_GC_NAME = 'jvm.gc.name';\n/**\n * Name of the memory pool.\n *\n * @example G1 Old Gen\n * @example G1 Eden space\n * @example G1 Survivor Space\n *\n * @note Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n */\nexport const ATTR_JVM_MEMORY_POOL_NAME = 'jvm.memory.pool.name';\n/**\n * The type of memory.\n *\n * @example heap\n * @example non_heap\n */\nexport const ATTR_JVM_MEMORY_TYPE = 'jvm.memory.type';\n/**\n * Enum value \"heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Heap memory.\n */\nexport const JVM_MEMORY_TYPE_VALUE_HEAP = \"heap\";\n/**\n * Enum value \"non_heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n *\n * Non-heap memory\n */\nexport const JVM_MEMORY_TYPE_VALUE_NON_HEAP = \"non_heap\";\n/**\n * Whether the thread is daemon or not.\n */\nexport const ATTR_JVM_THREAD_DAEMON = 'jvm.thread.daemon';\n/**\n * State of the thread.\n *\n * @example runnable\n * @example blocked\n */\nexport const ATTR_JVM_THREAD_STATE = 'jvm.thread.state';\n/**\n * Enum value \"blocked\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is blocked waiting for a monitor lock is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_BLOCKED = \"blocked\";\n/**\n * Enum value \"new\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has not yet started is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_NEW = \"new\";\n/**\n * Enum value \"runnable\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread executing in the Java virtual machine is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_RUNNABLE = \"runnable\";\n/**\n * Enum value \"terminated\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that has exited is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_TERMINATED = \"terminated\";\n/**\n * Enum value \"timed_waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_TIMED_WAITING = \"timed_waiting\";\n/**\n * Enum value \"waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n *\n * A thread that is waiting indefinitely for another thread to perform a particular action is in this state.\n */\nexport const JVM_THREAD_STATE_VALUE_WAITING = \"waiting\";\n/**\n * Local address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_LOCAL_ADDRESS = 'network.local.address';\n/**\n * Local port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_LOCAL_PORT = 'network.local.port';\n/**\n * Peer address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_PEER_ADDRESS = 'network.peer.address';\n/**\n * Peer port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_PEER_PORT = 'network.peer.port';\n/**\n * [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.\n *\n * @example amqp\n * @example http\n * @example mqtt\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_PROTOCOL_NAME = 'network.protocol.name';\n/**\n * The actual version of the protocol used for network communication.\n *\n * @example 1.1\n * @example 2\n *\n * @note If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute **SHOULD** be set to the negotiated version. If the actual protocol version is not known, this attribute **SHOULD NOT** be set.\n */\nexport const ATTR_NETWORK_PROTOCOL_VERSION = 'network.protocol.version';\n/**\n * [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n *\n * @example tcp\n * @example udp\n *\n * @note The value **SHOULD** be normalized to lowercase.\n *\n * Consider always setting the transport when setting a port number, since\n * a port number is ambiguous without knowing the transport. For example\n * different processes could be listening on TCP port 12345 and UDP port 12345.\n */\nexport const ATTR_NETWORK_TRANSPORT = 'network.transport';\n/**\n * Enum value \"pipe\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Named or anonymous pipe.\n */\nexport const NETWORK_TRANSPORT_VALUE_PIPE = \"pipe\";\n/**\n * Enum value \"quic\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * QUIC\n */\nexport const NETWORK_TRANSPORT_VALUE_QUIC = \"quic\";\n/**\n * Enum value \"tcp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * TCP\n */\nexport const NETWORK_TRANSPORT_VALUE_TCP = \"tcp\";\n/**\n * Enum value \"udp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * UDP\n */\nexport const NETWORK_TRANSPORT_VALUE_UDP = \"udp\";\n/**\n * Enum value \"unix\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n *\n * Unix domain socket\n */\nexport const NETWORK_TRANSPORT_VALUE_UNIX = \"unix\";\n/**\n * [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.\n *\n * @example ipv4\n * @example ipv6\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_TYPE = 'network.type';\n/**\n * Enum value \"ipv4\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv4\n */\nexport const NETWORK_TYPE_VALUE_IPV4 = \"ipv4\";\n/**\n * Enum value \"ipv6\" for attribute {@link ATTR_NETWORK_TYPE}.\n *\n * IPv6\n */\nexport const NETWORK_TYPE_VALUE_IPV6 = \"ipv6\";\n/**\n * The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).\n *\n * @example io.opentelemetry.contrib.mongodb\n */\nexport const ATTR_OTEL_SCOPE_NAME = 'otel.scope.name';\n/**\n * The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).\n *\n * @example 1.0.0\n */\nexport const ATTR_OTEL_SCOPE_VERSION = 'otel.scope.version';\n/**\n * Name of the code, either \"OK\" or \"ERROR\". **MUST NOT** be set if the status code is UNSET.\n */\nexport const ATTR_OTEL_STATUS_CODE = 'otel.status_code';\n/**\n * Enum value \"ERROR\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation contains an error.\n */\nexport const OTEL_STATUS_CODE_VALUE_ERROR = \"ERROR\";\n/**\n * Enum value \"OK\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n *\n * The operation has been validated by an Application developer or Operator to have completed successfully.\n */\nexport const OTEL_STATUS_CODE_VALUE_OK = \"OK\";\n/**\n * Description of the Status if it has a value, otherwise not set.\n *\n * @example resource not found\n */\nexport const ATTR_OTEL_STATUS_DESCRIPTION = 'otel.status_description';\n/**\n * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.address` **SHOULD** represent the server address behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_ADDRESS = 'server.address';\n/**\n * Server port number.\n *\n * @example 80\n * @example 8080\n * @example 443\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.port` **SHOULD** represent the server port behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_PORT = 'server.port';\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nexport const ATTR_SERVICE_NAME = 'service.name';\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nexport const ATTR_SERVICE_VERSION = 'service.version';\n/**\n * SignalR HTTP connection closure status.\n *\n * @example app_shutdown\n * @example timeout\n */\nexport const ATTR_SIGNALR_CONNECTION_STATUS = 'signalr.connection.status';\n/**\n * Enum value \"app_shutdown\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed because the app is shutting down.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = \"app_shutdown\";\n/**\n * Enum value \"normal_closure\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed normally.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = \"normal_closure\";\n/**\n * Enum value \"timeout\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n *\n * The connection was closed due to a timeout.\n */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = \"timeout\";\n/**\n * [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)\n *\n * @example web_sockets\n * @example long_polling\n */\nexport const ATTR_SIGNALR_TRANSPORT = 'signalr.transport';\n/**\n * Enum value \"long_polling\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * LongPolling protocol\n */\nexport const SIGNALR_TRANSPORT_VALUE_LONG_POLLING = \"long_polling\";\n/**\n * Enum value \"server_sent_events\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * ServerSentEvents protocol\n */\nexport const SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = \"server_sent_events\";\n/**\n * Enum value \"web_sockets\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n *\n * WebSockets protocol\n */\nexport const SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = \"web_sockets\";\n/**\n * The language of the telemetry SDK.\n */\nexport const ATTR_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\n/**\n * Enum value \"cpp\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_CPP = \"cpp\";\n/**\n * Enum value \"dotnet\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = \"dotnet\";\n/**\n * Enum value \"erlang\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = \"erlang\";\n/**\n * Enum value \"go\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_GO = \"go\";\n/**\n * Enum value \"java\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = \"java\";\n/**\n * Enum value \"nodejs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = \"nodejs\";\n/**\n * Enum value \"php\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PHP = \"php\";\n/**\n * Enum value \"python\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = \"python\";\n/**\n * Enum value \"ruby\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = \"ruby\";\n/**\n * Enum value \"rust\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUST = \"rust\";\n/**\n * Enum value \"swift\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = \"swift\";\n/**\n * Enum value \"webjs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = \"webjs\";\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @example opentelemetry\n *\n * @note The OpenTelemetry SDK **MUST** set the `telemetry.sdk.name` attribute to `opentelemetry`.\n * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK **MUST** set the\n * `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\n * or another suitable identifier depending on the language.\n * The identifier `opentelemetry` is reserved and **MUST NOT** be used in this case.\n * All custom identifiers **SHOULD** be stable across different versions of an implementation.\n */\nexport const ATTR_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\n/**\n * The version string of the telemetry SDK.\n *\n * @example 1.2.3\n */\nexport const ATTR_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\n/**\n * The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n *\n * @example SemConv\n */\nexport const ATTR_URL_FRAGMENT = 'url.fragment';\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\n * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n *\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.\n * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n *\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).\n *\n * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the\n * value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `https://www.example.com/path?color=blue&sig=REDACTED`.\n */\nexport const ATTR_URL_FULL = 'url.full';\n/**\n * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n *\n * @example /search\n *\n * @note Sensitive content provided in `url.path` **SHOULD** be scrubbed when instrumentations can identify it.\n */\nexport const ATTR_URL_PATH = 'url.path';\n/**\n * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n *\n * @example q=OpenTelemetry\n *\n * @note Sensitive content provided in `url.query` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `q=OpenTelemetry&sig=REDACTED`.\n */\nexport const ATTR_URL_QUERY = 'url.query';\n/**\n * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n *\n * @example https\n * @example ftp\n * @example telnet\n */\nexport const ATTR_URL_SCHEME = 'url.scheme';\n/**\n * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n * @example YourApp/1.0.0 grpc-java-okhttp/1.27.2\n */\nexport const ATTR_USER_AGENT_ORIGINAL = 'user_agent.original';\n//# sourceMappingURL=stable_attributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis) {\n    const epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    const seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nexport function getTimeOrigin() {\n    let timeOrigin = performance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        const perf = performance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n    const timeOrigin = millisToHrTime(getTimeOrigin());\n    const now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n    let seconds = endTime[0] - startTime[0];\n    let nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n    const precision = NANOSECOND_DIGITS;\n    const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n    const nanoString = tmp.substring(tmp.length - precision - 1);\n    const date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n    return time[0] * 1e3 + time[1] / 1e6;\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n    return time[0] * 1e6 + time[1] / 1e3;\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1, time2) {\n    const out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototypeOf = Object.getPrototypeOf;\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    const proto = getPrototypeOf(value);\n    if (proto === null) {\n        return true;\n    }\n    const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    const isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    let unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    const result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isPlainObject } from './lodash.merge';\nconst MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args) {\n    let result = args.shift();\n    const objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level = 0, objects) {\n    let result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (let i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            const keys = Object.keys(two);\n            for (let i = 0, j = keys.length; i < j; i++) {\n                const key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            const keys = Object.keys(two);\n            for (let i = 0, j = keys.length; i < j; i++) {\n                const key = keys[i];\n                const twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    const obj1 = result[key];\n                    const obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            const arr1 = objects.get(obj1) || [];\n                            const arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key });\n                            arr2.push({ obj: two, key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    const arr = objects.get(obj[key]) || [];\n    for (let i = 0, j = arr.length; i < j; i++) {\n        const info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!isPlainObject(one) || !isPlainObject(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nexport const ExceptionEventName = 'exception';\n//# sourceMappingURL=enums.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, SpanStatusCode, } from '@opentelemetry/api';\nimport { addHrTimes, millisToHrTime, getTimeOrigin, hrTime, hrTimeDuration, isAttributeValue, isTimeInput, isTimeInputHrTime, otperformance, sanitizeAttributes, } from '@opentelemetry/core';\nimport { SEMATTRS_EXCEPTION_MESSAGE, SEMATTRS_EXCEPTION_STACKTRACE, SEMATTRS_EXCEPTION_TYPE, } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\n/**\n * This class represents a span.\n */\nexport class SpanImpl {\n    // Below properties are included to implement ReadableSpan for export\n    // purposes but are not intended to be written-to directly.\n    _spanContext;\n    kind;\n    parentSpanContext;\n    attributes = {};\n    links = [];\n    events = [];\n    startTime;\n    resource;\n    instrumentationScope;\n    _droppedAttributesCount = 0;\n    _droppedEventsCount = 0;\n    _droppedLinksCount = 0;\n    name;\n    status = {\n        code: SpanStatusCode.UNSET,\n    };\n    endTime = [0, 0];\n    _ended = false;\n    _duration = [-1, -1];\n    _spanProcessor;\n    _spanLimits;\n    _attributeValueLengthLimit;\n    _performanceStartTime;\n    _performanceOffset;\n    _startTimeProvided;\n    /**\n     * Constructs a new SpanImpl instance.\n     */\n    constructor(opts) {\n        const now = Date.now();\n        this._spanContext = opts.spanContext;\n        this._performanceStartTime = otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + getTimeOrigin());\n        this._startTimeProvided = opts.startTime != null;\n        this._spanLimits = opts.spanLimits;\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n        this._spanProcessor = opts.spanProcessor;\n        this.name = opts.name;\n        this.parentSpanContext = opts.parentSpanContext;\n        this.kind = opts.kind;\n        this.links = opts.links || [];\n        this.startTime = this._getTime(opts.startTime ?? now);\n        this.resource = opts.resource;\n        this.instrumentationScope = opts.scope;\n        if (opts.attributes != null) {\n            this.setAttributes(opts.attributes);\n        }\n        this._spanProcessor.onStart(this, opts.context);\n    }\n    spanContext() {\n        return this._spanContext;\n    }\n    setAttribute(key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            diag.warn(`Invalid attribute key: ${key}`);\n            return this;\n        }\n        if (!isAttributeValue(value)) {\n            diag.warn(`Invalid attribute value set for key: ${key}`);\n            return this;\n        }\n        const { attributeCountLimit } = this._spanLimits;\n        if (attributeCountLimit !== undefined &&\n            Object.keys(this.attributes).length >= attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    }\n    setAttributes(attributes) {\n        for (const [k, v] of Object.entries(attributes)) {\n            this.setAttribute(k, v);\n        }\n        return this;\n    }\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    addEvent(name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        const { eventCountLimit } = this._spanLimits;\n        if (eventCountLimit === 0) {\n            diag.warn('No events allowed.');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (eventCountLimit !== undefined &&\n            this.events.length >= eventCountLimit) {\n            if (this._droppedEventsCount === 0) {\n                diag.debug('Dropping extra events.');\n            }\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if (isTimeInput(attributesOrStartTime)) {\n            if (!isTimeInput(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        const attributes = sanitizeAttributes(attributesOrStartTime);\n        this.events.push({\n            name,\n            attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    }\n    addLink(link) {\n        this.links.push(link);\n        return this;\n    }\n    addLinks(links) {\n        this.links.push(...links);\n        return this;\n    }\n    setStatus(status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = { ...status };\n        // When using try-catch, the caught \"error\" is of type `any`. When then assigning `any` to `status.message`,\n        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n        // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n        // undefined to avoid an incorrect type causing issues downstream.\n        if (this.status.message != null && typeof status.message !== 'string') {\n            diag.warn(`Dropping invalid status.message of type '${typeof status.message}', expected 'string'`);\n            delete this.status.message;\n        }\n        return this;\n    }\n    updateName(name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    }\n    end(endTime) {\n        if (this._isSpanEnded()) {\n            diag.error(`${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`);\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = hrTimeDuration(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n            diag.warn(`Dropped ${this._droppedEventsCount} events because eventCountLimit reached`);\n        }\n        this._spanProcessor.onEnd(this);\n    }\n    _getTime(inp) {\n        if (typeof inp === 'number' && inp <= otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return hrTime(inp + this._performanceOffset);\n        }\n        if (typeof inp === 'number') {\n            return millisToHrTime(inp);\n        }\n        if (inp instanceof Date) {\n            return millisToHrTime(inp.getTime());\n        }\n        if (isTimeInputHrTime(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can't use duration to calculate event/end times\n            return millisToHrTime(Date.now());\n        }\n        const msDuration = otperformance.now() - this._performanceStartTime;\n        return addHrTimes(this.startTime, millisToHrTime(msDuration));\n    }\n    isRecording() {\n        return this._ended === false;\n    }\n    recordException(exception, time) {\n        const attributes = {};\n        if (typeof exception === 'string') {\n            attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[SEMATTRS_EXCEPTION_TYPE] ||\n            attributes[SEMATTRS_EXCEPTION_MESSAGE]) {\n            this.addEvent(ExceptionEventName, attributes, time);\n        }\n        else {\n            diag.warn(`Failed to record an exception ${exception}`);\n        }\n    }\n    get duration() {\n        return this._duration;\n    }\n    get ended() {\n        return this._ended;\n    }\n    get droppedAttributesCount() {\n        return this._droppedAttributesCount;\n    }\n    get droppedEventsCount() {\n        return this._droppedEventsCount;\n    }\n    get droppedLinksCount() {\n        return this._droppedLinksCount;\n    }\n    _isSpanEnded() {\n        if (this._ended) {\n            const error = new Error(`Operation attempted on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`);\n            diag.warn(`Cannot execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`, error);\n        }\n        return this._ended;\n    }\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    _truncateToLimitUtil(value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substring(0, limit);\n    }\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with truncated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    _truncateToSize(value) {\n        const limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            diag.warn(`Attribute value limit must be positive, got ${limit}`);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(val => typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val);\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    }\n}\n//# sourceMappingURL=Span.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=Sampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples no traces. */\nexport class AlwaysOffSampler {\n    shouldSample() {\n        return {\n            decision: SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return 'AlwaysOffSampler';\n    }\n}\n//# sourceMappingURL=AlwaysOffSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler {\n    shouldSample() {\n        return {\n            decision: SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    }\n    toString() {\n        return 'AlwaysOnSampler';\n    }\n}\n//# sourceMappingURL=AlwaysOnSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace, } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler {\n    _root;\n    _remoteParentSampled;\n    _remoteParentNotSampled;\n    _localParentSampled;\n    _localParentNotSampled;\n    constructor(config) {\n        this._root = config.root;\n        if (!this._root) {\n            globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            config.remoteParentSampled ?? new AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            config.remoteParentNotSampled ?? new AlwaysOffSampler();\n        this._localParentSampled =\n            config.localParentSampled ?? new AlwaysOnSampler();\n        this._localParentNotSampled =\n            config.localParentNotSampled ?? new AlwaysOffSampler();\n    }\n    shouldSample(context, traceId, spanName, spanKind, attributes, links) {\n        const parentContext = trace.getSpanContext(context);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    toString() {\n        return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n    }\n}\n//# sourceMappingURL=ParentBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nexport class TraceIdRatioBasedSampler {\n    _ratio;\n    _upperBound;\n    constructor(_ratio = 0) {\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    shouldSample(context, traceId) {\n        return {\n            decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n                ? SamplingDecision.RECORD_AND_SAMPLED\n                : SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return `TraceIdRatioBased{${this._ratio}}`;\n    }\n    _normalize(ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    }\n    _accumulate(traceId) {\n        let accumulation = 0;\n        for (let i = 0; i < traceId.length / 8; i++) {\n            const pos = i * 8;\n            const part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    }\n}\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { getNumberFromEnv, getStringFromEnv } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nconst DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n    return {\n        sampler: buildSamplerFromEnv(),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n            attributeCountLimit: getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n            attributeCountLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n            linkCountLimit: getNumberFromEnv('OTEL_SPAN_LINK_COUNT_LIMIT') ?? 128,\n            eventCountLimit: getNumberFromEnv('OTEL_SPAN_EVENT_COUNT_LIMIT') ?? 128,\n            attributePerEventCountLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT') ?? 128,\n            attributePerLinkCountLimit: getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT') ?? 128,\n        },\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n */\nexport function buildSamplerFromEnv() {\n    const sampler = getStringFromEnv('OTEL_TRACES_SAMPLER') ??\n        \"parentbased_always_on\" /* TracesSamplerValues.ParentBasedAlwaysOn */;\n    switch (sampler) {\n        case \"always_on\" /* TracesSamplerValues.AlwaysOn */:\n            return new AlwaysOnSampler();\n        case \"always_off\" /* TracesSamplerValues.AlwaysOff */:\n            return new AlwaysOffSampler();\n        case \"parentbased_always_on\" /* TracesSamplerValues.ParentBasedAlwaysOn */:\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n        case \"parentbased_always_off\" /* TracesSamplerValues.ParentBasedAlwaysOff */:\n            return new ParentBasedSampler({\n                root: new AlwaysOffSampler(),\n            });\n        case \"traceidratio\" /* TracesSamplerValues.TraceIdRatio */:\n            return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv());\n        case \"parentbased_traceidratio\" /* TracesSamplerValues.ParentBasedTraceIdRatio */:\n            return new ParentBasedSampler({\n                root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv()),\n            });\n        default:\n            diag.error(`OTEL_TRACES_SAMPLER value \"${sampler}\" invalid, defaulting to \"${\"parentbased_always_on\" /* TracesSamplerValues.ParentBasedAlwaysOn */}\".`);\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n    }\n}\nfunction getSamplerProbabilityFromEnv() {\n    const probability = getNumberFromEnv('OTEL_TRACES_SAMPLER_ARG');\n    if (probability == null) {\n        diag.error(`OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`);\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        diag.error(`OTEL_TRACES_SAMPLER_ARG=${probability} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`);\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { getNumberFromEnv } from '@opentelemetry/core';\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n    const perInstanceDefaults = {\n        sampler: buildSamplerFromEnv(),\n    };\n    const DEFAULT_CONFIG = loadDefaultConfig();\n    const target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig) {\n    const spanLimits = Object.assign({}, userConfig.spanLimits);\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        userConfig.spanLimits?.attributeCountLimit ??\n            userConfig.generalLimits?.attributeCountLimit ??\n            getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ??\n            getNumberFromEnv('OTEL_ATTRIBUTE_COUNT_LIMIT') ??\n            DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        userConfig.spanLimits?.attributeValueLengthLimit ??\n            userConfig.generalLimits?.attributeValueLengthLimit ??\n            getNumberFromEnv('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            getNumberFromEnv('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits });\n}\n//# sourceMappingURL=utility.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\nexport class RandomIdGenerator {\n    /**\n     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n     * characters corresponding to 128 bits.\n     */\n    generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n    /**\n     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n     * characters corresponding to 64 bits.\n     */\n    generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (let i = 0; i < bytes / 4; i++) {\n            // unsigned right shift drops decimal part of the number\n            // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n            SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n        }\n        // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n        for (let i = 0; i < bytes; i++) {\n            if (SHARED_BUFFER[i] > 0) {\n                break;\n            }\n            else if (i === bytes - 1) {\n                SHARED_BUFFER[bytes - 1] = 1;\n            }\n        }\n        return SHARED_BUFFER.toString('hex', 0, bytes);\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { sanitizeAttributes, isTracingSuppressed, } from '@opentelemetry/core';\nimport { SpanImpl } from './Span';\nimport { mergeConfig } from './utility';\nimport { RandomIdGenerator } from './platform';\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer {\n    _sampler;\n    _generalLimits;\n    _spanLimits;\n    _idGenerator;\n    instrumentationScope;\n    _resource;\n    _spanProcessor;\n    /**\n     * Constructs a new Tracer instance.\n     */\n    constructor(instrumentationScope, config, resource, spanProcessor) {\n        const localConfig = mergeConfig(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new RandomIdGenerator();\n        this._resource = resource;\n        this._spanProcessor = spanProcessor;\n        this.instrumentationScope = instrumentationScope;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    startSpan(name, options = {}, context = api.context.active()) {\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = api.trace.deleteSpan(context);\n        }\n        const parentSpan = api.trace.getSpan(context);\n        if (isTracingSuppressed(context)) {\n            api.diag.debug('Instrumentation suppressed, returning Noop Span');\n            const nonRecordingSpan = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        const parentSpanContext = parentSpan?.spanContext();\n        const spanId = this._idGenerator.generateSpanId();\n        let validParentSpanContext;\n        let traceId;\n        let traceState;\n        if (!parentSpanContext ||\n            !api.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            validParentSpanContext = parentSpanContext;\n        }\n        const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n        const links = (options.links ?? []).map(link => {\n            return {\n                context: link.context,\n                attributes: sanitizeAttributes(link.attributes),\n            };\n        });\n        const attributes = sanitizeAttributes(options.attributes);\n        // make sampling decision\n        const samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = samplingResult.traceState ?? traceState;\n        const traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n            ? api.TraceFlags.SAMPLED\n            : api.TraceFlags.NONE;\n        const spanContext = { traceId, spanId, traceFlags, traceState };\n        if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n            api.diag.debug('Recording is off, propagating context in a non-recording span');\n            const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        const initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n        const span = new SpanImpl({\n            resource: this._resource,\n            scope: this.instrumentationScope,\n            context,\n            spanContext,\n            name,\n            kind: spanKind,\n            links,\n            parentSpanContext: validParentSpanContext,\n            attributes: initAttributes,\n            startTime: options.startTime,\n            spanProcessor: this._spanProcessor,\n            spanLimits: this._spanLimits,\n        });\n        return span;\n    }\n    startActiveSpan(name, arg2, arg3, arg4) {\n        let opts;\n        let ctx;\n        let fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        const parentContext = ctx ?? api.context.active();\n        const span = this.startSpan(name, opts, parentContext);\n        const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n        return api.context.with(contextWithSpanSet, fn, undefined, span);\n    }\n    /** Returns the active {@link GeneralLimits}. */\n    getGeneralLimits() {\n        return this._generalLimits;\n    }\n    /** Returns the active {@link SpanLimits}. */\n    getSpanLimits() {\n        return this._spanLimits;\n    }\n}\n//# sourceMappingURL=Tracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nexport class MultiSpanProcessor {\n    _spanProcessors;\n    constructor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    forceFlush() {\n        const promises = [];\n        for (const spanProcessor of this._spanProcessors) {\n            promises.push(spanProcessor.forceFlush());\n        }\n        return new Promise(resolve => {\n            Promise.all(promises)\n                .then(() => {\n                resolve();\n            })\n                .catch(error => {\n                globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    }\n    onStart(span, context) {\n        for (const spanProcessor of this._spanProcessors) {\n            spanProcessor.onStart(span, context);\n        }\n    }\n    onEnd(span) {\n        for (const spanProcessor of this._spanProcessors) {\n            spanProcessor.onEnd(span);\n        }\n    }\n    shutdown() {\n        const promises = [];\n        for (const spanProcessor of this._spanProcessors) {\n            promises.push(spanProcessor.shutdown());\n        }\n        return new Promise((resolve, reject) => {\n            Promise.all(promises).then(() => {\n                resolve();\n            }, reject);\n        });\n    }\n}\n//# sourceMappingURL=MultiSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { merge } from '@opentelemetry/core';\nimport { defaultResource } from '@opentelemetry/resources';\nimport { Tracer } from './Tracer';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { reconfigureLimits } from './utility';\nexport var ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nexport class BasicTracerProvider {\n    _config;\n    _tracers = new Map();\n    _resource;\n    _activeSpanProcessor;\n    constructor(config = {}) {\n        const mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n        this._resource = mergedConfig.resource ?? defaultResource();\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this._resource,\n        });\n        const spanProcessors = [];\n        if (config.spanProcessors?.length) {\n            spanProcessors.push(...config.spanProcessors);\n        }\n        this._activeSpanProcessor = new MultiSpanProcessor(spanProcessors);\n    }\n    getTracer(name, version, options) {\n        const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new Tracer({ name, version, schemaUrl: options?.schemaUrl }, this._config, this._resource, this._activeSpanProcessor));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    }\n    forceFlush() {\n        const timeout = this._config.forceFlushTimeoutMillis;\n        const promises = this._activeSpanProcessor['_spanProcessors'].map((spanProcessor) => {\n            return new Promise(resolve => {\n                let state;\n                const timeoutInterval = setTimeout(() => {\n                    resolve(new Error(`Span processor did not completed within timeout period of ${timeout} ms`));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(() => {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(error => {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise((resolve, reject) => {\n            Promise.all(promises)\n                .then(results => {\n                const errors = results.filter(result => result !== ForceFlushState.resolved);\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(error => reject([error]));\n        });\n    }\n    shutdown() {\n        return this._activeSpanProcessor.shutdown();\n    }\n}\n//# sourceMappingURL=BasicTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nconst SUPPRESS_TRACING_KEY = createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nexport function suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nexport function unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nexport function isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString, } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce((hValue, current) => {\n        const value = `${hValue}${hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''}${current}`;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nexport function getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(([key, value]) => {\n        let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nexport function parsePairKeyValue(entry) {\n    const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    const keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    const key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    const value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    let metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key, value, metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n    const result = {};\n    if (typeof value === 'string' && value.length > 0) {\n        value.split(BAGGAGE_ITEMS_SEPARATOR).forEach(entry => {\n            const keyPair = parsePairKeyValue(entry);\n            if (keyPair !== undefined && keyPair.value.length > 0) {\n                result[keyPair.key] = keyPair.value;\n            }\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS, } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator {\n    inject(context, carrier, setter) {\n        const baggage = propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        const keyPairs = getKeyPairs(baggage)\n            .filter((pair) => {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        const headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    }\n    extract(context, carrier, getter) {\n        const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        const baggageString = Array.isArray(headerValue)\n            ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n            : headerValue;\n        if (!baggageString)\n            return context;\n        const baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(entry => {\n            const keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                const baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return propagation.setBaggage(context, propagation.createBaggage(baggage));\n    }\n    fields() {\n        return [BAGGAGE_HEADER];\n    }\n}\n//# sourceMappingURL=W3CBaggagePropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from '../internal/validators';\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState {\n    _internalState = new Map();\n    constructor(rawTraceState) {\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    set(key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        const traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    }\n    unset(key) {\n        const traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    }\n    get(key) {\n        return this._internalState.get(key);\n    }\n    serialize() {\n        return this._keys()\n            .reduce((agg, key) => {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    }\n    _parse(rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce((agg, part) => {\n            const listMember = part.trim(); // Optional Whitespace (OWS) handling\n            const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                const key = listMember.slice(0, i);\n                const value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    }\n    _keys() {\n        return Array.from(this._internalState.keys()).reverse();\n    }\n    _clone() {\n        const traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    }\n}\n//# sourceMappingURL=TraceState.js.map","import { ATTR_URL_FULL, SEMATTRS_HTTP_URL, ATTR_HTTP_REQUEST_METHOD, SEMATTRS_HTTP_METHOD, SEMATTRS_DB_SYSTEM, SEMATTRS_RPC_SERVICE, SEMATTRS_MESSAGING_SYSTEM, SEMATTRS_FAAS_TRIGGER, SEMATTRS_DB_STATEMENT, SEMATTRS_HTTP_TARGET, ATTR_HTTP_ROUTE, ATTR_HTTP_RESPONSE_STATUS_CODE, SEMATTRS_HTTP_STATUS_CODE, SEMATTRS_RPC_GRPC_STATUS_CODE } from '@opentelemetry/semantic-conventions';\nimport { parseUrl, getSanitizedUrlString, SDK_VERSION, addNonEnumerableProperty, isSentryRequestUrl, getClient, baggageHeaderToDynamicSamplingContext, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME, stripUrlQueryAndFragment, spanToJSON, hasSpansEnabled, dynamicSamplingContextToSentryBaggageHeader, LRUMap, debug, parseBaggageHeader, SENTRY_BAGGAGE_KEY_PREFIX, generateSentryTraceHeader, stringMatchesSomePattern, getDynamicSamplingContextFromSpan, getCurrentScope, getDynamicSamplingContextFromScope, getIsolationScope, propagationContextFromHeaders, shouldContinueTrace, handleCallbackErrors, spanToTraceContext, getTraceContextFromScope, getRootSpan, getCapturedScopesOnSpan, setAsyncContextStrategy, getDefaultIsolationScope, getDefaultCurrentScope, SPAN_STATUS_OK, SPAN_STATUS_ERROR, getSpanStatusFromHttpCode, debounce, timedEventsToMeasurements, captureEvent, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, convertSpanLinksForEnvelope, getStatusMessage, spanTimeInputToSeconds, addChildSpanToSpan, setCapturedScopesOnSpan, logSpanStart, logSpanEnd, parseSampleRate, sampleSpan } from '@sentry/core';\nexport { getClient, getDynamicSamplingContextFromSpan } from '@sentry/core';\nimport * as api from '@opentelemetry/api';\nimport { trace, SpanKind, createContextKey, TraceFlags, propagation, INVALID_TRACEID, context, SpanStatusCode, ROOT_CONTEXT, isSpanContextValid } from '@opentelemetry/api';\nimport { TraceState, W3CBaggagePropagator, isTracingSuppressed, suppressTracing as suppressTracing$1 } from '@opentelemetry/core';\nimport { SamplingDecision } from '@opentelemetry/sdk-trace-base';\n\n/** If this attribute is true, it means that the parent is a remote span. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nconst SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n\n/**\n * Get the parent span id from a span.\n * In OTel v1, the parent span id is accessed as `parentSpanId`\n * In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n */\nfunction getParentSpanId(span) {\n  if ('parentSpanId' in span) {\n    return span.parentSpanId ;\n  } else if ('parentSpanContext' in span) {\n    return (span.parentSpanContext )?.spanId;\n  }\n\n  return undefined;\n}\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nfunction spanHasAttributes(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasKind(span) {\n  const castSpan = span ;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasStatus(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasName(span) {\n  const castSpan = span ;\n  return !!castSpan.name;\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasParentId(\n  span,\n) {\n  const castSpan = span ;\n  return !!getParentSpanId(castSpan);\n}\n\n/**\n * Check if a given span has events.\n * This is necessary because the base `Span` type does not have events,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasEvents(\n  span,\n) {\n  const castSpan = span ;\n  return Array.isArray(castSpan.events);\n}\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nfunction getRequestSpanData(span) {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = (span.attributes[ATTR_URL_FULL] || span.attributes[SEMATTRS_HTTP_URL])\n\n;\n\n  const data = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': (span.attributes[ATTR_HTTP_REQUEST_METHOD] || span.attributes[SEMATTRS_HTTP_METHOD])\n\n,\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = parseUrl(maybeUrlAttribute);\n\n      data.url = getSanitizedUrlString(url);\n\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch {\n    // ignore\n  }\n\n  return data;\n}\n\n// Typescript complains if we do not use `...args: any[]` for the mixin, with:\n// A mixin class must have a constructor with a single rest parameter of type 'any[]'.ts(2545)\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Wrap an Client class with things we need for OpenTelemetry support.\n * Make sure that the Client class passed in is non-abstract!\n *\n * Usage:\n * const OpenTelemetryClient = getWrappedClientClass(NodeClient);\n * const client = new OpenTelemetryClient(options);\n */\nfunction wrapClientClass\n\n(ClientClass) {\n  // @ts-expect-error We just assume that this is non-abstract, if you pass in an abstract class this would make it non-abstract\n  class OpenTelemetryClient extends ClientClass  {\n\n     constructor(...args) {\n      super(...args);\n    }\n\n    /** Get the OTEL tracer. */\n     get tracer() {\n      if (this._tracer) {\n        return this._tracer;\n      }\n\n      const name = '@sentry/opentelemetry';\n      const version = SDK_VERSION;\n      const tracer = trace.getTracer(name, version);\n      this._tracer = tracer;\n\n      return tracer;\n    }\n\n    /**\n     * @inheritDoc\n     */\n     async flush(timeout) {\n      const provider = this.traceProvider;\n      await provider?.forceFlush();\n      return super.flush(timeout);\n    }\n  }\n\n  return OpenTelemetryClient ;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nfunction getSpanKind(span) {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n\n  return SpanKind.INTERNAL;\n}\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\nconst SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nconst SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nconst SENTRY_TRACE_STATE_URL = 'sentry.url';\nconst SENTRY_TRACE_STATE_SAMPLE_RAND = 'sentry.sample_rand';\nconst SENTRY_TRACE_STATE_SAMPLE_RATE = 'sentry.sample_rate';\n\nconst SENTRY_SCOPES_CONTEXT_KEY = createContextKey('sentry_scopes');\n\nconst SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_isolation_scope');\n\nconst SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_set_scope');\n\nconst SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_set_isolation_scope');\n\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nfunction getScopesFromContext(context) {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY) ;\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nfunction setScopesOnContext(context, scopes) {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nfunction setContextOnScope(scope, context) {\n  addNonEnumerableProperty(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n */\nfunction getContextFromScope(scope) {\n  return (scope )[SCOPE_CONTEXT_FIELD];\n}\n\n/**\n *\n * @param otelSpan Checks whether a given OTEL Span is an http request to sentry.\n * @returns boolean\n */\nfunction isSentryRequestSpan(span) {\n  if (!spanHasAttributes(span)) {\n    return false;\n  }\n\n  const { attributes } = span;\n\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n\n  if (!httpUrl) {\n    return false;\n  }\n\n  return isSentryRequestUrl(httpUrl.toString(), getClient());\n}\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nfunction getSamplingDecision(spanContext) {\n  const { traceFlags, traceState } = spanContext;\n\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === TraceFlags.SAMPLED) {\n    return true;\n  }\n\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n  if (dsc?.sampled === 'true') {\n    return true;\n  }\n  if (dsc?.sampled === 'false') {\n    return false;\n  }\n\n  return undefined;\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nfunction inferSpanData(spanName, attributes, kind) {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[ATTR_HTTP_REQUEST_METHOD] || attributes[SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({ attributes, name: spanName, kind }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[SEMATTRS_DB_SYSTEM];\n  const opIsCache =\n    typeof attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' &&\n    attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({ attributes, name: spanName });\n  }\n\n  const customSourceOrRoute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom' ? 'custom' : 'route';\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, 'route'),\n      op: 'rpc',\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: 'message',\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: faasTrigger.toString(),\n    };\n  }\n\n  return { op: undefined, description: spanName, source: 'custom' };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Does not overwrite the span name if the source is already set to custom to ensure\n * that user-updated span names are preserved. In this case, we only adjust the op but\n * leave span description and source unchanged.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nfunction parseSpanDescription(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n\n  return inferSpanData(name, attributes, kind);\n}\n\nfunction descriptionForDbSystem({ attributes, name }) {\n  // if we already have a custom name, we don't overwrite it but only set the op\n  const userDefinedName = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (typeof userDefinedName === 'string') {\n    return {\n      op: 'db',\n      description: userDefinedName,\n      source: (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || 'custom',\n    };\n  }\n\n  // if we already have the source set to custom, we don't overwrite the span description but only set the op\n  if (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom') {\n    return { op: 'db', description: name, source: 'custom' };\n  }\n\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[SEMATTRS_DB_STATEMENT];\n\n  const description = statement ? statement.toString() : name;\n\n  return { op: 'db', description, source: 'task' };\n}\n\n/** Only exported for tests. */\nfunction descriptionForHttpMethod(\n  { name, kind, attributes },\n  httpMethod,\n) {\n  const opParts = ['http'];\n\n  switch (kind) {\n    case SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n\n  const { urlPath, url, query, fragment, hasRoute } = getSanitizedUrl(attributes, kind);\n\n  if (!urlPath) {\n    return { ...getUserUpdatedNameAndSource(name, attributes), op: opParts.join('.') };\n  }\n\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const inferredDescription = graphqlOperationsAttribute\n    ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})`\n    : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const inferredSource = hasRoute || urlPath === '/' ? 'route' : 'url';\n\n  const data = {};\n\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === SpanKind.CLIENT || kind === SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  // If users (or in very rare occasions we) set the source to custom, we don't overwrite the name\n  const alreadyHasCustomSource = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom';\n  const customSpanName = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  const useInferredDescription =\n    !alreadyHasCustomSource && customSpanName == null && (isClientOrServerKind || !isManualSpan);\n\n  const { description, source } = useInferredDescription\n    ? { description: inferredDescription, source: inferredSource }\n    : getUserUpdatedNameAndSource(name, attributes);\n\n  return {\n    op: opParts.join('.'),\n    description,\n    source,\n    data,\n  };\n}\n\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nfunction getSanitizedUrl(\n  attributes,\n  kind,\n)\n\n {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[ATTR_HTTP_ROUTE];\n\n  const parsedUrl = typeof httpUrl === 'string' ? parseUrl(httpUrl) : undefined;\n  const url = parsedUrl ? getSanitizedUrlString(parsedUrl) : undefined;\n  const query = parsedUrl?.search || undefined;\n  const fragment = parsedUrl?.hash || undefined;\n\n  if (typeof httpRoute === 'string') {\n    return { urlPath: httpRoute, url, query, fragment, hasRoute: true };\n  }\n\n  if (kind === SpanKind.SERVER && typeof httpTarget === 'string') {\n    return { urlPath: stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  if (parsedUrl) {\n    return { urlPath: url, url, query, fragment, hasRoute: false };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return { urlPath: stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  return { urlPath: undefined, url, query, fragment, hasRoute: false };\n}\n\n/**\n * Because Otel instrumentation sometimes mutates span names via `span.updateName`, the only way\n * to ensure that a user-set span name is preserved is to store it as a tmp attribute on the span.\n * We delete this attribute once we're done with it when preparing the event envelope.\n *\n * This temp attribute always takes precedence over the original name.\n *\n * We also need to take care of setting the correct source. Users can always update the source\n * after updating the name, so we need to respect that.\n *\n * @internal exported only for testing\n */\nfunction getUserUpdatedNameAndSource(\n  originalName,\n  attributes,\n  fallbackSource = 'custom',\n)\n\n {\n  const source = (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || fallbackSource;\n  const description = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  if (description && typeof description === 'string') {\n    return {\n      description,\n      source,\n    };\n  }\n\n  return { description: originalName, source };\n}\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nfunction enhanceDscWithOpenTelemetryRootSpanName(client) {\n  client.on('createDsc', (dsc, rootSpan) => {\n    if (!rootSpan) {\n      return;\n    }\n\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n\n    const jsonSpan = spanToJSON(rootSpan);\n    const attributes = jsonSpan.data;\n    const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    const { description } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : { description: undefined };\n    if (source !== 'url' && description) {\n      dsc.transaction = description;\n    }\n\n    // Also ensure sampling decision is correctly inferred\n    // In core, we use `spanIsSampled`, which just looks at the trace flags\n    // but in OTEL, we use a slightly more complex logic to be able to differntiate between unsampled and deferred sampling\n    if (hasSpansEnabled()) {\n      const sampled = getSamplingDecision(rootSpan.spanContext());\n      dsc.sampled = sampled == undefined ? undefined : String(sampled);\n    }\n  });\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  return trace.getActiveSpan();\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\n/**\n * Generate a TraceState for the given data.\n */\nfunction makeTraceState({\n  dsc,\n  sampled,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? dynamicSamplingContextToSentryBaggageHeader(dsc) : undefined;\n\n  const traceStateBase = new TraceState();\n\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n\nconst setupElements = new Set();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nfunction openTelemetrySetupCheck() {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nfunction setIsSetup(element) {\n  setupElements.add(element);\n}\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nclass SentryPropagator extends W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n\n   constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new LRUMap(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   inject(context, carrier, setter) {\n    if (isTracingSuppressed(context)) {\n      DEBUG_BUILD && debug.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n\n    const activeSpan = trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n\n    const tracePropagationTargets = getClient()?.getOptions()?.tracePropagationTargets;\n    if (!shouldPropagateTraceForUrl(url, tracePropagationTargets, this._urlMatchesTargetsMap)) {\n      DEBUG_BUILD &&\n        debug.log('[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:', url);\n      return;\n    }\n\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = propagation.getBaggage(context) || propagation.createBaggage({});\n\n    const { dynamicSamplingContext, traceId, spanId, sampled } = getInjectionData(context);\n\n    if (existingBaggageHeader) {\n      const baggageEntries = parseBaggageHeader(existingBaggageHeader);\n\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, { value });\n        });\n      }\n    }\n\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, generateSentryTraceHeader(traceId, spanId, sampled));\n    }\n\n    super.inject(propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   extract(context, carrier, getter) {\n    const maybeSentryTraceHeader = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n\n    const sentryTrace = maybeSentryTraceHeader\n      ? Array.isArray(maybeSentryTraceHeader)\n        ? maybeSentryTraceHeader[0]\n        : maybeSentryTraceHeader\n      : undefined;\n\n    // Add remote parent span context\n    // If there is no incoming trace, this will return the context as-is\n    return ensureScopesOnContext(getContextWithRemoteActiveSpan(context, { sentryTrace, baggage }));\n  }\n\n  /**\n   * @inheritDoc\n   */\n   fields() {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n}\n\nconst NOT_PROPAGATED_MESSAGE =\n  '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:';\n\n/**\n * Check if a given URL should be propagated to or not.\n * If no url is defined, or no trace propagation targets are defined, this will always return `true`.\n * You can also optionally provide a decision map, to cache decisions and avoid repeated regex lookups.\n */\nfunction shouldPropagateTraceForUrl(\n  url,\n  tracePropagationTargets,\n  decisionMap,\n) {\n  if (typeof url !== 'string' || !tracePropagationTargets) {\n    return true;\n  }\n\n  const cachedDecision = decisionMap?.get(url);\n  if (cachedDecision !== undefined) {\n    DEBUG_BUILD && !cachedDecision && debug.log(NOT_PROPAGATED_MESSAGE, url);\n    return cachedDecision;\n  }\n\n  const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n  decisionMap?.set(url, decision);\n\n  DEBUG_BUILD && !decision && debug.log(NOT_PROPAGATED_MESSAGE, url);\n  return decision;\n}\n\n/**\n * Get propagation injection data for the given context.\n * The additional options can be passed to override the scope and client that is otherwise derived from the context.\n */\nfunction getInjectionData(\n  context,\n  options = {},\n)\n\n {\n  const span = trace.getSpan(context);\n\n  // If we have a remote span, the spanId should be considered as the parentSpanId, not spanId itself\n  // Instead, we use a virtual (generated) spanId for propagation\n  if (span?.spanContext().isRemote) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: undefined,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // If we have a local span, we just use this\n  if (span) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  // The only scenario where this should happen is when we neither have a span, nor an incoming trace\n  const scope = options.scope || getScopesFromContext(context)?.scope || getCurrentScope();\n  const client = options.client || getClient();\n\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = client ? getDynamicSamplingContextFromScope(client, scope) : undefined;\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.propagationSpanId,\n    sampled: propagationContext.sampled,\n  };\n}\n\nfunction getContextWithRemoteActiveSpan(\n  ctx,\n  { sentryTrace, baggage },\n) {\n  const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n\n  const { traceId, parentSpanId, sampled, dsc } = propagationContext;\n\n  const client = getClient();\n  const incomingDsc = baggageHeaderToDynamicSamplingContext(baggage);\n\n  // We only want to set the virtual span if we are continuing a concrete trace\n  // Otherwise, we ignore the incoming trace here, e.g. if we have no trace headers\n  if (!parentSpanId || (client && !shouldContinueTrace(client, incomingDsc?.org_id))) {\n    return ctx;\n  }\n\n  const spanContext = generateRemoteSpanContext({\n    traceId,\n    spanId: parentSpanId,\n    sampled,\n    dsc,\n  });\n\n  return trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nfunction continueTraceAsRemoteSpan(\n  ctx,\n  options,\n  callback,\n) {\n  const ctxWithSpanContext = ensureScopesOnContext(getContextWithRemoteActiveSpan(ctx, options));\n\n  return context.with(ctxWithSpanContext, callback);\n}\n\nfunction ensureScopesOnContext(ctx) {\n  // If there are no scopes yet on the context, ensure we have them\n  const scopes = getScopesFromContext(ctx);\n  const newScopes = {\n    // If we have no scope here, this is most likely either the root context or a context manually derived from it\n    // In this case, we want to fork the current scope, to ensure we do not pollute the root scope\n    scope: scopes ? scopes.scope : getCurrentScope().clone(),\n    isolationScope: scopes ? scopes.isolationScope : getIsolationScope(),\n  };\n\n  return setScopesOnContext(ctx, newScopes);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier) {\n  try {\n    const baggage = (carrier )[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span) {\n  const spanData = spanToJSON(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = spanData[SEMATTRS_HTTP_URL] || spanData[ATTR_URL_FULL];\n  if (typeof urlAttribute === 'string') {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = span.spanContext().traceState?.get(SENTRY_TRACE_STATE_URL);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n\n  return undefined;\n}\n\nfunction generateRemoteSpanContext({\n  spanId,\n  traceId,\n  sampled,\n  dsc,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanContext = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? TraceFlags.SAMPLED : TraceFlags.NONE,\n    traceState,\n  };\n\n  return spanContext;\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return handleCallbackErrors(\n        () => callback(span),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (spanToJSON(span).status === undefined) {\n            span.setStatus({ code: SpanStatusCode.ERROR });\n          }\n        },\n        () => span.end(),\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(\n  options,\n  callback,\n) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return handleCallbackErrors(\n        () => callback(span, () => span.end()),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (spanToJSON(span).status === undefined) {\n            span.setStatus({ code: SpanStatusCode.ERROR });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    const span = tracer.startSpan(name, spanOptions, ctx);\n\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const newContextWithActiveSpan = span ? trace.setSpan(context.active(), span) : trace.deleteSpan(context.active());\n  return context.with(newContextWithActiveSpan, () => callback(getCurrentScope()));\n}\n\nfunction getTracer() {\n  const client = getClient();\n  return client?.tracer || trace.getTracer('@sentry/opentelemetry', SDK_VERSION);\n}\n\nfunction getSpanOptions(options) {\n  const { startTime, attributes, kind, op, links } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n\n  return {\n    attributes: op\n      ? {\n          [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n          ...attributes,\n        }\n      : attributes,\n    kind,\n    links,\n    startTime: fixedStartTime,\n  };\n}\n\nfunction ensureTimestampInMilliseconds(timestamp) {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\n\nfunction getContext(scope, forceTransaction) {\n  const ctx = getContextForScope(scope);\n  const parentSpan = trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we start a new trace\n  // Note that if we continue a trace, we'll always have a remote parent span here anyhow\n  if (!parentSpan) {\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = trace.deleteSpan(ctx);\n\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = getRootSpan(parentSpan);\n  const dsc = getDynamicSamplingContextFromSpan(rootSpan);\n\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanOptions = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? TraceFlags.SAMPLED : TraceFlags.NONE,\n    traceState,\n  };\n\n  const ctxWithSpanContext = trace.setSpanContext(ctxWithoutSpan, spanOptions);\n\n  return ctxWithSpanContext;\n}\n\nfunction getContextForScope(scope) {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n\n  return context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nfunction continueTrace(options, callback) {\n  return continueTraceAsRemoteSpan(context.active(), options, callback);\n}\n\n/**\n * Get the trace context for a given scope.\n * We have a custom implementation here because we need an OTEL-specific way to get the span from a scope.\n */\nfunction getTraceContextForScope(\n  client,\n  scope,\n) {\n  const ctx = getContextFromScope(scope);\n  const span = ctx && trace.getSpan(ctx);\n\n  const traceContext = span ? spanToTraceContext(span) : getTraceContextFromScope(scope);\n\n  const dynamicSamplingContext = span\n    ? getDynamicSamplingContextFromSpan(span)\n    : getDynamicSamplingContextFromScope(client, scope);\n  return [dynamicSamplingContext, traceContext];\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const ctx = suppressTracing$1(context.active());\n  return context.with(ctx, callback);\n}\n\n/** Ensure the `trace` context is set on all events. */\nfunction setupEventContextTrace(client) {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: spanToTraceContext(span),\n      ...event.contexts,\n    };\n\n    const rootSpan = getRootSpan(span);\n\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(rootSpan),\n      ...event.sdkProcessingMetadata,\n    };\n\n    return event;\n  });\n}\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nfunction getTraceData({\n  span,\n  scope,\n  client,\n} = {}) {\n  let ctx = (scope && getContextFromScope(scope)) ?? api.context.active();\n\n  if (span) {\n    const { scope } = getCapturedScopesOnSpan(span);\n    // fall back to current context if for whatever reason we can't find the one of the span\n    ctx = (scope && getContextFromScope(scope)) || api.trace.setSpan(api.context.active(), span);\n  }\n\n  const { traceId, spanId, sampled, dynamicSamplingContext } = getInjectionData(ctx, { scope, client });\n\n  return {\n    'sentry-trace': generateSentryTraceHeader(traceId, spanId, sampled),\n    baggage: dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext),\n  };\n}\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nfunction setOpenTelemetryContextAsyncContextStrategy() {\n  function getScopes() {\n    const ctx = api.context.active();\n    const scopes = getScopesFromContext(ctx);\n\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: getDefaultCurrentScope(),\n      isolationScope: getDefaultIsolationScope(),\n    };\n  }\n\n  function withScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return api.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n\n  function withSetScope(scope, callback) {\n    const ctx = getContextFromScope(scope) || api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n\n  function withIsolationScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function withSetIsolationScope(isolationScope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function getCurrentScope() {\n    return getScopes().scope;\n  }\n\n  function getIsolationScope() {\n    return getScopes().isolationScope;\n  }\n\n  setAsyncContextStrategy({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    continueTrace,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan ,\n  });\n}\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nfunction wrapContextManagerClass(\n  ContextManagerClass,\n) {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n     constructor(...args) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n     with(\n      context,\n      fn,\n      thisArg,\n      ...args\n    ) {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = currentScopes?.scope || getCurrentScope();\n      const currentIsolationScope = currentScopes?.isolationScope || getIsolationScope();\n\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY) ;\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY) ;\n\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope =\n        isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = { scope: newCurrentScope, isolationScope: newIsolationScope };\n\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1\n        .deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n\n      setContextOnScope(newCurrentScope, ctx2);\n\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n\n  return SentryContextManager ;\n}\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nfunction groupSpansWithParents(spans) {\n  const nodeMap = new Map();\n\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nfunction getLocalParentId(span) {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? getParentSpanId(span) : undefined;\n}\n\nfunction createOrUpdateSpanNodeAndRefs(nodeMap, span) {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, { id, span, children: [] });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, { id, span, parentNode, children: [] });\n  parentNode.children.push(node);\n}\n\nfunction createOrGetParentNode(nodeMap, id) {\n  const existing = nodeMap.get(id);\n\n  if (existing) {\n    return existing;\n  }\n\n  return createOrUpdateNode(nodeMap, { id, children: [] });\n}\n\nfunction createOrUpdateNode(nodeMap, spanNode) {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing?.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated',\n} ;\n\nconst isStatusErrorMessageValid = (message) => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message );\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nfunction mapStatus(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === SpanStatusCode.OK) {\n      return { code: SPAN_STATUS_OK };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return { code: SPAN_STATUS_ERROR, message: status.message };\n      } else {\n        return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status?.code === SpanStatusCode.UNSET) {\n    return { code: SPAN_STATUS_OK };\n  } else {\n    return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n  }\n}\n\nfunction inferStatusFromAttributes(attributes) {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[SEMATTRS_RPC_GRPC_STATUS_CODE];\n\n  const numberHttpCode =\n    typeof httpCodeAttribute === 'number'\n      ? httpCodeAttribute\n      : typeof httpCodeAttribute === 'string'\n        ? parseInt(httpCodeAttribute)\n        : undefined;\n\n  if (typeof numberHttpCode === 'number') {\n    return getSpanStatusFromHttpCode(numberHttpCode);\n  }\n\n  if (typeof grpcCodeAttribute === 'string') {\n    return { code: SPAN_STATUS_ERROR, message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error' };\n  }\n\n  return undefined;\n}\n\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nclass SentrySpanExporter {\n  /*\n   * A quick explanation on the buckets: We do bucketing of finished spans for efficiency. This span exporter is\n   * accumulating spans until a root span is encountered and then it flushes all the spans that are descendants of that\n   * root span. Because it is totally in the realm of possibilities that root spans are never finished, and we don't\n   * want to accumulate spans indefinitely in memory, we need to periodically evacuate spans. Naively we could simply\n   * store the spans in an array and each time a new span comes in we could iterate through the entire array and\n   * evacuate all spans that have an end-timestamp that is older than our limit. This could get quite expensive because\n   * we would have to iterate a potentially large number of spans every time we evacuate. We want to avoid these large\n   * bursts of computation.\n   *\n   * Instead we go for a bucketing approach and put spans into buckets, based on what second\n   * (modulo the time limit) the span was put into the exporter. With buckets, when we decide to evacuate, we can\n   * iterate through the bucket entries instead, which have an upper bound of items, making the evacuation much more\n   * efficient. Cleaning up also becomes much more efficient since it simply involves de-referencing a bucket within the\n   * bucket array, and letting garbage collection take care of the rest.\n   */\n\n  // Essentially a a set of span ids that are already sent. The values are expiration\n  // times in this cache so we don't hold onto them indefinitely.\n\n  /* Internally, we use a debounced flush to give some wiggle room to the span processor to accumulate more spans. */\n\n   constructor(options\n\n) {\n    this._finishedSpanBucketSize = options?.timeout || DEFAULT_TIMEOUT;\n    this._finishedSpanBuckets = new Array(this._finishedSpanBucketSize).fill(undefined);\n    this._lastCleanupTimestampInS = Math.floor(Date.now() / 1000);\n    this._spansToBucketEntry = new WeakMap();\n    this._sentSpans = new Map();\n    this._debouncedFlush = debounce(this.flush.bind(this), 1, { maxWait: 100 });\n  }\n\n  /**\n   * Export a single span.\n   * This is called by the span processor whenever a span is ended.\n   */\n   export(span) {\n    const currentTimestampInS = Math.floor(Date.now() / 1000);\n\n    if (this._lastCleanupTimestampInS !== currentTimestampInS) {\n      let droppedSpanCount = 0;\n      this._finishedSpanBuckets.forEach((bucket, i) => {\n        if (bucket && bucket.timestampInS <= currentTimestampInS - this._finishedSpanBucketSize) {\n          droppedSpanCount += bucket.spans.size;\n          this._finishedSpanBuckets[i] = undefined;\n        }\n      });\n      if (droppedSpanCount > 0) {\n        DEBUG_BUILD &&\n          debug.log(\n            `SpanExporter dropped ${droppedSpanCount} spans because they were pending for more than ${this._finishedSpanBucketSize} seconds.`,\n          );\n      }\n      this._lastCleanupTimestampInS = currentTimestampInS;\n    }\n\n    const currentBucketIndex = currentTimestampInS % this._finishedSpanBucketSize;\n    const currentBucket = this._finishedSpanBuckets[currentBucketIndex] || {\n      timestampInS: currentTimestampInS,\n      spans: new Set(),\n    };\n    this._finishedSpanBuckets[currentBucketIndex] = currentBucket;\n    currentBucket.spans.add(span);\n    this._spansToBucketEntry.set(span, currentBucket);\n\n    // If the span doesn't have a local parent ID (it's a root span), we're gonna flush all the ended spans\n    const localParentId = getLocalParentId(span);\n    if (!localParentId || this._sentSpans.has(localParentId)) {\n      this._debouncedFlush();\n    }\n  }\n\n  /**\n   * Try to flush any pending spans immediately.\n   * This is called internally by the exporter (via _debouncedFlush),\n   * but can also be triggered externally if we force-flush.\n   */\n   flush() {\n    const finishedSpans = this._finishedSpanBuckets.flatMap(bucket => (bucket ? Array.from(bucket.spans) : []));\n\n    this._flushSentSpanCache();\n    const sentSpans = this._maybeSend(finishedSpans);\n\n    const sentSpanCount = sentSpans.size;\n    const remainingOpenSpanCount = finishedSpans.length - sentSpanCount;\n    DEBUG_BUILD &&\n      debug.log(\n        `SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} spans are waiting for their parent spans to finish`,\n      );\n\n    const expirationDate = Date.now() + DEFAULT_TIMEOUT * 1000;\n\n    for (const span of sentSpans) {\n      this._sentSpans.set(span.spanContext().spanId, expirationDate);\n      const bucketEntry = this._spansToBucketEntry.get(span);\n      if (bucketEntry) {\n        bucketEntry.spans.delete(span);\n      }\n    }\n    // Cancel a pending debounced flush, if there is one\n    // This can be relevant if we directly flush, circumventing the debounce\n    // in that case, we want to cancel any pending debounced flush\n    this._debouncedFlush.cancel();\n  }\n\n  /**\n   * Clear the exporter.\n   * This is called when the span processor is shut down.\n   */\n   clear() {\n    this._finishedSpanBuckets = this._finishedSpanBuckets.fill(undefined);\n    this._sentSpans.clear();\n    this._debouncedFlush.cancel();\n  }\n\n  /**\n   * Send the given spans, but only if they are part of a finished transaction.\n   *\n   * Returns the sent spans.\n   * Spans remain unsent when their parent span is not yet finished.\n   * This will happen regularly, as child spans are generally finished before their parents.\n   * But it _could_ also happen because, for whatever reason, a parent span was lost.\n   * In this case, we'll eventually need to clean this up.\n   */\n   _maybeSend(spans) {\n    const grouped = groupSpansWithParents(spans);\n    const sentSpans = new Set();\n\n    const rootNodes = this._getCompletedRootNodes(grouped);\n\n    for (const root of rootNodes) {\n      const span = root.span;\n      sentSpans.add(span);\n      const transactionEvent = createTransactionForOtelSpan(span);\n\n      // Add an attribute to the transaction event to indicate that this transaction is an orphaned transaction\n      if (root.parentNode && this._sentSpans.has(root.parentNode.id)) {\n        const traceData = transactionEvent.contexts?.trace?.data;\n        if (traceData) {\n          traceData['sentry.parent_span_already_sent'] = true;\n        }\n      }\n\n      // We'll recursively add all the child spans to this array\n      const spans = transactionEvent.spans || [];\n\n      for (const child of root.children) {\n        createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n      }\n\n      // spans.sort() mutates the array, but we do not use this anymore after this point\n      // so we can safely mutate it here\n      transactionEvent.spans =\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans;\n\n      const measurements = timedEventsToMeasurements(span.events);\n      if (measurements) {\n        transactionEvent.measurements = measurements;\n      }\n\n      captureEvent(transactionEvent);\n    }\n\n    return sentSpans;\n  }\n\n  /** Remove \"expired\" span id entries from the _sentSpans cache. */\n   _flushSentSpanCache() {\n    const currentTimestamp = Date.now();\n    // Note, it is safe to delete items from the map as we go: https://stackoverflow.com/a/35943995/90297\n    for (const [spanId, expirationTime] of this._sentSpans.entries()) {\n      if (expirationTime <= currentTimestamp) {\n        this._sentSpans.delete(spanId);\n      }\n    }\n  }\n\n  /** Check if a node is a completed root node or a node whose parent has already been sent */\n   _nodeIsCompletedRootNodeOrHasSentParent(node) {\n    return !!node.span && (!node.parentNode || this._sentSpans.has(node.parentNode.id));\n  }\n\n  /** Get all completed root nodes from a list of nodes */\n   _getCompletedRootNodes(nodes) {\n    // TODO: We should be able to remove the explicit `node is SpanNodeCompleted` type guard\n    //       once we stop supporting TS < 5.5\n    return nodes.filter((node) => this._nodeIsCompletedRootNodeOrHasSentParent(node));\n  }\n}\n\nfunction parseSpan(span) {\n  const attributes = span.attributes;\n\n  const origin = attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ;\n  const op = attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] ;\n  const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n  return { origin, op, source };\n}\n\n/** Exported only for tests. */\nfunction createTransactionForOtelSpan(span) {\n  const { op, description, data, origin = 'manual', source } = getSpanData(span);\n  const capturedSpanScopes = getCapturedScopesOnSpan(span );\n\n  const sampleRate = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ;\n\n  const attributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes),\n  };\n\n  const { links } = span;\n  const { traceId: trace_id, spanId: span_id } = span.spanContext();\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take precedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id = getParentSpanId(span);\n\n  const status = mapStatus(span);\n\n  const traceContext = {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    links: convertSpanLinksForEnvelope(links),\n  };\n\n  const statusCode = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE];\n  const responseContext = typeof statusCode === 'number' ? { response: { status_code: statusCode } } : undefined;\n\n  const transactionEvent = {\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes,\n      },\n      ...responseContext,\n    },\n    spans: [],\n    start_timestamp: spanTimeInputToSeconds(span.startTime),\n    timestamp: spanTimeInputToSeconds(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      capturedSpanScope: capturedSpanScopes.scope,\n      capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n      sampleRate,\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(span ),\n    },\n    ...(source && {\n      transaction_info: {\n        source,\n      },\n    }),\n  };\n\n  return transactionEvent;\n}\n\nfunction createAndFinishSpanForOtelSpan(node, spans, sentSpans) {\n  const span = node.span;\n\n  if (span) {\n    sentSpans.add(span);\n  }\n\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n    return;\n  }\n\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n  const parentSpanId = getParentSpanId(span);\n\n  const { attributes, startTime, endTime, links } = span;\n\n  const { op, description, data, origin = 'manual' } = getSpanData(span);\n  const allData = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data,\n  };\n\n  const status = mapStatus(span);\n\n  const spanJSON = {\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: spanTimeInputToSeconds(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: spanTimeInputToSeconds(endTime) || undefined,\n    status: getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    measurements: timedEventsToMeasurements(span.events),\n    links: convertSpanLinksForEnvelope(links),\n  };\n\n  spans.push(spanJSON);\n\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n  });\n}\n\nfunction getSpanData(span)\n\n {\n  const { op: definedOp, source: definedSource, origin } = parseSpan(span);\n  const { op: inferredOp, description, source: inferredSource, data: inferredData } = parseSpanDescription(span);\n\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n\n  const data = { ...inferredData, ...getData(span) };\n\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data,\n  };\n}\n\n/**\n * Remove custom `sentry.` attributes we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data) {\n  const cleanedData = { ...data };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\n\nfunction getData(span) {\n  const attributes = span.attributes;\n  const data = {};\n\n  if (span.kind !== SpanKind.INTERNAL) {\n    data['otel.kind'] = SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute ;\n  }\n\n  const requestData = getRequestSpanData(span);\n\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n\n  return data;\n}\n\nfunction onSpanStart(span, parentContext) {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = trace.getSpan(parentContext);\n\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    addChildSpanToSpan(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan?.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === ROOT_CONTEXT) {\n    scopes = {\n      scope: getDefaultCurrentScope(),\n      isolationScope: getDefaultIsolationScope(),\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    setCapturedScopesOnSpan(span, scopes.scope, scopes.isolationScope);\n  }\n\n  logSpanStart(span);\n\n  const client = getClient();\n  client?.emit('spanStart', span);\n}\n\nfunction onSpanEnd(span) {\n  logSpanEnd(span);\n\n  const client = getClient();\n  client?.emit('spanEnd', span);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nclass SentrySpanProcessor  {\n\n   constructor(options) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async forceFlush() {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async shutdown() {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   onStart(span, parentContext) {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n   onEnd(span) {\n    onSpanEnd(span);\n\n    this._exporter.export(span);\n  }\n}\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nclass SentrySampler  {\n\n   constructor(client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n   shouldSample(\n    context,\n    traceId,\n    spanName,\n    spanKind,\n    spanAttributes,\n    _links,\n  ) {\n    const options = this._client.getOptions();\n\n    const parentSpan = getValidSpan(context);\n    const parentContext = parentSpan?.spanContext();\n\n    if (!hasSpansEnabled(options)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[SEMATTRS_HTTP_METHOD] || spanAttributes[ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || parentContext?.isRemote)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n    const isRootSpan = !parentSpan || parentContext?.isRemote;\n\n    // We only sample based on parameters (like tracesSampleRate or tracesSampler) for root spans (which is done in sampleSpan).\n    // Non-root-spans simply inherit the sampling decision from their parent.\n    if (!isRootSpan) {\n      return wrapSamplingDecision({\n        decision: parentSampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n      });\n    }\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op,\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes,\n    };\n\n    if (op) {\n      mergedAttributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n\n    const mutableSamplingDecision = { decision: true };\n    this._client.emit(\n      'beforeSampling',\n      {\n        spanAttributes: mergedAttributes,\n        spanName: inferredSpanName,\n        parentSampled: parentSampled,\n        parentContext: parentContext,\n      },\n      mutableSamplingDecision,\n    );\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const { isolationScope } = getScopesFromContext(context) ?? {};\n\n    const dscString = parentContext?.traceState ? parentContext.traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n    const dsc = dscString ? baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n    const sampleRand = parseSampleRate(dsc?.sample_rand) ?? Math.random();\n\n    const [sampled, sampleRate, localSampleRateWasApplied] = sampleSpan(\n      options,\n      {\n        name: inferredSpanName,\n        attributes: mergedAttributes,\n        normalizedRequest: isolationScope?.getScopeData().sdkProcessingMetadata.normalizedRequest,\n        parentSampled,\n        parentSampleRate: parseSampleRate(dsc?.sample_rate),\n      },\n      sampleRand,\n    );\n\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD && debug.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n\n      return wrapSamplingDecision({\n        decision: SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: 0, // we don't want to sample anything in the downstream trace either\n      });\n    }\n\n    if (\n      !sampled &&\n      // We check for `parentSampled === undefined` because we only want to record client reports for spans that are trace roots (ie. when there was incoming trace)\n      parentSampled === undefined\n    ) {\n      DEBUG_BUILD && debug.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n      this._client.recordDroppedEvent('sample_rate', 'transaction');\n    }\n\n    return {\n      ...wrapSamplingDecision({\n        decision: sampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: localSampleRateWasApplied ? sampleRate : undefined,\n      }),\n      attributes: {\n        // We set the sample rate on the span when a local sample rate was applied to better understand how traces were sampled in Sentry\n        [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: localSampleRateWasApplied ? sampleRate : undefined,\n      },\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n   toString() {\n    return 'SentrySampler';\n  }\n}\n\nfunction getParentSampled(parentSpan, traceId, spanName) {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if (isSpanContextValid(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getSamplingDecision(parentSpan.spanContext());\n      DEBUG_BUILD &&\n        debug.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD && debug.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nfunction wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes,\n  sampleRand,\n  downstreamTraceSampleRate,\n}\n\n) {\n  let traceState = getBaseTraceState(context, spanAttributes);\n\n  // We will override the propagated sample rate downstream when\n  // - the tracesSampleRate is applied\n  // - the tracesSampler is invoked\n  // Since unsampled OTEL spans (NonRecordingSpans) cannot hold attributes we need to store this on the (trace)context.\n  if (downstreamTraceSampleRate !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RATE, `${downstreamTraceSampleRate}`);\n  }\n\n  if (sampleRand !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RAND, `${sampleRand}`);\n  }\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return { decision: SamplingDecision.NOT_RECORD, traceState };\n  }\n\n  if (decision === SamplingDecision.NOT_RECORD) {\n    return { decision, traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') };\n  }\n\n  return { decision, traceState };\n}\n\nfunction getBaseTraceState(context, spanAttributes) {\n  const parentSpan = trace.getSpan(context);\n  const parentContext = parentSpan?.spanContext();\n\n  let traceState = parentContext?.traceState || new TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[SEMATTRS_HTTP_URL] || spanAttributes[ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n\n  return traceState;\n}\n\n/**\n * If the active span is invalid, we want to ignore it as parent.\n * This aligns with how otel tracers and default samplers handle these cases.\n */\nfunction getValidSpan(context) {\n  const span = trace.getSpan(context);\n  return span && isSpanContextValid(span.spanContext()) ? span : undefined;\n}\n\nexport { SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, SentryPropagator, SentrySampler, SentrySpanProcessor, continueTrace, enhanceDscWithOpenTelemetryRootSpanName, getActiveSpan, getRequestSpanData, getScopesFromContext, getSpanKind, getTraceContextForScope, isSentryRequestSpan, openTelemetrySetupCheck, setOpenTelemetryContextAsyncContextStrategy, setupEventContextTrace, shouldPropagateTraceForUrl, spanHasAttributes, spanHasEvents, spanHasKind, spanHasName, spanHasParentId, spanHasStatus, startInactiveSpan, startSpan, startSpanManual, suppressTracing, withActiveSpan, wrapClientClass, wrapContextManagerClass, wrapSamplingDecision };\n//# sourceMappingURL=index.js.map\n","declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n","import type {\n  Client,\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  HandlerDataFetch,\n  IntegrationFn,\n  Span,\n} from '@sentry/core';\nimport {\n  addBreadcrumb,\n  addFetchInstrumentationHandler,\n  defineIntegration,\n  getBreadcrumbLogLevelFromHttpStatusCode,\n  getClient,\n  instrumentFetchRequest,\n  isSentryRequestUrl,\n  LRUMap,\n  stringMatchesSomePattern,\n} from '@sentry/core';\n\nconst INTEGRATION_NAME = 'WinterCGFetch';\n\nconst HAS_CLIENT_MAP = new WeakMap<Client, boolean>();\n\nexport interface Options {\n  /**\n   * Whether breadcrumbs should be recorded for requests\n   * Defaults to true\n   */\n  breadcrumbs: boolean;\n\n  /**\n   * Function determining whether or not to create spans to track outgoing requests to the given URL.\n   * By default, spans will be created for all outgoing requests.\n   */\n  shouldCreateSpanForRequest?: (url: string) => boolean;\n}\n\nconst _winterCGFetch = ((options: Partial<Options> = {}) => {\n  const breadcrumbs = options.breadcrumbs === undefined ? true : options.breadcrumbs;\n  const shouldCreateSpanForRequest = options.shouldCreateSpanForRequest;\n\n  const _createSpanUrlMap = new LRUMap<string, boolean>(100);\n  const _headersUrlMap = new LRUMap<string, boolean>(100);\n\n  const spans: Record<string, Span> = {};\n\n  /** Decides whether to attach trace data to the outgoing fetch request */\n  function _shouldAttachTraceData(url: string): boolean {\n    const client = getClient();\n\n    if (!client) {\n      return false;\n    }\n\n    const clientOptions = client.getOptions();\n\n    if (clientOptions.tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _headersUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = stringMatchesSomePattern(url, clientOptions.tracePropagationTargets);\n    _headersUrlMap.set(url, decision);\n    return decision;\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n  function _shouldCreateSpan(url: string): boolean {\n    if (shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = shouldCreateSpanForRequest(url);\n    _createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      addFetchInstrumentationHandler(handlerData => {\n        const client = getClient();\n        if (!client || !HAS_CLIENT_MAP.get(client)) {\n          return;\n        }\n\n        if (isSentryRequestUrl(handlerData.fetchData.url, client)) {\n          return;\n        }\n\n        instrumentFetchRequest(handlerData, _shouldCreateSpan, _shouldAttachTraceData, spans, {\n          spanOrigin: 'auto.http.wintercg_fetch',\n        });\n\n        if (breadcrumbs) {\n          createBreadcrumb(handlerData);\n        }\n      });\n    },\n    setup(client) {\n      HAS_CLIENT_MAP.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Creates spans and attaches tracing headers to fetch requests on WinterCG runtimes.\n */\nexport const winterCGFetchIntegration = defineIntegration(_winterCGFetch);\n\nfunction createBreadcrumb(handlerData: HandlerDataFetch): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n\n  const breadcrumbData: FetchBreadcrumbData = {\n    method: handlerData.fetchData.method,\n    url: handlerData.fetchData.url,\n  };\n\n  if (handlerData.error) {\n    const hint: FetchBreadcrumbHint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    addBreadcrumb(\n      {\n        category: 'fetch',\n        data: breadcrumbData,\n        level: 'error',\n        type: 'http',\n      },\n      hint,\n    );\n  } else {\n    const response = handlerData.response as Response | undefined;\n\n    breadcrumbData.request_body_size = handlerData.fetchData.request_body_size;\n    breadcrumbData.response_body_size = handlerData.fetchData.response_body_size;\n    breadcrumbData.status_code = response?.status;\n\n    const hint: FetchBreadcrumbHint = {\n      input: handlerData.args,\n      response,\n      startTimestamp,\n      endTimestamp,\n    };\n    const level = getBreadcrumbLogLevelFromHttpStatusCode(breadcrumbData.status_code);\n\n    addBreadcrumb(\n      {\n        category: 'fetch',\n        data: breadcrumbData,\n        type: 'http',\n        level,\n      },\n      hint,\n    );\n  }\n}\n","import type { BaseTransportOptions, Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/core';\nimport { createTransport, SENTRY_BUFFER_FULL_ERROR, suppressTracing } from '@sentry/core';\n\nexport interface VercelEdgeTransportOptions extends BaseTransportOptions {\n  /** Fetch API init parameters. */\n  fetchOptions?: RequestInit;\n  /** Custom headers for the transport. */\n  headers?: { [key: string]: string };\n}\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * This is a modified promise buffer that collects tasks until drain is called.\n * We need this in the edge runtime because edge function invocations may not share I/O objects, like fetch requests\n * and responses, and the normal PromiseBuffer inherently buffers stuff inbetween incoming requests.\n *\n * A limitation we need to be aware of is that DEFAULT_TRANSPORT_BUFFER_SIZE is the maximum amount of payloads the\n * SDK can send for a given edge function invocation.\n */\nexport class IsolatedPromiseBuffer {\n  // We just have this field because the promise buffer interface requires it.\n  // If we ever remove it from the interface we should also remove it here.\n  public $: Array<PromiseLike<TransportMakeRequestResponse>>;\n\n  private _taskProducers: (() => PromiseLike<TransportMakeRequestResponse>)[];\n\n  private readonly _bufferSize: number;\n\n  public constructor(_bufferSize = DEFAULT_TRANSPORT_BUFFER_SIZE) {\n    this.$ = [];\n    this._taskProducers = [];\n    this._bufferSize = _bufferSize;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public add(taskProducer: () => PromiseLike<TransportMakeRequestResponse>): PromiseLike<TransportMakeRequestResponse> {\n    if (this._taskProducers.length >= this._bufferSize) {\n      return Promise.reject(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    this._taskProducers.push(taskProducer);\n    return Promise.resolve({});\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    const oldTaskProducers = [...this._taskProducers];\n    this._taskProducers = [];\n\n    return new Promise(resolve => {\n      const timer = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // This cannot reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.all(\n        oldTaskProducers.map(taskProducer =>\n          taskProducer().then(null, () => {\n            // catch all failed requests\n          }),\n        ),\n      ).then(() => {\n        // resolve to true if all fetch requests settled\n        clearTimeout(timer);\n        resolve(true);\n      });\n    });\n  }\n}\n\n/**\n * Creates a Transport that uses the Edge Runtimes native fetch API to send events to Sentry.\n */\nexport function makeEdgeTransport(options: VercelEdgeTransportOptions): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      headers: options.headers,\n      ...options.fetchOptions,\n    };\n\n    return suppressTracing(() => {\n      return fetch(options.url, requestOptions).then(response => {\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    });\n  }\n\n  return createTransport(options, makeRequest, new IsolatedPromiseBuffer(options.bufferSize));\n}\n","declare const process: {\n  env: Record<string, string>;\n};\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nexport function getVercelEnv(isClient: boolean): string | undefined {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * NOTICE from the Sentry authors:\n * - Code vendored from: https://github.com/open-telemetry/opentelemetry-js/blob/6515ed8098333646a63a74a8c0150cc2daf520db/packages/opentelemetry-context-async-hooks/src/AbstractAsyncHooksContextManager.ts\n * - Modifications:\n *   - Added lint rules\n *   - Modified bind() method not to rely on Node.js specific APIs\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\n/* eslint-disable @typescript-eslint/unbound-method */\n/* eslint-disable @typescript-eslint/no-this-alias */\n\nimport type { Context, ContextManager } from '@opentelemetry/api';\nimport type { EventEmitter } from 'events';\n\ntype Func<T> = (...args: unknown[]) => T;\n\n/**\n * Store a map for each event of all original listeners and their \"patched\"\n * version. So when a listener is removed by the user, the corresponding\n * patched function will be also removed.\n */\ninterface PatchMap {\n  [name: string]: WeakMap<Func<void>, Func<void>>;\n}\n\nconst ADD_LISTENER_METHODS = [\n  'addListener' as const,\n  'on' as const,\n  'once' as const,\n  'prependListener' as const,\n  'prependOnceListener' as const,\n];\n\nexport abstract class AbstractAsyncHooksContextManager implements ContextManager {\n  abstract active(): Context;\n\n  abstract with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F>;\n\n  abstract enable(): this;\n\n  abstract disable(): this;\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    if (typeof target === 'object' && target !== null && 'on' in target) {\n      return this._bindEventEmitter(context, target as unknown as EventEmitter) as T;\n    }\n\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  private _bindFunction<T extends Function>(context: Context, target: T): T {\n    const manager = this;\n    const contextWrapper = function (this: never, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    /**\n     * It isn't possible to tell Typescript that contextWrapper is the same as T\n     * so we forced to cast as any here.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return contextWrapper as any;\n  }\n\n  /**\n   * By default, EventEmitter call their callback with their context, which we do\n   * not want, instead we will bind a specific context to all callbacks that\n   * go through it.\n   * @param context the context we want to bind\n   * @param ee EventEmitter an instance of EventEmitter to patch\n   */\n  private _bindEventEmitter<T extends EventEmitter>(context: Context, ee: T): T {\n    const map = this._getPatchMap(ee);\n    if (map !== undefined) return ee;\n    this._createPatchMap(ee);\n\n    // patch methods that add a listener to propagate context\n    ADD_LISTENER_METHODS.forEach(methodName => {\n      if (ee[methodName] === undefined) return;\n      ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n    });\n    // patch methods that remove a listener\n    if (typeof ee.removeListener === 'function') {\n      ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n    }\n    if (typeof ee.off === 'function') {\n      ee.off = this._patchRemoveListener(ee, ee.off);\n    }\n    // patch method that remove all listeners\n    if (typeof ee.removeAllListeners === 'function') {\n      ee.removeAllListeners = this._patchRemoveAllListeners(ee, ee.removeAllListeners);\n    }\n    return ee;\n  }\n\n  /**\n   * Patch methods that remove a given listener so that we match the \"patched\"\n   * version of that listener (the one that propagate context).\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveListener(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      const events = contextManager._getPatchMap(ee)?.[event];\n      if (events === undefined) {\n        return original.call(this, event, listener);\n      }\n      const patchedListener = events.get(listener);\n      return original.call(this, event, patchedListener || listener);\n    };\n  }\n\n  /**\n   * Patch methods that remove all listeners so we remove our\n   * internal references for a given event.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveAllListeners(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string) {\n      const map = contextManager._getPatchMap(ee);\n      if (map !== undefined) {\n        if (arguments.length === 0) {\n          contextManager._createPatchMap(ee);\n        } else if (map[event] !== undefined) {\n          delete map[event];\n        }\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Patch methods on an event emitter instance that can add listeners so we\n   * can force them to propagate a given context.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   * @param [context] context to propagate when calling listeners\n   */\n  private _patchAddListener(ee: EventEmitter, original: Function, context: Context) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      /**\n       * This check is required to prevent double-wrapping the listener.\n       * The implementation for ee.once wraps the listener and calls ee.on.\n       * Without this check, we would wrap that wrapped listener.\n       * This causes an issue because ee.removeListener depends on the onceWrapper\n       * to properly remove the listener. If we wrap their wrapper, we break\n       * that detection.\n       */\n      if (contextManager._wrapped) {\n        return original.call(this, event, listener);\n      }\n      let map = contextManager._getPatchMap(ee);\n      if (map === undefined) {\n        map = contextManager._createPatchMap(ee);\n      }\n      let listeners = map[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        map[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n\n      /**\n       * See comment at the start of this function for the explanation of this property.\n       */\n      contextManager._wrapped = true;\n      try {\n        return original.call(this, event, patchedListener);\n      } finally {\n        contextManager._wrapped = false;\n      }\n    };\n  }\n\n  private _createPatchMap(ee: EventEmitter): PatchMap {\n    const map = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ee as any)[this._kOtListeners] = map;\n    return map;\n  }\n  private _getPatchMap(ee: EventEmitter): PatchMap | undefined {\n    return (ee as never)[this._kOtListeners];\n  }\n\n  private readonly _kOtListeners = Symbol('OtListeners');\n  private _wrapped = false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * NOTICE from the Sentry authors:\n * - Code vendored from: https://github.com/open-telemetry/opentelemetry-js/blob/6515ed8098333646a63a74a8c0150cc2daf520db/packages/opentelemetry-context-async-hooks/src/AbstractAsyncHooksContextManager.ts\n * - Modifications:\n *   - Added lint rules\n *   - Modified import path to AbstractAsyncHooksContextManager\n *   - Added Sentry logging\n *   - Modified constructor to access AsyncLocalStorage class from global object instead of the Node.js API\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable jsdoc/require-jsdoc */\n\nimport type { Context } from '@opentelemetry/api';\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\nimport { debug, GLOBAL_OBJ } from '@sentry/core';\nimport type { AsyncLocalStorage } from 'async_hooks';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { AbstractAsyncHooksContextManager } from './abstract-async-hooks-context-manager';\n\nexport class AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncLocalStorage: AsyncLocalStorage<Context>;\n\n  constructor() {\n    super();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    const MaybeGlobalAsyncLocalStorageConstructor = (GLOBAL_OBJ as any).AsyncLocalStorage;\n\n    if (!MaybeGlobalAsyncLocalStorageConstructor) {\n      DEBUG_BUILD &&\n        debug.warn(\n          \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n        );\n\n      // @ts-expect-error Vendored type shenanigans\n      this._asyncLocalStorage = {\n        getStore() {\n          return undefined;\n        },\n        run(_store: unknown, callback: () => Context, ...args: unknown[]) {\n          return callback.apply(this, args);\n        },\n        disable() {\n          // noop\n        },\n      };\n    } else {\n      this._asyncLocalStorage = new MaybeGlobalAsyncLocalStorageConstructor();\n    }\n  }\n\n  active(): Context {\n    return this._asyncLocalStorage.getStore() ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const cb = thisArg == null ? fn : fn.bind(thisArg);\n    return this._asyncLocalStorage.run(context, cb as never, ...args);\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    this._asyncLocalStorage.disable();\n    return this;\n  }\n}\n","import { context, diag, DiagLogLevel, propagation, trace } from '@opentelemetry/api';\nimport { defaultResource, resourceFromAttributes } from '@opentelemetry/resources';\nimport { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n  SEMRESATTRS_SERVICE_NAMESPACE,\n} from '@opentelemetry/semantic-conventions';\nimport type { Client, Integration, Options } from '@sentry/core';\nimport {\n  consoleIntegration,\n  createStackParser,\n  debug,\n  dedupeIntegration,\n  functionToStringIntegration,\n  getCurrentScope,\n  getIntegrationsToSetup,\n  GLOBAL_OBJ,\n  hasSpansEnabled,\n  inboundFiltersIntegration,\n  linkedErrorsIntegration,\n  nodeStackLineParser,\n  requestDataIntegration,\n  SDK_VERSION,\n  stackParserFromStackParserOptions,\n} from '@sentry/core';\nimport {\n  enhanceDscWithOpenTelemetryRootSpanName,\n  openTelemetrySetupCheck,\n  SentryPropagator,\n  SentrySampler,\n  SentrySpanProcessor,\n  setOpenTelemetryContextAsyncContextStrategy,\n  setupEventContextTrace,\n  wrapContextManagerClass,\n} from '@sentry/opentelemetry';\nimport { VercelEdgeClient } from './client';\nimport { DEBUG_BUILD } from './debug-build';\nimport { winterCGFetchIntegration } from './integrations/wintercg-fetch';\nimport { makeEdgeTransport } from './transports';\nimport type { VercelEdgeOptions } from './types';\nimport { getVercelEnv } from './utils/vercel';\nimport { AsyncLocalStorageContextManager } from './vendored/async-local-storage-context-manager';\n\ndeclare const process: {\n  env: Record<string, string>;\n};\n\nconst nodeStackParser = createStackParser(nodeStackLineParser());\n\n/** Get the default integrations for the browser SDK. */\nexport function getDefaultIntegrations(options: Options): Integration[] {\n  return [\n    dedupeIntegration(),\n    // TODO(v11): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    inboundFiltersIntegration(),\n    functionToStringIntegration(),\n    linkedErrorsIntegration(),\n    winterCGFetchIntegration(),\n    consoleIntegration(),\n    // TODO(v11): integration can be included - but integration should not add IP address etc\n    ...(options.sendDefaultPii ? [requestDataIntegration()] : []),\n  ];\n}\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nexport function init(options: VercelEdgeOptions = {}): Client | undefined {\n  setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations(options);\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    const tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const detectedRelease = getSentryRelease();\n    if (detectedRelease !== undefined) {\n      options.release = detectedRelease;\n    }\n  }\n\n  options.environment =\n    options.environment || process.env.SENTRY_ENVIRONMENT || getVercelEnv(false) || process.env.NODE_ENV;\n\n  const client = new VercelEdgeClient({\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || nodeStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeEdgeTransport,\n  });\n  // The client is on the current scope, from where it generally is inherited\n  getCurrentScope().setClient(client);\n\n  client.init();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    setupOtel(client);\n    validateOpenTelemetrySetup();\n  }\n\n  enhanceDscWithOpenTelemetryRootSpanName(client);\n  setupEventContextTrace(client);\n\n  return client;\n}\n\nfunction validateOpenTelemetrySetup(): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = openTelemetrySetupCheck();\n\n  const required: ReturnType<typeof openTelemetrySetupCheck> = ['SentryContextManager', 'SentryPropagator'];\n\n  if (hasSpansEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      debug.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    debug.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\n// exported for tests\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function setupOtel(client: VercelEdgeClient): void {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  // Create and configure NodeTracerProvider\n  const provider = new BasicTracerProvider({\n    sampler: new SentrySampler(client),\n    resource: defaultResource().merge(\n      resourceFromAttributes({\n        [ATTR_SERVICE_NAME]: 'edge',\n        // eslint-disable-next-line deprecation/deprecation\n        [SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n        [ATTR_SERVICE_VERSION]: SDK_VERSION,\n      }),\n    ),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new SentrySpanProcessor({\n        timeout: client.getOptions().maxSpanWaitDuration,\n      }),\n    ],\n  });\n\n  const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n\n  trace.setGlobalTracerProvider(provider);\n  propagation.setGlobalPropagator(new SentryPropagator());\n  context.setGlobalContextManager(new SentryContextManager());\n\n  client.traceProvider = provider;\n}\n\n/**\n * Setup the OTEL logger to use our own debug logger.\n */\nfunction setupOpenTelemetryLogger(): void {\n  // Disable diag, to ensure this works even if called multiple times\n  diag.disable();\n  diag.setLogger(\n    {\n      error: debug.error,\n      warn: debug.warn,\n      info: debug.log,\n      debug: debug.log,\n      verbose: debug.log,\n    },\n    DiagLogLevel.DEBUG,\n  );\n}\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nexport function getSentryRelease(fallback?: string): string | undefined {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (GLOBAL_OBJ.SENTRY_RELEASE?.id) {\n    return GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Railway - https://docs.railway.app/reference/variables#git-variables\n    process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n","/**\n * This is a copy of the Vercel AI integration from the node SDK.\n *\n * The only difference is that it does not use `@opentelemetry/instrumentation`\n * because Cloudflare Workers do not support it.\n *\n * Therefore, we cannot automatically patch setting `experimental_telemetry: { isEnabled: true }`\n * and users have to manually set this to get spans.\n */\n\nimport type { IntegrationFn } from '@sentry/core';\nimport { addVercelAiProcessors, defineIntegration } from '@sentry/core';\n\nconst INTEGRATION_NAME = 'VercelAI';\n\nconst _vercelAIIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      addVercelAiProcessors(client);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n * This integration is not enabled by default, you need to manually add it.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n *  You need to enable collecting spans for a specific call by setting\n * `experimental_telemetry.isEnabled` to `true` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: true },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nexport const vercelAIIntegration = defineIntegration(_vercelAIIntegration);\n","import type { Log, LogSeverityLevel, ParameterizedString } from '@sentry/core';\nimport { _INTERNAL_captureLog } from '@sentry/core';\n\n/**\n * Capture a log with the given level.\n *\n * @param level - The level of the log.\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n * @param severityNumber - The severity number of the log.\n */\nfunction captureLog(\n  level: LogSeverityLevel,\n  message: ParameterizedString,\n  attributes?: Log['attributes'],\n  severityNumber?: Log['severityNumber'],\n): void {\n  _INTERNAL_captureLog({ level, message, attributes, severityNumber });\n}\n\n/**\n * @summary Capture a log with the `trace` level. Requires the `enableLogs` option to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { userId: 100, route: '/dashboard' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.trace('User clicked submit button', {\n *   buttonId: 'submit-form',\n *   formId: 'user-profile',\n *   timestamp: Date.now()\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.trace(Sentry.logger.fmt`User ${user} navigated to ${page}`, {\n *   userId: '123',\n *   sessionId: 'abc-xyz'\n * });\n * ```\n */\nexport function trace(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('trace', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `debug` level. Requires the `enableLogs` option to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { component: 'Header', state: 'loading' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.debug('Component mounted', {\n *   component: 'UserProfile',\n *   props: { userId: 123 },\n *   renderTime: 150\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.debug(Sentry.logger.fmt`API request to ${endpoint} failed`, {\n *   statusCode: 404,\n *   requestId: 'req-123',\n *   duration: 250\n * });\n * ```\n */\nexport function debug(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('debug', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `info` level. Requires the `enableLogs` option to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { feature: 'checkout', status: 'completed' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.info('User completed checkout', {\n *   orderId: 'order-123',\n *   amount: 99.99,\n *   paymentMethod: 'credit_card'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.info(Sentry.logger.fmt`User ${user} updated profile picture`, {\n *   userId: 'user-123',\n *   imageSize: '2.5MB',\n *   timestamp: Date.now()\n * });\n * ```\n */\nexport function info(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('info', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `warn` level. Requires the `enableLogs` option to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { browser: 'Chrome', version: '91.0' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.warn('Browser compatibility issue detected', {\n *   browser: 'Safari',\n *   version: '14.0',\n *   feature: 'WebRTC',\n *   fallback: 'enabled'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.warn(Sentry.logger.fmt`API endpoint ${endpoint} is deprecated`, {\n *   recommendedEndpoint: '/api/v2/users',\n *   sunsetDate: '2024-12-31',\n *   clientVersion: '1.2.3'\n * });\n * ```\n */\nexport function warn(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('warn', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `error` level. Requires the `enableLogs` option to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { error: 'NetworkError', url: '/api/data' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.error('Failed to load user data', {\n *   error: 'NetworkError',\n *   url: '/api/users/123',\n *   statusCode: 500,\n *   retryCount: 3\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.error(Sentry.logger.fmt`Payment processing failed for order ${orderId}`, {\n *   error: 'InsufficientFunds',\n *   amount: 100.00,\n *   currency: 'USD',\n *   userId: 'user-456'\n * });\n * ```\n */\nexport function error(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('error', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `fatal` level. Requires the `enableLogs` option to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { appState: 'corrupted', sessionId: 'abc-123' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.fatal('Application state corrupted', {\n *   lastKnownState: 'authenticated',\n *   sessionId: 'session-123',\n *   timestamp: Date.now(),\n *   recoveryAttempted: true\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.fatal(Sentry.logger.fmt`Critical system failure in ${service}`, {\n *   service: 'payment-processor',\n *   errorCode: 'CRITICAL_FAILURE',\n *   affectedUsers: 150,\n *   timestamp: Date.now()\n * });\n * ```\n */\nexport function fatal(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('fatal', message, attributes);\n}\n\nexport { fmt } from '@sentry/core';\n"],"names":["MODERN_BROWSERSLIST_TARGET","module","exports","APP_BUILD_MANIFEST","APP_CLIENT_INTERNALS","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","AdapterOutputType","BARREL_OPTIMIZATION_PREFIX","BLOCKED_PAGES","BUILD_ID_FILE","BUILD_MANIFEST","CLIENT_PUBLIC_FILES_PATH","CLIENT_REFERENCE_MANIFEST","CLIENT_STATIC_FILES_PATH","CLIENT_STATIC_FILES_RUNTIME_AMP","CLIENT_STATIC_FILES_RUNTIME_MAIN","CLIENT_STATIC_FILES_RUNTIME_MAIN_APP","CLIENT_STATIC_FILES_RUNTIME_POLYFILLS","CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL","CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH","CLIENT_STATIC_FILES_RUNTIME_WEBPACK","COMPILER_INDEXES","COMPILER_NAMES","CONFIG_FILES","DEFAULT_RUNTIME_WEBPACK","DEFAULT_SANS_SERIF_FONT","DEFAULT_SERIF_FONT","DEV_CLIENT_MIDDLEWARE_MANIFEST","DEV_CLIENT_PAGES_MANIFEST","DYNAMIC_CSS_MANIFEST","EDGE_RUNTIME_WEBPACK","EDGE_UNSUPPORTED_NODE_APIS","EXPORT_DETAIL","EXPORT_MARKER","FUNCTIONS_CONFIG_MANIFEST","IMAGES_MANIFEST","INTERCEPTION_ROUTE_REWRITE_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","NEXT_BUILTIN_DOCUMENT","NEXT_FONT_MANIFEST","PAGES_MANIFEST","PHASE_DEVELOPMENT_SERVER","PHASE_EXPORT","PHASE_INFO","PHASE_PRODUCTION_BUILD","PHASE_PRODUCTION_SERVER","PHASE_TEST","PRERENDER_MANIFEST","REACT_LOADABLE_MANIFEST","ROUTES_MANIFEST","RSC_MODULE_TYPES","SERVER_DIRECTORY","SERVER_FILES_MANIFEST","SERVER_PROPS_ID","SERVER_REFERENCE_MANIFEST","STATIC_PROPS_ID","STATIC_STATUS_PAGES","STRING_LITERAL_DROP_BUNDLE","SUBRESOURCE_INTEGRITY_MANIFEST","SYSTEM_ENTRYPOINTS","TRACE_OUTPUT_VERSION","TURBOPACK_CLIENT_BUILD_MANIFEST","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","TURBO_TRACE_DEFAULT_MEMORY_LIMIT","UNDERSCORE_NOT_FOUND_ROUTE","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","WEBPACK_STATS","client","server","edgeServer","Symbol","name","xAvgCharWidth","azAvgWidth","unitsPerEm","Set","performance","trace","isTracingSuppressed","suppressTracing","DEBUG_BUILD","debug","INTEGRATION_NAME"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]}