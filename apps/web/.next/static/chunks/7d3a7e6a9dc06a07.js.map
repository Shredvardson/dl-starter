{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/shared/lib/utils/warn-once.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/shared/lib/router/utils/disable-smooth-scroll.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/components/http-access-fallback/error-boundary.tsx","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/components/bfcache.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/components/layout-router.tsx","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/components/render-from-template-context.tsx","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/shared/lib/utils/reflect-utils.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/request/search-params.browser.prod.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/request/search-params.browser.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/request/params.browser.prod.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/request/params.browser.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/web/spec-extension/adapters/reflect.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/create-deduped-by-callsite-server-error-logger.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/app-render/after-task-async-storage-instance.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/app-render/after-task-async-storage.external.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/request/utils.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/request/search-params.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/app-render/dynamic-access-async-storage-instance.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/app-render/dynamic-access-async-storage.external.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/server/request/params.ts","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/components/client-page.tsx","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/components/client-segment.tsx","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/lib/metadata/generate/icon-mark.tsx","turbopack:///[project]/node_modules/.pnpm/next@15.5.2_@babel+core@7.28.3_@opentelemetry+api@1.9.0_@playwright+test@1.55.0_react-d_e236737f00d0c8f73a9e6975c9f9321d/node_modules/next/src/client/components/metadata/async-metadata.tsx"],"sourcesContent":["let warnOnce = (_: string) => {}\nif (process.env.NODE_ENV !== 'production') {\n  const warnings = new Set<string>()\n  warnOnce = (msg: string) => {\n    if (!warnings.has(msg)) {\n      console.warn(msg)\n    }\n    warnings.add(msg)\n  }\n}\n\nexport { warnOnce }\n","import { warnOnce } from '../../utils/warn-once'\n\n/**\n * Run function with `scroll-behavior: auto` applied to `<html/>`.\n * This css change will be reverted after the function finishes.\n */\nexport function disableSmoothScrollDuringRouteTransition(\n  fn: () => void,\n  options: { dontForceLayout?: boolean; onlyHashChange?: boolean } = {}\n) {\n  // if only the hash is changed, we don't need to disable smooth scrolling\n  // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX\n  if (options.onlyHashChange) {\n    fn()\n    return\n  }\n\n  const htmlElement = document.documentElement\n  const hasDataAttribute = htmlElement.dataset.scrollBehavior === 'smooth'\n\n  // Since this is a breaking change, this is temporarily flagged\n  // and will be false by default.\n  // In the next major (v16), this will be automatically enabled\n  if (process.env.__NEXT_OPTIMIZE_ROUTER_SCROLL) {\n    if (!hasDataAttribute) {\n      // No smooth scrolling configured, run directly without style manipulation\n      fn()\n      return\n    }\n  } else {\n    // Old behavior: always manipulate styles, but warn about upcoming change\n\n    // Warn if smooth scrolling is detected but no data attribute is present\n    if (\n      process.env.NODE_ENV === 'development' &&\n      !hasDataAttribute &&\n      getComputedStyle(htmlElement).scrollBehavior === 'smooth'\n    ) {\n      warnOnce(\n        'Detected `scroll-behavior: smooth` on the `<html>` element. In a future version, ' +\n          'Next.js will no longer automatically disable smooth scrolling during route transitions. ' +\n          'To prepare for this change, add `data-scroll-behavior=\"smooth\"` to your <html> element. ' +\n          'Learn more: https://nextjs.org/docs/messages/missing-data-scroll-behavior'\n      )\n    }\n  }\n\n  // Proceed with temporarily disabling smooth scrolling\n  const existing = htmlElement.style.scrollBehavior\n  htmlElement.style.scrollBehavior = 'auto'\n  if (!options.dontForceLayout) {\n    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.\n    // Otherwise it will not pickup the change in scrollBehavior\n    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042\n    htmlElement.getClientRects()\n  }\n  fn()\n  htmlElement.style.scrollBehavior = existing\n}\n","'use client'\n\n/**\n * HTTPAccessFallbackBoundary is a boundary that catches errors and renders a\n * fallback component for HTTP errors.\n *\n * It receives the status code, and determine if it should render fallbacks for few HTTP 4xx errors.\n *\n * e.g. 404\n * 404 represents not found, and the fallback component pair contains the component and its styles.\n *\n */\n\nimport React, { useContext } from 'react'\nimport { useUntrackedPathname } from '../navigation-untracked'\nimport {\n  HTTPAccessErrorStatus,\n  getAccessFallbackHTTPStatus,\n  getAccessFallbackErrorTypeByStatus,\n  isHTTPAccessFallbackError,\n} from './http-access-fallback'\nimport { warnOnce } from '../../../shared/lib/utils/warn-once'\nimport { MissingSlotContext } from '../../../shared/lib/app-router-context.shared-runtime'\n\ninterface HTTPAccessFallbackBoundaryProps {\n  notFound?: React.ReactNode\n  forbidden?: React.ReactNode\n  unauthorized?: React.ReactNode\n  children: React.ReactNode\n  missingSlots?: Set<string>\n}\n\ninterface HTTPAccessFallbackErrorBoundaryProps\n  extends HTTPAccessFallbackBoundaryProps {\n  pathname: string | null\n  missingSlots?: Set<string>\n}\n\ninterface HTTPAccessBoundaryState {\n  triggeredStatus: number | undefined\n  previousPathname: string | null\n}\n\nclass HTTPAccessFallbackErrorBoundary extends React.Component<\n  HTTPAccessFallbackErrorBoundaryProps,\n  HTTPAccessBoundaryState\n> {\n  constructor(props: HTTPAccessFallbackErrorBoundaryProps) {\n    super(props)\n    this.state = {\n      triggeredStatus: undefined,\n      previousPathname: props.pathname,\n    }\n  }\n\n  componentDidCatch(): void {\n    if (\n      process.env.NODE_ENV === 'development' &&\n      this.props.missingSlots &&\n      this.props.missingSlots.size > 0 &&\n      // A missing children slot is the typical not-found case, so no need to warn\n      !this.props.missingSlots.has('children')\n    ) {\n      let warningMessage =\n        'No default component was found for a parallel route rendered on this page. Falling back to nearest NotFound boundary.\\n' +\n        'Learn more: https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs\\n\\n'\n\n      const formattedSlots = Array.from(this.props.missingSlots)\n        .sort((a, b) => a.localeCompare(b))\n        .map((slot) => `@${slot}`)\n        .join(', ')\n\n      warningMessage += 'Missing slots: ' + formattedSlots\n\n      warnOnce(warningMessage)\n    }\n  }\n\n  static getDerivedStateFromError(error: any) {\n    if (isHTTPAccessFallbackError(error)) {\n      const httpStatus = getAccessFallbackHTTPStatus(error)\n      return {\n        triggeredStatus: httpStatus,\n      }\n    }\n    // Re-throw if error is not for 404\n    throw error\n  }\n\n  static getDerivedStateFromProps(\n    props: HTTPAccessFallbackErrorBoundaryProps,\n    state: HTTPAccessBoundaryState\n  ): HTTPAccessBoundaryState | null {\n    /**\n     * Handles reset of the error boundary when a navigation happens.\n     * Ensures the error boundary does not stay enabled when navigating to a new page.\n     * Approach of setState in render is safe as it checks the previous pathname and then overrides\n     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders\n     */\n    if (props.pathname !== state.previousPathname && state.triggeredStatus) {\n      return {\n        triggeredStatus: undefined,\n        previousPathname: props.pathname,\n      }\n    }\n    return {\n      triggeredStatus: state.triggeredStatus,\n      previousPathname: props.pathname,\n    }\n  }\n\n  render() {\n    const { notFound, forbidden, unauthorized, children } = this.props\n    const { triggeredStatus } = this.state\n    const errorComponents = {\n      [HTTPAccessErrorStatus.NOT_FOUND]: notFound,\n      [HTTPAccessErrorStatus.FORBIDDEN]: forbidden,\n      [HTTPAccessErrorStatus.UNAUTHORIZED]: unauthorized,\n    }\n\n    if (triggeredStatus) {\n      const isNotFound =\n        triggeredStatus === HTTPAccessErrorStatus.NOT_FOUND && notFound\n      const isForbidden =\n        triggeredStatus === HTTPAccessErrorStatus.FORBIDDEN && forbidden\n      const isUnauthorized =\n        triggeredStatus === HTTPAccessErrorStatus.UNAUTHORIZED && unauthorized\n\n      // If there's no matched boundary in this layer, keep throwing the error by rendering the children\n      if (!(isNotFound || isForbidden || isUnauthorized)) {\n        return children\n      }\n\n      return (\n        <>\n          <meta name=\"robots\" content=\"noindex\" />\n          {process.env.NODE_ENV === 'development' && (\n            <meta\n              name=\"boundary-next-error\"\n              content={getAccessFallbackErrorTypeByStatus(triggeredStatus)}\n            />\n          )}\n          {errorComponents[triggeredStatus]}\n        </>\n      )\n    }\n\n    return children\n  }\n}\n\nexport function HTTPAccessFallbackBoundary({\n  notFound,\n  forbidden,\n  unauthorized,\n  children,\n}: HTTPAccessFallbackBoundaryProps) {\n  // When we're rendering the missing params shell, this will return null. This\n  // is because we won't be rendering any not found boundaries or error\n  // boundaries for the missing params shell. When this runs on the client\n  // (where these error can occur), we will get the correct pathname.\n  const pathname = useUntrackedPathname()\n  const missingSlots = useContext(MissingSlotContext)\n  const hasErrorFallback = !!(notFound || forbidden || unauthorized)\n\n  if (hasErrorFallback) {\n    return (\n      <HTTPAccessFallbackErrorBoundary\n        pathname={pathname}\n        notFound={notFound}\n        forbidden={forbidden}\n        unauthorized={unauthorized}\n        missingSlots={missingSlots}\n      >\n        {children}\n      </HTTPAccessFallbackErrorBoundary>\n    )\n  }\n\n  return <>{children}</>\n}\n","import type { FlightRouterState } from '../../server/app-render/types'\nimport { useState } from 'react'\n\n// When the flag is disabled, only track the currently active tree\nconst MAX_BF_CACHE_ENTRIES = process.env.__NEXT_ROUTER_BF_CACHE ? 3 : 1\n\nexport type RouterBFCacheEntry = {\n  tree: FlightRouterState\n  stateKey: string\n  // The entries form a linked list, sorted in order of most recently active.\n  next: RouterBFCacheEntry | null\n}\n\n/**\n * Keeps track of the most recent N trees (FlightRouterStates) that were active\n * at a certain segment level. E.g. for a segment \"/a/b/[param]\", this hook\n * tracks the last N param values that the router rendered for N.\n *\n * The result of this hook precisely determines the number and order of\n * trees that are rendered in parallel at their segment level.\n *\n * The purpose of this cache is to we can preserve the React and DOM state of\n * some number of inactive trees, by rendering them in an <Activity> boundary.\n * That means it would not make sense for the the lifetime of the cache to be\n * any longer than the lifetime of the React tree; e.g. if the hook were\n * unmounted, then the React tree would be, too. So, we use React state to\n * manage it.\n *\n * Note that we don't store the RSC data for the cache entries in this hook —\n * the data for inactive segments is stored in the parent CacheNode, which\n * *does* have a longer lifetime than the React tree. This hook only determines\n * which of those trees should have their *state* preserved, by <Activity>.\n */\nexport function useRouterBFCache(\n  activeTree: FlightRouterState,\n  activeStateKey: string\n): RouterBFCacheEntry {\n  // The currently active entry. The entries form a linked list, sorted in\n  // order of most recently active. This allows us to reuse parts of the list\n  // without cloning, unless there's a reordering or removal.\n  // TODO: Once we start tracking back/forward history at each route level,\n  // we should use the history order instead. In other words, when traversing\n  // to an existing entry as a result of a popstate event, we should maintain\n  // the existing order instead of moving it to the front of the list. I think\n  // an initial implementation of this could be to pass an incrementing id\n  // to history.pushState/replaceState, then use that here for ordering.\n  const [prevActiveEntry, setPrevActiveEntry] = useState<RouterBFCacheEntry>(\n    () => {\n      const initialEntry: RouterBFCacheEntry = {\n        tree: activeTree,\n        stateKey: activeStateKey,\n        next: null,\n      }\n      return initialEntry\n    }\n  )\n\n  if (prevActiveEntry.tree === activeTree) {\n    // Fast path. The active tree hasn't changed, so we can reuse the\n    // existing state.\n    return prevActiveEntry\n  }\n\n  // The route tree changed. Note that this doesn't mean that the tree changed\n  // *at this level* — the change may be due to a child route. Either way, we\n  // need to either add or update the router tree in the bfcache.\n  //\n  // The rest of the code looks more complicated than it actually is because we\n  // can't mutate the state in place; we have to copy-on-write.\n\n  // Create a new entry for the active cache key. This is the head of the new\n  // linked list.\n  const newActiveEntry: RouterBFCacheEntry = {\n    tree: activeTree,\n    stateKey: activeStateKey,\n    next: null,\n  }\n\n  // We need to append the old list onto the new list. If the head of the new\n  // list was already present in the cache, then we'll need to clone everything\n  // that came before it. Then we can reuse the rest.\n  let n = 1\n  let oldEntry: RouterBFCacheEntry | null = prevActiveEntry\n  let clonedEntry: RouterBFCacheEntry = newActiveEntry\n  while (oldEntry !== null && n < MAX_BF_CACHE_ENTRIES) {\n    if (oldEntry.stateKey === activeStateKey) {\n      // Fast path. This entry in the old list that corresponds to the key that\n      // is now active. We've already placed a clone of this entry at the front\n      // of the new list. We can reuse the rest of the old list without cloning.\n      // NOTE: We don't need to worry about eviction in this case because we\n      // haven't increased the size of the cache, and we assume the max size\n      // is constant across renders. If we were to change it to a dynamic limit,\n      // then the implementation would need to account for that.\n      clonedEntry.next = oldEntry.next\n      break\n    } else {\n      // Clone the entry and append it to the list.\n      n++\n      const entry: RouterBFCacheEntry = {\n        tree: oldEntry.tree,\n        stateKey: oldEntry.stateKey,\n        next: null,\n      }\n      clonedEntry.next = entry\n      clonedEntry = entry\n    }\n    oldEntry = oldEntry.next\n  }\n\n  setPrevActiveEntry(newActiveEntry)\n  return newActiveEntry\n}\n","'use client'\n\nimport type {\n  CacheNode,\n  LazyCacheNode,\n  LoadingModuleData,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../server/app-render/types'\nimport type { ErrorComponent } from './error-boundary'\nimport {\n  ACTION_SERVER_PATCH,\n  type FocusAndScrollRef,\n} from './router-reducer/router-reducer-types'\n\nimport React, {\n  useContext,\n  use,\n  startTransition,\n  Suspense,\n  useDeferredValue,\n  type JSX,\n} from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  LayoutRouterContext,\n  GlobalLayoutRouterContext,\n  TemplateContext,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport { fetchServerResponse } from './router-reducer/fetch-server-response'\nimport { unresolvedThenable } from './unresolved-thenable'\nimport { ErrorBoundary } from './error-boundary'\nimport { matchSegment } from './match-segments'\nimport { disableSmoothScrollDuringRouteTransition } from '../../shared/lib/router/utils/disable-smooth-scroll'\nimport { RedirectBoundary } from './redirect-boundary'\nimport { HTTPAccessFallbackBoundary } from './http-access-fallback/error-boundary'\nimport { createRouterCacheKey } from './router-reducer/create-router-cache-key'\nimport { hasInterceptionRouteInCurrentTree } from './router-reducer/reducers/has-interception-route-in-current-tree'\nimport { dispatchAppRouterAction } from './use-action-queue'\nimport { useRouterBFCache, type RouterBFCacheEntry } from './bfcache'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\n\nconst Activity = process.env.__NEXT_ROUTER_BF_CACHE\n  ? (require('react') as typeof import('react')).unstable_Activity\n  : null!\n\n/**\n * Add refetch marker to router state at the point of the current layout segment.\n * This ensures the response returned is not further down than the current layout segment.\n */\nfunction walkAddRefetch(\n  segmentPathToWalk: FlightSegmentPath | undefined,\n  treeToRecreate: FlightRouterState\n): FlightRouterState {\n  if (segmentPathToWalk) {\n    const [segment, parallelRouteKey] = segmentPathToWalk\n    const isLast = segmentPathToWalk.length === 2\n\n    if (matchSegment(treeToRecreate[0], segment)) {\n      if (treeToRecreate[1].hasOwnProperty(parallelRouteKey)) {\n        if (isLast) {\n          const subTree = walkAddRefetch(\n            undefined,\n            treeToRecreate[1][parallelRouteKey]\n          )\n          return [\n            treeToRecreate[0],\n            {\n              ...treeToRecreate[1],\n              [parallelRouteKey]: [\n                subTree[0],\n                subTree[1],\n                subTree[2],\n                'refetch',\n              ],\n            },\n          ]\n        }\n\n        return [\n          treeToRecreate[0],\n          {\n            ...treeToRecreate[1],\n            [parallelRouteKey]: walkAddRefetch(\n              segmentPathToWalk.slice(2),\n              treeToRecreate[1][parallelRouteKey]\n            ),\n          },\n        ]\n      }\n    }\n  }\n\n  return treeToRecreate\n}\n\nconst __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = (\n  ReactDOM as any\n).__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n\n// TODO-APP: Replace with new React API for finding dom nodes without a `ref` when available\n/**\n * Wraps ReactDOM.findDOMNode with additional logic to hide React Strict Mode warning\n */\nfunction findDOMNode(\n  instance: React.ReactInstance | null | undefined\n): Element | Text | null {\n  // Tree-shake for server bundle\n  if (typeof window === 'undefined') return null\n\n  // __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode is null during module init.\n  // We need to lazily reference it.\n  const internal_reactDOMfindDOMNode =\n    __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode\n  return internal_reactDOMfindDOMNode(instance)\n}\n\nconst rectProperties = [\n  'bottom',\n  'height',\n  'left',\n  'right',\n  'top',\n  'width',\n  'x',\n  'y',\n] as const\n/**\n * Check if a HTMLElement is hidden or fixed/sticky position\n */\nfunction shouldSkipElement(element: HTMLElement) {\n  // we ignore fixed or sticky positioned elements since they'll likely pass the \"in-viewport\" check\n  // and will result in a situation we bail on scroll because of something like a fixed nav,\n  // even though the actual page content is offscreen\n  if (['sticky', 'fixed'].includes(getComputedStyle(element).position)) {\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(\n        'Skipping auto-scroll behavior due to `position: sticky` or `position: fixed` on element:',\n        element\n      )\n    }\n    return true\n  }\n\n  // Uses `getBoundingClientRect` to check if the element is hidden instead of `offsetParent`\n  // because `offsetParent` doesn't consider document/body\n  const rect = element.getBoundingClientRect()\n  return rectProperties.every((item) => rect[item] === 0)\n}\n\n/**\n * Check if the top corner of the HTMLElement is in the viewport.\n */\nfunction topOfElementInViewport(element: HTMLElement, viewportHeight: number) {\n  const rect = element.getBoundingClientRect()\n  return rect.top >= 0 && rect.top <= viewportHeight\n}\n\n/**\n * Find the DOM node for a hash fragment.\n * If `top` the page has to scroll to the top of the page. This mirrors the browser's behavior.\n * If the hash fragment is an id, the page has to scroll to the element with that id.\n * If the hash fragment is a name, the page has to scroll to the first element with that name.\n */\nfunction getHashFragmentDomNode(hashFragment: string) {\n  // If the hash fragment is `top` the page has to scroll to the top of the page.\n  if (hashFragment === 'top') {\n    return document.body\n  }\n\n  // If the hash fragment is an id, the page has to scroll to the element with that id.\n  return (\n    document.getElementById(hashFragment) ??\n    // If the hash fragment is a name, the page has to scroll to the first element with that name.\n    document.getElementsByName(hashFragment)[0]\n  )\n}\ninterface ScrollAndFocusHandlerProps {\n  focusAndScrollRef: FocusAndScrollRef\n  children: React.ReactNode\n  segmentPath: FlightSegmentPath\n}\nclass InnerScrollAndFocusHandler extends React.Component<ScrollAndFocusHandlerProps> {\n  handlePotentialScroll = () => {\n    // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.\n    const { focusAndScrollRef, segmentPath } = this.props\n\n    if (focusAndScrollRef.apply) {\n      // segmentPaths is an array of segment paths that should be scrolled to\n      // if the current segment path is not in the array, the scroll is not applied\n      // unless the array is empty, in which case the scroll is always applied\n      if (\n        focusAndScrollRef.segmentPaths.length !== 0 &&\n        !focusAndScrollRef.segmentPaths.some((scrollRefSegmentPath) =>\n          segmentPath.every((segment, index) =>\n            matchSegment(segment, scrollRefSegmentPath[index])\n          )\n        )\n      ) {\n        return\n      }\n\n      let domNode:\n        | ReturnType<typeof getHashFragmentDomNode>\n        | ReturnType<typeof findDOMNode> = null\n      const hashFragment = focusAndScrollRef.hashFragment\n\n      if (hashFragment) {\n        domNode = getHashFragmentDomNode(hashFragment)\n      }\n\n      // `findDOMNode` is tricky because it returns just the first child if the component is a fragment.\n      // This already caused a bug where the first child was a <link/> in head.\n      if (!domNode) {\n        domNode = findDOMNode(this)\n      }\n\n      // If there is no DOM node this layout-router level is skipped. It'll be handled higher-up in the tree.\n      if (!(domNode instanceof Element)) {\n        return\n      }\n\n      // Verify if the element is a HTMLElement and if we want to consider it for scroll behavior.\n      // If the element is skipped, try to select the next sibling and try again.\n      while (!(domNode instanceof HTMLElement) || shouldSkipElement(domNode)) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (domNode.parentElement?.localName === 'head') {\n            // TODO: We enter this state when metadata was rendered as part of the page or via Next.js.\n            // This is always a bug in Next.js and caused by React hoisting metadata.\n            // We need to replace `findDOMNode` in favor of Fragment Refs (when available) so that we can skip over metadata.\n          }\n        }\n\n        // No siblings found that match the criteria are found, so handle scroll higher up in the tree instead.\n        if (domNode.nextElementSibling === null) {\n          return\n        }\n        domNode = domNode.nextElementSibling\n      }\n\n      // State is mutated to ensure that the focus and scroll is applied only once.\n      focusAndScrollRef.apply = false\n      focusAndScrollRef.hashFragment = null\n      focusAndScrollRef.segmentPaths = []\n\n      disableSmoothScrollDuringRouteTransition(\n        () => {\n          // In case of hash scroll, we only need to scroll the element into view\n          if (hashFragment) {\n            ;(domNode as HTMLElement).scrollIntoView()\n\n            return\n          }\n          // Store the current viewport height because reading `clientHeight` causes a reflow,\n          // and it won't change during this function.\n          const htmlElement = document.documentElement\n          const viewportHeight = htmlElement.clientHeight\n\n          // If the element's top edge is already in the viewport, exit early.\n          if (topOfElementInViewport(domNode as HTMLElement, viewportHeight)) {\n            return\n          }\n\n          // Otherwise, try scrolling go the top of the document to be backward compatible with pages\n          // scrollIntoView() called on `<html/>` element scrolls horizontally on chrome and firefox (that shouldn't happen)\n          // We could use it to scroll horizontally following RTL but that also seems to be broken - it will always scroll left\n          // scrollLeft = 0 also seems to ignore RTL and manually checking for RTL is too much hassle so we will scroll just vertically\n          htmlElement.scrollTop = 0\n\n          // Scroll to domNode if domNode is not in viewport when scrolled to top of document\n          if (!topOfElementInViewport(domNode as HTMLElement, viewportHeight)) {\n            // Scroll into view doesn't scroll horizontally by default when not needed\n            ;(domNode as HTMLElement).scrollIntoView()\n          }\n        },\n        {\n          // We will force layout by querying domNode position\n          dontForceLayout: true,\n          onlyHashChange: focusAndScrollRef.onlyHashChange,\n        }\n      )\n\n      // Mutate after scrolling so that it can be read by `disableSmoothScrollDuringRouteTransition`\n      focusAndScrollRef.onlyHashChange = false\n\n      // Set focus on the element\n      domNode.focus()\n    }\n  }\n\n  componentDidMount() {\n    this.handlePotentialScroll()\n  }\n\n  componentDidUpdate() {\n    // Because this property is overwritten in handlePotentialScroll it's fine to always run it when true as it'll be set to false for subsequent renders.\n    if (this.props.focusAndScrollRef.apply) {\n      this.handlePotentialScroll()\n    }\n  }\n\n  render() {\n    return this.props.children\n  }\n}\n\nfunction ScrollAndFocusHandler({\n  segmentPath,\n  children,\n}: {\n  segmentPath: FlightSegmentPath\n  children: React.ReactNode\n}) {\n  const context = useContext(GlobalLayoutRouterContext)\n  if (!context) {\n    throw new Error('invariant global layout router not mounted')\n  }\n\n  return (\n    <InnerScrollAndFocusHandler\n      segmentPath={segmentPath}\n      focusAndScrollRef={context.focusAndScrollRef}\n    >\n      {children}\n    </InnerScrollAndFocusHandler>\n  )\n}\n\n/**\n * InnerLayoutRouter handles rendering the provided segment based on the cache.\n */\nfunction InnerLayoutRouter({\n  tree,\n  segmentPath,\n  cacheNode,\n  url,\n}: {\n  tree: FlightRouterState\n  segmentPath: FlightSegmentPath\n  cacheNode: CacheNode\n  url: string\n}) {\n  const context = useContext(GlobalLayoutRouterContext)\n  if (!context) {\n    throw new Error('invariant global layout router not mounted')\n  }\n\n  const { tree: fullTree } = context\n\n  // `rsc` represents the renderable node for this segment.\n\n  // If this segment has a `prefetchRsc`, it's the statically prefetched data.\n  // We should use that on initial render instead of `rsc`. Then we'll switch\n  // to `rsc` when the dynamic response streams in.\n  //\n  // If no prefetch data is available, then we go straight to rendering `rsc`.\n  const resolvedPrefetchRsc =\n    cacheNode.prefetchRsc !== null ? cacheNode.prefetchRsc : cacheNode.rsc\n\n  // We use `useDeferredValue` to handle switching between the prefetched and\n  // final values. The second argument is returned on initial render, then it\n  // re-renders with the first argument.\n  const rsc: any = useDeferredValue(cacheNode.rsc, resolvedPrefetchRsc)\n\n  // `rsc` is either a React node or a promise for a React node, except we\n  // special case `null` to represent that this segment's data is missing. If\n  // it's a promise, we need to unwrap it so we can determine whether or not the\n  // data is missing.\n  const resolvedRsc: React.ReactNode =\n    typeof rsc === 'object' && rsc !== null && typeof rsc.then === 'function'\n      ? use(rsc)\n      : rsc\n\n  if (!resolvedRsc) {\n    // The data for this segment is not available, and there's no pending\n    // navigation that will be able to fulfill it. We need to fetch more from\n    // the server and patch the cache.\n\n    // Check if there's already a pending request.\n    let lazyData = cacheNode.lazyData\n    if (lazyData === null) {\n      /**\n       * Router state with refetch marker added\n       */\n      // TODO-APP: remove ''\n      const refetchTree = walkAddRefetch(['', ...segmentPath], fullTree)\n      const includeNextUrl = hasInterceptionRouteInCurrentTree(fullTree)\n      const navigatedAt = Date.now()\n      cacheNode.lazyData = lazyData = fetchServerResponse(\n        new URL(url, location.origin),\n        {\n          flightRouterState: refetchTree,\n          nextUrl: includeNextUrl ? context.nextUrl : null,\n        }\n      ).then((serverResponse) => {\n        startTransition(() => {\n          dispatchAppRouterAction({\n            type: ACTION_SERVER_PATCH,\n            previousTree: fullTree,\n            serverResponse,\n            navigatedAt,\n          })\n        })\n\n        return serverResponse\n      })\n\n      // Suspend while waiting for lazyData to resolve\n      use(lazyData)\n    }\n    // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.\n    // A falsey `resolvedRsc` indicates missing data -- we should not commit that branch, and we need to wait for the data to arrive.\n    use(unresolvedThenable) as never\n  }\n\n  // If we get to this point, then we know we have something we can render.\n  const subtree = (\n    // The layout router context narrows down tree and childNodes at each level.\n    <LayoutRouterContext.Provider\n      value={{\n        parentTree: tree,\n        parentCacheNode: cacheNode,\n        parentSegmentPath: segmentPath,\n\n        // TODO-APP: overriding of url for parallel routes\n        url: url,\n      }}\n    >\n      {resolvedRsc}\n    </LayoutRouterContext.Provider>\n  )\n  // Ensure root layout is not wrapped in a div as the root layout renders `<html>`\n  return subtree\n}\n\n/**\n * Renders suspense boundary with the provided \"loading\" property as the fallback.\n * If no loading property is provided it renders the children without a suspense boundary.\n */\nfunction LoadingBoundary({\n  loading,\n  children,\n}: {\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n  children: React.ReactNode\n}): JSX.Element {\n  // If loading is a promise, unwrap it. This happens in cases where we haven't\n  // yet received the loading data from the server — which includes whether or\n  // not this layout has a loading component at all.\n  //\n  // It's OK to suspend here instead of inside the fallback because this\n  // promise will resolve simultaneously with the data for the segment itself.\n  // So it will never suspend for longer than it would have if we didn't use\n  // a Suspense fallback at all.\n  let loadingModuleData\n  if (\n    typeof loading === 'object' &&\n    loading !== null &&\n    typeof (loading as any).then === 'function'\n  ) {\n    const promiseForLoading = loading as Promise<LoadingModuleData>\n    loadingModuleData = use(promiseForLoading)\n  } else {\n    loadingModuleData = loading as LoadingModuleData\n  }\n\n  if (loadingModuleData) {\n    const loadingRsc = loadingModuleData[0]\n    const loadingStyles = loadingModuleData[1]\n    const loadingScripts = loadingModuleData[2]\n    return (\n      <Suspense\n        fallback={\n          <>\n            {loadingStyles}\n            {loadingScripts}\n            {loadingRsc}\n          </>\n        }\n      >\n        {children}\n      </Suspense>\n    )\n  }\n\n  return <>{children}</>\n}\n\n/**\n * OuterLayoutRouter handles the current segment as well as <Offscreen> rendering of other segments.\n * It can be rendered next to each other with a different `parallelRouterKey`, allowing for Parallel routes.\n */\nexport default function OuterLayoutRouter({\n  parallelRouterKey,\n  error,\n  errorStyles,\n  errorScripts,\n  templateStyles,\n  templateScripts,\n  template,\n  notFound,\n  forbidden,\n  unauthorized,\n  segmentViewBoundaries,\n}: {\n  parallelRouterKey: string\n  error: ErrorComponent | undefined\n  errorStyles: React.ReactNode | undefined\n  errorScripts: React.ReactNode | undefined\n  templateStyles: React.ReactNode | undefined\n  templateScripts: React.ReactNode | undefined\n  template: React.ReactNode\n  notFound: React.ReactNode | undefined\n  forbidden: React.ReactNode | undefined\n  unauthorized: React.ReactNode | undefined\n  segmentViewBoundaries?: React.ReactNode\n}) {\n  const context = useContext(LayoutRouterContext)\n  if (!context) {\n    throw new Error('invariant expected layout router to be mounted')\n  }\n\n  const { parentTree, parentCacheNode, parentSegmentPath, url } = context\n\n  // Get the CacheNode for this segment by reading it from the parent segment's\n  // child map.\n  const parentParallelRoutes = parentCacheNode.parallelRoutes\n  let segmentMap = parentParallelRoutes.get(parallelRouterKey)\n  // If the parallel router cache node does not exist yet, create it.\n  // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.\n  if (!segmentMap) {\n    segmentMap = new Map()\n    parentParallelRoutes.set(parallelRouterKey, segmentMap)\n  }\n  const parentTreeSegment = parentTree[0]\n  const segmentPath =\n    parentSegmentPath === null\n      ? // TODO: The root segment value is currently omitted from the segment\n        // path. This has led to a bunch of special cases scattered throughout\n        // the code. We should clean this up.\n        [parallelRouterKey]\n      : parentSegmentPath.concat([parentTreeSegment, parallelRouterKey])\n\n  // The \"state\" key of a segment is the one passed to React — it represents the\n  // identity of the UI tree. Whenever the state key changes, the tree is\n  // recreated and the state is reset. In the App Router model, search params do\n  // not cause state to be lost, so two segments with the same segment path but\n  // different search params should have the same state key.\n  //\n  // The \"cache\" key of a segment, however, *does* include the search params, if\n  // it's possible that the segment accessed the search params on the server.\n  // (This only applies to page segments; layout segments cannot access search\n  // params on the server.)\n  const activeTree = parentTree[1][parallelRouterKey]\n  const activeSegment = activeTree[0]\n  const activeStateKey = createRouterCacheKey(activeSegment, true) // no search params\n\n  // At each level of the route tree, not only do we render the currently\n  // active segment — we also render the last N segments that were active at\n  // this level inside a hidden <Activity> boundary, to preserve their state\n  // if or when the user navigates to them again.\n  //\n  // bfcacheEntry is a linked list of FlightRouterStates.\n  let bfcacheEntry: RouterBFCacheEntry | null = useRouterBFCache(\n    activeTree,\n    activeStateKey\n  )\n  let children: Array<React.ReactNode> = []\n  do {\n    const tree = bfcacheEntry.tree\n    const stateKey = bfcacheEntry.stateKey\n    const segment = tree[0]\n    const cacheKey = createRouterCacheKey(segment)\n\n    // Read segment path from the parallel router cache node.\n    let cacheNode = segmentMap.get(cacheKey)\n    if (cacheNode === undefined) {\n      // When data is not available during rendering client-side we need to fetch\n      // it from the server.\n      const newLazyCacheNode: LazyCacheNode = {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt: -1,\n      }\n\n      // Flight data fetch kicked off during render and put into the cache.\n      cacheNode = newLazyCacheNode\n      segmentMap.set(cacheKey, newLazyCacheNode)\n    }\n\n    /*\n    - Error boundary\n      - Only renders error boundary if error component is provided.\n      - Rendered for each segment to ensure they have their own error state.\n      - When gracefully degrade for bots, skip rendering error boundary.\n    - Loading boundary\n      - Only renders suspense boundary if loading components is provided.\n      - Rendered for each segment to ensure they have their own loading state.\n      - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.\n  */\n\n    let segmentBoundaryTriggerNode: React.ReactNode = null\n    let segmentViewStateNode: React.ReactNode = null\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      process.env.__NEXT_DEVTOOL_SEGMENT_EXPLORER\n    ) {\n      const { SegmentBoundaryTriggerNode, SegmentViewStateNode } =\n        require('../../next-devtools/userspace/app/segment-explorer-node') as typeof import('../../next-devtools/userspace/app/segment-explorer-node')\n\n      const pagePrefix = normalizeAppPath(url)\n      segmentViewStateNode = (\n        <SegmentViewStateNode key={pagePrefix} page={pagePrefix} />\n      )\n\n      segmentBoundaryTriggerNode = (\n        <>\n          <SegmentBoundaryTriggerNode />\n        </>\n      )\n    }\n\n    // TODO: The loading module data for a segment is stored on the parent, then\n    // applied to each of that parent segment's parallel route slots. In the\n    // simple case where there's only one parallel route (the `children` slot),\n    // this is no different from if the loading module data where stored on the\n    // child directly. But I'm not sure this actually makes sense when there are\n    // multiple parallel routes. It's not a huge issue because you always have\n    // the option to define a narrower loading boundary for a particular slot. But\n    // this sort of smells like an implementation accident to me.\n    const loadingModuleData = parentCacheNode.loading\n    let child = (\n      <TemplateContext.Provider\n        key={stateKey}\n        value={\n          <ScrollAndFocusHandler segmentPath={segmentPath}>\n            <ErrorBoundary\n              errorComponent={error}\n              errorStyles={errorStyles}\n              errorScripts={errorScripts}\n            >\n              <LoadingBoundary loading={loadingModuleData}>\n                <HTTPAccessFallbackBoundary\n                  notFound={notFound}\n                  forbidden={forbidden}\n                  unauthorized={unauthorized}\n                >\n                  <RedirectBoundary>\n                    <InnerLayoutRouter\n                      url={url}\n                      tree={tree}\n                      cacheNode={cacheNode}\n                      segmentPath={segmentPath}\n                    />\n                    {segmentBoundaryTriggerNode}\n                  </RedirectBoundary>\n                </HTTPAccessFallbackBoundary>\n              </LoadingBoundary>\n            </ErrorBoundary>\n            {segmentViewStateNode}\n          </ScrollAndFocusHandler>\n        }\n      >\n        {templateStyles}\n        {templateScripts}\n        {template}\n      </TemplateContext.Provider>\n    )\n\n    if (process.env.NODE_ENV !== 'production') {\n      const { SegmentStateProvider } =\n        require('../../next-devtools/userspace/app/segment-explorer-node') as typeof import('../../next-devtools/userspace/app/segment-explorer-node')\n\n      child = (\n        <SegmentStateProvider key={stateKey}>\n          {child}\n          {segmentViewBoundaries}\n        </SegmentStateProvider>\n      )\n    }\n\n    if (process.env.__NEXT_ROUTER_BF_CACHE) {\n      child = (\n        <Activity\n          key={stateKey}\n          mode={stateKey === activeStateKey ? 'visible' : 'hidden'}\n        >\n          {child}\n        </Activity>\n      )\n    }\n\n    children.push(child)\n\n    bfcacheEntry = bfcacheEntry.next\n  } while (bfcacheEntry !== null)\n\n  return children\n}\n","'use client'\n\nimport React, { useContext, type JSX } from 'react'\nimport { TemplateContext } from '../../shared/lib/app-router-context.shared-runtime'\n\nexport default function RenderFromTemplateContext(): JSX.Element {\n  const children = useContext(TemplateContext)\n  return <>{children}</>\n}\n","// This regex will have fast negatives meaning valid identifiers may not pass\n// this test. However this is only used during static generation to provide hints\n// about why a page bailed out of some or all prerendering and we can use bracket notation\n// for example while `ಠ_ಠ` is a valid identifier it's ok to print `searchParams['ಠ_ಠ']`\n// even if this would have been fine too `searchParams.ಠ_ಠ`\nconst isDefinitelyAValidIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/\n\nexport function describeStringPropertyAccess(target: string, prop: string) {\n  if (isDefinitelyAValidIdentifier.test(prop)) {\n    return `\\`${target}.${prop}\\``\n  }\n  return `\\`${target}[${JSON.stringify(prop)}]\\``\n}\n\nexport function describeHasCheckingStringProperty(\n  target: string,\n  prop: string\n) {\n  const stringifiedProp = JSON.stringify(prop)\n  return `\\`Reflect.has(${target}, ${stringifiedProp})\\`, \\`${stringifiedProp} in ${target}\\`, or similar`\n}\n\nexport const wellKnownProperties = new Set([\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toString',\n  'valueOf',\n  'toLocaleString',\n\n  // Promise prototype\n  // fallthrough\n  'then',\n  'catch',\n  'finally',\n\n  // React Promise extension\n  // fallthrough\n  'status',\n\n  // React introspection\n  'displayName',\n  '_debugInfo',\n\n  // Common tested properties\n  // fallthrough\n  'toJSON',\n  '$$typeof',\n  '__esModule',\n])\n","import type { SearchParams } from '../../server/request/search-params'\n\nimport { wellKnownProperties } from '../../shared/lib/utils/reflect-utils'\n\ninterface CacheLifetime {}\nconst CachedSearchParams = new WeakMap<CacheLifetime, Promise<SearchParams>>()\n\nfunction makeUntrackedExoticSearchParams(\n  underlyingSearchParams: SearchParams\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  // We don't use makeResolvedReactPromise here because searchParams\n  // supports copying with spread and we don't want to unnecessarily\n  // instrument the promise with spreadable properties of ReactPromise.\n  const promise = Promise.resolve(underlyingSearchParams)\n  CachedSearchParams.set(underlyingSearchParams, promise)\n\n  Object.keys(underlyingSearchParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n    } else {\n      ;(promise as any)[prop] = underlyingSearchParams[prop]\n    }\n  })\n\n  return promise\n}\n\nfunction makeUntrackedSearchParams(\n  underlyingSearchParams: SearchParams\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  const promise = Promise.resolve(underlyingSearchParams)\n  CachedSearchParams.set(underlyingSearchParams, promise)\n\n  return promise\n}\n\nexport function createRenderSearchParamsFromClient(\n  underlyingSearchParams: SearchParams\n): Promise<SearchParams> {\n  if (process.env.__NEXT_CACHE_COMPONENTS) {\n    return makeUntrackedSearchParams(underlyingSearchParams)\n  }\n\n  return makeUntrackedExoticSearchParams(underlyingSearchParams)\n}\n","export const createRenderSearchParamsFromClient =\n  process.env.NODE_ENV === 'development'\n    ? (\n        require('./search-params.browser.dev') as typeof import('./search-params.browser.dev')\n      ).createRenderSearchParamsFromClient\n    : (\n        require('./search-params.browser.prod') as typeof import('./search-params.browser.prod')\n      ).createRenderSearchParamsFromClient\n","import type { Params } from '../../server/request/params'\nimport { wellKnownProperties } from '../../shared/lib/utils/reflect-utils'\n\ninterface CacheLifetime {}\nconst CachedParams = new WeakMap<CacheLifetime, Promise<Params>>()\n\nfunction makeUntrackedExoticParams(underlyingParams: Params): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  const promise = Promise.resolve(underlyingParams)\n  CachedParams.set(underlyingParams, promise)\n\n  Object.keys(underlyingParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n    } else {\n      ;(promise as any)[prop] = underlyingParams[prop]\n    }\n  })\n\n  return promise\n}\n\nfunction makeUntrackedParams(underlyingParams: Params): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  const promise = Promise.resolve(underlyingParams)\n  CachedParams.set(underlyingParams, promise)\n\n  return promise\n}\n\nexport function createRenderParamsFromClient(\n  clientParams: Params\n): Promise<Params> {\n  if (process.env.__NEXT_CACHE_COMPONENTS) {\n    return makeUntrackedParams(clientParams)\n  }\n\n  return makeUntrackedExoticParams(clientParams)\n}\n","export const createRenderParamsFromClient =\n  process.env.NODE_ENV === 'development'\n    ? (require('./params.browser.dev') as typeof import('./params.browser.dev'))\n        .createRenderParamsFromClient\n    : (\n        require('./params.browser.prod') as typeof import('./params.browser.prod')\n      ).createRenderParamsFromClient\n","export class ReflectAdapter {\n  static get<T extends object>(\n    target: T,\n    prop: string | symbol,\n    receiver: unknown\n  ): any {\n    const value = Reflect.get(target, prop, receiver)\n    if (typeof value === 'function') {\n      return value.bind(target)\n    }\n\n    return value\n  }\n\n  static set<T extends object>(\n    target: T,\n    prop: string | symbol,\n    value: any,\n    receiver: any\n  ): boolean {\n    return Reflect.set(target, prop, value, receiver)\n  }\n\n  static has<T extends object>(target: T, prop: string | symbol): boolean {\n    return Reflect.has(target, prop)\n  }\n\n  static deleteProperty<T extends object>(\n    target: T,\n    prop: string | symbol\n  ): boolean {\n    return Reflect.deleteProperty(target, prop)\n  }\n}\n","import * as React from 'react'\n\nconst errorRef: { current: null | Error } = { current: null }\n\n// React.cache is currently only available in canary/experimental React channels.\nconst cache =\n  typeof React.cache === 'function'\n    ? React.cache\n    : (fn: (key: unknown) => void) => fn\n\n// When Cache Components is enabled, we record these as errors so that they\n// are captured by the dev overlay as it's more critical to fix these\n// when enabled.\nconst logErrorOrWarn = process.env.__NEXT_CACHE_COMPONENTS\n  ? console.error\n  : console.warn\n\n// We don't want to dedupe across requests.\n// The developer might've just attempted to fix the warning so we should warn again if it still happens.\nconst flushCurrentErrorIfNew = cache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- cache key\n  (key: unknown) => {\n    try {\n      logErrorOrWarn(errorRef.current)\n    } finally {\n      errorRef.current = null\n    }\n  }\n)\n\n/**\n * Creates a function that logs an error message that is deduped by the userland\n * callsite.\n * This requires no indirection between the call of this function and the userland\n * callsite i.e. there's only a single library frame above this.\n * Do not use on the Client where sourcemaps and ignore listing might be enabled.\n * Only use that for warnings need a fix independent of the callstack.\n *\n * @param getMessage\n * @returns\n */\nexport function createDedupedByCallsiteServerErrorLoggerDev<Args extends any[]>(\n  getMessage: (...args: Args) => Error\n) {\n  return function logDedupedError(...args: Args) {\n    const message = getMessage(...args)\n\n    if (process.env.NODE_ENV !== 'production') {\n      const callStackFrames = new Error().stack?.split('\\n')\n      if (callStackFrames === undefined || callStackFrames.length < 4) {\n        logErrorOrWarn(message)\n      } else {\n        // Error:\n        //   logDedupedError\n        //   asyncApiBeingAccessedSynchronously\n        //   <userland callsite>\n        // TODO: This breaks if sourcemaps with ignore lists are enabled.\n        const key = callStackFrames[4]\n        errorRef.current = message\n        flushCurrentErrorIfNew(key)\n      }\n    } else {\n      logErrorOrWarn(message)\n    }\n  }\n}\n","import type { AfterTaskAsyncStorage } from './after-task-async-storage.external'\nimport { createAsyncLocalStorage } from './async-local-storage'\n\nexport const afterTaskAsyncStorageInstance: AfterTaskAsyncStorage =\n  createAsyncLocalStorage()\n","import type { AsyncLocalStorage } from 'async_hooks'\n\n// Share the instance module in the next-shared layer\nimport { afterTaskAsyncStorageInstance as afterTaskAsyncStorage } from './after-task-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\nimport type { WorkUnitStore } from './work-unit-async-storage.external'\n\nexport interface AfterTaskStore {\n  /** The phase in which the topmost `after` was called.\n   *\n   * NOTE: Can be undefined when running `generateStaticParams`,\n   * where we only have a `workStore`, no `workUnitStore`.\n   */\n  readonly rootTaskSpawnPhase: WorkUnitStore['phase'] | undefined\n}\n\nexport type AfterTaskAsyncStorage = AsyncLocalStorage<AfterTaskStore>\n\nexport { afterTaskAsyncStorage }\n","import { StaticGenBailoutError } from '../../client/components/static-generation-bailout'\nimport { afterTaskAsyncStorage } from '../app-render/after-task-async-storage.external'\nimport type { WorkStore } from '../app-render/work-async-storage.external'\n\nexport function throwWithStaticGenerationBailoutError(\n  route: string,\n  expression: string\n): never {\n  throw new StaticGenBailoutError(\n    `Route ${route} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n  )\n}\n\nexport function throwWithStaticGenerationBailoutErrorWithDynamicError(\n  route: string,\n  expression: string\n): never {\n  throw new StaticGenBailoutError(\n    `Route ${route} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n  )\n}\n\nexport function throwForSearchParamsAccessInUseCache(\n  workStore: WorkStore,\n  constructorOpt: Function\n): never {\n  const error = new Error(\n    `Route ${workStore.route} used \"searchParams\" inside \"use cache\". Accessing dynamic request data inside a cache scope is not supported. If you need some search params inside a cached function await \"searchParams\" outside of the cached function and pass only the required search params as arguments to the cached function. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`\n  )\n\n  Error.captureStackTrace(error, constructorOpt)\n  workStore.invalidDynamicUsageError ??= error\n\n  throw error\n}\n\nexport function isRequestAPICallableInsideAfter() {\n  const afterTaskStore = afterTaskAsyncStorage.getStore()\n  return afterTaskStore?.rootTaskSpawnPhase === 'action'\n}\n","import type { WorkStore } from '../app-render/work-async-storage.external'\n\nimport { ReflectAdapter } from '../web/spec-extension/adapters/reflect'\nimport {\n  throwToInterruptStaticGeneration,\n  postponeWithTracking,\n  trackDynamicDataInDynamicRender,\n  annotateDynamicAccess,\n  trackSynchronousRequestDataAccessInDev,\n  delayUntilRuntimeStage,\n} from '../app-render/dynamic-rendering'\n\nimport {\n  workUnitAsyncStorage,\n  type PrerenderStoreLegacy,\n  type PrerenderStorePPR,\n  type PrerenderStoreModern,\n  type PrerenderStoreModernRuntime,\n  type StaticPrerenderStore,\n  throwInvariantForMissingStore,\n} from '../app-render/work-unit-async-storage.external'\nimport { InvariantError } from '../../shared/lib/invariant-error'\nimport {\n  makeDevtoolsIOAwarePromise,\n  makeHangingPromise,\n} from '../dynamic-rendering-utils'\nimport { createDedupedByCallsiteServerErrorLoggerDev } from '../create-deduped-by-callsite-server-error-logger'\nimport {\n  describeStringPropertyAccess,\n  describeHasCheckingStringProperty,\n  wellKnownProperties,\n} from '../../shared/lib/utils/reflect-utils'\nimport {\n  throwWithStaticGenerationBailoutErrorWithDynamicError,\n  throwForSearchParamsAccessInUseCache,\n} from './utils'\n\nexport type SearchParams = { [key: string]: string | string[] | undefined }\n\n/**\n * In this version of Next.js the `params` prop passed to Layouts, Pages, and other Segments is a Promise.\n * However to facilitate migration to this new Promise type you can currently still access params directly on the Promise instance passed to these Segments.\n * The `UnsafeUnwrappedSearchParams` type is available if you need to temporarily access the underlying params without first awaiting or `use`ing the Promise.\n *\n * In a future version of Next.js the `params` prop will be a plain Promise and this type will be removed.\n *\n * Typically instances of `params` can be updated automatically to be treated as a Promise by a codemod published alongside this Next.js version however if you\n * have not yet run the codemod of the codemod cannot detect certain instances of `params` usage you should first try to refactor your code to await `params`.\n *\n * If refactoring is not possible but you still want to be able to access params directly without typescript errors you can cast the params Promise to this type\n *\n * ```tsx\n * type Props = { searchParams: Promise<{ foo: string }> }\n *\n * export default async function Page(props: Props) {\n *  const { searchParams } = (props.searchParams as unknown as UnsafeUnwrappedSearchParams<typeof props.searchParams>)\n *  return ...\n * }\n * ```\n *\n * This type is marked deprecated to help identify it as target for refactoring away.\n *\n * @deprecated\n */\nexport type UnsafeUnwrappedSearchParams<P> =\n  P extends Promise<infer U> ? Omit<U, 'then' | 'status' | 'value'> : never\n\nexport function createSearchParamsFromClient(\n  underlyingSearchParams: SearchParams,\n  workStore: WorkStore\n): Promise<SearchParams> {\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n        return createStaticPrerenderSearchParams(workStore, workUnitStore)\n      case 'prerender-runtime':\n        throw new InvariantError(\n          'createSearchParamsFromClient should not be called in a runtime prerender.'\n        )\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n        throw new InvariantError(\n          'createSearchParamsFromClient should not be called in cache contexts.'\n        )\n      case 'request':\n        return createRenderSearchParams(underlyingSearchParams, workStore)\n      default:\n        workUnitStore satisfies never\n    }\n  }\n  throwInvariantForMissingStore()\n}\n\n// generateMetadata always runs in RSC context so it is equivalent to a Server Page Component\nexport const createServerSearchParamsForMetadata =\n  createServerSearchParamsForServerPage\n\nexport function createServerSearchParamsForServerPage(\n  underlyingSearchParams: SearchParams,\n  workStore: WorkStore\n): Promise<SearchParams> {\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n        return createStaticPrerenderSearchParams(workStore, workUnitStore)\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n        throw new InvariantError(\n          'createServerSearchParamsForServerPage should not be called in cache contexts.'\n        )\n      case 'prerender-runtime':\n        return createRuntimePrerenderSearchParams(\n          underlyingSearchParams,\n          workUnitStore\n        )\n      case 'request':\n        return createRenderSearchParams(underlyingSearchParams, workStore)\n      default:\n        workUnitStore satisfies never\n    }\n  }\n  throwInvariantForMissingStore()\n}\n\nexport function createPrerenderSearchParamsForClientPage(\n  workStore: WorkStore\n): Promise<SearchParams> {\n  if (workStore.forceStatic) {\n    // When using forceStatic we override all other logic and always just return an empty\n    // dictionary object.\n    return Promise.resolve({})\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'prerender':\n      case 'prerender-client':\n        // We're prerendering in a mode that aborts (cacheComponents) and should stall\n        // the promise to ensure the RSC side is considered dynamic\n        return makeHangingPromise(\n          workUnitStore.renderSignal,\n          workStore.route,\n          '`searchParams`'\n        )\n      case 'prerender-runtime':\n        throw new InvariantError(\n          'createPrerenderSearchParamsForClientPage should not be called in a runtime prerender.'\n        )\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n        throw new InvariantError(\n          'createPrerenderSearchParamsForClientPage should not be called in cache contexts.'\n        )\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n      case 'request':\n        return Promise.resolve({})\n      default:\n        workUnitStore satisfies never\n    }\n  }\n  throwInvariantForMissingStore()\n}\n\nfunction createStaticPrerenderSearchParams(\n  workStore: WorkStore,\n  prerenderStore: StaticPrerenderStore\n): Promise<SearchParams> {\n  if (workStore.forceStatic) {\n    // When using forceStatic we override all other logic and always just return an empty\n    // dictionary object.\n    return Promise.resolve({})\n  }\n\n  switch (prerenderStore.type) {\n    case 'prerender':\n    case 'prerender-client':\n      // We are in a cacheComponents (PPR or otherwise) prerender\n      return makeHangingSearchParams(workStore, prerenderStore)\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n      // We are in a legacy static generation and need to interrupt the\n      // prerender when search params are accessed.\n      return makeErroringExoticSearchParams(workStore, prerenderStore)\n    default:\n      return prerenderStore satisfies never\n  }\n}\n\nfunction createRuntimePrerenderSearchParams(\n  underlyingSearchParams: SearchParams,\n  workUnitStore: PrerenderStoreModernRuntime\n): Promise<SearchParams> {\n  return delayUntilRuntimeStage(\n    workUnitStore,\n    process.env.__NEXT_CACHE_COMPONENTS\n      ? makeUntrackedSearchParams(underlyingSearchParams)\n      : makeUntrackedExoticSearchParams(underlyingSearchParams)\n  )\n}\n\nfunction createRenderSearchParams(\n  underlyingSearchParams: SearchParams,\n  workStore: WorkStore\n): Promise<SearchParams> {\n  if (workStore.forceStatic) {\n    // When using forceStatic we override all other logic and always just return an empty\n    // dictionary object.\n    return Promise.resolve({})\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      // Semantically we only need the dev tracking when running in `next dev`\n      // but since you would never use next dev with production NODE_ENV we use this\n      // as a proxy so we can statically exclude this code from production builds.\n      if (process.env.__NEXT_CACHE_COMPONENTS) {\n        return makeUntrackedSearchParamsWithDevWarnings(\n          underlyingSearchParams,\n          workStore\n        )\n      }\n\n      return makeDynamicallyTrackedExoticSearchParamsWithDevWarnings(\n        underlyingSearchParams,\n        workStore\n      )\n    } else {\n      if (process.env.__NEXT_CACHE_COMPONENTS) {\n        return makeUntrackedSearchParams(underlyingSearchParams)\n      }\n\n      return makeUntrackedExoticSearchParams(underlyingSearchParams)\n    }\n  }\n}\n\ninterface CacheLifetime {}\nconst CachedSearchParams = new WeakMap<CacheLifetime, Promise<SearchParams>>()\n\nconst CachedSearchParamsForUseCache = new WeakMap<\n  CacheLifetime,\n  Promise<SearchParams>\n>()\n\nfunction makeHangingSearchParams(\n  workStore: WorkStore,\n  prerenderStore: PrerenderStoreModern\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(prerenderStore)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  const promise = makeHangingPromise<SearchParams>(\n    prerenderStore.renderSignal,\n    workStore.route,\n    '`searchParams`'\n  )\n\n  const proxiedPromise = new Proxy(promise, {\n    get(target, prop, receiver) {\n      if (Object.hasOwn(promise, prop)) {\n        // The promise has this property directly. we must return it.\n        // We know it isn't a dynamic access because it can only be something\n        // that was previously written to the promise and thus not an underlying searchParam value\n        return ReflectAdapter.get(target, prop, receiver)\n      }\n\n      switch (prop) {\n        case 'then': {\n          const expression =\n            '`await searchParams`, `searchParams.then`, or similar'\n          annotateDynamicAccess(expression, prerenderStore)\n          return ReflectAdapter.get(target, prop, receiver)\n        }\n        case 'status': {\n          const expression =\n            '`use(searchParams)`, `searchParams.status`, or similar'\n          annotateDynamicAccess(expression, prerenderStore)\n          return ReflectAdapter.get(target, prop, receiver)\n        }\n\n        default: {\n          return ReflectAdapter.get(target, prop, receiver)\n        }\n      }\n    },\n  })\n\n  CachedSearchParams.set(prerenderStore, proxiedPromise)\n  return proxiedPromise\n}\n\nfunction makeErroringExoticSearchParams(\n  workStore: WorkStore,\n  prerenderStore: PrerenderStoreLegacy | PrerenderStorePPR\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(workStore)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  const underlyingSearchParams = {}\n  // For search params we don't construct a ReactPromise because we want to interrupt\n  // rendering on any property access that was not set from outside and so we only want\n  // to have properties like value and status if React sets them.\n  const promise = Promise.resolve(underlyingSearchParams)\n\n  const proxiedPromise = new Proxy(promise, {\n    get(target, prop, receiver) {\n      if (Object.hasOwn(promise, prop)) {\n        // The promise has this property directly. we must return it.\n        // We know it isn't a dynamic access because it can only be something\n        // that was previously written to the promise and thus not an underlying searchParam value\n        return ReflectAdapter.get(target, prop, receiver)\n      }\n\n      switch (prop) {\n        case 'then': {\n          const expression =\n            '`await searchParams`, `searchParams.then`, or similar'\n          if (workStore.dynamicShouldError) {\n            throwWithStaticGenerationBailoutErrorWithDynamicError(\n              workStore.route,\n              expression\n            )\n          } else if (prerenderStore.type === 'prerender-ppr') {\n            // PPR Prerender (no cacheComponents)\n            postponeWithTracking(\n              workStore.route,\n              expression,\n              prerenderStore.dynamicTracking\n            )\n          } else {\n            // Legacy Prerender\n            throwToInterruptStaticGeneration(\n              expression,\n              workStore,\n              prerenderStore\n            )\n          }\n          return\n        }\n        case 'status': {\n          const expression =\n            '`use(searchParams)`, `searchParams.status`, or similar'\n          if (workStore.dynamicShouldError) {\n            throwWithStaticGenerationBailoutErrorWithDynamicError(\n              workStore.route,\n              expression\n            )\n          } else if (prerenderStore.type === 'prerender-ppr') {\n            // PPR Prerender (no cacheComponents)\n            postponeWithTracking(\n              workStore.route,\n              expression,\n              prerenderStore.dynamicTracking\n            )\n          } else {\n            // Legacy Prerender\n            throwToInterruptStaticGeneration(\n              expression,\n              workStore,\n              prerenderStore\n            )\n          }\n          return\n        }\n        default: {\n          if (typeof prop === 'string' && !wellKnownProperties.has(prop)) {\n            const expression = describeStringPropertyAccess(\n              'searchParams',\n              prop\n            )\n            if (workStore.dynamicShouldError) {\n              throwWithStaticGenerationBailoutErrorWithDynamicError(\n                workStore.route,\n                expression\n              )\n            } else if (prerenderStore.type === 'prerender-ppr') {\n              // PPR Prerender (no cacheComponents)\n              postponeWithTracking(\n                workStore.route,\n                expression,\n                prerenderStore.dynamicTracking\n              )\n            } else {\n              // Legacy Prerender\n              throwToInterruptStaticGeneration(\n                expression,\n                workStore,\n                prerenderStore\n              )\n            }\n          }\n          return ReflectAdapter.get(target, prop, receiver)\n        }\n      }\n    },\n    has(target, prop) {\n      // We don't expect key checking to be used except for testing the existence of\n      // searchParams so we make all has tests trigger dynamic. this means that `promise.then`\n      // can resolve to the then function on the Promise prototype but 'then' in promise will assume\n      // you are testing whether the searchParams has a 'then' property.\n      if (typeof prop === 'string') {\n        const expression = describeHasCheckingStringProperty(\n          'searchParams',\n          prop\n        )\n        if (workStore.dynamicShouldError) {\n          throwWithStaticGenerationBailoutErrorWithDynamicError(\n            workStore.route,\n            expression\n          )\n        } else if (prerenderStore.type === 'prerender-ppr') {\n          // PPR Prerender (no cacheComponents)\n          postponeWithTracking(\n            workStore.route,\n            expression,\n            prerenderStore.dynamicTracking\n          )\n        } else {\n          // Legacy Prerender\n          throwToInterruptStaticGeneration(\n            expression,\n            workStore,\n            prerenderStore\n          )\n        }\n        return false\n      }\n      return ReflectAdapter.has(target, prop)\n    },\n    ownKeys() {\n      const expression =\n        '`{...searchParams}`, `Object.keys(searchParams)`, or similar'\n      if (workStore.dynamicShouldError) {\n        throwWithStaticGenerationBailoutErrorWithDynamicError(\n          workStore.route,\n          expression\n        )\n      } else if (prerenderStore.type === 'prerender-ppr') {\n        // PPR Prerender (no cacheComponents)\n        postponeWithTracking(\n          workStore.route,\n          expression,\n          prerenderStore.dynamicTracking\n        )\n      } else {\n        // Legacy Prerender\n        throwToInterruptStaticGeneration(expression, workStore, prerenderStore)\n      }\n    },\n  })\n\n  CachedSearchParams.set(workStore, proxiedPromise)\n  return proxiedPromise\n}\n\n/**\n * This is a variation of `makeErroringExoticSearchParams` that always throws an\n * error on access, because accessing searchParams inside of `\"use cache\"` is\n * not allowed.\n */\nexport function makeErroringSearchParamsForUseCache(\n  workStore: WorkStore\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParamsForUseCache.get(workStore)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  const promise = Promise.resolve({})\n\n  const proxiedPromise = new Proxy(promise, {\n    get: function get(target, prop, receiver) {\n      if (Object.hasOwn(promise, prop)) {\n        // The promise has this property directly. we must return it. We know it\n        // isn't a dynamic access because it can only be something that was\n        // previously written to the promise and thus not an underlying\n        // searchParam value\n        return ReflectAdapter.get(target, prop, receiver)\n      }\n\n      if (\n        typeof prop === 'string' &&\n        (prop === 'then' || !wellKnownProperties.has(prop))\n      ) {\n        throwForSearchParamsAccessInUseCache(workStore, get)\n      }\n\n      return ReflectAdapter.get(target, prop, receiver)\n    },\n    has: function has(target, prop) {\n      // We don't expect key checking to be used except for testing the existence of\n      // searchParams so we make all has tests throw an error. this means that `promise.then`\n      // can resolve to the then function on the Promise prototype but 'then' in promise will assume\n      // you are testing whether the searchParams has a 'then' property.\n      if (\n        typeof prop === 'string' &&\n        (prop === 'then' || !wellKnownProperties.has(prop))\n      ) {\n        throwForSearchParamsAccessInUseCache(workStore, has)\n      }\n\n      return ReflectAdapter.has(target, prop)\n    },\n    ownKeys: function ownKeys() {\n      throwForSearchParamsAccessInUseCache(workStore, ownKeys)\n    },\n  })\n\n  CachedSearchParamsForUseCache.set(workStore, proxiedPromise)\n  return proxiedPromise\n}\n\nfunction makeUntrackedExoticSearchParams(\n  underlyingSearchParams: SearchParams\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  // We don't use makeResolvedReactPromise here because searchParams\n  // supports copying with spread and we don't want to unnecessarily\n  // instrument the promise with spreadable properties of ReactPromise.\n  const promise = Promise.resolve(underlyingSearchParams)\n  CachedSearchParams.set(underlyingSearchParams, promise)\n\n  Object.keys(underlyingSearchParams).forEach((prop) => {\n    if (!wellKnownProperties.has(prop)) {\n      Object.defineProperty(promise, prop, {\n        get() {\n          const workUnitStore = workUnitAsyncStorage.getStore()\n          if (workUnitStore) {\n            trackDynamicDataInDynamicRender(workUnitStore)\n          }\n          return underlyingSearchParams[prop]\n        },\n        set(value) {\n          Object.defineProperty(promise, prop, {\n            value,\n            writable: true,\n            enumerable: true,\n          })\n        },\n        enumerable: true,\n        configurable: true,\n      })\n    }\n  })\n\n  return promise\n}\n\nfunction makeUntrackedSearchParams(\n  underlyingSearchParams: SearchParams\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  const promise = Promise.resolve(underlyingSearchParams)\n  CachedSearchParams.set(underlyingSearchParams, promise)\n\n  return promise\n}\n\nfunction makeDynamicallyTrackedExoticSearchParamsWithDevWarnings(\n  underlyingSearchParams: SearchParams,\n  store: WorkStore\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  const proxiedProperties = new Set<string>()\n  const unproxiedProperties: Array<string> = []\n\n  // We have an unfortunate sequence of events that requires this initialization logic. We want to instrument the underlying\n  // searchParams object to detect if you are accessing values in dev. This is used for warnings and for things like the static prerender\n  // indicator. However when we pass this proxy to our Promise.resolve() below the VM checks if the resolved value is a promise by looking\n  // at the `.then` property. To our dynamic tracking logic this is indistinguishable from a `then` searchParam and so we would normally trigger\n  // dynamic tracking. However we know that this .then is not real dynamic access, it's just how thenables resolve in sequence. So we introduce\n  // this initialization concept so we omit the dynamic check until after we've constructed our resolved promise.\n  let promiseInitialized = false\n  const proxiedUnderlying = new Proxy(underlyingSearchParams, {\n    get(target, prop, receiver) {\n      if (typeof prop === 'string' && promiseInitialized) {\n        if (store.dynamicShouldError) {\n          const expression = describeStringPropertyAccess('searchParams', prop)\n          throwWithStaticGenerationBailoutErrorWithDynamicError(\n            store.route,\n            expression\n          )\n        }\n        const workUnitStore = workUnitAsyncStorage.getStore()\n        if (workUnitStore) {\n          trackDynamicDataInDynamicRender(workUnitStore)\n        }\n      }\n      return ReflectAdapter.get(target, prop, receiver)\n    },\n    has(target, prop) {\n      if (typeof prop === 'string') {\n        if (store.dynamicShouldError) {\n          const expression = describeHasCheckingStringProperty(\n            'searchParams',\n            prop\n          )\n          throwWithStaticGenerationBailoutErrorWithDynamicError(\n            store.route,\n            expression\n          )\n        }\n      }\n      return Reflect.has(target, prop)\n    },\n    ownKeys(target) {\n      if (store.dynamicShouldError) {\n        const expression =\n          '`{...searchParams}`, `Object.keys(searchParams)`, or similar'\n        throwWithStaticGenerationBailoutErrorWithDynamicError(\n          store.route,\n          expression\n        )\n      }\n      return Reflect.ownKeys(target)\n    },\n  })\n\n  // We don't use makeResolvedReactPromise here because searchParams\n  // supports copying with spread and we don't want to unnecessarily\n  // instrument the promise with spreadable properties of ReactPromise.\n  const promise = makeDevtoolsIOAwarePromise(underlyingSearchParams)\n  promise.then(() => {\n    promiseInitialized = true\n  })\n\n  Object.keys(underlyingSearchParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n      unproxiedProperties.push(prop)\n    } else {\n      proxiedProperties.add(prop)\n      Object.defineProperty(promise, prop, {\n        get() {\n          return proxiedUnderlying[prop]\n        },\n        set(newValue) {\n          Object.defineProperty(promise, prop, {\n            value: newValue,\n            writable: true,\n            enumerable: true,\n          })\n        },\n        enumerable: true,\n        configurable: true,\n      })\n    }\n  })\n\n  const proxiedPromise = new Proxy(promise, {\n    get(target, prop, receiver) {\n      if (prop === 'then' && store.dynamicShouldError) {\n        const expression = '`searchParams.then`'\n        throwWithStaticGenerationBailoutErrorWithDynamicError(\n          store.route,\n          expression\n        )\n      }\n      if (typeof prop === 'string') {\n        if (\n          !wellKnownProperties.has(prop) &&\n          (proxiedProperties.has(prop) ||\n            // We are accessing a property that doesn't exist on the promise nor\n            // the underlying searchParams.\n            Reflect.has(target, prop) === false)\n        ) {\n          const expression = describeStringPropertyAccess('searchParams', prop)\n          syncIODev(store.route, expression)\n        }\n      }\n      return ReflectAdapter.get(target, prop, receiver)\n    },\n    set(target, prop, value, receiver) {\n      if (typeof prop === 'string') {\n        proxiedProperties.delete(prop)\n      }\n      return Reflect.set(target, prop, value, receiver)\n    },\n    has(target, prop) {\n      if (typeof prop === 'string') {\n        if (\n          !wellKnownProperties.has(prop) &&\n          (proxiedProperties.has(prop) ||\n            // We are accessing a property that doesn't exist on the promise nor\n            // the underlying searchParams.\n            Reflect.has(target, prop) === false)\n        ) {\n          const expression = describeHasCheckingStringProperty(\n            'searchParams',\n            prop\n          )\n          syncIODev(store.route, expression)\n        }\n      }\n      return Reflect.has(target, prop)\n    },\n    ownKeys(target) {\n      const expression = '`Object.keys(searchParams)` or similar'\n      syncIODev(store.route, expression, unproxiedProperties)\n      return Reflect.ownKeys(target)\n    },\n  })\n\n  CachedSearchParams.set(underlyingSearchParams, proxiedPromise)\n  return proxiedPromise\n}\n\n// Similar to `makeDynamicallyTrackedExoticSearchParamsWithDevWarnings`, but\n// just logging the sync access without actually defining the search params on\n// the promise.\nfunction makeUntrackedSearchParamsWithDevWarnings(\n  underlyingSearchParams: SearchParams,\n  store: WorkStore\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  const proxiedProperties = new Set<string>()\n  const unproxiedProperties: Array<string> = []\n  const promise = makeDevtoolsIOAwarePromise(underlyingSearchParams)\n\n  Object.keys(underlyingSearchParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n      unproxiedProperties.push(prop)\n    } else {\n      proxiedProperties.add(prop)\n    }\n  })\n\n  const proxiedPromise = new Proxy(promise, {\n    get(target, prop, receiver) {\n      if (typeof prop === 'string') {\n        if (\n          !wellKnownProperties.has(prop) &&\n          (proxiedProperties.has(prop) ||\n            // We are accessing a property that doesn't exist on the promise nor\n            // the underlying searchParams.\n            Reflect.has(target, prop) === false)\n        ) {\n          const expression = describeStringPropertyAccess('searchParams', prop)\n          warnForSyncAccess(store.route, expression)\n        }\n      }\n      return ReflectAdapter.get(target, prop, receiver)\n    },\n    set(target, prop, value, receiver) {\n      if (typeof prop === 'string') {\n        proxiedProperties.delete(prop)\n      }\n      return Reflect.set(target, prop, value, receiver)\n    },\n    has(target, prop) {\n      if (typeof prop === 'string') {\n        if (\n          !wellKnownProperties.has(prop) &&\n          (proxiedProperties.has(prop) ||\n            // We are accessing a property that doesn't exist on the promise nor\n            // the underlying searchParams.\n            Reflect.has(target, prop) === false)\n        ) {\n          const expression = describeHasCheckingStringProperty(\n            'searchParams',\n            prop\n          )\n          warnForSyncAccess(store.route, expression)\n        }\n      }\n      return Reflect.has(target, prop)\n    },\n    ownKeys(target) {\n      const expression = '`Object.keys(searchParams)` or similar'\n      warnForIncompleteEnumeration(store.route, expression, unproxiedProperties)\n      return Reflect.ownKeys(target)\n    },\n  })\n\n  CachedSearchParams.set(underlyingSearchParams, proxiedPromise)\n  return proxiedPromise\n}\n\nfunction syncIODev(\n  route: string | undefined,\n  expression: string,\n  missingProperties?: Array<string>\n) {\n  // In all cases we warn normally\n  if (missingProperties && missingProperties.length > 0) {\n    warnForIncompleteEnumeration(route, expression, missingProperties)\n  } else {\n    warnForSyncAccess(route, expression)\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'request':\n        if (workUnitStore.prerenderPhase === true) {\n          // When we're rendering dynamically in dev, we need to advance out of\n          // the Prerender environment when we read Request data synchronously.\n          trackSynchronousRequestDataAccessInDev(workUnitStore)\n        }\n        break\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-runtime':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n}\n\nconst warnForSyncAccess = createDedupedByCallsiteServerErrorLoggerDev(\n  createSearchAccessError\n)\n\nconst warnForIncompleteEnumeration =\n  createDedupedByCallsiteServerErrorLoggerDev(createIncompleteEnumerationError)\n\nfunction createSearchAccessError(\n  route: string | undefined,\n  expression: string\n) {\n  const prefix = route ? `Route \"${route}\" ` : 'This route '\n  return new Error(\n    `${prefix}used ${expression}. ` +\n      `\\`searchParams\\` should be awaited before using its properties. ` +\n      `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`\n  )\n}\n\nfunction createIncompleteEnumerationError(\n  route: string | undefined,\n  expression: string,\n  missingProperties: Array<string>\n) {\n  const prefix = route ? `Route \"${route}\" ` : 'This route '\n  return new Error(\n    `${prefix}used ${expression}. ` +\n      `\\`searchParams\\` should be awaited before using its properties. ` +\n      `The following properties were not available through enumeration ` +\n      `because they conflict with builtin or well-known property names: ` +\n      `${describeListOfPropertyNames(missingProperties)}. ` +\n      `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`\n  )\n}\n\nfunction describeListOfPropertyNames(properties: Array<string>) {\n  switch (properties.length) {\n    case 0:\n      throw new InvariantError(\n        'Expected describeListOfPropertyNames to be called with a non-empty list of strings.'\n      )\n    case 1:\n      return `\\`${properties[0]}\\``\n    case 2:\n      return `\\`${properties[0]}\\` and \\`${properties[1]}\\``\n    default: {\n      let description = ''\n      for (let i = 0; i < properties.length - 1; i++) {\n        description += `\\`${properties[i]}\\`, `\n      }\n      description += `, and \\`${properties[properties.length - 1]}\\``\n      return description\n    }\n  }\n}\n","import { createAsyncLocalStorage } from './async-local-storage'\nimport type { DynamicAccessStorage } from './dynamic-access-async-storage.external'\n\nexport const dynamicAccessAsyncStorageInstance: DynamicAccessStorage =\n  createAsyncLocalStorage()\n","import type { AsyncLocalStorage } from 'async_hooks'\n\n// Share the instance module in the next-shared layer\nimport { dynamicAccessAsyncStorageInstance } from './dynamic-access-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\n\nexport interface DynamicAccessAsyncStore {\n  readonly abortController: AbortController\n}\n\nexport type DynamicAccessStorage = AsyncLocalStorage<DynamicAccessAsyncStore>\nexport { dynamicAccessAsyncStorageInstance as dynamicAccessAsyncStorage }\n","import {\n  workAsyncStorage,\n  type WorkStore,\n} from '../app-render/work-async-storage.external'\nimport type { FallbackRouteParams } from './fallback-params'\n\nimport { ReflectAdapter } from '../web/spec-extension/adapters/reflect'\nimport {\n  throwToInterruptStaticGeneration,\n  postponeWithTracking,\n  trackSynchronousRequestDataAccessInDev,\n  delayUntilRuntimeStage,\n} from '../app-render/dynamic-rendering'\n\nimport {\n  workUnitAsyncStorage,\n  type PrerenderStorePPR,\n  type PrerenderStoreLegacy,\n  type StaticPrerenderStoreModern,\n  type StaticPrerenderStore,\n  throwInvariantForMissingStore,\n  type PrerenderStoreModernRuntime,\n} from '../app-render/work-unit-async-storage.external'\nimport { InvariantError } from '../../shared/lib/invariant-error'\nimport {\n  describeStringPropertyAccess,\n  wellKnownProperties,\n} from '../../shared/lib/utils/reflect-utils'\nimport {\n  makeDevtoolsIOAwarePromise,\n  makeHangingPromise,\n} from '../dynamic-rendering-utils'\nimport { createDedupedByCallsiteServerErrorLoggerDev } from '../create-deduped-by-callsite-server-error-logger'\nimport { dynamicAccessAsyncStorage } from '../app-render/dynamic-access-async-storage.external'\n\nexport type ParamValue = string | Array<string> | undefined\nexport type Params = Record<string, ParamValue>\n\n/**\n * In this version of Next.js the `params` prop passed to Layouts, Pages, and other Segments is a Promise.\n * However to facilitate migration to this new Promise type you can currently still access params directly on the Promise instance passed to these Segments.\n * The `UnsafeUnwrappedParams` type is available if you need to temporarily access the underlying params without first awaiting or `use`ing the Promise.\n *\n * In a future version of Next.js the `params` prop will be a plain Promise and this type will be removed.\n *\n * Typically instances of `params` can be updated automatically to be treated as a Promise by a codemod published alongside this Next.js version however if you\n * have not yet run the codemod of the codemod cannot detect certain instances of `params` usage you should first try to refactor your code to await `params`.\n *\n * If refactoring is not possible but you still want to be able to access params directly without typescript errors you can cast the params Promise to this type\n *\n * ```tsx\n * type Props = { params: Promise<{ id: string }>}\n *\n * export default async function Layout(props: Props) {\n *  const directParams = (props.params as unknown as UnsafeUnwrappedParams<typeof props.params>)\n *  return ...\n * }\n * ```\n *\n * This type is marked deprecated to help identify it as target for refactoring away.\n *\n * @deprecated\n */\nexport type UnsafeUnwrappedParams<P> =\n  P extends Promise<infer U> ? Omit<U, 'then' | 'status' | 'value'> : never\n\nexport function createParamsFromClient(\n  underlyingParams: Params,\n  workStore: WorkStore\n): Promise<Params> {\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n        return createStaticPrerenderParams(\n          underlyingParams,\n          workStore,\n          workUnitStore\n        )\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n        throw new InvariantError(\n          'createParamsFromClient should not be called in cache contexts.'\n        )\n      case 'prerender-runtime':\n        throw new InvariantError(\n          'createParamsFromClient should not be called in a runtime prerender.'\n        )\n      case 'request':\n        if (process.env.NODE_ENV === 'development') {\n          // Semantically we only need the dev tracking when running in `next dev`\n          // but since you would never use next dev with production NODE_ENV we use this\n          // as a proxy so we can statically exclude this code from production builds.\n          const devFallbackParams = workUnitStore.devFallbackParams\n          return createRenderParamsInDev(\n            underlyingParams,\n            devFallbackParams,\n            workStore\n          )\n        } else {\n          return createRenderParamsInProd(underlyingParams)\n        }\n      default:\n        workUnitStore satisfies never\n    }\n  }\n  throwInvariantForMissingStore()\n}\n\n// generateMetadata always runs in RSC context so it is equivalent to a Server Page Component\nexport type CreateServerParamsForMetadata = typeof createServerParamsForMetadata\nexport const createServerParamsForMetadata = createServerParamsForServerSegment\n\n// routes always runs in RSC context so it is equivalent to a Server Page Component\nexport function createServerParamsForRoute(\n  underlyingParams: Params,\n  workStore: WorkStore\n): Promise<Params> {\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n        return createStaticPrerenderParams(\n          underlyingParams,\n          workStore,\n          workUnitStore\n        )\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n        throw new InvariantError(\n          'createServerParamsForRoute should not be called in cache contexts.'\n        )\n      case 'prerender-runtime':\n        return createRuntimePrerenderParams(underlyingParams, workUnitStore)\n      case 'request':\n        if (process.env.NODE_ENV === 'development') {\n          // Semantically we only need the dev tracking when running in `next dev`\n          // but since you would never use next dev with production NODE_ENV we use this\n          // as a proxy so we can statically exclude this code from production builds.\n          const devFallbackParams = workUnitStore.devFallbackParams\n          return createRenderParamsInDev(\n            underlyingParams,\n            devFallbackParams,\n            workStore\n          )\n        } else {\n          return createRenderParamsInProd(underlyingParams)\n        }\n      default:\n        workUnitStore satisfies never\n    }\n  }\n  throwInvariantForMissingStore()\n}\n\nexport function createServerParamsForServerSegment(\n  underlyingParams: Params,\n  workStore: WorkStore\n): Promise<Params> {\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n        return createStaticPrerenderParams(\n          underlyingParams,\n          workStore,\n          workUnitStore\n        )\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n        throw new InvariantError(\n          'createServerParamsForServerSegment should not be called in cache contexts.'\n        )\n      case 'prerender-runtime':\n        return createRuntimePrerenderParams(underlyingParams, workUnitStore)\n      case 'request':\n        if (process.env.NODE_ENV === 'development') {\n          // Semantically we only need the dev tracking when running in `next dev`\n          // but since you would never use next dev with production NODE_ENV we use this\n          // as a proxy so we can statically exclude this code from production builds.\n          const devFallbackParams = workUnitStore.devFallbackParams\n          return createRenderParamsInDev(\n            underlyingParams,\n            devFallbackParams,\n            workStore\n          )\n        } else {\n          return createRenderParamsInProd(underlyingParams)\n        }\n      default:\n        workUnitStore satisfies never\n    }\n  }\n  throwInvariantForMissingStore()\n}\n\nexport function createPrerenderParamsForClientSegment(\n  underlyingParams: Params\n): Promise<Params> {\n  const workStore = workAsyncStorage.getStore()\n  if (!workStore) {\n    throw new InvariantError(\n      'Missing workStore in createPrerenderParamsForClientSegment'\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'prerender':\n      case 'prerender-client':\n        const fallbackParams = workUnitStore.fallbackRouteParams\n        if (fallbackParams) {\n          for (let key in underlyingParams) {\n            if (fallbackParams.has(key)) {\n              // This params object has one or more fallback params, so we need\n              // to consider the awaiting of this params object \"dynamic\". Since\n              // we are in cacheComponents mode we encode this as a promise that never\n              // resolves.\n              return makeHangingPromise(\n                workUnitStore.renderSignal,\n                workStore.route,\n                '`params`'\n              )\n            }\n          }\n        }\n        break\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n        throw new InvariantError(\n          'createPrerenderParamsForClientSegment should not be called in cache contexts.'\n        )\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n      case 'prerender-runtime':\n      case 'request':\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n  // We're prerendering in a mode that does not abort. We resolve the promise without\n  // any tracking because we're just transporting a value from server to client where the tracking\n  // will be applied.\n  return Promise.resolve(underlyingParams)\n}\n\nfunction createStaticPrerenderParams(\n  underlyingParams: Params,\n  workStore: WorkStore,\n  prerenderStore: StaticPrerenderStore\n): Promise<Params> {\n  switch (prerenderStore.type) {\n    case 'prerender':\n    case 'prerender-client': {\n      const fallbackParams = prerenderStore.fallbackRouteParams\n      if (fallbackParams) {\n        for (const key in underlyingParams) {\n          if (fallbackParams.has(key)) {\n            // This params object has one or more fallback params, so we need\n            // to consider the awaiting of this params object \"dynamic\". Since\n            // we are in cacheComponents mode we encode this as a promise that never\n            // resolves.\n            return makeHangingParams(\n              underlyingParams,\n              workStore,\n              prerenderStore\n            )\n          }\n        }\n      }\n      break\n    }\n    case 'prerender-ppr': {\n      const fallbackParams = prerenderStore.fallbackRouteParams\n      if (fallbackParams) {\n        for (const key in underlyingParams) {\n          if (fallbackParams.has(key)) {\n            return makeErroringExoticParams(\n              underlyingParams,\n              fallbackParams,\n              workStore,\n              prerenderStore\n            )\n          }\n        }\n      }\n      break\n    }\n    case 'prerender-legacy':\n      break\n    default:\n      prerenderStore satisfies never\n  }\n\n  if (process.env.__NEXT_CACHE_COMPONENTS) {\n    return makeUntrackedParams(underlyingParams)\n  } else {\n    return makeUntrackedExoticParams(underlyingParams)\n  }\n}\n\nfunction createRuntimePrerenderParams(\n  underlyingParams: Params,\n  workUnitStore: PrerenderStoreModernRuntime\n): Promise<Params> {\n  return delayUntilRuntimeStage(\n    workUnitStore,\n    process.env.__NEXT_CACHE_COMPONENTS\n      ? makeUntrackedParams(underlyingParams)\n      : makeUntrackedExoticParams(underlyingParams)\n  )\n}\n\nfunction createRenderParamsInProd(underlyingParams: Params): Promise<Params> {\n  if (process.env.__NEXT_CACHE_COMPONENTS) {\n    return makeUntrackedParams(underlyingParams)\n  }\n\n  return makeUntrackedExoticParams(underlyingParams)\n}\n\nfunction createRenderParamsInDev(\n  underlyingParams: Params,\n  devFallbackParams: FallbackRouteParams | null | undefined,\n  workStore: WorkStore\n): Promise<Params> {\n  let hasFallbackParams = false\n  if (devFallbackParams) {\n    for (let key in underlyingParams) {\n      if (devFallbackParams.has(key)) {\n        hasFallbackParams = true\n        break\n      }\n    }\n  }\n  if (process.env.__NEXT_CACHE_COMPONENTS) {\n    return makeDynamicallyTrackedParamsWithDevWarnings(\n      underlyingParams,\n      hasFallbackParams,\n      workStore\n    )\n  }\n\n  return makeDynamicallyTrackedExoticParamsWithDevWarnings(\n    underlyingParams,\n    hasFallbackParams,\n    workStore\n  )\n}\n\ninterface CacheLifetime {}\nconst CachedParams = new WeakMap<CacheLifetime, Promise<Params>>()\n\nconst fallbackParamsProxyHandler: ProxyHandler<Promise<Params>> = {\n  get: function get(target, prop, receiver) {\n    if (prop === 'then' || prop === 'catch' || prop === 'finally') {\n      const originalMethod = ReflectAdapter.get(target, prop, receiver)\n\n      return {\n        [prop]: (...args: unknown[]) => {\n          const store = dynamicAccessAsyncStorage.getStore()\n\n          if (store) {\n            store.abortController.abort(\n              new Error(`Accessed fallback \\`params\\` during prerendering.`)\n            )\n          }\n\n          return new Proxy(\n            originalMethod.apply(target, args),\n            fallbackParamsProxyHandler\n          )\n        },\n      }[prop]\n    }\n\n    return ReflectAdapter.get(target, prop, receiver)\n  },\n}\n\nfunction makeHangingParams(\n  underlyingParams: Params,\n  workStore: WorkStore,\n  prerenderStore: StaticPrerenderStoreModern\n): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  const promise = new Proxy(\n    makeHangingPromise<Params>(\n      prerenderStore.renderSignal,\n      workStore.route,\n      '`params`'\n    ),\n    fallbackParamsProxyHandler\n  )\n\n  CachedParams.set(underlyingParams, promise)\n\n  return promise\n}\n\nfunction makeErroringExoticParams(\n  underlyingParams: Params,\n  fallbackParams: FallbackRouteParams,\n  workStore: WorkStore,\n  prerenderStore: PrerenderStorePPR | PrerenderStoreLegacy\n): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  const augmentedUnderlying = { ...underlyingParams }\n\n  // We don't use makeResolvedReactPromise here because params\n  // supports copying with spread and we don't want to unnecessarily\n  // instrument the promise with spreadable properties of ReactPromise.\n  const promise = Promise.resolve(augmentedUnderlying)\n  CachedParams.set(underlyingParams, promise)\n\n  Object.keys(underlyingParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n    } else {\n      if (fallbackParams.has(prop)) {\n        Object.defineProperty(augmentedUnderlying, prop, {\n          get() {\n            const expression = describeStringPropertyAccess('params', prop)\n            // In most dynamic APIs we also throw if `dynamic = \"error\"` however\n            // for params is only dynamic when we're generating a fallback shell\n            // and even when `dynamic = \"error\"` we still support generating dynamic\n            // fallback shells\n            // TODO remove this comment when cacheComponents is the default since there\n            // will be no `dynamic = \"error\"`\n            if (prerenderStore.type === 'prerender-ppr') {\n              // PPR Prerender (no cacheComponents)\n              postponeWithTracking(\n                workStore.route,\n                expression,\n                prerenderStore.dynamicTracking\n              )\n            } else {\n              // Legacy Prerender\n              throwToInterruptStaticGeneration(\n                expression,\n                workStore,\n                prerenderStore\n              )\n            }\n          },\n          enumerable: true,\n        })\n        Object.defineProperty(promise, prop, {\n          get() {\n            const expression = describeStringPropertyAccess('params', prop)\n            // In most dynamic APIs we also throw if `dynamic = \"error\"` however\n            // for params is only dynamic when we're generating a fallback shell\n            // and even when `dynamic = \"error\"` we still support generating dynamic\n            // fallback shells\n            // TODO remove this comment when cacheComponents is the default since there\n            // will be no `dynamic = \"error\"`\n            if (prerenderStore.type === 'prerender-ppr') {\n              // PPR Prerender (no cacheComponents)\n              postponeWithTracking(\n                workStore.route,\n                expression,\n                prerenderStore.dynamicTracking\n              )\n            } else {\n              // Legacy Prerender\n              throwToInterruptStaticGeneration(\n                expression,\n                workStore,\n                prerenderStore\n              )\n            }\n          },\n          set(newValue) {\n            Object.defineProperty(promise, prop, {\n              value: newValue,\n              writable: true,\n              enumerable: true,\n            })\n          },\n          enumerable: true,\n          configurable: true,\n        })\n      } else {\n        ;(promise as any)[prop] = underlyingParams[prop]\n      }\n    }\n  })\n\n  return promise\n}\n\nfunction makeUntrackedExoticParams(underlyingParams: Params): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  // We don't use makeResolvedReactPromise here because params\n  // supports copying with spread and we don't want to unnecessarily\n  // instrument the promise with spreadable properties of ReactPromise.\n  const promise = Promise.resolve(underlyingParams)\n  CachedParams.set(underlyingParams, promise)\n\n  Object.keys(underlyingParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n    } else {\n      ;(promise as any)[prop] = underlyingParams[prop]\n    }\n  })\n\n  return promise\n}\n\nfunction makeUntrackedParams(underlyingParams: Params): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  const promise = Promise.resolve(underlyingParams)\n  CachedParams.set(underlyingParams, promise)\n\n  return promise\n}\n\nfunction makeDynamicallyTrackedExoticParamsWithDevWarnings(\n  underlyingParams: Params,\n  hasFallbackParams: boolean,\n  store: WorkStore\n): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  // We don't use makeResolvedReactPromise here because params\n  // supports copying with spread and we don't want to unnecessarily\n  // instrument the promise with spreadable properties of ReactPromise.\n  const promise = hasFallbackParams\n    ? makeDevtoolsIOAwarePromise(underlyingParams)\n    : // We don't want to force an environment transition when this params is not part of the fallback params set\n      Promise.resolve(underlyingParams)\n\n  const proxiedProperties = new Set<string>()\n  const unproxiedProperties: Array<string> = []\n\n  Object.keys(underlyingParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n      unproxiedProperties.push(prop)\n    } else {\n      proxiedProperties.add(prop)\n      ;(promise as any)[prop] = underlyingParams[prop]\n    }\n  })\n\n  const proxiedPromise = new Proxy(promise, {\n    get(target, prop, receiver) {\n      if (typeof prop === 'string') {\n        if (\n          // We are accessing a property that was proxied to the promise instance\n          proxiedProperties.has(prop)\n        ) {\n          const expression = describeStringPropertyAccess('params', prop)\n          syncIODev(store.route, expression)\n        }\n      }\n      return ReflectAdapter.get(target, prop, receiver)\n    },\n    set(target, prop, value, receiver) {\n      if (typeof prop === 'string') {\n        proxiedProperties.delete(prop)\n      }\n      return ReflectAdapter.set(target, prop, value, receiver)\n    },\n    ownKeys(target) {\n      const expression = '`...params` or similar expression'\n      syncIODev(store.route, expression, unproxiedProperties)\n      return Reflect.ownKeys(target)\n    },\n  })\n\n  CachedParams.set(underlyingParams, proxiedPromise)\n  return proxiedPromise\n}\n\n// Similar to `makeDynamicallyTrackedExoticParamsWithDevWarnings`, but just\n// logging the sync access without actually defining the params on the promise.\nfunction makeDynamicallyTrackedParamsWithDevWarnings(\n  underlyingParams: Params,\n  hasFallbackParams: boolean,\n  store: WorkStore\n): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  // We don't use makeResolvedReactPromise here because params\n  // supports copying with spread and we don't want to unnecessarily\n  // instrument the promise with spreadable properties of ReactPromise.\n  const promise = hasFallbackParams\n    ? makeDevtoolsIOAwarePromise(underlyingParams)\n    : // We don't want to force an environment transition when this params is not part of the fallback params set\n      Promise.resolve(underlyingParams)\n\n  const proxiedProperties = new Set<string>()\n  const unproxiedProperties: Array<string> = []\n\n  Object.keys(underlyingParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n      unproxiedProperties.push(prop)\n    } else {\n      proxiedProperties.add(prop)\n    }\n  })\n\n  const proxiedPromise = new Proxy(promise, {\n    get(target, prop, receiver) {\n      if (typeof prop === 'string') {\n        if (\n          // We are accessing a property that was proxied to the promise instance\n          proxiedProperties.has(prop)\n        ) {\n          const expression = describeStringPropertyAccess('params', prop)\n          warnForSyncAccess(store.route, expression)\n        }\n      }\n      return ReflectAdapter.get(target, prop, receiver)\n    },\n    set(target, prop, value, receiver) {\n      if (typeof prop === 'string') {\n        proxiedProperties.delete(prop)\n      }\n      return ReflectAdapter.set(target, prop, value, receiver)\n    },\n    ownKeys(target) {\n      const expression = '`...params` or similar expression'\n      warnForIncompleteEnumeration(store.route, expression, unproxiedProperties)\n      return Reflect.ownKeys(target)\n    },\n  })\n\n  CachedParams.set(underlyingParams, proxiedPromise)\n  return proxiedPromise\n}\n\nfunction syncIODev(\n  route: string | undefined,\n  expression: string,\n  missingProperties?: Array<string>\n) {\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'request':\n        if (workUnitStore.prerenderPhase === true) {\n          // When we're rendering dynamically in dev, we need to advance out of\n          // the Prerender environment when we read Request data synchronously.\n          trackSynchronousRequestDataAccessInDev(workUnitStore)\n        }\n        break\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-runtime':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n  // In all cases we warn normally\n  if (missingProperties && missingProperties.length > 0) {\n    warnForIncompleteEnumeration(route, expression, missingProperties)\n  } else {\n    warnForSyncAccess(route, expression)\n  }\n}\n\nconst warnForSyncAccess = createDedupedByCallsiteServerErrorLoggerDev(\n  createParamsAccessError\n)\n\nconst warnForIncompleteEnumeration =\n  createDedupedByCallsiteServerErrorLoggerDev(createIncompleteEnumerationError)\n\nfunction createParamsAccessError(\n  route: string | undefined,\n  expression: string\n) {\n  const prefix = route ? `Route \"${route}\" ` : 'This route '\n  return new Error(\n    `${prefix}used ${expression}. ` +\n      `\\`params\\` should be awaited before using its properties. ` +\n      `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`\n  )\n}\n\nfunction createIncompleteEnumerationError(\n  route: string | undefined,\n  expression: string,\n  missingProperties: Array<string>\n) {\n  const prefix = route ? `Route \"${route}\" ` : 'This route '\n  return new Error(\n    `${prefix}used ${expression}. ` +\n      `\\`params\\` should be awaited before using its properties. ` +\n      `The following properties were not available through enumeration ` +\n      `because they conflict with builtin property names: ` +\n      `${describeListOfPropertyNames(missingProperties)}. ` +\n      `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`\n  )\n}\n\nfunction describeListOfPropertyNames(properties: Array<string>) {\n  switch (properties.length) {\n    case 0:\n      throw new InvariantError(\n        'Expected describeListOfPropertyNames to be called with a non-empty list of strings.'\n      )\n    case 1:\n      return `\\`${properties[0]}\\``\n    case 2:\n      return `\\`${properties[0]}\\` and \\`${properties[1]}\\``\n    default: {\n      let description = ''\n      for (let i = 0; i < properties.length - 1; i++) {\n        description += `\\`${properties[i]}\\`, `\n      }\n      description += `, and \\`${properties[properties.length - 1]}\\``\n      return description\n    }\n  }\n}\n","'use client'\n\nimport type { ParsedUrlQuery } from 'querystring'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nimport type { Params } from '../../server/request/params'\n\n/**\n * When the Page is a client component we send the params and searchParams to this client wrapper\n * where they are turned into dynamically tracked values before being passed to the actual Page component.\n *\n * additionally we may send promises representing the params and searchParams. We don't ever use these passed\n * values but it can be necessary for the sender to send a Promise that doesn't resolve in certain situations.\n * It is up to the caller to decide if the promises are needed.\n */\nexport function ClientPageRoot({\n  Component,\n  searchParams,\n  params,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  promises,\n}: {\n  Component: React.ComponentType<any>\n  searchParams: ParsedUrlQuery\n  params: Params\n  promises?: Array<Promise<any>>\n}) {\n  if (typeof window === 'undefined') {\n    const { workAsyncStorage } =\n      require('../../server/app-render/work-async-storage.external') as typeof import('../../server/app-render/work-async-storage.external')\n\n    let clientSearchParams: Promise<ParsedUrlQuery>\n    let clientParams: Promise<Params>\n    // We are going to instrument the searchParams prop with tracking for the\n    // appropriate context. We wrap differently in prerendering vs rendering\n    const store = workAsyncStorage.getStore()\n    if (!store) {\n      throw new InvariantError(\n        'Expected workStore to exist when handling searchParams in a client Page.'\n      )\n    }\n\n    const { createSearchParamsFromClient } =\n      require('../../server/request/search-params') as typeof import('../../server/request/search-params')\n    clientSearchParams = createSearchParamsFromClient(searchParams, store)\n\n    const { createParamsFromClient } =\n      require('../../server/request/params') as typeof import('../../server/request/params')\n    clientParams = createParamsFromClient(params, store)\n\n    return <Component params={clientParams} searchParams={clientSearchParams} />\n  } else {\n    const { createRenderSearchParamsFromClient } =\n      require('../request/search-params.browser') as typeof import('../request/search-params.browser')\n    const clientSearchParams = createRenderSearchParamsFromClient(searchParams)\n    const { createRenderParamsFromClient } =\n      require('../request/params.browser') as typeof import('../request/params.browser')\n    const clientParams = createRenderParamsFromClient(params)\n\n    return <Component params={clientParams} searchParams={clientSearchParams} />\n  }\n}\n","'use client'\n\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nimport type { Params } from '../../server/request/params'\n\n/**\n * When the Page is a client component we send the params to this client wrapper\n * where they are turned into dynamically tracked values before being passed to the actual Segment component.\n *\n * additionally we may send a promise representing params. We don't ever use this passed\n * value but it can be necessary for the sender to send a Promise that doesn't resolve in certain situations\n * such as when cacheComponents is enabled. It is up to the caller to decide if the promises are needed.\n */\nexport function ClientSegmentRoot({\n  Component,\n  slots,\n  params,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  promise,\n}: {\n  Component: React.ComponentType<any>\n  slots: { [key: string]: React.ReactNode }\n  params: Params\n  promise?: Promise<any>\n}) {\n  if (typeof window === 'undefined') {\n    const { workAsyncStorage } =\n      require('../../server/app-render/work-async-storage.external') as typeof import('../../server/app-render/work-async-storage.external')\n\n    let clientParams: Promise<Params>\n    // We are going to instrument the searchParams prop with tracking for the\n    // appropriate context. We wrap differently in prerendering vs rendering\n    const store = workAsyncStorage.getStore()\n    if (!store) {\n      throw new InvariantError(\n        'Expected workStore to exist when handling params in a client segment such as a Layout or Template.'\n      )\n    }\n\n    const { createParamsFromClient } =\n      require('../../server/request/params') as typeof import('../../server/request/params')\n    clientParams = createParamsFromClient(params, store)\n\n    return <Component {...slots} params={clientParams} />\n  } else {\n    const { createRenderParamsFromClient } =\n      require('../request/params.browser') as typeof import('../request/params.browser')\n    const clientParams = createRenderParamsFromClient(params)\n    return <Component {...slots} params={clientParams} />\n  }\n}\n","'use client'\n\n// This is a client component that only renders during SSR,\n// but will be replaced during streaming with an icon insertion script tag.\n// We don't want it to be presented anywhere so it's only visible during streaming,\n// right after the icon meta tags so that browser can pick it up as soon as it's rendered.\n// Note: we don't just emit the script here because we only need the script if it's not in the head,\n// and we need it to be hoistable alongside the other metadata but sync scripts are not hoistable.\nexport const IconMark = () => {\n  if (typeof window !== 'undefined') {\n    return null\n  }\n  return <meta name=\"«nxt-icon»\" />\n}\n","'use client'\n\nimport { Suspense, use } from 'react'\nimport type { StreamingMetadataResolvedState } from './types'\n\nfunction MetadataOutlet({\n  promise,\n}: {\n  promise: Promise<StreamingMetadataResolvedState>\n}) {\n  const { error, digest } = use(promise)\n  if (error) {\n    if (digest) {\n      // The error will lose its original digest after passing from server layer to client layer；\n      // We recover the digest property here to override the React created one if original digest exists.\n      ;(error as any).digest = digest\n    }\n    throw error\n  }\n  return null\n}\n\nexport function AsyncMetadataOutlet({\n  promise,\n}: {\n  promise: Promise<StreamingMetadataResolvedState>\n}) {\n  return (\n    <Suspense fallback={null}>\n      <MetadataOutlet promise={promise} />\n    </Suspense>\n  )\n}\n"],"names":["warnOnce","_","process","env","NODE_ENV","warnings","Set","msg","has","console","warn","add","disableSmoothScrollDuringRouteTransition","fn","options","onlyHashChange","htmlElement","document","documentElement","hasDataAttribute","dataset","scrollBehavior","__NEXT_OPTIMIZE_ROUTER_SCROLL","getComputedStyle","existing","style","dontForceLayout","getClientRects","HTTPAccessFallbackBoundary","HTTPAccessFallbackErrorBoundary","React","Component","componentDidCatch","props","missingSlots","size","warningMessage","formattedSlots","Array","from","sort","a","b","localeCompare","map","slot","join","getDerivedStateFromError","error","isHTTPAccessFallbackError","httpStatus","getAccessFallbackHTTPStatus","triggeredStatus","getDerivedStateFromProps","state","pathname","previousPathname","undefined","render","notFound","forbidden","unauthorized","children","errorComponents","HTTPAccessErrorStatus","NOT_FOUND","FORBIDDEN","UNAUTHORIZED","isNotFound","isForbidden","isUnauthorized","meta","name","content","getAccessFallbackErrorTypeByStatus","constructor","useUntrackedPathname","useContext","MissingSlotContext","hasErrorFallback","useRouterBFCache","MAX_BF_CACHE_ENTRIES","__NEXT_ROUTER_BF_CACHE","activeTree","activeStateKey","prevActiveEntry","setPrevActiveEntry","useState","initialEntry","tree","stateKey","next","newActiveEntry","n","oldEntry","clonedEntry","entry","OuterLayoutRouter","Activity","require","unstable_Activity","walkAddRefetch","segmentPathToWalk","treeToRecreate","segment","parallelRouteKey","isLast","length","matchSegment","hasOwnProperty","subTree","slice","__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE","ReactDOM","findDOMNode","instance","window","internal_reactDOMfindDOMNode","rectProperties","shouldSkipElement","element","includes","position","rect","getBoundingClientRect","every","item","topOfElementInViewport","viewportHeight","top","getHashFragmentDomNode","hashFragment","body","getElementById","getElementsByName","InnerScrollAndFocusHandler","componentDidMount","handlePotentialScroll","componentDidUpdate","focusAndScrollRef","apply","segmentPath","segmentPaths","some","scrollRefSegmentPath","index","domNode","Element","HTMLElement","parentElement","localName","nextElementSibling","scrollIntoView","clientHeight","scrollTop","focus","ScrollAndFocusHandler","context","GlobalLayoutRouterContext","Error","InnerLayoutRouter","cacheNode","url","fullTree","resolvedPrefetchRsc","prefetchRsc","rsc","useDeferredValue","resolvedRsc","then","use","lazyData","refetchTree","includeNextUrl","hasInterceptionRouteInCurrentTree","navigatedAt","Date","now","fetchServerResponse","URL","location","origin","flightRouterState","nextUrl","serverResponse","startTransition","dispatchAppRouterAction","type","ACTION_SERVER_PATCH","previousTree","unresolvedThenable","subtree","LayoutRouterContext","Provider","value","parentTree","parentCacheNode","parentSegmentPath","LoadingBoundary","loading","loadingModuleData","promiseForLoading","loadingRsc","loadingStyles","loadingScripts","Suspense","fallback","parallelRouterKey","errorStyles","errorScripts","templateStyles","templateScripts","template","segmentViewBoundaries","parentParallelRoutes","parallelRoutes","segmentMap","get","Map","set","parentTreeSegment","concat","activeSegment","createRouterCacheKey","bfcacheEntry","cacheKey","newLazyCacheNode","head","prefetchHead","segmentBoundaryTriggerNode","segmentViewStateNode","__NEXT_DEVTOOL_SEGMENT_EXPLORER","SegmentBoundaryTriggerNode","SegmentViewStateNode","pagePrefix","normalizeAppPath","page","child","TemplateContext","ErrorBoundary","errorComponent","RedirectBoundary","SegmentStateProvider","mode","push","RenderFromTemplateContext","describeHasCheckingStringProperty","describeStringPropertyAccess","wellKnownProperties","isDefinitelyAValidIdentifier","target","prop","test","JSON","stringify","stringifiedProp","createRenderSearchParamsFromClient","CachedSearchParams","WeakMap","makeUntrackedExoticSearchParams","underlyingSearchParams","cachedSearchParams","promise","Promise","resolve","Object","keys","forEach","makeUntrackedSearchParams","__NEXT_CACHE_COMPONENTS","createRenderParamsFromClient","CachedParams","makeUntrackedExoticParams","underlyingParams","cachedParams","makeUntrackedParams","clientParams","ReflectAdapter","receiver","Reflect","bind","deleteProperty","createDedupedByCallsiteServerErrorLoggerDev","errorRef","current","cache","logErrorOrWarn","flushCurrentErrorIfNew","key","getMessage","logDedupedError","args","message","callStackFrames","stack","split","afterTaskAsyncStorageInstance","createAsyncLocalStorage","afterTaskAsyncStorage","isRequestAPICallableInsideAfter","throwForSearchParamsAccessInUseCache","throwWithStaticGenerationBailoutError","throwWithStaticGenerationBailoutErrorWithDynamicError","route","expression","StaticGenBailoutError","workStore","constructorOpt","captureStackTrace","invalidDynamicUsageError","afterTaskStore","getStore","rootTaskSpawnPhase","createPrerenderSearchParamsForClientPage","createSearchParamsFromClient","createServerSearchParamsForMetadata","createServerSearchParamsForServerPage","makeErroringSearchParamsForUseCache","workUnitStore","workUnitAsyncStorage","createStaticPrerenderSearchParams","InvariantError","createRenderSearchParams","throwInvariantForMissingStore","createRuntimePrerenderSearchParams","forceStatic","makeHangingPromise","renderSignal","prerenderStore","makeHangingSearchParams","makeErroringExoticSearchParams","delayUntilRuntimeStage","makeUntrackedSearchParamsWithDevWarnings","makeDynamicallyTrackedExoticSearchParamsWithDevWarnings","CachedSearchParamsForUseCache","proxiedPromise","Proxy","hasOwn","annotateDynamicAccess","dynamicShouldError","postponeWithTracking","dynamicTracking","throwToInterruptStaticGeneration","ownKeys","defineProperty","trackDynamicDataInDynamicRender","writable","enumerable","configurable","store","proxiedProperties","unproxiedProperties","promiseInitialized","proxiedUnderlying","makeDevtoolsIOAwarePromise","newValue","syncIODev","delete","warnForSyncAccess","warnForIncompleteEnumeration","missingProperties","prerenderPhase","trackSynchronousRequestDataAccessInDev","createSearchAccessError","createIncompleteEnumerationError","prefix","describeListOfPropertyNames","properties","description","i","dynamicAccessAsyncStorageInstance","dynamicAccessAsyncStorage","createParamsFromClient","createPrerenderParamsForClientSegment","createServerParamsForMetadata","createServerParamsForRoute","createServerParamsForServerSegment","createStaticPrerenderParams","devFallbackParams","createRenderParamsInDev","createRenderParamsInProd","createRuntimePrerenderParams","workAsyncStorage","fallbackParams","fallbackRouteParams","makeHangingParams","makeErroringExoticParams","hasFallbackParams","makeDynamicallyTrackedParamsWithDevWarnings","makeDynamicallyTrackedExoticParamsWithDevWarnings","fallbackParamsProxyHandler","originalMethod","abortController","abort","augmentedUnderlying","createParamsAccessError","ClientPageRoot","searchParams","params","promises","clientSearchParams","ClientSegmentRoot","slots","IconMark","AsyncMetadataOutlet","MetadataOutlet","digest"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]}