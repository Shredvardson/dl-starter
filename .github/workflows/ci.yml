name: CI
on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    uses: ./.github/workflows/_setup-pnpm.yml

  doctor:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect Infrastructure Changes
        run: bash scripts/detect-infra-change.sh

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Init doctor report
        run: echo "# Doctor Report" > artifacts/doctor-report.md

      - name: Run doctor
        env:
          DOCTOR_SILENT: 1
        run: pnpm run doctor:report

      - name: Scrape AI Reviews from PR Comments
        if: always() && github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Scrape structured AI review comments and append to doctor report
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          echo "Scraping AI review comments from PR #$PR_NUMBER..."
          
          # Get PR head SHA for validation
          PR_HEAD_SHA=${{ github.event.pull_request.head.sha }}
          echo "PR head SHA: $PR_HEAD_SHA"
          
          # Get AI review comment content with anti-poisoning validation
          AI_REVIEW_CONTENT=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            --jq --arg sha "$PR_HEAD_SHA" '.[] | 
            select(.user.login == "github-actions[bot]") | 
            select(.body | contains("<!-- ai-review:v1") and contains($sha)) | 
            .body' 2>/dev/null | head -1 || echo "")
          
          # Get AI security review comment content with anti-poisoning validation
          AI_SEC_CONTENT=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            --jq --arg sha "$PR_HEAD_SHA" '.[] | 
            select(.user.login == "github-actions[bot]") | 
            select(.body | contains("<!-- ai-sec-review:v1") and contains($sha)) | 
            .body' 2>/dev/null | head -1 || echo "")
          
          # Extract and append AI review content
          if [ -n "$AI_REVIEW_CONTENT" ]; then
            echo "Found AI review comment, extracting content..."
            echo "$AI_REVIEW_CONTENT" | sed -n '/<!-- ai-review:v1.*-->/,/<!-- \/ai-review:v1 -->/p' | \
              sed '1d;$d' >> artifacts/doctor-report.md
            echo "" >> artifacts/doctor-report.md
          fi
          
          # Extract and append AI security review content
          if [ -n "$AI_SEC_CONTENT" ]; then
            echo "Found AI security review comment, extracting content..."
            echo "$AI_SEC_CONTENT" | sed -n '/<!-- ai-sec-review:v1.*-->/,/<!-- \/ai-sec-review:v1 -->/p' | \
              sed '1d;$d' >> artifacts/doctor-report.md
            echo "" >> artifacts/doctor-report.md
          fi
          
          # Add separator if any AI content was found
          if [ -n "$AI_REVIEW_CONTENT" ] || [ -n "$AI_SEC_CONTENT" ]; then
            {
              echo "---"
              echo "*AI reviews aggregated by comment-scrape pipeline*"
              echo ""
            } >> artifacts/doctor-report.md
          else
            # Graceful fallback - AI review not available but don't block CI
            cat >> artifacts/doctor-report.md <<EOF
## ‚ÑπÔ∏è AI Review Status

AI review not available for this PR (no matching comments found for SHA: ${PR_HEAD_SHA:0:8})

> Advisory AI reviews are optional and don't affect CI status. Trigger with \`@claude /review\` comment.

EOF
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: doctor-report
          path: |
            artifacts/doctor-report.md
            artifacts/command-inventory.json
          if-no-files-found: warn

  spec-gate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Detect Infrastructure Changes
        run: bash scripts/detect-infra-change.sh
      - name: Run spec gate
        if: env.IS_INFRA_CHANGE != 'true'
        run: bash scripts/ci/spec_gate.sh
      - name: Skip spec gate for infra changes
        if: env.IS_INFRA_CHANGE == 'true'
        run: |
          echo "üîß Infrastructure-only PR: Skipping spec gate"
          echo "‚úÖ Spec requirements not applicable for tooling/workflow changes"

  ci:
    needs: setup
    runs-on: ubuntu-latest
    env:
      TURBO_TELEMETRY_DISABLED: '1'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect Infrastructure Changes
        run: bash scripts/detect-infra-change.sh

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Preflight: placeholders + env
      - name: Preflight (placeholders & env)
        run: |
          # Build the token dynamically to avoid committing the literal
          PATTERN="{{"; PATTERN+="PLACEHOLDER"; PATTERN+="}}"
          MATCHES=$(grep -R "$PATTERN" -n --exclude-dir=node_modules --exclude-dir=.turbo -- . || true)
          if [ -n "$MATCHES" ]; then
            echo "::error title=Unreplaced placeholders detected::%0A$MATCHES%0AReplace placeholder tokens before merging."
            exit 1
          fi
          [ -f .env.example ] || (echo "Missing .env.example" && exit 1)
          [ -f .env.local ] || cp .env.example .env.local

      - name: Lint GitHub Actions (actionlint)
        uses: reviewdog/action-actionlint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: error

      - name: Lint
        run: pnpm --filter=web exec eslint . --max-warnings=0

      - name: Ensure workspace deps are linked
        run: pnpm install --frozen-lockfile

      - name: Typecheck
        run: pnpm run typecheck

      - name: Build
        if: env.IS_INFRA_CHANGE != 'true'
        run: pnpm --filter=web run build

      - uses: actions/upload-artifact@v4
        if: success() && env.IS_INFRA_CHANGE != 'true'
        with:
          name: web-next-build
          path: apps/web/.next

      - name: Install Playwright browsers
        if: env.IS_INFRA_CHANGE != 'true'
        run: pnpm dlx playwright install --with-deps

      # If tests belong to the app, scope them; otherwise keep your root scripts.
      - name: Unit tests
        if: env.IS_INFRA_CHANGE != 'true'
        run: pnpm --filter=web run test:unit

      - name: Infra-only build complete
        if: env.IS_INFRA_CHANGE == 'true'
        run: |
          echo "üîß Infrastructure-only PR detected"
          echo "‚úÖ Skipped heavy tests (build, unit, E2E) as no application code changed"
          echo "üìã Only essential quality gates (lint, typecheck, doctor) were run"

  e2e:
    runs-on: ubuntu-latest
    needs: setup
    env:
      TURBO_TELEMETRY_DISABLED: '1'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect Infrastructure Changes
        run: bash scripts/detect-infra-change.sh

      - name: Check if E2E needed
        run: |
          [[ "$IS_INFRA_CHANGE" == "true" ]] || exit 0
          echo "üîß Infrastructure-only PR: Skipping E2E tests"
          echo "‚úÖ No application code changes detected, E2E tests not needed"
          echo "SKIP_E2E=true" >> "$GITHUB_ENV"

      - name: Setup pnpm
        if: env.SKIP_E2E != 'true'
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - uses: actions/setup-node@v5
        if: env.SKIP_E2E != 'true'
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        if: env.SKIP_E2E != 'true'
        run: pnpm install --frozen-lockfile

      - name: Build web app
        if: env.SKIP_E2E != 'true'
        run: pnpm --filter=web run build

      - name: Install Playwright browsers
        if: env.SKIP_E2E != 'true'
        run: pnpm dlx playwright install --with-deps

      - name: Run E2E tests
        if: env.SKIP_E2E != 'true'
        run: pnpm run test:e2e:ci

  promote-gate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Check promote label for bot PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          # Get PR head ref (from environment, not inline)
          echo "Head ref: $HEAD_REF"
          
          # Check if this is a bot branch
          if [[ "$HEAD_REF" == bots/claude/* ]]; then
            echo "ü§ñ Bot branch detected: $HEAD_REF"
            echo "üîç Checking for 'promote' label requirement..."
            
            # Check if PR has promote label
            LABELS=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} --jq '.labels[].name')
            
            if echo "$LABELS" | grep -q "promote"; then
              echo "‚úÖ 'promote' label found - bot PR approved for merge"
              exit 0
            else
              echo "‚ùå Bot PR missing required 'promote' label"
              echo ""
              echo "üõ°Ô∏è Security gate: Bot PRs require human approval via 'promote' label"
              echo "   A maintainer must review and add the 'promote' label before merge"
              echo ""
              echo "Available labels on this PR:"
              echo "$LABELS" | sed 's/^/  - /'
              exit 1
            fi
          else
            echo "üë§ Human PR: $HEAD_REF"
            echo "‚úÖ Promote gate not required for human-authored PRs"
            exit 0
          fi
