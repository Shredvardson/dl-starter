name: Claude AI Review

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-review:
    if: |
      github.event.issue.pull_request && 
      contains(tolower(github.event.comment.body), '@claude') && 
      contains(tolower(github.event.comment.body), '/review') && 
      github.event.comment.user.type != 'Bot' && 
      contains('OWNER,MEMBER,COLLABORATOR', github.event.comment.author_association) &&
      vars.CLAUDE_ENABLED == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: claude-review-${{ github.event.issue.number }}
      cancel-in-progress: true
    
    steps:
    - name: Check Cooldown Period
      id: cooldown
      run: |
        # Check for recent runs (3-5 min cooldown)
        COOLDOWN_MINUTES=4
        CUTOFF_TIME=$(date -d "$COOLDOWN_MINUTES minutes ago" -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Look for recent AI review comments as cooldown marker
        RECENT_REVIEWS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
          --jq ".[] | select(.body | contains(\"ü§ñ AI Review (Advisory)\")) | select(.created_at > \"$CUTOFF_TIME\") | .created_at" \
          | wc -l)
        
        # Also check for duplicate /review comments from same user within cooldown
        DUPLICATE_REQUESTS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
          --jq ".[] | select(.user.login == \"${{ github.event.comment.user.login }}\") | select(.body | contains(\"@claude\") and contains(\"/review\")) | select(.created_at > \"$CUTOFF_TIME\") | .created_at" \
          | wc -l)
        
        if [[ $RECENT_REVIEWS -gt 0 ]] || [[ $DUPLICATE_REQUESTS -gt 1 ]]; then
          if [[ $RECENT_REVIEWS -gt 0 ]]; then
            REASON="AI review ran within last $COOLDOWN_MINUTES minutes"
          else
            REASON="Multiple /review requests from same user within $COOLDOWN_MINUTES minutes"
          fi
          
          echo "‚è≥ Cooldown active - $REASON"
          echo "cooldown_active=true" >> $GITHUB_OUTPUT
          
          gh pr comment ${{ github.event.issue.number }} --body "‚è≥ **AI Review Cooldown**

> $REASON. Please wait before requesting again to manage costs and avoid spam.

*This cooldown helps ensure efficient resource usage during the evaluation period.*"
        else
          echo "‚úÖ Cooldown clear - proceeding with AI review"
          echo "cooldown_active=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Harden Runner
      if: steps.cooldown.outputs.cooldown_active != 'true'
      uses: step-security/harden-runner@v2
      with:
        disable-sudo: true
        egress-policy: block
        allowed-endpoints: >
          api.github.com:443
          github.com:443
          api.anthropic.com:443
          uploads.github.com:443
          objects.githubusercontent.com:443
          pipelines.actions.githubusercontent.com:443

    - name: Checkout PR
      if: steps.cooldown.outputs.cooldown_active != 'true'
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Setup Node.js
      if: steps.cooldown.outputs.cooldown_active != 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      if: steps.cooldown.outputs.cooldown_active != 'true'
      run: npm ci

    - name: Simulate Claude Code Review (Smoke Test)
      if: steps.cooldown.outputs.cooldown_active != 'true'
      run: |
        echo "ü§ñ Simulating Claude AI Review..."
        
        # Check path restrictions
        if echo "${{ github.event.comment.body }}" | grep -i "workflow\|\.env\|release"; then
          echo "‚ùå Request violates path restrictions"
          exit 1
        fi
        
        # Check for existing AI review comment to update (sticky comment behavior)
        EXISTING_COMMENT_ID=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
          --jq '.[] | select(.user.login == "github-actions[bot]") | select(.body | contains("<!-- ai-review:v1")) | .id' \
          | head -1 2>/dev/null || echo "")
        
        # Prepare comment body with anti-poisoning headers
        COMMENT_BODY="$(cat <<'EOF'
        <!-- ai-review:v1 run_id=${{ github.run_id }} sha=${{ github.sha }} -->
        ## ü§ñ AI Review (Advisory)
        
        **Documentation Update Analysis:**
        
        ‚úÖ **Change Quality**: Minor documentation enhancement adding testing notes
        ‚úÖ **CLAUDE.md Structure**: Maintains existing format and conventions
        ‚úÖ **Content Accuracy**: Testing notes are factual and helpful
        ‚úÖ **No Issues Found**: Clean documentation update with no concerns
        
        **Recommendations:**
        - Documentation change looks good
        - No security or quality concerns
        - Maintains consistency with existing docs
        
        > This review is advisory only. Human review and existing quality gates (doctor/tsc/e2e) remain authoritative.
        
        **‚ö†Ô∏è SIMULATION**: This is a smoke test simulation of the actual Claude review workflow.
        <!-- /ai-review:v1 -->
        EOF
        )"
        
        # Either update existing comment or create new one (sticky behavior)
        if [ -n "$EXISTING_COMMENT_ID" ]; then
          echo "Updating existing AI review comment ID: $EXISTING_COMMENT_ID"
          gh api repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT_ID \
            -X PATCH \
            --field body="$COMMENT_BODY"
        else
          echo "Creating new AI review comment"
          gh pr comment ${{ github.event.issue.number }} --body "$COMMENT_BODY"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Capture Metrics & Append to Doctor Report
      if: always() && steps.cooldown.outputs.cooldown_active != 'true'
      run: |
        mkdir -p artifacts
        TRIGGER_TIME="${{ github.event.comment.created_at }}"
        RESPONSE_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Cost and model telemetry (simulation values for smoke test)
        MODEL_NAME="claude-3-5-sonnet-20241022"
        INPUT_TOKENS=2840
        OUTPUT_TOKENS=756
        COST_USD="0.0174"
        
        echo "" >> artifacts/doctor-report.md
        echo "## ü§ñ AI Review (Advisory)" >> artifacts/doctor-report.md
        echo "" >> artifacts/doctor-report.md
        echo "**Generated:** $RESPONSE_TIME" >> artifacts/doctor-report.md
        echo "**PR:** #${{ github.event.pull_request.number }}" >> artifacts/doctor-report.md
        echo "**Trigger:** @claude /review" >> artifacts/doctor-report.md
        echo "**Comment Time:** $TRIGGER_TIME" >> artifacts/doctor-report.md
        echo "" >> artifacts/doctor-report.md
        echo "### üìä Cost & Model Telemetry" >> artifacts/doctor-report.md
        echo "- **Model:** $MODEL_NAME" >> artifacts/doctor-report.md
        echo "- **Input Tokens:** $INPUT_TOKENS" >> artifacts/doctor-report.md
        echo "- **Output Tokens:** $OUTPUT_TOKENS" >> artifacts/doctor-report.md
        echo "- **Estimated Cost:** \$$COST_USD USD" >> artifacts/doctor-report.md
        echo "- **Triggered:** $TRIGGER_TIME" >> artifacts/doctor-report.md  
        echo "- **Completed:** $RESPONSE_TIME" >> artifacts/doctor-report.md
        echo "- **Signal Quality:** ‚ö†Ô∏è _Tag as ‚úÖ useful / ‚ö†Ô∏è noisy in PR comments_" >> artifacts/doctor-report.md
        echo "" >> artifacts/doctor-report.md
        echo "> AI review completed. See PR comments for detailed feedback." >> artifacts/doctor-report.md
        echo "> This is advisory only - human review and quality gates remain authoritative." >> artifacts/doctor-report.md
        
    - name: Apply AI Review Label
      if: success() && steps.cooldown.outputs.cooldown_active != 'true'
      run: |
        gh pr edit ${{ github.event.issue.number }} --add-label "ai-review:advisory"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Doctor Artifacts
      if: always() && steps.cooldown.outputs.cooldown_active != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: doctor-report-claude-review
        path: artifacts/
        retention-days: 30